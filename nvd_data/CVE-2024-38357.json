{
  "cve_id": "CVE-2024-38357",
  "github_data": {
    "repository": "tinymce/tinymce",
    "fix_commit": "5acb741665a98e83d62b91713c800abbff43b00d",
    "related_commits": [
      "5acb741665a98e83d62b91713c800abbff43b00d",
      "5acb741665a98e83d62b91713c800abbff43b00d"
    ],
    "patch_url": "https://github.com/tinymce/tinymce/commit/5acb741665a98e83d62b91713c800abbff43b00d.patch",
    "fix_commit_details": {
      "sha": "5acb741665a98e83d62b91713c800abbff43b00d",
      "commit_date": "2024-06-19T00:28:17Z",
      "author": {
        "login": "spocke",
        "type": "User",
        "stats": {
          "total_commits": 6501,
          "average_weekly_commits": 6.702061855670103,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 660
        }
      },
      "commit_message": {
        "title": "TINY-11019 & TINY-11022: Fixed issues with noscript encoding and noneditable_regexp option (#15)",
        "length": 96,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 144,
        "additions": 124,
        "deletions": 20
      },
      "files": [
        {
          "filename": "modules/tinymce/CHANGELOG.md",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -6,6 +6,12 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## Unreleased\n \n+## 6.8.4 - 2024-06-19\n+\n+### Fixed\n+- HTML entities that were double decoded in `noscript` elements caused an XSS vulnerability. #TINY-11019\n+- It was possible to inject XSS HTML that was not matching the regexp when using the `noneditable_regexp` option. #TINY-11022\n+\n ## 6.8.3 - 2024-02-08\n \n ### Changed"
        },
        {
          "filename": "modules/tinymce/package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"tinymce\",\n-  \"version\": \"6.8.3\",\n+  \"version\": \"6.8.4\",\n   \"private\": true,\n   \"repository\": {\n     \"type\": \"git\","
        },
        {
          "filename": "modules/tinymce/src/core/main/ts/api/html/DomParser.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -92,7 +92,7 @@ const transferChildren = (parent: AstNode, nativeParent: Node, specialElements:\n   const parentName = parent.name;\n   // Exclude the special elements where the content is RCDATA as their content needs to be parsed instead of being left as plain text\n   // See: https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments\n-  const isSpecial = parentName in specialElements && parentName !== 'title' && parentName !== 'textarea';\n+  const isSpecial = parentName in specialElements && parentName !== 'title' && parentName !== 'textarea' && parentName !== 'noscript';\n \n   const childNodes = nativeParent.childNodes;\n   for (let ni = 0, nl = childNodes.length; ni < nl; ni++) {"
        },
        {
          "filename": "modules/tinymce/src/core/main/ts/dom/DomSerializerFilters.ts",
          "status": "modified",
          "additions": 0,
          "deletions": 12,
          "patch": "@@ -2,7 +2,6 @@ import { Arr, Optional } from '@ephox/katamari';\n \n import DOMUtils from '../api/dom/DOMUtils';\n import DomParser from '../api/html/DomParser';\n-import Entities from '../api/html/Entities';\n import AstNode from '../api/html/Node';\n import * as Zwsp from '../text/Zwsp';\n import { DomSerializerSettings } from './DomSerializerImpl';\n@@ -83,17 +82,6 @@ const register = (htmlParser: DomParser, settings: DomSerializerSettings, dom: D\n     }\n   });\n \n-  htmlParser.addNodeFilter('noscript', (nodes) => {\n-    let i = nodes.length;\n-    while (i--) {\n-      const node = nodes[i].firstChild;\n-\n-      if (node) {\n-        node.value = Entities.decode(node.value ?? '');\n-      }\n-    }\n-  });\n-\n   // Force script into CDATA sections and remove the mce- prefix also add comments around styles\n   htmlParser.addNodeFilter('script,style', (nodes, name) => {\n     const trim = (value: string) => {"
        },
        {
          "filename": "modules/tinymce/src/core/main/ts/html/NonEditableFilter.ts",
          "status": "modified",
          "additions": 19,
          "deletions": 5,
          "patch": "@@ -1,3 +1,5 @@\n+import { Arr } from '@ephox/katamari';\n+\n import Editor from '../api/Editor';\n import { SetContentEvent } from '../api/EventTypes';\n import AstNode from '../api/html/Node';\n@@ -52,6 +54,13 @@ const convertRegExpsToNonEditable = (editor: Editor, nonEditableRegExps: RegExp[\n   e.content = content;\n };\n \n+const isValidContent = (nonEditableRegExps: RegExp[], content: string) => {\n+  return Arr.forall(nonEditableRegExps, (re) => {\n+    const matches = content.match(re);\n+    return matches !== null && matches[0].length === content.length;\n+  });\n+};\n+\n const setup = (editor: Editor): void => {\n   const contentEditableAttrName = 'contenteditable';\n \n@@ -91,11 +100,16 @@ const setup = (editor: Editor): void => {\n         continue;\n       }\n \n-      if (nonEditableRegExps.length > 0 && node.attr('data-mce-content')) {\n-        node.name = '#text';\n-        node.type = 3;\n-        node.raw = true;\n-        node.value = node.attr('data-mce-content');\n+      const content = node.attr('data-mce-content');\n+      if (nonEditableRegExps.length > 0 && content) {\n+        if (isValidContent(nonEditableRegExps, content)) {\n+          node.name = '#text';\n+          node.type = 3;\n+          node.raw = true;\n+          node.value = content;\n+        } else {\n+          node.remove();\n+        }\n       } else {\n         node.attr(contentEditableAttrName, null);\n       }"
        },
        {
          "filename": "modules/tinymce/src/core/test/ts/browser/content/EditorContentTest.ts",
          "status": "modified",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -1,3 +1,4 @@\n+import { Waiter } from '@ephox/agar';\n import { beforeEach, context, describe, it } from '@ephox/bedrock-client';\n import { Arr, Type } from '@ephox/katamari';\n import { PlatformDetection } from '@ephox/sand';\n@@ -675,4 +676,36 @@ describe('browser.tinymce.core.content.EditorContentTest', () => {\n       TinyAssertions.assertContent(editor, '<svg width=\"100\" height=\"100\"><circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\"><script>alert(1)</script></circle></svg>');\n     });\n   });\n+\n+  context('Special elements', () => {\n+    const hook = TinyHooks.bddSetup<Editor>({\n+      base_url: '/project/tinymce/js/tinymce'\n+    }, []);\n+\n+    it('TINY-11019: Should not be possible to run scripts inside noscript elements', async () => {\n+      const editor = hook.editor();\n+      let state = false;\n+      const editorWinGlobal = editor.getWin() as unknown as any;\n+\n+      editorWinGlobal.xss = () => {\n+        state = true;\n+      };\n+\n+      editor.setContent('<noscript>&lt;/noscript&gt;&lt;style onload=xss()&gt;&lt;/style&gt;</noscript>');\n+\n+      await Waiter.pWait(1);\n+\n+      delete editorWinGlobal.xss;\n+\n+      assert.isFalse(state, 'xss function should not have been called');\n+      TinyAssertions.assertContent(editor, '<noscript>&lt;/noscript&gt;&lt;style onload=xss()&gt;&lt;/style&gt;</noscript>');\n+    });\n+\n+    it('TINY-11019: Should not double decode noscript contents', () => {\n+      const editor = hook.editor();\n+\n+      editor.setContent('<noscript>&amp;lt;/noscript&amp;&gt;</noscript>');\n+      TinyAssertions.assertContent(editor, '<noscript>&amp;lt;/noscript&amp;&gt;</noscript>');\n+    });\n+  });\n });"
        },
        {
          "filename": "modules/tinymce/src/core/test/ts/browser/html/DomParserTest.ts",
          "status": "modified",
          "additions": 45,
          "deletions": 0,
          "patch": "@@ -1729,4 +1729,49 @@ describe('browser.tinymce.core.html.DomParserTest', () => {\n       assert.equal(serializedHtml, '<div><svg> <circle> </circle> </svg> <svg> <circle> </circle> </svg></div>');\n     });\n   });\n+\n+  context('Special elements', () => {\n+    const schema = Schema({ extended_valid_elements: 'script,noembed,xmp', valid_children: '+body[style]' });\n+\n+    const testSpecialElement = (testCase: { input: string; expected: string }) => {\n+      const fragment = DomParser({ forced_root_block: 'p', sanitize: false }, schema).parse(testCase.input);\n+      const serializedHtml = HtmlSerializer({}, schema).serialize(fragment);\n+\n+      assert.equal(serializedHtml, testCase.expected);\n+    };\n+\n+    it('TINY-11019: Should not entity encode text in script elements', () => testSpecialElement({\n+      input: '<script>if (a < b) alert(1)</script>',\n+      expected: '<script>if (a < b) alert(1)</script>'\n+    }));\n+\n+    it('TINY-11019: Should not entity encode text in style elements', () => testSpecialElement({\n+      input: '<style>b > i {}</style>',\n+      expected: '<style>b > i {}</style>'\n+    }));\n+\n+    it('TINY-11019: Should not entity decode text inside textarea elements', () => testSpecialElement({\n+      input: '<div><textarea>&lt;&gt;&amp;</textarea></div>',\n+      expected: '<div><textarea>&lt;&gt;&amp;</textarea></div>'\n+    }));\n+\n+    it('TINY-11019: Should not entity encode text inside textarea elements', () => testSpecialElement({\n+      input: '<div><textarea><b>test</b></textarea></div>',\n+      expected: '<div><textarea>&lt;b&gt;test&lt;/b&gt;</textarea></div>'\n+    }));\n+\n+    const excluded = [ 'script', 'style', 'title', 'plaintext', 'textarea' ];\n+    const specialElements = Arr.filter(Obj.keys(schema.getSpecialElements()), (name) => !Arr.contains(excluded, name));\n+    Arr.each(specialElements, (elementName) => {\n+      it(`TINY-11019: Should not entity decode text inside ${elementName} elements`, () => testSpecialElement({\n+        input: `<div><${elementName}>&lt;&gt;&amp;</${elementName}></div>`,\n+        expected: `<div><${elementName}>&lt;&gt;&amp;</${elementName}></div>`\n+      }));\n+\n+      it(`TINY-11019: Should not entity encode elements inside ${elementName} elements`, () => testSpecialElement({\n+        input: `<div><${elementName}><em>test</em></${elementName}></div>`,\n+        expected: `<div><${elementName}><em>test</em></${elementName}></div>`\n+      }));\n+    });\n+  });\n });"
        },
        {
          "filename": "modules/tinymce/src/core/test/ts/browser/html/NonEditableFilterTest.ts",
          "status": "modified",
          "additions": 19,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-import { describe, it } from '@ephox/bedrock-client';\n+import { context, describe, it } from '@ephox/bedrock-client';\n import { TinyAssertions, TinyHooks } from '@ephox/wrap-mcagar';\n import { assert } from 'chai';\n \n@@ -39,4 +39,22 @@ describe('browser.tinymce.core.html.NonEditableFilterTest', () => {\n     editor.setContent('<span contenteditable=\"false\">{test1}</span>');\n     assert.lengthOf(editor.dom.select('span'), 1);\n   });\n+\n+  context('Noneditable content injection', () => {\n+    const testNoneditableContentInjection = (testCase: { input: string; expected: string }) => {\n+      const editor = hook.editor();\n+      editor.setContent(testCase.input);\n+      TinyAssertions.assertContent(editor, testCase.expected);\n+    };\n+\n+    it('TINY-11022: noneditable elements should not be allowed to include content that does not match the pattern', () => testNoneditableContentInjection({\n+      input: '<p>foo<span class=\"mceNonEditable\" data-mce-content=\"<b>baz</b>\" contenteditable=\"false\">something</span>bar</p>',\n+      expected: '<p>foobar</p>'\n+    }));\n+\n+    it('TINY-11022: noneditable elements should not be allowed to include content that just partially matches the pattern', () => testNoneditableContentInjection({\n+      input: '<p>foo<span class=\"mceNonEditable\" data-mce-content=\"{test1}<b>baz</b>\" contenteditable=\"false\">something</span>bar</p>',\n+      expected: '<p>foobar</p>'\n+    }));\n+  });\n });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 3,
        "unique_directories": 6,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "62ea37b237ac06e8c4b02420bebb7b057da4a793",
            "date": "2025-01-13T03:08:00Z",
            "author_login": "ltrouton"
          },
          {
            "sha": "cb9592407d83ac35719232ab9e1085e1e1cce0b6",
            "date": "2025-01-08T14:04:11Z",
            "author_login": "spocke"
          },
          {
            "sha": "5f4049f3045f4a8cf751a3dbb68a017738e119d6",
            "date": "2025-01-08T12:53:56Z",
            "author_login": "ztomaszyk"
          },
          {
            "sha": "53960fab54be85f8d1c0e0ae4f73fd444887b222",
            "date": "2025-01-07T13:24:26Z",
            "author_login": "ztomaszyk"
          },
          {
            "sha": "4341c512dd16d87c413acdc82e4b6615db48b117",
            "date": "2025-01-07T13:23:33Z",
            "author_login": "ztomaszyk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "TinyMCE is an open source rich text editor. A cross-site scripting (XSS) vulnerability was discovered in TinyMCE\u2019s content parsing code. This allowed specially crafted noscript elements containing malicious code to be executed when that content was loaded into the editor. This vulnerability has been patched in TinyMCE 7.2.0, TinyMCE 6.8.4 and TinyMCE 5.11.0 LTS by ensuring that content within noscript elements are properly parsed. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-19T20:15:11.727",
    "last_modified": "2024-11-21T09:25:26.463",
    "fix_date": "2024-06-19T00:28:17Z"
  },
  "references": [
    {
      "url": "https://github.com/tinymce/tinymce/commit/5acb741665a98e83d62b91713c800abbff43b00d",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/tinymce/tinymce/security/advisories/GHSA-w9jx-4g6g-rp7x",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://owasp.org/www-community/attacks/xss",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://www.tiny.cloud/docs/tinymce/6/6.8.4-release-notes/#overview",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://www.tiny.cloud/docs/tinymce/7/7.2-release-notes/#overview",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/tinymce/tinymce/commit/5acb741665a98e83d62b91713c800abbff43b00d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/tinymce/tinymce/security/advisories/GHSA-w9jx-4g6g-rp7x",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://owasp.org/www-community/attacks/xss",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.tiny.cloud/docs/tinymce/6/6.8.4-release-notes/#overview",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.tiny.cloud/docs/tinymce/7/7.2-release-notes/#overview",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.845081",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tinymce",
    "owner": "tinymce",
    "created_at": "2010-01-11T14:46:42Z",
    "updated_at": "2025-01-14T08:55:26Z",
    "pushed_at": "2025-01-14T15:37:44Z",
    "size": 90309,
    "stars": 15220,
    "forks": 2250,
    "open_issues": 546,
    "watchers": 15220,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.x",
      "3.3.x",
      "3.4.x",
      "4.x",
      "4.2.x",
      "4.5.x"
    ],
    "languages": {
      "TypeScript": 13879714,
      "HTML": 370334,
      "Less": 245463,
      "JavaScript": 123034,
      "CSS": 9733,
      "Makefile": 1427
    },
    "commit_activity": {
      "total_commits_last_year": 523,
      "avg_commits_per_week": 10.057692307692308,
      "days_active_last_year": 174
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T19:35:07.089495"
  }
}