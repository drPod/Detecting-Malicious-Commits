{
  "cve_id": "CVE-2024-38358",
  "github_data": {
    "repository": "wasmerio/wasmer",
    "fix_commit": "b9483d022c602b994103f78ecfe46f017f8ac662",
    "related_commits": [
      "b9483d022c602b994103f78ecfe46f017f8ac662",
      "b9483d022c602b994103f78ecfe46f017f8ac662"
    ],
    "patch_url": "https://github.com/wasmerio/wasmer/commit/b9483d022c602b994103f78ecfe46f017f8ac662.patch",
    "fix_commit_details": {
      "sha": "b9483d022c602b994103f78ecfe46f017f8ac662",
      "commit_date": "2024-06-07T17:56:55Z",
      "author": {
        "login": "syrusakbary",
        "type": "User",
        "stats": {
          "total_commits": 4303,
          "average_weekly_commits": 13.11890243902439,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 276
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-55f3-3qvg-8pv5",
        "length": 84,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 75,
        "additions": 71,
        "deletions": 4
      },
      "files": [
        {
          "filename": "lib/wasix/src/syscalls/wasi/path_open.rs",
          "status": "modified",
          "additions": 16,
          "deletions": 4,
          "patch": "@@ -330,11 +330,13 @@ pub(crate) fn path_open_internal(\n             // once we got the data we need from the parent, we lookup the host file\n             // todo: extra check that opening with write access is okay\n             let handle = {\n+                // We set create_new because the path already didn't resolve to an existing file,\n+                // so it must be created.\n                 let open_options = open_options\n                     .read(minimum_rights.read)\n                     .append(minimum_rights.append)\n                     .write(minimum_rights.write)\n-                    .create_new(minimum_rights.create_new);\n+                    .create_new(true);\n \n                 if minimum_rights.read {\n                     open_flags |= Fd::READ;\n@@ -349,9 +351,19 @@ pub(crate) fn path_open_internal(\n                     open_flags |= Fd::TRUNCATE;\n                 }\n \n-                Some(wasi_try_ok_ok!(open_options\n-                    .open(&new_file_host_path)\n-                    .map_err(|e| { fs_error_into_wasi_err(e) })))\n+                match open_options.open(&new_file_host_path) {\n+                    Ok(handle) => Some(handle),\n+                    Err(err) => {\n+                        // Even though the file does not exist, it still failed to create with\n+                        // `AlreadyExists` error.  This can happen if the path resolves to a\n+                        // symlink that points outside the FS sandbox.\n+                        if err == FsError::AlreadyExists {\n+                            return Ok(Err(Errno::Perm));\n+                        }\n+\n+                        return Ok(Err(fs_error_into_wasi_err(err)));\n+                    }\n+                }\n             };\n \n             let new_inode = {"
        },
        {
          "filename": "tests/wasi-fyi/fs_sandbox_symlink.rs",
          "status": "added",
          "additions": 53,
          "deletions": 0,
          "patch": "@@ -0,0 +1,53 @@\n+#[link(wasm_import_module = \"wasi_snapshot_preview1\")]\n+extern \"C\" {\n+    pub fn path_open(\n+        fd: i32,\n+        dirflags: i32,\n+        path: i32,\n+        path_len: i32,\n+        oflags: i32,\n+        fs_rights_base: i64,\n+        fs_rights_inheriting: i64,\n+        fdflags: i32,\n+        result_fd: i32,\n+    ) -> i32;\n+}\n+\n+const ERRNO_PERM: i32 = 63;\n+const LOOKUPFLAGS_SYMLINK_FOLLOW: i32 = 1;\n+const OFLAGS_CREAT: i32 = 1;\n+const RIGHTS_FD_WRITE: i64 = 64;\n+\n+fn main() {\n+    let link_path = \"fyi/fs_sandbox_symlink.dir/link\";\n+    let link_path_non_existant = \"fyi/fs_sandbox_symlink.dir/link-non-existant\";\n+    let mut fd: i32 = 0;\n+\n+    unsafe {\n+        let errno = path_open(\n+            5,\n+            LOOKUPFLAGS_SYMLINK_FOLLOW,\n+            link_path.as_ptr() as i32,\n+            link_path.len() as i32,\n+            OFLAGS_CREAT,\n+            RIGHTS_FD_WRITE,\n+            0,\n+            0,\n+            &mut fd as *mut i32 as i32,\n+        );\n+        assert_eq!(errno, ERRNO_PERM, \"symlink cannot escape fs sandbox\");\n+\n+        let errno = path_open(\n+            5,\n+            LOOKUPFLAGS_SYMLINK_FOLLOW,\n+            link_path_non_existant.as_ptr() as i32,\n+            link_path_non_existant.len() as i32,\n+            OFLAGS_CREAT,\n+            RIGHTS_FD_WRITE,\n+            0,\n+            0,\n+            &mut fd as *mut i32 as i32,\n+        );\n+        assert_eq!(errno, ERRNO_PERM, \"symlink cannot escape fs sandbox\");\n+    }\n+}"
        },
        {
          "filename": "tests/wasi-fyi/test_fs/fyi/fs_sandbox_symlink.dir/link",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+../../README.md\n\\ No newline at end of file"
        },
        {
          "filename": "tests/wasi-fyi/test_fs/fyi/fs_sandbox_symlink.dir/link-non-existant",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+../../non-existant\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cfb9413a670a0123f4f403ecf1897257fb681e72",
            "date": "2025-01-14T09:47:56Z",
            "author_login": "Arshia001"
          },
          {
            "sha": "00c25681e76e910d0733047c2fd6d761e9ce0c29",
            "date": "2025-01-14T09:20:39Z",
            "author_login": "Arshia001"
          },
          {
            "sha": "1f6ced514c61d3516c6750f4086e4bca6f5f253c",
            "date": "2025-01-13T12:24:55Z",
            "author_login": "Arshia001"
          },
          {
            "sha": "d1c6dffe31cfe62f1baf1cc7cd9a4bc5f43b64fa",
            "date": "2025-01-13T10:49:04Z",
            "author_login": "Arshia001"
          },
          {
            "sha": "5e421fe8add581b0ee3313c21ff1618bc6ff0818",
            "date": "2025-01-12T19:55:21Z",
            "author_login": "Arshia001"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.9,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "Wasmer is a web assembly (wasm) Runtime supporting WASIX, WASI and Emscripten. If the preopened directory has a symlink pointing outside, WASI programs can traverse the symlink and access host filesystem if the caller sets both `oflags::creat` and `rights::fd_write`. Programs can also crash the runtime by creating a symlink pointing outside with `path_symlink` and `path_open`ing the link. This issue has been addressed in commit `b9483d022` which has been included in release version 4.3.2. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-06-19T20:15:11.990",
    "last_modified": "2024-11-21T09:25:26.643",
    "fix_date": "2024-06-07T17:56:55Z"
  },
  "references": [
    {
      "url": "https://github.com/wasmerio/wasmer/commit/b9483d022c602b994103f78ecfe46f017f8ac662",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/wasmerio/wasmer/security/advisories/GHSA-55f3-3qvg-8pv5",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/wasmerio/wasmer/commit/b9483d022c602b994103f78ecfe46f017f8ac662",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/wasmerio/wasmer/security/advisories/GHSA-55f3-3qvg-8pv5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.845244",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wasmer",
    "owner": "wasmerio",
    "created_at": "2018-10-11T10:15:53Z",
    "updated_at": "2025-01-14T14:12:41Z",
    "pushed_at": "2025-01-14T09:53:11Z",
    "size": 1018115,
    "stars": 19252,
    "forks": 833,
    "open_issues": 260,
    "watchers": 19252,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Rust": 8663226,
      "C++": 204795,
      "HTML": 199645,
      "C": 163598,
      "Makefile": 39094,
      "Python": 31557,
      "Shell": 12261,
      "JavaScript": 5241,
      "Swift": 4867,
      "Nix": 4103,
      "Inno Setup": 3130,
      "Dockerfile": 320,
      "PHP": 310,
      "Batchfile": 30,
      "RenderScript": 2
    },
    "commit_activity": {
      "total_commits_last_year": 2419,
      "avg_commits_per_week": 46.51923076923077,
      "days_active_last_year": 257
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:21:39.010222"
  }
}