{
  "cve_id": "CVE-2024-38518",
  "github_data": {
    "repository": "bigbluebutton/bigbluebutton",
    "fix_commit": "a9d436accdcd26ea66bed9f391488ac128cd62d1",
    "related_commits": [
      "a9d436accdcd26ea66bed9f391488ac128cd62d1",
      "ea6e9461dceae8fa593543d8c686f77bb8677e72",
      "a9d436accdcd26ea66bed9f391488ac128cd62d1",
      "ea6e9461dceae8fa593543d8c686f77bb8677e72"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "a9d436accdcd26ea66bed9f391488ac128cd62d1",
      "commit_date": "2024-05-15T14:38:58Z",
      "author": {
        "login": "antobinary",
        "type": "User",
        "stats": {
          "total_commits": 7841,
          "average_weekly_commits": 9.033410138248849,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 511
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-4m48-49h7-f3c4",
        "length": 99,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 554,
        "additions": 323,
        "deletions": 231
      },
      "files": [
        {
          "filename": "bbb-common-web/build.sbt",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -112,5 +112,7 @@ libraryDependencies ++= Seq(\n   \"com.zaxxer\" % \"HikariCP\" % \"4.0.3\",\n   \"commons-validator\" % \"commons-validator\" % \"1.7\",\n   \"org.apache.tika\" % \"tika-core\" % \"2.8.0\",\n-  \"org.apache.tika\" % \"tika-parsers-standard-package\" % \"2.8.0\"\n+  \"org.apache.tika\" % \"tika-parsers-standard-package\" % \"2.8.0\",\n+  \"org.scala-lang.modules\" %% \"scala-xml\" % \"2.2.0\",\n+  \"jakarta.ws.rs\" % \"jakarta.ws.rs-api\" % \"3.1.0\"\n )"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/constraint/ContentTypeConstraint.java",
          "status": "renamed",
          "additions": 22,
          "deletions": 22,
          "patch": "@@ -1,22 +1,22 @@\n-package org.bigbluebutton.api.model.constraint;\r\n-\r\n-import org.bigbluebutton.api.model.validator.PostChecksumValidator;\r\n-\r\n-import javax.validation.Constraint;\r\n-import javax.validation.Payload;\r\n-import java.lang.annotation.Retention;\r\n-import java.lang.annotation.Target;\r\n-\r\n-import static java.lang.annotation.ElementType.TYPE;\r\n-import static java.lang.annotation.RetentionPolicy.RUNTIME;\r\n-\r\n-@Constraint(validatedBy = PostChecksumValidator.class)\r\n-@Target(TYPE)\r\n-@Retention(RUNTIME)\r\n-public @interface PostChecksumConstraint {\r\n-\r\n-    String key() default \"checksumError\";\r\n-    String message() default \"Checksums do not match\";\r\n-    Class<?>[] groups() default {};\r\n-    Class<? extends Payload>[] payload() default {};\r\n-}\r\n+package org.bigbluebutton.api.model.constraint;\n+\n+import org.bigbluebutton.api.model.validator.ContentTypeValidator;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+@Constraint(validatedBy = ContentTypeValidator.class)\n+@Target(TYPE)\n+@Retention(RUNTIME)\n+public @interface ContentTypeConstraint {\n+\n+    String key() default \"unsupportedContentType\";\n+    String message() default \"POST request Content-Type is missing or unsupported\";\n+    Class<?>[] groups() default {};\n+    Class<? extends Payload>[] payload() default {};\n+}"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/CreateMeeting.java",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -1,12 +1,16 @@\n package org.bigbluebutton.api.model.request;\r\n \r\n+import jakarta.ws.rs.core.MediaType;\r\n import org.bigbluebutton.api.model.constraint.*;\r\n import org.bigbluebutton.api.model.shared.Checksum;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.validation.constraints.NotEmpty;\r\n import javax.validation.constraints.NotNull;\r\n import java.util.Map;\r\n+import java.util.Set;\r\n \r\n+@ContentTypeConstraint\r\n public class CreateMeeting extends RequestWithChecksum<CreateMeeting.Params> {\r\n \r\n     public enum Params implements RequestParameters {\r\n@@ -51,8 +55,8 @@ public enum Params implements RequestParameters {\n     private String recordString;\r\n     private Boolean record;\r\n \r\n-    public CreateMeeting(Checksum checksum) {\r\n-        super(checksum);\r\n+    public CreateMeeting(Checksum checksum, HttpServletRequest servletRequest) {\r\n+        super(checksum, servletRequest);\r\n     }\r\n \r\n     public String getName() {\r\n@@ -138,4 +142,9 @@ public void convertParamsFromString() {\n         isBreakoutRoom = Boolean.parseBoolean(isBreakoutRoomString);\r\n         record = Boolean.parseBoolean(recordString);\r\n     }\r\n+\r\n+    @Override\r\n+    public Set<String> getSupportedContentTypes() {\r\n+        return Set.of(MediaType.APPLICATION_FORM_URLENCODED, MediaType.MULTIPART_FORM_DATA, MediaType.APPLICATION_XML, MediaType.TEXT_XML);\r\n+    }\r\n }\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/EndMeeting.java",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -1,16 +1,16 @@\n package org.bigbluebutton.api.model.request;\r\n \r\n-import org.bigbluebutton.api.model.constraint.MeetingExistsConstraint;\r\n-import org.bigbluebutton.api.model.constraint.MeetingIDConstraint;\r\n-import org.bigbluebutton.api.model.constraint.NotEmpty;\r\n-import org.bigbluebutton.api.model.constraint.PasswordConstraint;\r\n+import org.bigbluebutton.api.model.constraint.*;\r\n import org.bigbluebutton.api.model.shared.Checksum;\r\n import org.bigbluebutton.api.model.shared.ModeratorPassword;\r\n import org.bigbluebutton.api.model.shared.Password;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.validation.Valid;\r\n import java.util.Map;\r\n+import java.util.Set;\r\n \r\n+@ContentTypeConstraint\r\n public class EndMeeting extends RequestWithChecksum<EndMeeting.Params> {\r\n \r\n     public enum Params implements RequestParameters {\r\n@@ -34,8 +34,8 @@ public enum Params implements RequestParameters {\n     @Valid\r\n     private Password moderatorPassword;\r\n \r\n-    public EndMeeting(Checksum checksum) {\r\n-        super(checksum);\r\n+    public EndMeeting(Checksum checksum, HttpServletRequest servletRequest) {\r\n+        super(checksum, servletRequest);\r\n         moderatorPassword = new ModeratorPassword();\r\n     }\r\n \r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/Enter.java",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -1,11 +1,16 @@\n package org.bigbluebutton.api.model.request;\r\n \r\n+import jakarta.ws.rs.core.MediaType;\r\n import org.bigbluebutton.api.model.constraint.*;\r\n import org.bigbluebutton.api.service.SessionService;\r\n+\r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.validation.constraints.NotNull;\r\n import java.util.Map;\r\n+import java.util.Set;\r\n \r\n-public class Enter implements Request<Enter.Params> {\r\n+@ContentTypeConstraint\r\n+public class Enter extends RequestWithSession<Enter.Params>{\r\n \r\n     public enum Params implements RequestParameters {\r\n         SESSION_TOKEN(\"sessionToken\");\r\n@@ -27,7 +32,8 @@ public enum Params implements RequestParameters {\n \r\n     private SessionService sessionService;\r\n \r\n-    public Enter() {\r\n+    public Enter(HttpServletRequest servletRequest) {\r\n+        super(servletRequest);\r\n         sessionService = new SessionService();\r\n     }\r\n \r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/GetJoinUrl.java",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -2,9 +2,10 @@\n \n import org.bigbluebutton.api.model.constraint.UserSessionConstraint;\n \n+import javax.servlet.http.HttpServletRequest;\n import java.util.Map;\n \n-public class GetJoinUrl implements Request<GetJoinUrl.Params> {\n+public class GetJoinUrl extends RequestWithSession<GetJoinUrl.Params> {\n \n     public enum Params implements RequestParameters {\n         SESSION_TOKEN(\"sessionToken\");\n@@ -19,6 +20,10 @@ public enum Params implements RequestParameters {\n     @UserSessionConstraint\n     private String sessionToken;\n \n+    public GetJoinUrl(HttpServletRequest servletRequest) {\n+        super(servletRequest);\n+    }\n+\n     public String getSessionToken() {\n         return sessionToken;\n     }"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/GuestWait.java",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -1,14 +1,17 @@\n package org.bigbluebutton.api.model.request;\r\n \r\n+import org.bigbluebutton.api.model.constraint.ContentTypeConstraint;\r\n import org.bigbluebutton.api.model.constraint.MeetingEndedConstraint;\r\n import org.bigbluebutton.api.model.constraint.MeetingExistsConstraint;\r\n import org.bigbluebutton.api.model.constraint.UserSessionConstraint;\r\n import org.bigbluebutton.api.service.SessionService;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.validation.constraints.NotNull;\r\n import java.util.Map;\r\n \r\n-public class GuestWait implements Request<GuestWait.Params> {\r\n+@ContentTypeConstraint\r\n+public class GuestWait extends RequestWithSession<GuestWait.Params>{\r\n \r\n     public enum Params implements RequestParameters {\r\n         SESSION_TOKEN(\"sessionToken\");\r\n@@ -29,7 +32,8 @@ public enum Params implements RequestParameters {\n \r\n     private SessionService sessionService;\r\n \r\n-    public GuestWait() {\r\n+    public GuestWait(HttpServletRequest servletRequest) {\r\n+        super(servletRequest);\r\n         sessionService = new SessionService();\r\n     }\r\n \r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/InsertDocument.java",
          "status": "modified",
          "additions": 11,
          "deletions": 3,
          "patch": "@@ -1,11 +1,14 @@\n package org.bigbluebutton.api.model.request;\n \n+import jakarta.ws.rs.core.MediaType;\n import org.bigbluebutton.api.model.constraint.*;\n import org.bigbluebutton.api.model.shared.Checksum;\n \n+import javax.servlet.http.HttpServletRequest;\n import java.util.Map;\n+import java.util.Set;\n \n-\n+@ContentTypeConstraint\n public class InsertDocument extends RequestWithChecksum<InsertDocument.Params> {\n \n     public enum Params implements RequestParameters {\n@@ -21,8 +24,8 @@ public enum Params implements RequestParameters {\n     @MeetingIDConstraint\n     private String meetingID;\n \n-    public InsertDocument(Checksum checksum) {\n-        super(checksum);\n+    public InsertDocument(Checksum checksum, HttpServletRequest servletRequest) {\n+        super(checksum, servletRequest);\n     }\n \n     public String getMeetingID() {\n@@ -37,4 +40,9 @@ public void setMeetingID(String meetingID) {\n     public void populateFromParamsMap(Map<String, String[]> params) {\n         if(params.containsKey(Params.MEETING_ID.getValue())) setMeetingID(params.get(Params.MEETING_ID.getValue())[0]);\n     }\n+\n+    @Override\n+    public Set<String> getSupportedContentTypes() {\n+        return Set.of(MediaType.APPLICATION_XML, MediaType.TEXT_XML);\n+    }\n }"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/JoinMeeting.java",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -5,9 +5,11 @@\n import org.bigbluebutton.api.model.shared.JoinPassword;\r\n import org.bigbluebutton.api.model.shared.Password;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.validation.Valid;\r\n import java.util.Map;\r\n \r\n+@ContentTypeConstraint\r\n public class JoinMeeting extends RequestWithChecksum<JoinMeeting.Params> {\r\n \r\n     public enum Params implements RequestParameters {\r\n@@ -57,8 +59,8 @@ public enum Params implements RequestParameters {\n     @Valid\r\n     private Password joinPassword;\r\n \r\n-    public JoinMeeting(Checksum checksum) {\r\n-        super(checksum);\r\n+    public JoinMeeting(Checksum checksum, HttpServletRequest servletRequest) {\r\n+        super(checksum, servletRequest);\r\n         joinPassword = new JoinPassword();\r\n     }\r\n \r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/LearningDashboard.java",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -2,10 +2,11 @@\n \r\n import org.bigbluebutton.api.model.constraint.UserSessionConstraint;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.validation.constraints.NotNull;\r\n import java.util.Map;\r\n \r\n-public class LearningDashboard implements Request<LearningDashboard.Params> {\r\n+public class LearningDashboard extends RequestWithSession<LearningDashboard.Params> {\r\n \r\n     public enum Params implements RequestParameters {\r\n         SESSION_TOKEN(\"sessionToken\");\r\n@@ -20,6 +21,10 @@ public enum Params implements RequestParameters {\n     @UserSessionConstraint\r\n     private String sessionToken;\r\n \r\n+    public LearningDashboard(HttpServletRequest servletRequest) {\r\n+        super(servletRequest);\r\n+    }\r\n+\r\n     public String getSessionToken() {\r\n         return sessionToken;\r\n     }\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/MeetingInfo.java",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -1,11 +1,14 @@\n package org.bigbluebutton.api.model.request;\r\n \r\n+import org.bigbluebutton.api.model.constraint.ContentTypeConstraint;\r\n import org.bigbluebutton.api.model.constraint.MeetingExistsConstraint;\r\n import org.bigbluebutton.api.model.constraint.MeetingIDConstraint;\r\n import org.bigbluebutton.api.model.shared.Checksum;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import java.util.Map;\r\n \r\n+@ContentTypeConstraint\r\n public class MeetingInfo extends RequestWithChecksum<MeetingInfo.Params> {\r\n \r\n     public enum Params implements RequestParameters {\r\n@@ -22,8 +25,8 @@ public enum Params implements RequestParameters {\n     @MeetingExistsConstraint\r\n     private String meetingID;\r\n \r\n-    public MeetingInfo(Checksum checksum) {\r\n-        super(checksum);\r\n+    public MeetingInfo(Checksum checksum, HttpServletRequest servletRequest) {\r\n+        super(checksum, servletRequest);\r\n     }\r\n \r\n     public String getMeetingID() {\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/MeetingRunning.java",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -1,10 +1,13 @@\n package org.bigbluebutton.api.model.request;\r\n \r\n+import org.bigbluebutton.api.model.constraint.ContentTypeConstraint;\r\n import org.bigbluebutton.api.model.constraint.MeetingIDConstraint;\r\n import org.bigbluebutton.api.model.shared.Checksum;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import java.util.Map;\r\n \r\n+@ContentTypeConstraint\r\n public class MeetingRunning extends RequestWithChecksum<MeetingRunning.Params> {\r\n \r\n     public enum Params implements RequestParameters {\r\n@@ -20,8 +23,8 @@ public enum Params implements RequestParameters {\n     @MeetingIDConstraint\r\n     private String meetingID;\r\n \r\n-    public MeetingRunning(Checksum checksum) {\r\n-        super(checksum);\r\n+    public MeetingRunning(Checksum checksum, HttpServletRequest servletRequest) {\r\n+        super(checksum, servletRequest);\r\n     }\r\n \r\n     public String getMeetingID() {\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/Request.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1,9 +1,13 @@\n package org.bigbluebutton.api.model.request;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import java.util.Map;\r\n+import java.util.Set;\r\n \r\n public interface Request<P extends Enum<P> & RequestParameters> {\r\n \r\n     void populateFromParamsMap(Map<String, String[]> params);\r\n     void convertParamsFromString();\r\n+    Set<String> getSupportedContentTypes();\r\n+    HttpServletRequest getServletRequest();\r\n }\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/RequestWithChecksum.java",
          "status": "modified",
          "additions": 17,
          "deletions": 1,
          "patch": "@@ -1,17 +1,23 @@\n package org.bigbluebutton.api.model.request;\r\n \r\n+import jakarta.ws.rs.core.MediaType;\r\n import org.bigbluebutton.api.model.shared.Checksum;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.validation.Valid;\r\n import java.util.Map;\r\n+import java.util.Set;\r\n \r\n public abstract class RequestWithChecksum<P extends Enum<P> & RequestParameters> implements Request<P> {\r\n \r\n     @Valid\r\n     protected Checksum checksum;\r\n \r\n-    protected RequestWithChecksum(Checksum checksum) {\r\n+    protected HttpServletRequest servletRequest;\r\n+\r\n+    protected RequestWithChecksum(Checksum checksum, HttpServletRequest servletRequest) {\r\n         this.checksum = checksum;\r\n+        this.servletRequest = servletRequest;\r\n     }\r\n \r\n     public Checksum getChecksum() {\r\n@@ -27,4 +33,14 @@ public void setChecksum(Checksum checksum) {\n     public void convertParamsFromString() {\r\n \r\n     }\r\n+\r\n+    @Override\r\n+    public Set<String> getSupportedContentTypes() {\r\n+        return Set.of(MediaType.APPLICATION_FORM_URLENCODED, MediaType.MULTIPART_FORM_DATA);\r\n+    }\r\n+\r\n+    @Override\r\n+    public HttpServletRequest getServletRequest() {\r\n+        return servletRequest;\r\n+    }\r\n }\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/RequestWithSession.java",
          "status": "added",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -0,0 +1,25 @@\n+package org.bigbluebutton.api.model.request;\n+\n+import jakarta.ws.rs.core.MediaType;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Set;\n+\n+public abstract class RequestWithSession<P extends Enum<P> & RequestParameters> implements Request<P> {\n+\n+    protected HttpServletRequest servletRequest;\n+\n+    protected RequestWithSession(HttpServletRequest servletRequest) {\n+        this.servletRequest = servletRequest;\n+    }\n+\n+    @Override\n+    public Set<String> getSupportedContentTypes() {\n+        return Set.of(MediaType.APPLICATION_FORM_URLENCODED, MediaType.MULTIPART_FORM_DATA);\n+    }\n+\n+    @Override\n+    public HttpServletRequest getServletRequest() {\n+        return servletRequest;\n+    }\n+}"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/SignOut.java",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -2,10 +2,11 @@\n \r\n import org.bigbluebutton.api.model.constraint.UserSessionConstraint;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.validation.constraints.NotNull;\r\n import java.util.Map;\r\n \r\n-public class SignOut implements Request<SignOut.Params> {\r\n+public class SignOut extends RequestWithSession<SignOut.Params> {\r\n \r\n     public enum Params implements RequestParameters {\r\n         SESSION_TOKEN(\"sessionToken\");\r\n@@ -20,6 +21,10 @@ public enum Params implements RequestParameters {\n     @UserSessionConstraint\r\n     private String sessionToken;\r\n \r\n+    public SignOut(HttpServletRequest servletRequest) {\r\n+        super(servletRequest);\r\n+    }\r\n+\r\n     public String getSessionToken() {\r\n         return sessionToken;\r\n     }\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/SimpleRequest.java",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -1,9 +1,12 @@\n package org.bigbluebutton.api.model.request;\r\n \r\n+import org.bigbluebutton.api.model.constraint.ContentTypeConstraint;\r\n import org.bigbluebutton.api.model.shared.Checksum;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import java.util.Map;\r\n \r\n+@ContentTypeConstraint\r\n public class SimpleRequest extends RequestWithChecksum<SimpleRequest.Params> {\r\n \r\n     public enum Params implements RequestParameters {\r\n@@ -16,8 +19,8 @@ public enum Params implements RequestParameters {\n         public String getValue() { return value; }\r\n     }\r\n \r\n-    public SimpleRequest(Checksum checksum) {\r\n-        super(checksum);\r\n+    public SimpleRequest(Checksum checksum, HttpServletRequest servletRequest) {\r\n+        super(checksum, servletRequest);\r\n     }\r\n \r\n     @Override\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/request/Stuns.java",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -3,9 +3,11 @@\n import org.bigbluebutton.api.model.constraint.*;\r\n import org.bigbluebutton.api.service.SessionService;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import java.util.Map;\r\n \r\n-public class Stuns implements Request<Stuns.Params> {\r\n+@ContentTypeConstraint\r\n+public class Stuns extends RequestWithSession<Stuns.Params> {\r\n \r\n     public enum Params implements RequestParameters {\r\n         SESSION_TOKEN(\"sessionToken\");\r\n@@ -26,7 +28,10 @@ public enum Params implements RequestParameters {\n \r\n     private SessionService sessionService;\r\n \r\n-    public Stuns() { sessionService = new SessionService(); }\r\n+    public Stuns(HttpServletRequest servletRequest) {\r\n+        super(servletRequest);\r\n+        sessionService = new SessionService();\r\n+    }\r\n \r\n     public String getSessionToken() {\r\n         return sessionToken;\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/shared/Checksum.java",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -1,8 +1,11 @@\n package org.bigbluebutton.api.model.shared;\r\n \r\n+import org.bigbluebutton.api.model.constraint.ContentTypeConstraint;\r\n import org.bigbluebutton.api.model.constraint.NotEmpty;\r\n import org.bigbluebutton.api.util.ParamsUtil;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n+\r\n public abstract class Checksum {\r\n \r\n     @NotEmpty(message = \"You must provide the API call\", groups = ChecksumValidationGroup.class)\r\n@@ -13,9 +16,12 @@ public abstract class Checksum {\n \r\n     protected String queryStringWithoutChecksum;\r\n \r\n-    public Checksum(String apiCall, String checksum) {\r\n+    protected HttpServletRequest request;\r\n+\r\n+    public Checksum(String apiCall, String checksum, HttpServletRequest request) {\r\n         this.apiCall = ParamsUtil.sanitizeString(apiCall);\r\n         this.checksum = ParamsUtil.sanitizeString(checksum);\r\n+        this.request = request;\r\n     }\r\n \r\n     public String getApiCall() {\r\n@@ -41,4 +47,12 @@ public String getQueryStringWithoutChecksum() {\n     public void setQueryStringWithoutChecksum(String queryStringWithoutChecksum) {\r\n         this.queryStringWithoutChecksum = queryStringWithoutChecksum;\r\n     }\r\n+\r\n+    public void setRequest(HttpServletRequest request) {\r\n+        this.request = request;\r\n+    }\r\n+\r\n+    public HttpServletRequest getRequest() {\r\n+        return request;\r\n+    }\r\n }\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/shared/GetChecksum.java",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -3,16 +3,16 @@\n import org.bigbluebutton.api.model.constraint.GetChecksumConstraint;\r\n import org.bigbluebutton.api.util.ParamsUtil;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.validation.constraints.NotEmpty;\r\n \r\n @GetChecksumConstraint(groups = ChecksumValidationGroup.class)\r\n public class GetChecksum extends Checksum {\r\n-\r\n-    @NotEmpty(message = \"You must provide the query string\")\r\n+    \r\n     private String queryString;\r\n \r\n-    public GetChecksum(String apiCall, String checksum, String queryString) {\r\n-        super(apiCall, checksum);\r\n+    public GetChecksum(String apiCall, String checksum, String queryString, HttpServletRequest request) {\r\n+        super(apiCall, checksum, request);\r\n         this.queryString = ParamsUtil.sanitizeString(queryString);\r\n         removeChecksumFromQueryString();\r\n     }\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/shared/PostChecksum.java",
          "status": "removed",
          "additions": 0,
          "deletions": 22,
          "patch": "@@ -1,22 +0,0 @@\n-package org.bigbluebutton.api.model.shared;\r\n-\r\n-import org.bigbluebutton.api.model.constraint.PostChecksumConstraint;\r\n-import org.bigbluebutton.api.service.ValidationService;\r\n-\r\n-import java.util.Map;\r\n-\r\n-@PostChecksumConstraint(groups = ChecksumValidationGroup.class)\r\n-public class PostChecksum extends Checksum {\r\n-\r\n-    Map<String, String[]> params;\r\n-\r\n-    public PostChecksum(String apiCall, String checksum, Map<String, String[]> params) {\r\n-        super(apiCall, checksum);\r\n-        this.params = params;\r\n-        queryStringWithoutChecksum = ValidationService.buildQueryStringFromParamsMap(params);\r\n-    }\r\n-\r\n-    public Map<String, String[]> getParams() { return params; }\r\n-\r\n-    public void setParams(Map<String, String[]> params) { this.params = params; }\r\n-}\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/validator/ContentTypeValidator.java",
          "status": "added",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -0,0 +1,40 @@\n+package org.bigbluebutton.api.model.validator;\n+\n+import jakarta.ws.rs.core.MediaType;\n+import org.apache.commons.compress.utils.Sets;\n+import org.bigbluebutton.api.model.constraint.ContentTypeConstraint;\n+import org.bigbluebutton.api.model.request.Request;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import java.util.Set;\n+\n+public class ContentTypeValidator implements ConstraintValidator<ContentTypeConstraint, Request> {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ContentTypeValidator.class);\n+\n+    @Override\n+    public void initialize(ContentTypeConstraint constraintAnnotation) {}\n+\n+    @Override\n+    public boolean isValid(Request request, ConstraintValidatorContext context) {\n+        HttpServletRequest servletRequest = request.getServletRequest();\n+        String requestMethod = servletRequest.getMethod();\n+        String contentType = servletRequest.getContentType();\n+        String contentTypeHeader = servletRequest.getHeader(\"Content-Type\");\n+        log.info(\"Validating {} request with content type {}\", requestMethod, contentType);\n+\n+        boolean requestBodyPresent = servletRequest.getContentLength() > 0;\n+        if (requestBodyPresent) {\n+            if (contentType == null || contentTypeHeader == null) return false;\n+            else {\n+                return request.getSupportedContentTypes().contains(contentType);\n+            }\n+        }\n+\n+        return true;\n+    }\n+}"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/validator/GetChecksumValidator.java",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -1,8 +1,10 @@\n package org.bigbluebutton.api.model.validator;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.validation.ConstraintValidator;\r\n import javax.validation.ConstraintValidatorContext;\r\n \r\n+import jakarta.ws.rs.core.MediaType;\r\n import org.apache.commons.codec.digest.DigestUtils;\r\n import org.bigbluebutton.api.model.constraint.GetChecksumConstraint;\r\n import org.bigbluebutton.api.model.shared.GetChecksum;\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/model/validator/PostChecksumValidator.java",
          "status": "removed",
          "additions": 0,
          "deletions": 53,
          "patch": "@@ -1,53 +0,0 @@\n-package org.bigbluebutton.api.model.validator;\r\n-\r\n-import org.apache.commons.codec.digest.DigestUtils;\r\n-import org.bigbluebutton.api.model.constraint.PostChecksumConstraint;\r\n-import org.bigbluebutton.api.model.shared.PostChecksum;\r\n-import org.bigbluebutton.api.service.ServiceUtils;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-\r\n-import javax.validation.ConstraintValidator;\r\n-import javax.validation.ConstraintValidatorContext;\r\n-\r\n-public class PostChecksumValidator implements ConstraintValidator<PostChecksumConstraint, PostChecksum> {\r\n-\r\n-    private static Logger log = LoggerFactory.getLogger(PostChecksumValidator.class);\r\n-\r\n-    @Override\r\n-    public void initialize(PostChecksumConstraint constraintAnnotation) {}\r\n-\r\n-    @Override\r\n-    public boolean isValid(PostChecksum checksum, ConstraintValidatorContext context) {\r\n-        String securitySalt = ServiceUtils.getValidationService().getSecuritySalt();\r\n-\r\n-        if (securitySalt.isEmpty()) {\r\n-            log.warn(\"Security is disabled in this service. Make sure this is intentional.\");\r\n-            return true;\r\n-        }\r\n-\r\n-        String queryStringWithoutChecksum = checksum.getQueryStringWithoutChecksum();\r\n-        log.info(\"query string after checksum removed: [{}]\", queryStringWithoutChecksum);\r\n-\r\n-        if(queryStringWithoutChecksum == null) {\r\n-            return false;\r\n-        }\r\n-\r\n-        String providedChecksum = checksum.getChecksum();\r\n-        log.info(\"CHECKSUM={} length={}\", providedChecksum, providedChecksum.length());\r\n-\r\n-        if(providedChecksum == null) {\r\n-            return false;\r\n-        }\r\n-\r\n-        String data = checksum.getApiCall() + queryStringWithoutChecksum + securitySalt;\r\n-        String createdCheckSum = DigestUtils.sha1Hex(data);\r\n-\r\n-        if (createdCheckSum == null || !createdCheckSum.equalsIgnoreCase(providedChecksum)) {\r\n-            log.info(\"checksumError: failed checksum. our checksum: [{}], client: [{}]\", createdCheckSum, providedChecksum);\r\n-            return false;\r\n-        }\r\n-\r\n-        return true;\r\n-    }\r\n-}\r"
        },
        {
          "filename": "bbb-common-web/src/main/java/org/bigbluebutton/api/service/ValidationService.java",
          "status": "modified",
          "additions": 23,
          "deletions": 53,
          "patch": "@@ -4,11 +4,11 @@\n import org.bigbluebutton.api.model.shared.Checksum;\r\n import org.bigbluebutton.api.model.shared.ChecksumValidationGroup;\r\n import org.bigbluebutton.api.model.shared.GetChecksum;\r\n-import org.bigbluebutton.api.model.shared.PostChecksum;\r\n import org.bigbluebutton.api.util.ParamsUtil;\r\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.validation.ConstraintViolation;\r\n import javax.validation.Validation;\r\n import javax.validation.Validator;\r\n@@ -70,11 +70,13 @@ public ValidationService() {\n         validator = validatorFactory.getValidator();\r\n     }\r\n \r\n-    public Map<String, String> validate(ApiCall apiCall, Map<String, String[]> params, String queryString) {\r\n+    public Map<String, String> validate(ApiCall apiCall, HttpServletRequest servletRequest) {\r\n+        String queryString = servletRequest.getQueryString();\r\n+        Map<String, String[]> params = servletRequest.getParameterMap();\r\n         log.info(\"Validating {} request with query string {}\", apiCall.getName(), queryString);\r\n         params = sanitizeParams(params);\r\n \r\n-        Request request = initializeRequest(apiCall, params, queryString);\r\n+        Request request = initializeRequest(apiCall, params, queryString, servletRequest);\r\n         Map<String,String> violations = new HashMap<>();\r\n \r\n         if(request == null) {\r\n@@ -101,7 +103,7 @@ boolean isValidURL(String url) {\n         }\r\n     }\r\n \r\n-    private Request initializeRequest(ApiCall apiCall, Map<String, String[]> params, String queryString) {\r\n+    private Request initializeRequest(ApiCall apiCall, Map<String, String[]> params, String queryString, HttpServletRequest servletRequest) {\r\n         Request request = null;\r\n         Checksum checksum;\r\n \r\n@@ -110,55 +112,23 @@ private Request initializeRequest(ApiCall apiCall, Map<String, String[]> params,\n             checksumValue = params.get(\"checksum\")[0];\r\n         }\r\n \r\n-        if(queryString == null || queryString.isEmpty()) {\r\n-            queryString = buildQueryStringFromParamsMap(params);\r\n-        }\r\n-\r\n-        switch(apiCall.requestType) {\r\n-            case GET:\r\n-                checksum = new GetChecksum(apiCall.getName(), checksumValue, queryString);\r\n-                switch(apiCall) {\r\n-                    case CREATE:\r\n-                        request = new CreateMeeting(checksum);\r\n-                        break;\r\n-                    case JOIN:\r\n-                        request = new JoinMeeting(checksum);\r\n-                        break;\r\n-                    case MEETING_RUNNING:\r\n-                        request = new MeetingRunning(checksum);\r\n-                        break;\r\n-                    case END:\r\n-                        request = new EndMeeting(checksum);\r\n-                        break;\r\n-                    case GET_MEETING_INFO:\r\n-                        request = new MeetingInfo(checksum);\r\n-                        break;\r\n-                    case GET_MEETINGS:\r\n-                    case GET_SESSIONS:\r\n-                        request = new SimpleRequest(checksum);\r\n-                        break;\r\n-                    case INSERT_DOCUMENT:\r\n-                        request = new InsertDocument(checksum);\r\n-                        break;\r\n-                    case GUEST_WAIT:\r\n-                        request = new GuestWait();\r\n-                        break;\r\n-                    case ENTER:\r\n-                        request = new Enter();\r\n-                        break;\r\n-                    case STUNS:\r\n-                        request = new Stuns();\r\n-                        break;\r\n-                    case SIGN_OUT:\r\n-                        request = new SignOut();\r\n-                        break;\r\n-                    case LEARNING_DASHBOARD:\r\n-                        request = new LearningDashboard();\r\n-                        break;\r\n-                    case GET_JOIN_URL:\r\n-                        request = new GetJoinUrl();\r\n-                        break;\r\n-                }\r\n+        if (Objects.requireNonNull(apiCall.requestType) == RequestType.GET) {\r\n+            checksum = new GetChecksum(apiCall.getName(), checksumValue, queryString, servletRequest);\r\n+            request = switch (apiCall) {\r\n+                case CREATE -> new CreateMeeting(checksum, servletRequest);\r\n+                case JOIN -> new JoinMeeting(checksum, servletRequest);\r\n+                case MEETING_RUNNING -> new MeetingRunning(checksum, servletRequest);\r\n+                case END -> new EndMeeting(checksum, servletRequest);\r\n+                case GET_MEETING_INFO -> new MeetingInfo(checksum, servletRequest);\r\n+                case GET_MEETINGS, GET_SESSIONS -> new SimpleRequest(checksum, servletRequest);\r\n+                case INSERT_DOCUMENT -> new InsertDocument(checksum, servletRequest);\r\n+                case GUEST_WAIT -> new GuestWait(servletRequest);\r\n+                case ENTER -> new Enter(servletRequest);\r\n+                case STUNS -> new Stuns(servletRequest);\r\n+                case SIGN_OUT -> new SignOut(servletRequest);\r\n+                case LEARNING_DASHBOARD -> new LearningDashboard(servletRequest);\r\n+                case GET_JOIN_URL -> new GetJoinUrl(servletRequest);\r\n+            };\r\n         }\r\n \r\n         return request;\r"
        },
        {
          "filename": "bigbluebutton-web/grails-app/controllers/org/bigbluebutton/web/UrlMappings.groovy",
          "status": "modified",
          "additions": 44,
          "deletions": 0,
          "patch": "@@ -63,6 +63,26 @@ class UrlMappings {\n       action = [GET: 'downloadFile']\n     }\n \n+    \"/bigbluebutton/api/create\"(controller: \"api\") {\n+      action = [GET: 'create', POST: 'create']\n+    }\n+\n+    \"/bigbluebutton/api/join\"(controller: \"api\") {\n+      action = [GET: 'join']\n+    }\n+\n+    \"/bigbluebutton/api/isMeetingRunning\"(controller: \"api\") {\n+      action = [GET: 'isMeetingRunning', POST: 'isMeetingRunning']\n+    }\n+\n+    \"/bigbluebutton/api/end\"(controller: \"api\") {\n+      action = [GET: 'end', POST: 'end']\n+    }\n+\n+    \"/bigbluebutton/api/getMeetingInfo\"(controller: \"api\") {\n+      action = [GET: 'getMeetingInfo', POST: 'getMeetingInfo']\n+    }\n+\n     \"/bigbluebutton/api/getMeetings\"(controller: \"api\") {\n       action = [GET: 'getMeetingsHandler', POST: 'getMeetingsHandler']\n     }\n@@ -71,6 +91,30 @@ class UrlMappings {\n       action = [GET: 'getSessionsHandler', POST: 'getSessionsHandler']\n     }\n \n+    \"/bigbluebutton/api/enter\"(controller: \"api\") {\n+      action = [GET: 'enter', POST: 'enter']\n+    }\n+\n+    \"/bigbluebutton/api/stuns\"(controller: \"api\") {\n+      action = [GET: 'stuns', POST: 'stuns']\n+    }\n+\n+    \"/bigbluebutton/api/signOut\"(controller: \"api\") {\n+      action = [GET: 'signOut', POST: 'signOut']\n+    }\n+\n+    \"/bigbluebutton/api/insertDocument\"(controller: \"api\") {\n+      action = [GET: 'insertDocument', POST: 'insertDocument']\n+    }\n+\n+    \"/bigbluebutton/api/getJoinUrl\"(controller: \"api\") {\n+      action = [GET: 'getJoinUrl', POST: 'getJoinUrl']\n+    }\n+\n+    \"/bigbluebutton/api/learningDashboard\"(controller: \"api\") {\n+      action = [GET: 'learningDashboard', POST: 'learningDashboard']\n+    }\n+\n     \"/bigbluebutton/api/getRecordings\"(controller: \"recording\") {\n       action = [GET: 'getRecordingsHandler', POST: 'getRecordingsHandler']\n     }"
        },
        {
          "filename": "bigbluebutton-web/grails-app/controllers/org/bigbluebutton/web/controllers/ApiController.groovy",
          "status": "modified",
          "additions": 19,
          "deletions": 32,
          "patch": "@@ -45,6 +45,7 @@ import org.bigbluebutton.web.services.turn.RemoteIceCandidate\n import org.json.JSONArray\n \n import javax.servlet.ServletRequest\n+import javax.servlet.http.HttpServletRequest\n \n class ApiController {\n   private static final String CONTROLLER_NAME = 'ApiController'\n@@ -116,8 +117,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.CREATE,\n-            request.getParameterMap(),\n-            request.getQueryString()\n+            request\n     )\n \n     if(!(validationResponse == null)) {\n@@ -198,7 +198,6 @@ class ApiController {\n     }\n   }\n \n-\n   /**********************************************\n    * JOIN API\n    *********************************************/\n@@ -210,8 +209,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.JOIN,\n-            request.getParameterMap(),\n-            request.getQueryString()\n+            request\n     )\n \n     HashMap<String, String> roles = new HashMap<String, String>();\n@@ -507,8 +505,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.MEETING_RUNNING,\n-            request.getParameterMap(),\n-            request.getQueryString()\n+            request\n     )\n \n     if(!(validationResponse == null)) {\n@@ -538,8 +535,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.END,\n-            request.getParameterMap(),\n-            request.getQueryString()\n+            request\n     )\n \n     if(!(validationResponse == null)) {\n@@ -582,16 +578,16 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.GET_MEETING_INFO,\n-            request.getParameterMap(),\n-            request.getQueryString()\n+            request\n     )\n \n     if(!(validationResponse == null)) {\n       invalid(validationResponse.getKey(), validationResponse.getValue())\n       return\n     }\n \n-    Meeting meeting = ServiceUtils.findMeetingFromMeetingID(params.meetingID);\n+    String meetingId = params.list(\"meetingID\")[0]\n+    Meeting meeting = ServiceUtils.findMeetingFromMeetingID(meetingId);\n \n     withFormat {\n       xml {\n@@ -609,8 +605,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.GET_MEETINGS,\n-            request.getParameterMap(),\n-            request.getQueryString()\n+            request\n     )\n \n     if(!(validationResponse == null)) {\n@@ -647,8 +642,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.GET_SESSIONS,\n-            request.getParameterMap(),\n-            request.getQueryString()\n+            request\n     )\n \n     if(!(validationResponse == null)) {\n@@ -706,8 +700,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.GUEST_WAIT,\n-            request.getParameterMap(),\n-            request.getQueryString()\n+            request\n     )\n     if(!(validationResponse == null)) {\n       msgKey = validationResponse.getKey()\n@@ -820,8 +813,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.ENTER,\n-            request.getParameterMap(),\n-            request.getQueryString(),\n+            request\n     )\n     if(!(validationResponse == null)) {\n       respMessage = validationResponse.getValue()\n@@ -978,8 +970,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.STUNS,\n-            request.getParameterMap(),\n-            request.getQueryString(),\n+            request\n     )\n \n     if(!(validationResponse == null)) {\n@@ -1055,8 +1046,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.SIGN_OUT,\n-            request.getParameterMap(),\n-            request.getQueryString()\n+            request\n     )\n \n     if(validationResponse == null) {\n@@ -1100,8 +1090,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.INSERT_DOCUMENT,\n-            request.getParameterMap(),\n-            request.getQueryString()\n+            request\n     )\n \n     def externalMeetingId = params.meetingID.toString()\n@@ -1153,8 +1142,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.GET_JOIN_URL,\n-            request.getParameterMap(),\n-            request.getQueryString(),\n+            request\n     )\n \n     //Validate Session\n@@ -1253,8 +1241,7 @@ class ApiController {\n \n     Map.Entry<String, String> validationResponse = validateRequest(\n             ValidationService.ApiCall.LEARNING_DASHBOARD,\n-            request.getParameterMap(),\n-            request.getQueryString(),\n+            request\n     )\n \n     //Validate Session\n@@ -1866,8 +1853,8 @@ class ApiController {\n     redirect(url: newUri)\n   }\n \n-  private Map.Entry<String, String> validateRequest(ValidationService.ApiCall apiCall, Map<String, String[]> params, String queryString) {\n-    Map<String, String> violations = validationService.validate(apiCall, params, queryString)\n+  private Map.Entry<String, String> validateRequest(ValidationService.ApiCall apiCall, HttpServletRequest request) {\n+    Map<String, String> violations = validationService.validate(apiCall, request)\n     Map.Entry<String, String> response = null\n \n     if(!violations.isEmpty()) {"
        },
        {
          "filename": "docs/docs/development/api.md",
          "status": "modified",
          "additions": 16,
          "deletions": 14,
          "patch": "@@ -100,7 +100,7 @@ Updated in 2.6:\n \n - **getRecordings** - **Added:** Added support for pagination using `offset`, `limit`\n \n-- **join**: Added `userdata-bbb_hide_presentation_on_join`.\n+- **join**: Added `userdata-bbb_hide_presentation_on_join` and removed support for all HTTP request methods except GET.\n \n ## API Data Types\n \n@@ -205,6 +205,8 @@ To use the security model, you must be able to create a SHA-1 checksum out of th\n \n You **MUST** send this checksum with **EVERY** API call. Since end users do not know your shared secret, they can not fake calls to the server, and they can not modify any API calls since changing a single parameter name or value by only one character will completely change the checksum required to validate the call.\n \n+**NOTE** Checksums for POST requests must be calculated using the URL query string as well. For example, if all request parameters are in the request body then the checksum will be calculated using an empty query string.\n+\n Implementations of the SHA-1 functionality exist in nearly all programming languages. Here are example methods or links to example implementations for various languages:\n \n - [JavaScript](http://pajhome.org.uk/crypt/md5/)\n@@ -274,7 +276,7 @@ The following response parameters are standard to every call and may be returned\n | message    | Sometimes | String | A message that gives additional information about the status of the call. A message parameter will always be returned if the returncode was `FAILED`. A message may also be returned in some cases where returncode was `SUCCESS` if additional information would be helpful.|\n | messageKey | Sometimes | String | Provides similar functionality to the message and follows the same rules. However, a message key will be much shorter and will generally remain the same for the life of the API whereas a message may change over time. If your third party application would like to internationalize or otherwise change the standard messages returned, you can look up your own custom messages based on this messageKey.|\n \n-### create\n+### `GET` `POST` create\n \n Creates a BigBlueButton meeting.\n \n@@ -460,7 +462,7 @@ The receiving endpoint should respond with one of the following HTTP codes to in\n \n All other HTTP response codes will be treated as transient errors.\n \n-### join\n+### `GET` join\n \n Joins a user to the meeting specified in the meetingID parameter.\n \n@@ -497,7 +499,7 @@ There is a XML response for this call only when the `redirect` parameter is set\n </response>\n ```\n \n-### insertDocument\n+### `POST` insertDocument\n \n This endpoint insert one or more documents into a running meeting via API call\n \n@@ -549,7 +551,7 @@ curl -s -X POST \"https://{your-host}/bigbluebutton/api/insertDocument?meetingID=\n \n There is also the possibility of passing the removable and downloadable variables inside the payload, they go in the `document` tag as already demonstrated. The way it works is exactly the same as in the [(POST) create endpoint](#pre-upload-slides) \n \n-### isMeetingRunning\n+### `GET` `POST` isMeetingRunning\n \n This call enables you to simply check on whether or not a meeting is running by looking it up with your meeting ID.\n \n@@ -578,7 +580,7 @@ http&#58;//yourserver.com/bigbluebutton/api/isMeetingRunning?meetingID=test01&ch\n \n running can be \u201ctrue\u201d or \u201cfalse\u201d that signals whether a meeting with this ID is currently running.\n \n-### end\n+### `GET` `POST` end\n \n Use this to forcibly end a meeting and kick all participants out of the meeting.\n \n@@ -622,7 +624,7 @@ curl --request POST \\\n \n **IMPORTANT NOTE:** You should note that when you call end meeting, it is simply sending a request to the backend (Red5) server that is handling all the conference traffic. That backend server will immediately attempt to send every connected client a logout event, kicking them from the meeting. It will then disconnect them, and the meeting will be ended. However, this may take several seconds, depending on network conditions. Therefore, the end meeting call will return a success as soon as the request is sent. But to be sure that it completed, you should then check back a few seconds later by using the `getMeetingInfo` or `isMeetingRunning` calls to verify that all participants have left the meeting and that it successfully ended.\n \n-### getMeetingInfo\n+### `GET` `POST` getMeetingInfo\n \n This call will return all of a meeting's information, including the list of attendees as well as start and end times.\n \n@@ -722,7 +724,7 @@ If a meeting is a breakout room itself, then `getMeetingInfo` will also return a\n  </response>\n ```\n \n-### getMeetings\n+### `GET` `POST` getMeetings\n \n This call will return a list of all the meetings found on this server.\n \n@@ -775,7 +777,7 @@ http&#58;//yourserver.com/bigbluebutton/api/getMeetings?checksum=1234\n </response>\n ```\n \n-### getRecordings\n+### `GET` getRecordings\n \n Retrieves the recordings that are available for playback for a given meetingID (or set of meeting IDs). Support for pagination was added in 2.6.\n \n@@ -890,7 +892,7 @@ Here the `getRecordings` API call returned back two recordings for the meetingID\n </response>\n ```\n \n-### publishRecordings\n+### `GET` publishRecordings\n \n Publish and unpublish recordings for a given recordID (or set of record IDs).\n \n@@ -918,7 +920,7 @@ Publish and unpublish recordings for a given recordID (or set of record IDs).\n </response>\n ```\n \n-### deleteRecordings\n+### `GET` deleteRecordings\n \n Delete one or more recordings for a given recordID (or set of record IDs).\n \n@@ -946,7 +948,7 @@ http&#58;//yourserver.com/bigbluebutton/api/deleteRecordings?[parameters]&checks\n </response>\n ```\n \n-### updateRecordings\n+### `GET` `POST` updateRecordings\n \n Update metadata for a given recordID (or set of record IDs). Available since version 1.1\n \n@@ -973,7 +975,7 @@ Update metadata for a given recordID (or set of record IDs). Available since ver\n </response>\n ```\n \n-### getRecordingTextTracks\n+### `GET` `POST` getRecordingTextTracks\n \n Get a list of the caption/subtitle files currently available for a recording. It will include information about the captions (language, etc.), as well as a download link. This may be useful to retrieve live or automatically transcribed subtitles from a recording for manual editing.\n \n@@ -1053,7 +1055,7 @@ missingParameter\n noRecordings\n : No recording was found matching the provided recording ID.\n \n-### putRecordingTextTrack\n+### `POST` putRecordingTextTrack\n \n Upload a caption or subtitle file to add it to the recording. If there is any existing track with the same values for kind and lang, it will be replaced.\n "
        },
        {
          "filename": "docs/docs/new-features.md",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -292,6 +292,9 @@ Whether you upgrade to BigBlueButton 2.6.14+ via bbb-install-2.6.sh or just thro\n \n In BigBlueButton 2.6.17 we added a new configuration property for bbb-apps-akka package under `services` called `checkSumAlgorithmForBreakouts`. By default the value is `\"sha256\"`. It controls the algorithm for checksum calculation for the breakout rooms join link. In case you overwrite bbb-web's `supportedChecksumAlgorithms` property removing sha256 you will need to set a supported algorithm here too. For example if you want to only use `sha512`, set `supportedChecksumAlgorithms=sha512` in `/etc/bigbluebutton/bbb-web.properties` and also set `checkSumAlgorithmForBreakouts=\"sha512\"` in `/etc/bigbluebutton/bbb-apps-akka.conf` and then restart BigBlueButton.\n \n+#### Removed support for POST requests on `join` endpoint and Content-Type headers are now required\n+\n+In BigBlueButton 2.6.18/2.7.8 POST requests are no longer allowed for the `join` endpoint. To ensure they are validated properly, a `Content-Type` header must also be provided for POST requests that contain data in the request body. Endpoints now support a limited set of content types that includes `text/xml`, `application/xml`, `application/x-www-form-url-encoded`, and `multipart/form-data`. By default each endpoint only supports `application/x-www-form-urlencoded` and `multipart/form-data`, but individual endpoints can override this and define their own set of supported content types. The `create` endpoint supports all of the four previously listed content types while `insertDocument` supports only `text/xml` and `application/xml`. Any requests with a content type that differs from the set supported by the target endpoint will be rejected with a new `unsupportedContentType` error. \n \n ### Development\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 10,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "51d45c2325ff38df24013c0eee1cd21f33fff105",
            "date": "2025-01-23T19:12:23Z",
            "author_login": "gustavotrott"
          },
          {
            "sha": "cb712bc7194fbf05749a06f02769f36347072ff2",
            "date": "2025-01-23T18:45:22Z",
            "author_login": "antonbsa"
          },
          {
            "sha": "919c214e7caa54e9337a25d4b47c7ed501f92056",
            "date": "2025-01-23T18:13:59Z",
            "author_login": "antonbsa"
          },
          {
            "sha": "75c3f67b996a53a94f17683143dcd8b0eb6879c3",
            "date": "2025-01-23T17:33:00Z",
            "author_login": "transifex-integration[bot]"
          },
          {
            "sha": "1cc3fdb9c76ac976bc7fa33ffba4ff418975441d",
            "date": "2025-01-23T17:31:59Z",
            "author_login": "transifex-integration[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:L",
    "cwe_id": "CWE-284",
    "description": "BigBlueButton is an open-source virtual classroom designed to help teachers teach and learners learn. An attacker with a valid join link to a meeting can trick BigBlueButton into generating a signed join link with additional parameters. One of those parameters may be \"role=moderator\", allowing an attacker to join a meeting as moderator using a join link that was originally created for viewer access. This vulnerability has been patched in version(s) 2.6.18, 2.7.8 and 3.0.0-alpha.7.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-28T21:15:03.180",
    "last_modified": "2024-11-21T09:26:09.023",
    "fix_date": "2024-05-15T14:38:58Z"
  },
  "references": [
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/commit/a9d436accdcd26ea66bed9f391488ac128cd62d1",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/commit/ea6e9461dceae8fa593543d8c686f77bb8677e72",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/pull/20279",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/security/advisories/GHSA-4m48-49h7-f3c4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/commit/a9d436accdcd26ea66bed9f391488ac128cd62d1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/commit/ea6e9461dceae8fa593543d8c686f77bb8677e72",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/pull/20279",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/security/advisories/GHSA-4m48-49h7-f3c4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.872779",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "bigbluebutton",
    "owner": "bigbluebutton",
    "created_at": "2010-05-25T01:42:41Z",
    "updated_at": "2025-01-25T04:35:13Z",
    "pushed_at": "2025-01-25T21:15:26Z",
    "size": 894000,
    "stars": 8643,
    "forks": 5968,
    "open_issues": 763,
    "watchers": 8643,
    "has_security_policy": false,
    "default_branch": "v3.0.x-release",
    "protected_branches": [],
    "languages": {
      "JavaScript": 4131482,
      "Scala": 1662467,
      "TypeScript": 1617019,
      "Java": 1176175,
      "Ruby": 397918,
      "Shell": 282165,
      "Groovy": 165952,
      "CSS": 162616,
      "Go": 113680,
      "PLpgSQL": 97612,
      "Python": 75857,
      "HTML": 26837,
      "Batchfile": 2375,
      "Gherkin": 925,
      "Dockerfile": 59,
      "PostScript": 36
    },
    "commit_activity": {
      "total_commits_last_year": 3299,
      "avg_commits_per_week": 63.44230769230769,
      "days_active_last_year": 262
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-26T07:48:59.900805"
  }
}