{
  "cve_id": "CVE-2024-38989",
  "github_data": {
    "repository": "izatop/bunt",
    "fix_commit": "c55201a8cee03e5282f99874dead988c80d31db7",
    "related_commits": [
      "c55201a8cee03e5282f99874dead988c80d31db7"
    ],
    "patch_url": "https://github.com/izatop/bunt/commit/c55201a8cee03e5282f99874dead988c80d31db7.patch",
    "fix_commit_details": {
      "sha": "c55201a8cee03e5282f99874dead988c80d31db7",
      "commit_date": "2024-03-17T22:57:31Z",
      "author": {
        "login": "izatop",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: closes #27",
        "length": 15,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 73,
        "additions": 50,
        "deletions": 23
      },
      "files": [
        {
          "filename": "packages/app/src/TransformRequest/MultipartFormDataTransform.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 5,
          "patch": "@@ -17,10 +17,9 @@ export const MultipartFormDataTransform = async <T = unknown>(request: IRequest)\n \n     const rs = await request.createReadableStream();\n     const defer = new Defer<void>();\n-    const result: Record<string, any> = {};\n     const pending: Defer<void>[] = [];\n \n-    const {parseFieldName, inject} = QueryString;\n+    const qs = new QueryString();\n \n     bb\n         .on(\"file\", (name, file, info) => {\n@@ -37,7 +36,7 @@ export const MultipartFormDataTransform = async <T = unknown>(request: IRequest)\n                 tmpname,\n             };\n \n-            inject(parseFieldName(name), value, result);\n+            qs.push(name, value);\n \n             const def = new Defer<void>();\n             pending.push(def);\n@@ -48,7 +47,7 @@ export const MultipartFormDataTransform = async <T = unknown>(request: IRequest)\n         })\n         .on(\"field\", (name, value) => {\n             try {\n-                inject(parseFieldName(name), JSON.parse(value), result);\n+                qs.push(name, JSON.parse(value));\n             } catch {\n                 // skip\n             }\n@@ -60,5 +59,5 @@ export const MultipartFormDataTransform = async <T = unknown>(request: IRequest)\n     await defer;\n     await Promise.all(pending);\n \n-    return result as any;\n+    return qs.toObject();\n };"
        },
        {
          "filename": "packages/util/src/qs.ts",
          "status": "modified",
          "additions": 23,
          "deletions": 4,
          "patch": "@@ -1,15 +1,34 @@\n+import {Rec} from \"@bunt/type\";\n+\n const isNumeric = (key: string): boolean => !isNaN(+key);\n \n export class QueryString {\n-    public static parseFieldName = (name: string): string[] => {\n+    readonly #value: Rec;\n+\n+    constructor(entries: [field: string, value: unknown][] = []) {\n+        this.#value = Object.create(null);\n+        for (const [field, value] of entries) {\n+            this.push(field, value);\n+        }\n+    }\n+\n+    public parseField(name: string): string[] {\n         const base = name.replace(/\\[.+/, \"\");\n \n         return [base, ...[...name.matchAll(/\\[([^\\]]*)\\]/ig)].map(([, key]) => key)];\n-    };\n+    }\n+\n+    public push(name: string, value: unknown): Rec {\n+        return this.#inject(this.parseField(name), value, this.#value);\n+    }\n+\n+    public toObject(): Rec {\n+        return this.#value;\n+    }\n \n-    public static inject = ([key, ...paths]: string[], value: unknown, fields: any = {}): any => {\n+    #inject = ([key, ...paths]: string[], value: unknown, fields: Rec = Object.create(null)): Rec => {\n         if (paths.length > 0) {\n-            fields[key] = this.inject(paths, value, fields[key]);\n+            fields[key] = this.#inject(paths, value, fields[key]);\n         } else {\n             fields[key] = value;\n         }"
        },
        {
          "filename": "packages/util/test/src/qs/QueryStirng.test.ts",
          "status": "modified",
          "additions": 23,
          "deletions": 14,
          "patch": "@@ -1,57 +1,66 @@\n import {QueryString} from \"../../../src\";\n \n describe(\"QueryString\", () => {\n+    test(\"Prevent pollution\", () => {\n+        const injectTest = {};\n+        const injectKey = \"__proto__[polluted]\";\n+\n+        const qs = new QueryString();\n+        qs.push(injectKey, true);\n+\n+        expect(Reflect.has(Reflect.get(injectTest, \"__proto__\"), \"polluted\")).toBeFalsy();\n+    });\n+\n     test(\"Base\", () => {\n+        const qs = new QueryString();\n         const field = \"foo[bar][baz][0]\";\n-        const parsed = QueryString.parseFieldName(field);\n+        const parsed = qs.parseField(field);\n \n         expect(parsed)\n             .toEqual([\"foo\", \"bar\", \"baz\", \"0\"]);\n \n-        expect(QueryString.inject(parsed, 1))\n+        expect(qs.push(field, 1))\n             .toEqual({foo: {bar: {baz: [1]}}});\n     });\n \n     test(\"Array\", () => {\n+        const qs = new QueryString();\n         const map: [string, any][] = [\n             [\"foo[0]\", 1],\n             [\"foo[1]\", 2],\n             [\"foo[2]\", 3],\n         ];\n \n-        const result = {};\n         for (const [field, value] of map) {\n-            const paths = QueryString.parseFieldName(field);\n-            QueryString.inject(paths, value, result);\n+            qs.push(field, value);\n         }\n \n-        expect(result).toEqual({foo: [1, 2, 3]});\n+        expect(qs.toObject()).toEqual({foo: [1, 2, 3]});\n     });\n \n     test(\"Nested array\", () => {\n+        const qs = new QueryString();\n         const map: [string, any][] = [\n             [\"foo[0][a]\", 1],\n             [\"foo[0][b]\", 2],\n             [\"foo[1][c]\", 3],\n             [\"foo[1][d]\", 4],\n         ];\n \n-        const result = {};\n         for (const [field, value] of map) {\n-            const paths = QueryString.parseFieldName(field);\n-            QueryString.inject(paths, value, result);\n+            qs.push(field, value);\n         }\n \n-        expect(result).toEqual({foo: [{a: 1, b: 2}, {c: 3, d: 4}]});\n+        expect(qs.toObject()).toEqual({foo: [{a: 1, b: 2}, {c: 3, d: 4}]});\n     });\n \n     test.each([\n         [\"foo\", 1, {foo: 1}],\n         [\"foo[bar]\", 1, {foo: {bar: 1}}],\n         [\"foo[bar][0]\", 1, {foo: {bar: [1]}}],\n         [\"foo[0][bar]\", 1, {foo: [{bar: 1}]}],\n-    ])(\"Variants\", (field, value, res) => (\n-        expect(QueryString.inject(QueryString.parseFieldName(field), value))\n-            .toEqual(res)\n-    ));\n+    ])(\"Variants\", (field, value, res) => {\n+        const qs = new QueryString([[field, value]]);\n+        expect(qs.toObject()).toEqual(res);\n+    });\n });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cc0b2435e498094c510d637bb7e0f36f553a46e7",
            "date": "2024-11-21T16:59:32Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "c27a2bb68e76989b6e31e438ccaf8007b830b80f",
            "date": "2024-11-21T16:58:09Z",
            "author_login": "izatop"
          },
          {
            "sha": "8b3651b93bd2b77f26f333098a354ec8972397b9",
            "date": "2024-10-01T14:37:40Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "1205616aaa3d6d28a1c3f1819e57bdeba69a29fc",
            "date": "2024-10-01T14:36:17Z",
            "author_login": "izatop"
          },
          {
            "sha": "943c145998637d6495c58ec0d687e2e1482a3d35",
            "date": "2024-10-01T14:05:07Z",
            "author_login": "izatop"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-1321",
    "description": "izatop bunt v0.29.19 was discovered to contain a prototype pollution via the component /esm/qs.js. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-12T13:38:24.333",
    "last_modified": "2024-08-13T14:35:23.670",
    "fix_date": "2024-03-17T22:57:31Z"
  },
  "references": [
    {
      "url": "https://gist.github.com/mestrtee/5e9830fb180a34d65f04fafb52d2b94b",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/izatop/bunt/commit/c55201a8cee03e5282f99874dead988c80d31db7",
      "source": "cve@mitre.org",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.545206",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bunt",
    "owner": "izatop",
    "created_at": "2019-11-28T12:12:17Z",
    "updated_at": "2024-11-21T16:59:37Z",
    "pushed_at": "2024-11-21T16:59:33Z",
    "size": 421275,
    "stars": 0,
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "TypeScript": 338545,
      "JavaScript": 2876,
      "Shell": 842
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:28:51.249781"
  }
}