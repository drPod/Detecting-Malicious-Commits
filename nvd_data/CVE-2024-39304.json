{
  "cve_id": "CVE-2024-39304",
  "github_data": {
    "repository": "ChurchCRM/CRM",
    "fix_commit": "e3bd7bfbf33f01148df0ef1acdb0cf2c2b878b08",
    "related_commits": [
      "e3bd7bfbf33f01148df0ef1acdb0cf2c2b878b08",
      "e3bd7bfbf33f01148df0ef1acdb0cf2c2b878b08"
    ],
    "patch_url": "https://github.com/ChurchCRM/CRM/commit/e3bd7bfbf33f01148df0ef1acdb0cf2c2b878b08.patch",
    "fix_commit_details": {
      "sha": "e3bd7bfbf33f01148df0ef1acdb0cf2c2b878b08",
      "commit_date": "2024-07-02T03:50:40Z",
      "author": {
        "login": "DAcodedBEAT",
        "type": "User",
        "stats": {
          "total_commits": 811,
          "average_weekly_commits": 1.6966527196652719,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 54
        }
      },
      "commit_message": {
        "title": "Fix sqli vuln (#7086)",
        "length": 130,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 88,
        "additions": 49,
        "deletions": 39
      },
      "files": [
        {
          "filename": "src/AddDonors.php",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "patch": "@@ -10,17 +10,13 @@\n if (array_key_exists('linkBack', $_GET)) {\n     InputUtils::legacyFilterInput($_GET['linkBack']);\n }\n-$iFundRaiserID = InputUtils::legacyFilterInput($_GET['FundRaiserID']);\n+$iFundRaiserID = InputUtils::filterInt($_GET['FundRaiserID']);\n \n if ($linkBack === '') {\n     $linkBack = \"PaddleNumList.php?FundRaiserID=$iFundRaiserID\";\n }\n \n if ($iFundRaiserID > 0) {\n-    // Get the current fund raiser record\n-    $sSQL = 'SELECT * from fundraiser_fr WHERE fr_ID = ' . $iFundRaiserID;\n-    $rsFRR = RunQuery($sSQL);\n-    extract(mysqli_fetch_array($rsFRR));\n     // Set current fundraiser\n     $_SESSION['iCurrentFundraiser'] = $iFundRaiserID;\n } else {"
        },
        {
          "filename": "src/GetText.php",
          "status": "modified",
          "additions": 17,
          "deletions": 8,
          "patch": "@@ -1,19 +1,26 @@\n <?php\n \n+use ChurchCRM\\model\\ChurchCRM\\EventQuery;\n+use ChurchCRM\\Utils\\InputUtils;\n+use ChurchCRM\\Utils\\LoggerUtils;\n+\n require 'Include/Config.php';\n require 'Include/Functions.php';\n \n-$sSQL = 'SELECT * FROM events_event WHERE event_id = ' . $_GET['EID'];\n-$rsOpps = RunQuery($sSQL);\n-$aRow = mysqli_fetch_array($rsOpps, MYSQLI_BOTH) || die(mysqli_error($cnInfoCentral));\n-extract($aRow);\n-$aEventID = $event_id;\n-$aEventTitle = $event_title;\n-$aEventText = $event_text;\n+$eidQueryParam = $_GET['EID'];\n+$sanitizedEidQueryParam = InputUtils::filterInt($eidQueryParam);\n+if ($eidQueryParam !== (string) $sanitizedEidQueryParam) {\n+    LoggerUtils::getAppLogger()->warning('Provided event ID does not match sanitized event ID', ['providedEventId' => $eidQueryParam, 'sanitizedEventId' => $sanitizedEidQueryParam]);\n+}\n+\n+$event = EventQuery::create()->findOneById($sanitizedEidQueryParam);\n+$aEventID = $event->getId();\n+$aEventTitle = $event->getTitle();\n+$aEventText = $event->getText();\n ?>\n <html>\n <head><title><?= gettext(\"Text from\") ?> <?= $aEventID ?></title></head>\n-</html>\n+<body>\n <table cellpadding=\"4\" align=\"center\" cellspacing=\"0\" width=\"100%\">\n   <caption>\n     <h3><?= gettext('Text for Event ID: ') . $aEventTitle ?></h3>\n@@ -26,4 +33,6 @@\n       <input type=\"button\" name=\"Action\" value=\"Close Window\" class=\"btn btn-default\" onclick=\"javascript:window.close()\">\n     </td>\n   </tr>\n+</table>\n+</body>\n </html>"
        },
        {
          "filename": "src/VolunteerOpportunityEditor.php",
          "status": "modified",
          "additions": 10,
          "deletions": 10,
          "patch": "@@ -35,15 +35,15 @@\n     $sAction = InputUtils::legacyFilterInput($_GET['act']);\n }\n if (array_key_exists('Opp', $_GET)) {\n-    $iOpp = InputUtils::legacyFilterInput($_GET['Opp'], 'int');\n+    $iOpp = InputUtils::filterInt($_GET['Opp']);\n }\n if (array_key_exists('row_num', $_GET)) {\n-    $iRowNum = InputUtils::legacyFilterInput($_GET['row_num'], 'int');\n+    $iRowNum = InputUtils::filterInt($_GET['row_num']);\n }\n \n $sDeleteError = '';\n \n-if (($sAction == 'delete') && $iOpp > 0) {\n+if ($sAction === 'delete' && $iOpp > 0) {\n     // Delete Confirmation Page\n \n     // Security: User must have Delete records permission\n@@ -105,7 +105,7 @@\n     exit;\n }\n \n-if (($sAction == 'ConfDelete') && $iOpp > 0) {\n+if ($sAction === 'ConfDelete' && $iOpp > 0) {\n     // Security: User must have Delete records permission\n     // Otherwise, redirect to the main menu\n     AuthenticationManager::redirectHomeIfFalse(AuthenticationManager::getCurrentUser()->isDeleteRecordsEnabled());\n@@ -124,7 +124,7 @@\n     RunQuery($sSQL);\n }\n \n-if ($iRowNum == 0) {\n+if ($iRowNum === 0) {\n     // Skip data integrity check if we are only changing the ordering\n     // by moving items up or down.\n     // System response is too slow to do these checks every time the page\n@@ -192,7 +192,7 @@\n         if (array_key_exists($nameName, $_POST)) {\n             $aNameFields[$iFieldID] = InputUtils::legacyFilterInput($_POST[$nameName]);\n \n-            if (strlen($aNameFields[$iFieldID]) == 0) {\n+            if (strlen($aNameFields[$iFieldID]) === 0) {\n                 $aNameErrors[$iFieldID] = true;\n                 $bErrorFlag = true;\n             } else {\n@@ -222,7 +222,7 @@\n     if (isset($_POST['AddField'])) { // Check if we're adding a VolOp\n         $newFieldName = InputUtils::legacyFilterInput($_POST['newFieldName']);\n         $newFieldDesc = InputUtils::legacyFilterInput($_POST['newFieldDesc']);\n-        if (strlen($newFieldName) == 0) {\n+        if (strlen($newFieldName) === 0) {\n             $bNewNameError = true;\n         } else { // Insert into table\n             // There must be an easier way to get the number of rows in order to generate the last order number.\n@@ -274,9 +274,9 @@\n                     if ($iRowNum && $sAction != '') {\n                         // cast as int and couple with switch for sql injection prevention for $row_num\n                         $swapRow = $iRowNum;\n-                        if ($sAction == 'up') {\n+                        if ($sAction === 'up') {\n                             $newRow = --$iRowNum;\n-                        } elseif ($sAction == 'down') {\n+                        } elseif ($sAction === 'down') {\n                             $newRow = ++$iRowNum;\n                         } else {\n                             $newRow = $iRowNum;\n@@ -346,7 +346,7 @@\n                         echo '<tr>';\n                         echo '<td class=\"LabelColumn\"><b>' . $row . '</b></td>';\n                         echo '<td class=\"TextColumn\">';\n-                        if ($row == 1) {\n+                        if ($row === 1) {\n                             echo '<a href=\"VolunteerOpportunityEditor.php?act=na&amp;row_num=' . $row . \"\\\"><i class='fa fa-fw'></i></a>\";\n                         } else {\n                             echo '<a href=\"VolunteerOpportunityEditor.php?act=up&amp;row_num=' . $row . \"\\\"> <i class='fa fa-arrow-up'></i></a> \";"
        },
        {
          "filename": "src/WhyCameEditor.php",
          "status": "modified",
          "additions": 21,
          "deletions": 16,
          "patch": "@@ -3,18 +3,22 @@\n require 'Include/Config.php';\n require 'Include/Functions.php';\n \n+use ChurchCRM\\model\\ChurchCRM\\PersonQuery;\n use ChurchCRM\\model\\ChurchCRM\\WhyCame;\n use ChurchCRM\\model\\ChurchCRM\\WhyCameQuery;\n use ChurchCRM\\Utils\\InputUtils;\n+use ChurchCRM\\Utils\\LoggerUtils;\n use ChurchCRM\\Utils\\RedirectUtils;\n \n+$logger = LoggerUtils::getAppLogger();\n+\n $linkBack = InputUtils::legacyFilterInput($_GET['linkBack']);\n-$iPerson = InputUtils::legacyFilterInput($_GET['PersonID']);\n-$iWhyCameID = InputUtils::legacyFilterInput($_GET['WhyCameID']);\n+$iPerson = InputUtils::filterInt($_GET['PersonID']);\n+$iWhyCameID = InputUtils::filterInt($_GET['WhyCameID']);\n \n-$sSQL = 'SELECT per_FirstName, per_LastName FROM person_per where per_ID = ' . $iPerson;\n-$rsPerson = RunQuery($sSQL);\n-extract(mysqli_fetch_array($rsPerson));\n+$person = PersonQuery::create()->findOneById($iPerson);\n+$per_FirstName = $person->getFirstName();\n+$per_LastName = $person->getLastName();\n \n $sPageTitle = gettext('\"Why Came\" notes for ') . $per_FirstName . ' ' . $per_LastName;\n \n@@ -56,17 +60,18 @@\n         }\n     }\n } else {\n-    $sSQL = 'SELECT * FROM whycame_why WHERE why_per_ID = ' . $iPerson;\n-    $rsWhyCame = RunQuery($sSQL);\n-    if (mysqli_num_rows($rsWhyCame) > 0) {\n-        extract(mysqli_fetch_array($rsWhyCame));\n+    $whyCames = WhyCameQuery::create()->findByPerId($iPerson);\n+    if (count($whyCames) > 0) {\n+        if (count($whyCames) > 1) {\n+            $logger->warning('multiple why came records found for person', ['personId' => $iPerson]);\n+        }\n+        $whyCame = $whyCames[0];\n \n-        $iWhyCameID = $why_ID;\n-        $tJoin = $why_join;\n-        $tCome = $why_come;\n-        $tSuggest = $why_suggest;\n-        $tHearOfUs = $why_hearOfUs;\n-    } else {\n+        $iWhyCameID = $whyCame->getId();\n+        $tJoin = $whyCame->getJoin();\n+        $tCome = $whyCame->getCome();\n+        $tSuggest = $whyCame->getSuggest();\n+        $tHearOfUs = $whyCame->getHearOfUs();\n     }\n }\n \n@@ -104,8 +109,8 @@\n                                                                 } ?>';\">\n           </td>\n         </tr>\n+      </table>\n     </form>\n-    </table>\n   </div>\n </div>\n <?php"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b8163e4a02ea7ce0386296f91a5e78feda566b4c",
            "date": "2025-01-06T20:31:46Z",
            "author_login": "DawoudIO"
          },
          {
            "sha": "262844d8979dc3b5b4b12fcf03f98c17733f6902",
            "date": "2025-01-06T01:15:32Z",
            "author_login": "DawoudIO"
          },
          {
            "sha": "20b0ac23089c77d83f8ef3b54de21b9c5630b7fa",
            "date": "2025-01-02T22:35:43Z",
            "author_login": "DawoudIO"
          },
          {
            "sha": "3395d1dccbf3a5c9d3e77d2603831974818fa560",
            "date": "2025-01-01T23:35:31Z",
            "author_login": "DawoudIO"
          },
          {
            "sha": "240f45f69e25002942891b5f19a66099bfe5a82f",
            "date": "2025-01-01T23:34:29Z",
            "author_login": "DawoudIO"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-89",
    "description": "ChurchCRM is an open-source church management system. Versions of the application prior to 5.9.2 are vulnerable to an authenticated SQL injection due to an improper sanitization of user input. Authentication is required, but no elevated privileges are necessary. This allows attackers to inject SQL statements directly into the database query due to inadequate sanitization of the EID parameter in in a GET request to `/GetText.php`. Version 5.9.2 patches the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-26T18:15:03.557",
    "last_modified": "2024-11-21T09:27:25.420",
    "fix_date": "2024-07-02T03:50:40Z"
  },
  "references": [
    {
      "url": "https://github.com/ChurchCRM/CRM/commit/e3bd7bfbf33f01148df0ef1acdb0cf2c2b878b08",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ChurchCRM/CRM/security/advisories/GHSA-2rh6-gr3h-83j9",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ChurchCRM/CRM/commit/e3bd7bfbf33f01148df0ef1acdb0cf2c2b878b08",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ChurchCRM/CRM/security/advisories/GHSA-2rh6-gr3h-83j9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.481165",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "CRM",
    "owner": "ChurchCRM",
    "created_at": "2015-02-16T06:38:40Z",
    "updated_at": "2025-01-13T21:37:06Z",
    "pushed_at": "2025-01-09T01:12:05Z",
    "size": 148574,
    "stars": 656,
    "forks": 452,
    "open_issues": 7,
    "watchers": 656,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "Notifications"
    ],
    "languages": {
      "PHP": 2280991,
      "JavaScript": 296932,
      "TypeScript": 30156,
      "SCSS": 13496,
      "Twig": 10636,
      "Shell": 5906,
      "HTML": 4839,
      "CSS": 3535,
      "Io": 394
    },
    "commit_activity": {
      "total_commits_last_year": 2005,
      "avg_commits_per_week": 38.55769230769231,
      "days_active_last_year": 169
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:12:26.693828"
  }
}