{
  "cve_id": "CVE-2024-39309",
  "github_data": {
    "repository": "parse-community/parse-server",
    "fix_commit": "2edf1e4c0363af01e97a7fbc97694f851b7d1ff3",
    "related_commits": [
      "2edf1e4c0363af01e97a7fbc97694f851b7d1ff3",
      "f332d54577608c5ad927255e06d8c694e2e0ff5b",
      "2edf1e4c0363af01e97a7fbc97694f851b7d1ff3",
      "f332d54577608c5ad927255e06d8c694e2e0ff5b"
    ],
    "patch_url": "https://github.com/parse-community/parse-server/commit/2edf1e4c0363af01e97a7fbc97694f851b7d1ff3.patch",
    "fix_commit_details": {
      "sha": "2edf1e4c0363af01e97a7fbc97694f851b7d1ff3",
      "commit_date": "2024-06-30T01:34:08Z",
      "author": {
        "login": "mtrezza",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: SQL injection when using Parse Server with PostgreSQL; fixes security vulnerability [GHSA-c2hr-cqg6-8j6r](https://github.com/parse-community/parse-server/security/advisories/GHSA-c2hr-cqg6-8j6r) (#9167)",
        "length": 207,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 23,
        "additions": 14,
        "deletions": 9
      },
      "files": [
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -125,6 +125,7 @@\n     \"test:mongodb:5.3.2\": \"npm run test:mongodb --dbversion=5.3.2\",\n     \"test:mongodb:6.0.2\": \"npm run test:mongodb --dbversion=6.0.2\",\n     \"test:mongodb:7.0.1\": \"npm run test:mongodb --dbversion=7.0.1\",\n+    \"test:postgres:testonly\": \"cross-env PARSE_SERVER_TEST_DB=postgres PARSE_SERVER_TEST_DATABASE_URI=postgres://postgres:password@localhost:5432/parse_server_postgres_adapter_test_database npm run testonly\",\n     \"pretest\": \"cross-env MONGODB_VERSION=${MONGODB_VERSION:=5.3.2} MONGODB_TOPOLOGY=${MONGODB_TOPOLOGY:=standalone} mongodb-runner start -t ${MONGODB_TOPOLOGY} --version ${MONGODB_VERSION} -- --port 27017\",\n     \"testonly\": \"cross-env MONGODB_VERSION=${MONGODB_VERSION:=5.3.2} MONGODB_TOPOLOGY=${MONGODB_TOPOLOGY:=standalone} TESTING=1 jasmine\",\n     \"test\": \"npm run testonly\","
        },
        {
          "filename": "src/Adapters/Storage/Postgres/PostgresStorageAdapter.js",
          "status": "modified",
          "additions": 13,
          "deletions": 9,
          "patch": "@@ -2614,16 +2614,16 @@ function isAnyValueRegexStartsWith(values) {\n   });\n }\n \n-function createLiteralRegex(remaining) {\n+function createLiteralRegex(remaining: string) {\n   return remaining\n     .split('')\n     .map(c => {\n-      const regex = RegExp('[0-9 ]|\\\\p{L}', 'u'); // Support all unicode letter chars\n+      const regex = RegExp('[0-9 ]|\\\\p{L}', 'u'); // Support all Unicode letter chars\n       if (c.match(regex) !== null) {\n-        // don't escape alphanumeric characters\n+        // Don't escape alphanumeric characters\n         return c;\n       }\n-      // escape everything else (single quotes with single quotes, everything else with a backslash)\n+      // Escape everything else (single quotes with single quotes, everything else with a backslash)\n       return c === `'` ? `''` : `\\\\${c}`;\n     })\n     .join('');\n@@ -2633,14 +2633,14 @@ function literalizeRegexPart(s: string) {\n   const matcher1 = /\\\\Q((?!\\\\E).*)\\\\E$/;\n   const result1: any = s.match(matcher1);\n   if (result1 && result1.length > 1 && result1.index > -1) {\n-    // process regex that has a beginning and an end specified for the literal text\n+    // Process Regex that has a beginning and an end specified for the literal text\n     const prefix = s.substring(0, result1.index);\n     const remaining = result1[1];\n \n     return literalizeRegexPart(prefix) + createLiteralRegex(remaining);\n   }\n \n-  // process regex that has a beginning specified for the literal text\n+  // Process Regex that has a beginning specified for the literal text\n   const matcher2 = /\\\\Q((?!\\\\E).*)$/;\n   const result2: any = s.match(matcher2);\n   if (result2 && result2.length > 1 && result2.index > -1) {\n@@ -2650,14 +2650,18 @@ function literalizeRegexPart(s: string) {\n     return literalizeRegexPart(prefix) + createLiteralRegex(remaining);\n   }\n \n-  // remove all instances of \\Q and \\E from the remaining text & escape single quotes\n+  // Remove problematic chars from remaining text\n   return s\n+    // Remove all instances of \\Q and \\E\n     .replace(/([^\\\\])(\\\\E)/, '$1')\n     .replace(/([^\\\\])(\\\\Q)/, '$1')\n     .replace(/^\\\\E/, '')\n     .replace(/^\\\\Q/, '')\n-    .replace(/([^'])'/g, `$1''`)\n-    .replace(/^'([^'])/, `''$1`);\n+    // Ensure even number of single quote sequences by adding an extra single quote if needed;\n+    // this ensures that every single quote is escaped\n+    .replace(/'+/g, match => {\n+      return match.length % 2 === 0 ? match : match + \"'\";\n+    });\n }\n \n var GeoPointCoder = {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ad0a7bc0ba1823ada299a6476402420fdc4c4467",
            "date": "2025-01-14T18:51:58Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "28b3edee4e76679dedee9fe115283110fd952678",
            "date": "2025-01-13T15:19:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "1b61cab81c4206ce135f1239f17a53dabbc698d7",
            "date": "2025-01-13T14:47:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a0efad88d2177f027ee3709beba13282a6ca9d35",
            "date": "2025-01-12T20:55:48Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "bb1daafef0f5f0b6a9c9b33c9d7e0529fd49afbf",
            "date": "2025-01-12T18:53:43Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-89",
    "description": "Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. A vulnerability in versions prior to 6.5.7 and 7.1.0 allows SQL injection when Parse Server is configured to use the PostgreSQL database. The algorithm to detect SQL injection has been improved in versions 6.5.7 and 7.1.0. No known workarounds are available.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-01T22:15:03.253",
    "last_modified": "2024-11-21T09:27:25.990",
    "fix_date": "2024-06-30T01:34:08Z"
  },
  "references": [
    {
      "url": "https://github.com/parse-community/parse-server/commit/2edf1e4c0363af01e97a7fbc97694f851b7d1ff3",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/f332d54577608c5ad927255e06d8c694e2e0ff5b",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/parse-community/parse-server/pull/9167",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/parse-community/parse-server/pull/9168",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/parse-community/parse-server/security/advisories/GHSA-c2hr-cqg6-8j6r",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/2edf1e4c0363af01e97a7fbc97694f851b7d1ff3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/f332d54577608c5ad927255e06d8c694e2e0ff5b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/parse-community/parse-server/pull/9167",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/parse-community/parse-server/pull/9168",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/parse-community/parse-server/security/advisories/GHSA-c2hr-cqg6-8j6r",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.882420",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "parse-server",
    "owner": "parse-community",
    "created_at": "2016-01-28T18:29:14Z",
    "updated_at": "2025-01-13T16:51:06Z",
    "pushed_at": "2025-01-14T11:16:34Z",
    "size": 73208,
    "stars": 20994,
    "forks": 4781,
    "open_issues": 474,
    "watchers": 20994,
    "has_security_policy": false,
    "default_branch": "alpha",
    "protected_branches": [
      "alpha",
      "beta",
      "release",
      "release-4.x.x",
      "release-5.x.x",
      "release-6.x.x",
      "release-7.x.x"
    ],
    "languages": {
      "JavaScript": 4248231,
      "HTML": 25876,
      "Shell": 7825,
      "Handlebars": 2113,
      "Dockerfile": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:26:59.166995"
  }
}