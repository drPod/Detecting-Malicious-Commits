{
  "cve_id": "CVE-2024-39315",
  "github_data": {
    "repository": "pomerium/pomerium",
    "fix_commit": "4c7c4320afb2ced70ba19b46de1ac4383f3daa48",
    "related_commits": [
      "4c7c4320afb2ced70ba19b46de1ac4383f3daa48",
      "4c7c4320afb2ced70ba19b46de1ac4383f3daa48"
    ],
    "patch_url": "https://github.com/pomerium/pomerium/commit/4c7c4320afb2ced70ba19b46de1ac4383f3daa48.patch",
    "fix_commit_details": {
      "sha": "4c7c4320afb2ced70ba19b46de1ac4383f3daa48",
      "commit_date": "2024-06-25T19:24:18Z",
      "author": {
        "login": "backport-actions-token[bot]",
        "type": "Bot",
        "stats": null
      },
      "commit_message": {
        "title": "core/userinfo: remove excess userinfo data (#5148)",
        "length": 157,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 89,
        "additions": 59,
        "deletions": 30
      },
      "files": [
        {
          "filename": "internal/handlers/userinfo.go",
          "status": "modified",
          "additions": 59,
          "deletions": 12,
          "patch": "@@ -1,11 +1,8 @@\n package handlers\n \n import (\n-\t\"encoding/json\"\n \t\"net/http\"\n \n-\t\"google.golang.org/protobuf/encoding/protojson\"\n-\n \t\"github.com/pomerium/datasource/pkg/directory\"\n \t\"github.com/pomerium/pomerium/internal/httputil\"\n \t\"github.com/pomerium/pomerium/pkg/grpc/identity\"\n@@ -39,15 +36,9 @@ func (data UserInfoData) ToJSON() map[string]any {\n \tm := map[string]any{}\n \tm[\"csrfToken\"] = data.CSRFToken\n \tm[\"isImpersonated\"] = data.IsImpersonated\n-\tif bs, err := protojson.Marshal(data.Session); err == nil {\n-\t\tm[\"session\"] = json.RawMessage(bs)\n-\t}\n-\tif bs, err := protojson.Marshal(data.User); err == nil {\n-\t\tm[\"user\"] = json.RawMessage(bs)\n-\t}\n-\tif bs, err := protojson.Marshal(data.Profile); err == nil {\n-\t\tm[\"profile\"] = json.RawMessage(bs)\n-\t}\n+\tm[\"session\"] = data.sessionJSON()\n+\tm[\"user\"] = data.userJSON()\n+\tm[\"profile\"] = data.profileJSON()\n \tm[\"isEnterprise\"] = data.IsEnterprise\n \tif data.DirectoryUser != nil {\n \t\tm[\"directoryUser\"] = data.DirectoryUser\n@@ -62,6 +53,62 @@ func (data UserInfoData) ToJSON() map[string]any {\n \treturn m\n }\n \n+func (data UserInfoData) profileJSON() map[string]any {\n+\tif data.Profile == nil {\n+\t\treturn nil\n+\t}\n+\n+\tm := map[string]any{}\n+\tclaims := make(map[string]any)\n+\tfor k, v := range data.Profile.GetClaims().AsMap() {\n+\t\tclaims[k] = v\n+\t}\n+\tm[\"claims\"] = m\n+\treturn m\n+}\n+\n+func (data UserInfoData) sessionJSON() map[string]any {\n+\tif data.Session == nil {\n+\t\treturn nil\n+\t}\n+\n+\tm := map[string]any{}\n+\tclaims := make(map[string]any)\n+\tfor k, vs := range data.Session.GetClaims() {\n+\t\tclaims[k] = vs.AsSlice()\n+\t}\n+\tm[\"claims\"] = claims\n+\tvar deviceCredentials []any\n+\tfor _, dc := range data.Session.GetDeviceCredentials() {\n+\t\tdeviceCredentials = append(deviceCredentials, map[string]any{\n+\t\t\t\"typeId\": dc.GetTypeId(),\n+\t\t\t\"id\":     dc.GetId(),\n+\t\t})\n+\t}\n+\tm[\"deviceCredentials\"] = deviceCredentials\n+\tm[\"expiresAt\"] = data.Session.GetExpiresAt().AsTime()\n+\tm[\"id\"] = data.Session.GetId()\n+\tm[\"userId\"] = data.Session.GetUserId()\n+\treturn m\n+}\n+\n+func (data UserInfoData) userJSON() map[string]any {\n+\tif data.User == nil {\n+\t\treturn nil\n+\t}\n+\n+\tm := map[string]any{}\n+\tclaims := make(map[string]any)\n+\tfor k, vs := range data.User.GetClaims() {\n+\t\tclaims[k] = vs.AsSlice()\n+\t}\n+\tm[\"claims\"] = claims\n+\tm[\"deviceCredentialIds\"] = data.User.GetDeviceCredentialIds()\n+\tm[\"id\"] = data.User.GetId()\n+\tm[\"name\"] = data.User.GetName()\n+\treturn m\n+}\n+\n // UserInfo returns a handler that renders the user info page.\n func UserInfo(data UserInfoData) http.Handler {\n \treturn httputil.HandlerFunc(func(w http.ResponseWriter, r *http.Request) error {"
        },
        {
          "filename": "ui/src/types/index.ts",
          "status": "modified",
          "additions": 0,
          "deletions": 18,
          "patch": "@@ -14,35 +14,17 @@ export type Group = {\n };\n \n export type Profile = {\n-  providerId: string;\n-  idToken: string;\n-  oauthToken: string;\n   claims: Record<string, unknown>;\n };\n \n export type Session = {\n-  audience: string[];\n   claims: Claims;\n   deviceCredentials: Array<{\n     typeId: string;\n     id: string;\n   }>;\n   expiresAt: string;\n   id: string;\n-  idToken: {\n-    expiresAt: string;\n-    issuedAt: string;\n-    issuer: string;\n-    raw: string;\n-    subject: string;\n-  };\n-  issuedAt: string;\n-  oauthToken: {\n-    accessToken: string;\n-    expiresAt: string;\n-    refreshToken: string;\n-    tokenType: string;\n-  };\n   userId: string;\n };\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e5ede2d167ecdf21841174b4ee3d0320a2216c9b",
            "date": "2025-01-14T19:00:38Z",
            "author_login": "kralicky"
          },
          {
            "sha": "6502d6816255ba07fe7d85543ef5da999ac93dcd",
            "date": "2025-01-14T18:50:22Z",
            "author_login": "kralicky"
          },
          {
            "sha": "c571769adcedf57c85e7c44a23ac7e08706980d5",
            "date": "2025-01-14T17:13:56Z",
            "author_login": "calebdoxsey"
          },
          {
            "sha": "21b9e7890c750873a37ead73a2cc572c2de2423f",
            "date": "2025-01-08T21:57:57Z",
            "author_login": "kenjenkins"
          },
          {
            "sha": "95d4a24271feeb8b6b35d62ec3da72f7163a64b1",
            "date": "2025-01-06T18:41:42Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-201",
    "description": "Pomerium is an identity and context-aware access proxy. Prior to version 0.26.1, the Pomerium user info page (at `/.pomerium`) unintentionally included serialized OAuth2 access and ID tokens from the logged-in user's session. These tokens are not intended to be exposed to end users. This issue may be more severe in the presence of a cross-site scripting vulnerability in an upstream application proxied through Pomerium. If an attacker could insert a malicious script onto a web page proxied through Pomerium, that script could access these tokens by making a request to the `/.pomerium` endpoint. Upstream applications that authenticate only the ID token may be vulnerable to user impersonation using a token obtained in this manner. Note that an OAuth2 access token or ID token by itself is not sufficient to hijack a user's Pomerium session. Upstream applications should not be vulnerable to user impersonation via these tokens provided the application verifies the Pomerium JWT for each request, the connection between Pomerium and the application is secured by mTLS, or the connection between Pomerium and the application is otherwise secured at the network layer. The issue is patched in Pomerium v0.26.1. No known workarounds are available.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-02T20:15:06.110",
    "last_modified": "2024-11-21T09:27:26.610",
    "fix_date": "2024-06-25T19:24:18Z"
  },
  "references": [
    {
      "url": "https://github.com/pomerium/pomerium/commit/4c7c4320afb2ced70ba19b46de1ac4383f3daa48",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/pomerium/pomerium/security/advisories/GHSA-rrqr-7w59-637v",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/pomerium/pomerium/commit/4c7c4320afb2ced70ba19b46de1ac4383f3daa48",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/pomerium/pomerium/security/advisories/GHSA-rrqr-7w59-637v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.886258",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pomerium",
    "owner": "pomerium",
    "created_at": "2019-01-01T08:04:37Z",
    "updated_at": "2025-01-14T00:14:02Z",
    "pushed_at": "2025-01-13T22:43:45Z",
    "size": 72777,
    "stars": 4107,
    "forks": 285,
    "open_issues": 124,
    "watchers": 4107,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0-0-4",
      "0-0-5",
      "0-1-0",
      "0-2-0",
      "0-3-0",
      "0-4-0",
      "0-5-0",
      "0-6-0",
      "0-7-0",
      "0-8-0",
      "0-9-0",
      "0-10-0",
      "0-11-0",
      "0-12-0",
      "0-13-0",
      "0-14-0-doc-updates",
      "0-14-0-rc",
      "0-14-0",
      "0-15-0",
      "0-16-0",
      "0-17-0",
      "0-18-0",
      "0-19-0",
      "0-20-0",
      "0-21-0",
      "0-22-0",
      "0-23-0",
      "0-24-0",
      "0-25-0",
      "0-26-0"
    ],
    "languages": {
      "Go": 2725391,
      "TypeScript": 62427,
      "Jsonnet": 32800,
      "Shell": 9294,
      "Lua": 4397,
      "Makefile": 3867,
      "Python": 3228,
      "Dockerfile": 1093
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:30:58.767488"
  }
}