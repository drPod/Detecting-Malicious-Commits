{
  "cve_id": "CVE-2024-39696",
  "github_data": {
    "repository": "evmos/evmos",
    "fix_commit": "0a620e176617a835ac697eea494afea09185dfaf",
    "related_commits": [
      "0a620e176617a835ac697eea494afea09185dfaf",
      "0a620e176617a835ac697eea494afea09185dfaf"
    ],
    "patch_url": "https://github.com/evmos/evmos/commit/0a620e176617a835ac697eea494afea09185dfaf.patch",
    "fix_commit_details": {
      "sha": "0a620e176617a835ac697eea494afea09185dfaf",
      "commit_date": "2024-07-05T14:45:14Z",
      "author": {
        "login": "GAtom22",
        "type": "User",
        "stats": {
          "total_commits": 490,
          "average_weekly_commits": 2.832369942196532,
          "total_additions": 373357,
          "total_deletions": 176025,
          "weeks_active": 101
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-q6hg-6m9x-5g9c",
        "length": 1283,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 1846,
        "additions": 1668,
        "deletions": 178
      },
      "files": [
        {
          "filename": "precompiles/testutil/contracts/Counter.json",
          "status": "added",
          "additions": 64,
          "deletions": 0,
          "patch": "@@ -0,0 +1,64 @@\n+{\n+  \"_format\": \"hh-sol-artifact-1\",\n+  \"contractName\": \"Counter\",\n+  \"sourceName\": \"solidity/precompiles/testutil/contracts/Counter.sol\",\n+  \"abi\": [\n+    {\n+      \"anonymous\": false,\n+      \"inputs\": [\n+        {\n+          \"indexed\": false,\n+          \"internalType\": \"uint256\",\n+          \"name\": \"counter\",\n+          \"type\": \"uint256\"\n+        }\n+      ],\n+      \"name\": \"Added\",\n+      \"type\": \"event\"\n+    },\n+    {\n+      \"anonymous\": false,\n+      \"inputs\": [\n+        {\n+          \"indexed\": false,\n+          \"internalType\": \"uint256\",\n+          \"name\": \"counter\",\n+          \"type\": \"uint256\"\n+        }\n+      ],\n+      \"name\": \"Changed\",\n+      \"type\": \"event\"\n+    },\n+    {\n+      \"inputs\": [],\n+      \"name\": \"add\",\n+      \"outputs\": [],\n+      \"stateMutability\": \"nonpayable\",\n+      \"type\": \"function\"\n+    },\n+    {\n+      \"inputs\": [],\n+      \"name\": \"getCounter\",\n+      \"outputs\": [\n+        {\n+          \"internalType\": \"uint256\",\n+          \"name\": \"\",\n+          \"type\": \"uint256\"\n+        }\n+      ],\n+      \"stateMutability\": \"view\",\n+      \"type\": \"function\"\n+    },\n+    {\n+      \"inputs\": [],\n+      \"name\": \"subtract\",\n+      \"outputs\": [],\n+      \"stateMutability\": \"nonpayable\",\n+      \"type\": \"function\"\n+    }\n+  ],\n+  \"bytecode\": \"0x60806040526000805534801561001457600080fd5b50610397806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2be91f146100465780636deebae3146100505780638ada066e1461005a575b600080fd5b61004e610078565b005b610058610103565b005b6100626101d2565b60405161006f91906101f4565b60405180910390f35b60008081548092919061008a9061023e565b91905055507f64a55044d1f2eddebe1b90e8e2853e8e96931cefadbfa0b2ceb34bee360619416000546040516100c091906101f4565b60405180910390a17f938d2ee5be9cfb0f7270ee2eff90507e94b37625d9d2b3a61c97d30a4560b8296000546040516100f991906101f4565b60405180910390a1565b60008054116040518060400160405280600f81526020017f434f554e5445525f544f4f5f4c4f5700000000000000000000000000000000008152509061017f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101769190610316565b60405180910390fd5b5060008081548092919061019290610338565b91905055507f938d2ee5be9cfb0f7270ee2eff90507e94b37625d9d2b3a61c97d30a4560b8296000546040516101c891906101f4565b60405180910390a1565b60008054905090565b6000819050919050565b6101ee816101db565b82525050565b600060208201905061020960008301846101e5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610249826101db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361027b5761027a61020f565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156102c05780820151818401526020810190506102a5565b60008484015250505050565b6000601f19601f8301169050919050565b60006102e882610286565b6102f28185610291565b93506103028185602086016102a2565b61030b816102cc565b840191505092915050565b6000602082019050818103600083015261033081846102dd565b905092915050565b6000610343826101db565b9150600082036103565761035561020f565b5b60018203905091905056fea26469706673582212202870b2d78304eb0ec6b95f72bacf96e449481ecaa4d58a3ce786c1cba532075d64736f6c63430008130033\",\n+  \"deployedBytecode\": \"0x608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2be91f146100465780636deebae3146100505780638ada066e1461005a575b600080fd5b61004e610078565b005b610058610103565b005b6100626101d2565b60405161006f91906101f4565b60405180910390f35b60008081548092919061008a9061023e565b91905055507f64a55044d1f2eddebe1b90e8e2853e8e96931cefadbfa0b2ceb34bee360619416000546040516100c091906101f4565b60405180910390a17f938d2ee5be9cfb0f7270ee2eff90507e94b37625d9d2b3a61c97d30a4560b8296000546040516100f991906101f4565b60405180910390a1565b60008054116040518060400160405280600f81526020017f434f554e5445525f544f4f5f4c4f5700000000000000000000000000000000008152509061017f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101769190610316565b60405180910390fd5b5060008081548092919061019290610338565b91905055507f938d2ee5be9cfb0f7270ee2eff90507e94b37625d9d2b3a61c97d30a4560b8296000546040516101c891906101f4565b60405180910390a1565b60008054905090565b6000819050919050565b6101ee816101db565b82525050565b600060208201905061020960008301846101e5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610249826101db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361027b5761027a61020f565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156102c05780820151818401526020810190506102a5565b60008484015250505050565b6000601f19601f8301169050919050565b60006102e882610286565b6102f28185610291565b93506103028185602086016102a2565b61030b816102cc565b840191505092915050565b6000602082019050818103600083015261033081846102dd565b905092915050565b6000610343826101db565b9150600082036103565761035561020f565b5b60018203905091905056fea26469706673582212202870b2d78304eb0ec6b95f72bacf96e449481ecaa4d58a3ce786c1cba532075d64736f6c63430008130033\",\n+  \"linkReferences\": {},\n+  \"deployedLinkReferences\": {}\n+}"
        },
        {
          "filename": "precompiles/testutil/contracts/Counter.sol",
          "status": "added",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -0,0 +1,26 @@\n+// SPDX-License-Identifier: GPL-3.0\n+\n+pragma solidity >=0.7.0 <0.9.0;\n+\n+contract Counter {\n+  uint256 counter = 0;\n+  string internal constant ERROR_TOO_LOW = \"COUNTER_TOO_LOW\";\n+  event Changed(uint256 counter);\n+  event Added(uint256 counter);\n+\n+  function add() public {\n+    counter++;\n+    emit Added(counter);\n+    emit Changed(counter);\n+  }\n+\n+  function subtract() public {\n+    require(counter > 0, ERROR_TOO_LOW);\n+    counter--;\n+    emit Changed(counter);\n+  }\n+\n+  function getCounter() public view returns (uint256) {\n+    return counter;\n+  }\n+}"
        },
        {
          "filename": "precompiles/testutil/contracts/DistributionCaller.json",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": null
        },
        {
          "filename": "precompiles/testutil/contracts/FlashLoan.json",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1,7 +1,7 @@\n {\n   \"_format\": \"hh-sol-artifact-1\",\n   \"contractName\": \"FlashLoan\",\n-  \"sourceName\": \"contracts/evmos/testutil/contracts/FlashLoan.sol\",\n+  \"sourceName\": \"solidity/precompiles/testutil/contracts/FlashLoan.sol\",\n   \"abi\": [\n     {\n       \"inputs\": [],\n@@ -103,8 +103,8 @@\n       \"type\": \"function\"\n     }\n   ],\n-  \"bytecode\": \"\",\n-  \"deployedBytecode\": \"\",\n+  \"bytecode\": \"\",\n+  \"deployedBytecode\": \"0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80638da5cb5b146100515780638f5184301461006f578063ee52ad711461008b578063f12fae93146100bb575b600080fd5b6100596100eb565b6040516100669190610bdd565b60405180910390f35b61008960048036038101906100849190610db4565b61010f565b005b6100a560048036038101906100a09190610db4565b6101da565b6040516100b29190610e3e565b60405180910390f35b6100d560048036038101906100d09190610db4565b6107c9565b6040516100e29190610e3e565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061080073ffffffffffffffffffffffffffffffffffffffff166353266bbb8585856040518463ffffffff1660e01b815260040161015093929190610ee7565b6020604051808303816000875af115801561016f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101939190610f51565b9050806101d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cc90610fca565b60405180910390fd5b600080fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102629061105c565b60405180910390fd5b6000849050828173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016102ac92919061107c565b602060405180830381865afa1580156102c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ed91906110ba565b101561032e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032590611133565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103699190610bdd565b602060405180830381865afa158015610386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103aa91906110ba565b905060008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016103eb93929190611153565b6020604051808303816000875af115801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e9190610f51565b905080610470576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610467906111fc565b60405180910390fd5b848261047c919061124b565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104b59190610bdd565b602060405180830381865afa1580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f691906110ba565b14610536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052d906112cb565b60405180910390fd5b61080073ffffffffffffffffffffffffffffffffffffffff166353266bbb3388886040518463ffffffff1660e01b815260040161057593929190610ee7565b6020604051808303816000875af1158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b89190610f51565b9050806105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f190610fca565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106339190610bdd565b602060405180830381865afa158015610650573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067491906110ba565b91508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b81526004016106b19291906112eb565b6020604051808303816000875af11580156106d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f49190610f51565b5084826107019190611314565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161073a9190610bdd565b602060405180830381865afa158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b91906110ba565b146107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290611394565b60405180910390fd5b600193505050509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461085a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108519061105c565b60405180910390fd5b6000849050828173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b815260040161089b92919061107c565b602060405180830381865afa1580156108b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dc91906110ba565b101561091d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091490611133565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109589190610bdd565b602060405180830381865afa158015610975573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099991906110ba565b905060008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016109da93929190611153565b6020604051808303816000875af11580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190610f51565b905080610a5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a56906111fc565b60405180910390fd5b8482610a6b919061124b565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aa49190610bdd565b602060405180830381865afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae591906110ba565b14610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c906112cb565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16638f5184303388886040518463ffffffff1660e01b8152600401610b6293929190610ee7565b600060405180830381600087803b158015610b7c57600080fd5b505af1925050508015610b8d575060015b50600193505050509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bc782610b9c565b9050919050565b610bd781610bbc565b82525050565b6000602082019050610bf26000830184610bce565b92915050565b6000604051905090565b600080fd5b600080fd5b610c1581610bbc565b8114610c2057600080fd5b50565b600081359050610c3281610c0c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c8b82610c42565b810181811067ffffffffffffffff82111715610caa57610ca9610c53565b5b80604052505050565b6000610cbd610bf8565b9050610cc98282610c82565b919050565b600067ffffffffffffffff821115610ce957610ce8610c53565b5b610cf282610c42565b9050602081019050919050565b82818337600083830152505050565b6000610d21610d1c84610cce565b610cb3565b905082815260208101848484011115610d3d57610d3c610c3d565b5b610d48848285610cff565b509392505050565b600082601f830112610d6557610d64610c38565b5b8135610d75848260208601610d0e565b91505092915050565b6000819050919050565b610d9181610d7e565b8114610d9c57600080fd5b50565b600081359050610dae81610d88565b92915050565b600080600060608486031215610dcd57610dcc610c02565b5b6000610ddb86828701610c23565b935050602084013567ffffffffffffffff811115610dfc57610dfb610c07565b5b610e0886828701610d50565b9250506040610e1986828701610d9f565b9150509250925092565b60008115159050919050565b610e3881610e23565b82525050565b6000602082019050610e536000830184610e2f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e93578082015181840152602081019050610e78565b60008484015250505050565b6000610eaa82610e59565b610eb48185610e64565b9350610ec4818560208601610e75565b610ecd81610c42565b840191505092915050565b610ee181610d7e565b82525050565b6000606082019050610efc6000830186610bce565b8181036020830152610f0e8185610e9f565b9050610f1d6040830184610ed8565b949350505050565b610f2e81610e23565b8114610f3957600080fd5b50565b600081519050610f4b81610f25565b92915050565b600060208284031215610f6757610f66610c02565b5b6000610f7584828501610f3c565b91505092915050565b7f6661696c656420746f2064656c65676174650000000000000000000000000000600082015250565b6000610fb4601283610e64565b9150610fbf82610f7e565b602082019050919050565b60006020820190508181036000830152610fe381610fa7565b9050919050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000611046602183610e64565b915061105182610fea565b604082019050919050565b6000602082019050818103600083015261107581611039565b9050919050565b60006040820190506110916000830185610bce565b61109e6020830184610bce565b9392505050565b6000815190506110b481610d88565b92915050565b6000602082840312156110d0576110cf610c02565b5b60006110de848285016110a5565b91505092915050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b600061111d601683610e64565b9150611128826110e7565b602082019050919050565b6000602082019050818103600083015261114c81611110565b9050919050565b60006060820190506111686000830186610bce565b6111756020830185610bce565b6111826040830184610ed8565b949350505050565b7f4661696c656420746f207472616e7366657220746f6b656e7320666f7220666c60008201527f617368206c6f616e000000000000000000000000000000000000000000000000602082015250565b60006111e6602883610e64565b91506111f18261118a565b604082019050919050565b60006020820190508181036000830152611215816111d9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061125682610d7e565b915061126183610d7e565b92508282019050808211156112795761127861121c565b5b92915050565b7f466c617368206c6f616e206661696c6564000000000000000000000000000000600082015250565b60006112b5601183610e64565b91506112c08261127f565b602082019050919050565b600060208201905081810360008301526112e4816112a8565b9050919050565b60006040820190506113006000830185610bce565b61130d6020830184610ed8565b9392505050565b600061131f82610d7e565b915061132a83610d7e565b92508282039050818111156113425761134161121c565b5b92915050565b7f466c617368206c6f616e2072657061796d656e74206661696c65640000000000600082015250565b600061137e601b83610e64565b915061138982611348565b602082019050919050565b600060208201905081810360008301526113ad81611371565b905091905056fea26469706673582212208e1d52c36a32622af075b98cf15a237fb7323d1e2ace6e9cb8d762d107b21e9864736f6c63430008130033\",\n   \"linkReferences\": {},\n   \"deployedLinkReferences\": {}\n }"
        },
        {
          "filename": "precompiles/testutil/contracts/FlashLoan.sol",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -28,7 +28,7 @@ contract FlashLoan {\n         uint256 balancePre = token.balanceOf(address(this));\n         bool success = token.transferFrom(msg.sender, address(this), _amount);\n         require(success, \"Failed to transfer tokens for flash loan\");\n-        assert(\n+        require(\n             token.balanceOf(address(this)) == balancePre + _amount,\n             \"Flash loan failed\"\n         );\n@@ -44,7 +44,7 @@ contract FlashLoan {\n         // Transfer tokens back to end the flash loan\n         balancePre = token.balanceOf(address(this));\n         token.transfer(msg.sender, _amount);\n-        assert(\n+        require(\n             token.balanceOf(address(this)) == balancePre - _amount,\n             \"Flash loan repayment failed\"\n         );\n@@ -69,7 +69,7 @@ contract FlashLoan {\n         uint256 balancePre = token.balanceOf(address(this));\n         bool success = token.transferFrom(msg.sender, address(this), _amount);\n         require(success, \"Failed to transfer tokens for flash loan\");\n-        assert(\n+        require(\n             token.balanceOf(address(this)) == balancePre + _amount,\n             \"Flash loan failed\"\n         );"
        },
        {
          "filename": "precompiles/testutil/contracts/ICounter.sol",
          "status": "added",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -0,0 +1,9 @@\n+pragma solidity ^0.8.17;\n+\n+interface ICounter {\n+    function add() external;\n+    function subtract() external;\n+    function getCounter() external view returns (uint256);\n+    event Changed(uint256 counter);\n+    event Added(uint256 counter);\n+}"
        },
        {
          "filename": "precompiles/testutil/contracts/Reverter.json",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -38,8 +38,8 @@\n       \"type\": \"receive\"\n     }\n   ],\n-  \"bytecode\": \"0x608060405260008055610c17806100176000396000f3fe60806040526004361061002d5760003560e01c806379388e9414610039578063c04062261461006257610034565b3661003457005b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610360565b610079565b005b34801561006e57600080fd5b50610077610131565b005b808290604051610088906102d4565b82906040518091039083f590509050801580156100a9573d6000803e3d6000fd5b505061080173ffffffffffffffffffffffffffffffffffffffff166354be1a28306040518263ffffffff1660e01b81526004016100e691906103e1565b600060405180830381865afa158015610103573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061012c9190610884565b600080fd5b6000808154809291906101439061092b565b91905055503073ffffffffffffffffffffffffffffffffffffffff166379388e9460005460001b476040518363ffffffff1660e01b8152600401610188929190610991565b600060405180830381600087803b1580156101a257600080fd5b505af19250505080156101b3575060015b61022f5760006101c760005460001b610249565b90508073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561021157600080fd5b505af1158015610225573d6000803e3d6000fd5b5050505050610230565b5b6000808154809291906102429061092b565b9190505550565b60008060ff60f81b308460405180602001610263906102d4565b6020820181038252601f19601f820116604052506040516020016102879190610a01565b604051602081830303815290604052805190602001206040516020016102b09493929190610ace565b6040516020818303038152906040528051906020012060001c905080915050919050565b60c580610b1d83390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610307816102f4565b811461031257600080fd5b50565b600081359050610324816102fe565b92915050565b6000819050919050565b61033d8161032a565b811461034857600080fd5b50565b60008135905061035a81610334565b92915050565b60008060408385031215610377576103766102ea565b5b600061038585828601610315565b92505060206103968582860161034b565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103cb826103a0565b9050919050565b6103db816103c0565b82525050565b60006020820190506103f660008301846103d2565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61044a82610401565b810181811067ffffffffffffffff8211171561046957610468610412565b5b80604052505050565b600061047c6102e0565b90506104888282610441565b919050565b600067ffffffffffffffff8211156104a8576104a7610412565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156104e8576104e7610412565b5b6104f182610401565b9050602081019050919050565b60005b8381101561051c578082015181840152602081019050610501565b60008484015250505050565b600061053b610536846104cd565b610472565b905082815260208101848484011115610557576105566104c8565b5b6105628482856104fe565b509392505050565b600082601f83011261057f5761057e6103fc565b5b815161058f848260208601610528565b91505092915050565b600067ffffffffffffffff8211156105b3576105b2610412565b5b602082029050602081019050919050565b6000815190506105d381610334565b92915050565b600060ff82169050919050565b6105ef816105d9565b81146105fa57600080fd5b50565b60008151905061060c816105e6565b92915050565b600060608284031215610628576106276104be565b5b6106326060610472565b9050600082015167ffffffffffffffff811115610652576106516104c3565b5b61065e8482850161056a565b6000830152506020610672848285016105c4565b6020830152506040610686848285016105fd565b60408301525092915050565b60006106a56106a084610598565b610472565b905080838252602082019050602084028301858111156106c8576106c76104b9565b5b835b8181101561070f57805167ffffffffffffffff8111156106ed576106ec6103fc565b5b8086016106fa8982610612565b855260208501945050506020810190506106ca565b5050509392505050565b600082601f83011261072e5761072d6103fc565b5b815161073e848260208601610692565b91505092915050565b60006040828403121561075d5761075c6104be565b5b6107676040610472565b9050600082015167ffffffffffffffff811115610787576107866104c3565b5b6107938482850161056a565b600083015250602082015167ffffffffffffffff8111156107b7576107b66104c3565b5b6107c384828501610719565b60208301525092915050565b60006107e26107dd8461048d565b610472565b90508083825260208201905060208402830185811115610805576108046104b9565b5b835b8181101561084c57805167ffffffffffffffff81111561082a576108296103fc565b5b8086016108378982610747565b85526020850194505050602081019050610807565b5050509392505050565b600082601f83011261086b5761086a6103fc565b5b815161087b8482602086016107cf565b91505092915050565b6000806040838503121561089b5761089a6102ea565b5b600083015167ffffffffffffffff8111156108b9576108b86102ef565b5b6108c585828601610856565b925050602083015167ffffffffffffffff8111156108e6576108e56102ef565b5b6108f285828601610719565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109368261032a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610968576109676108fc565b5b600182019050919050565b61097c816102f4565b82525050565b61098b8161032a565b82525050565b60006040820190506109a66000830185610973565b6109b36020830184610982565b9392505050565b600081519050919050565b600081905092915050565b60006109db826109ba565b6109e581856109c5565b93506109f58185602086016104fe565b80840191505092915050565b6000610a0d82846109d0565b915081905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b610a5f610a5a82610a18565b610a44565b82525050565b60008160601b9050919050565b6000610a7d82610a65565b9050919050565b6000610a8f82610a72565b9050919050565b610aa7610aa2826103c0565b610a84565b82525050565b6000819050919050565b610ac8610ac3826102f4565b610aad565b82525050565b6000610ada8287610a4e565b600182019150610aea8286610a96565b601482019150610afa8285610ab7565b602082019150610b0a8284610ab7565b6020820191508190509594505050505056fe608060405260b3806100126000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633ccfd60b14602d575b600080fd5b60336035565b005b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015607a573d6000803e3d6000fd5b5056fea264697066735822122008001b1cb780fb8c81d5ab538ccbeab143f74b68ef571f3c5d058a2620bf412864736f6c63430008130033a2646970667358221220a5fd3d44b59916cad19784e497c1dbfaa58f7fb8006170e93ea2c8bd32af7b0264736f6c63430008130033\",\n-  \"deployedBytecode\": \"0x60806040526004361061002d5760003560e01c806379388e9414610039578063c04062261461006257610034565b3661003457005b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610360565b610079565b005b34801561006e57600080fd5b50610077610131565b005b808290604051610088906102d4565b82906040518091039083f590509050801580156100a9573d6000803e3d6000fd5b505061080173ffffffffffffffffffffffffffffffffffffffff166354be1a28306040518263ffffffff1660e01b81526004016100e691906103e1565b600060405180830381865afa158015610103573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061012c9190610884565b600080fd5b6000808154809291906101439061092b565b91905055503073ffffffffffffffffffffffffffffffffffffffff166379388e9460005460001b476040518363ffffffff1660e01b8152600401610188929190610991565b600060405180830381600087803b1580156101a257600080fd5b505af19250505080156101b3575060015b61022f5760006101c760005460001b610249565b90508073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561021157600080fd5b505af1158015610225573d6000803e3d6000fd5b5050505050610230565b5b6000808154809291906102429061092b565b9190505550565b60008060ff60f81b308460405180602001610263906102d4565b6020820181038252601f19601f820116604052506040516020016102879190610a01565b604051602081830303815290604052805190602001206040516020016102b09493929190610ace565b6040516020818303038152906040528051906020012060001c905080915050919050565b60c580610b1d83390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610307816102f4565b811461031257600080fd5b50565b600081359050610324816102fe565b92915050565b6000819050919050565b61033d8161032a565b811461034857600080fd5b50565b60008135905061035a81610334565b92915050565b60008060408385031215610377576103766102ea565b5b600061038585828601610315565b92505060206103968582860161034b565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103cb826103a0565b9050919050565b6103db816103c0565b82525050565b60006020820190506103f660008301846103d2565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61044a82610401565b810181811067ffffffffffffffff8211171561046957610468610412565b5b80604052505050565b600061047c6102e0565b90506104888282610441565b919050565b600067ffffffffffffffff8211156104a8576104a7610412565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156104e8576104e7610412565b5b6104f182610401565b9050602081019050919050565b60005b8381101561051c578082015181840152602081019050610501565b60008484015250505050565b600061053b610536846104cd565b610472565b905082815260208101848484011115610557576105566104c8565b5b6105628482856104fe565b509392505050565b600082601f83011261057f5761057e6103fc565b5b815161058f848260208601610528565b91505092915050565b600067ffffffffffffffff8211156105b3576105b2610412565b5b602082029050602081019050919050565b6000815190506105d381610334565b92915050565b600060ff82169050919050565b6105ef816105d9565b81146105fa57600080fd5b50565b60008151905061060c816105e6565b92915050565b600060608284031215610628576106276104be565b5b6106326060610472565b9050600082015167ffffffffffffffff811115610652576106516104c3565b5b61065e8482850161056a565b6000830152506020610672848285016105c4565b6020830152506040610686848285016105fd565b60408301525092915050565b60006106a56106a084610598565b610472565b905080838252602082019050602084028301858111156106c8576106c76104b9565b5b835b8181101561070f57805167ffffffffffffffff8111156106ed576106ec6103fc565b5b8086016106fa8982610612565b855260208501945050506020810190506106ca565b5050509392505050565b600082601f83011261072e5761072d6103fc565b5b815161073e848260208601610692565b91505092915050565b60006040828403121561075d5761075c6104be565b5b6107676040610472565b9050600082015167ffffffffffffffff811115610787576107866104c3565b5b6107938482850161056a565b600083015250602082015167ffffffffffffffff8111156107b7576107b66104c3565b5b6107c384828501610719565b60208301525092915050565b60006107e26107dd8461048d565b610472565b90508083825260208201905060208402830185811115610805576108046104b9565b5b835b8181101561084c57805167ffffffffffffffff81111561082a576108296103fc565b5b8086016108378982610747565b85526020850194505050602081019050610807565b5050509392505050565b600082601f83011261086b5761086a6103fc565b5b815161087b8482602086016107cf565b91505092915050565b6000806040838503121561089b5761089a6102ea565b5b600083015167ffffffffffffffff8111156108b9576108b86102ef565b5b6108c585828601610856565b925050602083015167ffffffffffffffff8111156108e6576108e56102ef565b5b6108f285828601610719565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109368261032a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610968576109676108fc565b5b600182019050919050565b61097c816102f4565b82525050565b61098b8161032a565b82525050565b60006040820190506109a66000830185610973565b6109b36020830184610982565b9392505050565b600081519050919050565b600081905092915050565b60006109db826109ba565b6109e581856109c5565b93506109f58185602086016104fe565b80840191505092915050565b6000610a0d82846109d0565b915081905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b610a5f610a5a82610a18565b610a44565b82525050565b60008160601b9050919050565b6000610a7d82610a65565b9050919050565b6000610a8f82610a72565b9050919050565b610aa7610aa2826103c0565b610a84565b82525050565b6000819050919050565b610ac8610ac3826102f4565b610aad565b82525050565b6000610ada8287610a4e565b600182019150610aea8286610a96565b601482019150610afa8285610ab7565b602082019150610b0a8284610ab7565b6020820191508190509594505050505056fe608060405260b3806100126000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633ccfd60b14602d575b600080fd5b60336035565b005b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015607a573d6000803e3d6000fd5b5056fea264697066735822122008001b1cb780fb8c81d5ab538ccbeab143f74b68ef571f3c5d058a2620bf412864736f6c63430008130033a2646970667358221220a5fd3d44b59916cad19784e497c1dbfaa58f7fb8006170e93ea2c8bd32af7b0264736f6c63430008130033\",\n+  \"bytecode\": \"0x608060405260008055610c17806100176000396000f3fe60806040526004361061002d5760003560e01c806379388e9414610039578063c04062261461006257610034565b3661003457005b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610360565b610079565b005b34801561006e57600080fd5b50610077610131565b005b808290604051610088906102d4565b82906040518091039083f590509050801580156100a9573d6000803e3d6000fd5b505061080173ffffffffffffffffffffffffffffffffffffffff166354be1a28306040518263ffffffff1660e01b81526004016100e691906103e1565b600060405180830381865afa158015610103573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061012c9190610884565b600080fd5b6000808154809291906101439061092b565b91905055503073ffffffffffffffffffffffffffffffffffffffff166379388e9460005460001b476040518363ffffffff1660e01b8152600401610188929190610991565b600060405180830381600087803b1580156101a257600080fd5b505af19250505080156101b3575060015b61022f5760006101c760005460001b610249565b90508073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561021157600080fd5b505af1158015610225573d6000803e3d6000fd5b5050505050610230565b5b6000808154809291906102429061092b565b9190505550565b60008060ff60f81b308460405180602001610263906102d4565b6020820181038252601f19601f820116604052506040516020016102879190610a01565b604051602081830303815290604052805190602001206040516020016102b09493929190610ace565b6040516020818303038152906040528051906020012060001c905080915050919050565b60c580610b1d83390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610307816102f4565b811461031257600080fd5b50565b600081359050610324816102fe565b92915050565b6000819050919050565b61033d8161032a565b811461034857600080fd5b50565b60008135905061035a81610334565b92915050565b60008060408385031215610377576103766102ea565b5b600061038585828601610315565b92505060206103968582860161034b565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103cb826103a0565b9050919050565b6103db816103c0565b82525050565b60006020820190506103f660008301846103d2565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61044a82610401565b810181811067ffffffffffffffff8211171561046957610468610412565b5b80604052505050565b600061047c6102e0565b90506104888282610441565b919050565b600067ffffffffffffffff8211156104a8576104a7610412565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156104e8576104e7610412565b5b6104f182610401565b9050602081019050919050565b60005b8381101561051c578082015181840152602081019050610501565b60008484015250505050565b600061053b610536846104cd565b610472565b905082815260208101848484011115610557576105566104c8565b5b6105628482856104fe565b509392505050565b600082601f83011261057f5761057e6103fc565b5b815161058f848260208601610528565b91505092915050565b600067ffffffffffffffff8211156105b3576105b2610412565b5b602082029050602081019050919050565b6000815190506105d381610334565b92915050565b600060ff82169050919050565b6105ef816105d9565b81146105fa57600080fd5b50565b60008151905061060c816105e6565b92915050565b600060608284031215610628576106276104be565b5b6106326060610472565b9050600082015167ffffffffffffffff811115610652576106516104c3565b5b61065e8482850161056a565b6000830152506020610672848285016105c4565b6020830152506040610686848285016105fd565b60408301525092915050565b60006106a56106a084610598565b610472565b905080838252602082019050602084028301858111156106c8576106c76104b9565b5b835b8181101561070f57805167ffffffffffffffff8111156106ed576106ec6103fc565b5b8086016106fa8982610612565b855260208501945050506020810190506106ca565b5050509392505050565b600082601f83011261072e5761072d6103fc565b5b815161073e848260208601610692565b91505092915050565b60006040828403121561075d5761075c6104be565b5b6107676040610472565b9050600082015167ffffffffffffffff811115610787576107866104c3565b5b6107938482850161056a565b600083015250602082015167ffffffffffffffff8111156107b7576107b66104c3565b5b6107c384828501610719565b60208301525092915050565b60006107e26107dd8461048d565b610472565b90508083825260208201905060208402830185811115610805576108046104b9565b5b835b8181101561084c57805167ffffffffffffffff81111561082a576108296103fc565b5b8086016108378982610747565b85526020850194505050602081019050610807565b5050509392505050565b600082601f83011261086b5761086a6103fc565b5b815161087b8482602086016107cf565b91505092915050565b6000806040838503121561089b5761089a6102ea565b5b600083015167ffffffffffffffff8111156108b9576108b86102ef565b5b6108c585828601610856565b925050602083015167ffffffffffffffff8111156108e6576108e56102ef565b5b6108f285828601610719565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109368261032a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610968576109676108fc565b5b600182019050919050565b61097c816102f4565b82525050565b61098b8161032a565b82525050565b60006040820190506109a66000830185610973565b6109b36020830184610982565b9392505050565b600081519050919050565b600081905092915050565b60006109db826109ba565b6109e581856109c5565b93506109f58185602086016104fe565b80840191505092915050565b6000610a0d82846109d0565b915081905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b610a5f610a5a82610a18565b610a44565b82525050565b60008160601b9050919050565b6000610a7d82610a65565b9050919050565b6000610a8f82610a72565b9050919050565b610aa7610aa2826103c0565b610a84565b82525050565b6000819050919050565b610ac8610ac3826102f4565b610aad565b82525050565b6000610ada8287610a4e565b600182019150610aea8286610a96565b601482019150610afa8285610ab7565b602082019150610b0a8284610ab7565b6020820191508190509594505050505056fe608060405260b3806100126000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633ccfd60b14602d575b600080fd5b60336035565b005b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015607a573d6000803e3d6000fd5b5056fea26469706673582212200cca7e94767cc41a8eff494693f692a362784efcf8724ef105e5c5948d07a98a64736f6c63430008130033a26469706673582212209eedc0bf8ca98ddf4547c45c1938b3294a8c876293b916e6991af709591c556764736f6c63430008130033\",\n+  \"deployedBytecode\": \"0x60806040526004361061002d5760003560e01c806379388e9414610039578063c04062261461006257610034565b3661003457005b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610360565b610079565b005b34801561006e57600080fd5b50610077610131565b005b808290604051610088906102d4565b82906040518091039083f590509050801580156100a9573d6000803e3d6000fd5b505061080173ffffffffffffffffffffffffffffffffffffffff166354be1a28306040518263ffffffff1660e01b81526004016100e691906103e1565b600060405180830381865afa158015610103573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061012c9190610884565b600080fd5b6000808154809291906101439061092b565b91905055503073ffffffffffffffffffffffffffffffffffffffff166379388e9460005460001b476040518363ffffffff1660e01b8152600401610188929190610991565b600060405180830381600087803b1580156101a257600080fd5b505af19250505080156101b3575060015b61022f5760006101c760005460001b610249565b90508073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561021157600080fd5b505af1158015610225573d6000803e3d6000fd5b5050505050610230565b5b6000808154809291906102429061092b565b9190505550565b60008060ff60f81b308460405180602001610263906102d4565b6020820181038252601f19601f820116604052506040516020016102879190610a01565b604051602081830303815290604052805190602001206040516020016102b09493929190610ace565b6040516020818303038152906040528051906020012060001c905080915050919050565b60c580610b1d83390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610307816102f4565b811461031257600080fd5b50565b600081359050610324816102fe565b92915050565b6000819050919050565b61033d8161032a565b811461034857600080fd5b50565b60008135905061035a81610334565b92915050565b60008060408385031215610377576103766102ea565b5b600061038585828601610315565b92505060206103968582860161034b565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103cb826103a0565b9050919050565b6103db816103c0565b82525050565b60006020820190506103f660008301846103d2565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61044a82610401565b810181811067ffffffffffffffff8211171561046957610468610412565b5b80604052505050565b600061047c6102e0565b90506104888282610441565b919050565b600067ffffffffffffffff8211156104a8576104a7610412565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156104e8576104e7610412565b5b6104f182610401565b9050602081019050919050565b60005b8381101561051c578082015181840152602081019050610501565b60008484015250505050565b600061053b610536846104cd565b610472565b905082815260208101848484011115610557576105566104c8565b5b6105628482856104fe565b509392505050565b600082601f83011261057f5761057e6103fc565b5b815161058f848260208601610528565b91505092915050565b600067ffffffffffffffff8211156105b3576105b2610412565b5b602082029050602081019050919050565b6000815190506105d381610334565b92915050565b600060ff82169050919050565b6105ef816105d9565b81146105fa57600080fd5b50565b60008151905061060c816105e6565b92915050565b600060608284031215610628576106276104be565b5b6106326060610472565b9050600082015167ffffffffffffffff811115610652576106516104c3565b5b61065e8482850161056a565b6000830152506020610672848285016105c4565b6020830152506040610686848285016105fd565b60408301525092915050565b60006106a56106a084610598565b610472565b905080838252602082019050602084028301858111156106c8576106c76104b9565b5b835b8181101561070f57805167ffffffffffffffff8111156106ed576106ec6103fc565b5b8086016106fa8982610612565b855260208501945050506020810190506106ca565b5050509392505050565b600082601f83011261072e5761072d6103fc565b5b815161073e848260208601610692565b91505092915050565b60006040828403121561075d5761075c6104be565b5b6107676040610472565b9050600082015167ffffffffffffffff811115610787576107866104c3565b5b6107938482850161056a565b600083015250602082015167ffffffffffffffff8111156107b7576107b66104c3565b5b6107c384828501610719565b60208301525092915050565b60006107e26107dd8461048d565b610472565b90508083825260208201905060208402830185811115610805576108046104b9565b5b835b8181101561084c57805167ffffffffffffffff81111561082a576108296103fc565b5b8086016108378982610747565b85526020850194505050602081019050610807565b5050509392505050565b600082601f83011261086b5761086a6103fc565b5b815161087b8482602086016107cf565b91505092915050565b6000806040838503121561089b5761089a6102ea565b5b600083015167ffffffffffffffff8111156108b9576108b86102ef565b5b6108c585828601610856565b925050602083015167ffffffffffffffff8111156108e6576108e56102ef565b5b6108f285828601610719565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109368261032a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610968576109676108fc565b5b600182019050919050565b61097c816102f4565b82525050565b61098b8161032a565b82525050565b60006040820190506109a66000830185610973565b6109b36020830184610982565b9392505050565b600081519050919050565b600081905092915050565b60006109db826109ba565b6109e581856109c5565b93506109f58185602086016104fe565b80840191505092915050565b6000610a0d82846109d0565b915081905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b610a5f610a5a82610a18565b610a44565b82525050565b60008160601b9050919050565b6000610a7d82610a65565b9050919050565b6000610a8f82610a72565b9050919050565b610aa7610aa2826103c0565b610a84565b82525050565b6000819050919050565b610ac8610ac3826102f4565b610aad565b82525050565b6000610ada8287610a4e565b600182019150610aea8286610a96565b601482019150610afa8285610ab7565b602082019150610b0a8284610ab7565b6020820191508190509594505050505056fe608060405260b3806100126000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633ccfd60b14602d575b600080fd5b60336035565b005b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015607a573d6000803e3d6000fd5b5056fea26469706673582212200cca7e94767cc41a8eff494693f692a362784efcf8724ef105e5c5948d07a98a64736f6c63430008130033a26469706673582212209eedc0bf8ca98ddf4547c45c1938b3294a8c876293b916e6991af709591c556764736f6c63430008130033\",\n   \"linkReferences\": {},\n   \"deployedLinkReferences\": {}\n }"
        },
        {
          "filename": "precompiles/testutil/contracts/counter.go",
          "status": "added",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -0,0 +1,13 @@\n+// Copyright Tharsis Labs Ltd.(Evmos)\n+// SPDX-License-Identifier:ENCL-1.0(https://github.com/evmos/evmos/blob/main/LICENSE)\n+\n+package contracts\n+\n+import (\n+\tcontractutils \"github.com/evmos/evmos/v18/contracts/utils\"\n+\tevmtypes \"github.com/evmos/evmos/v18/x/evm/types\"\n+)\n+\n+func LoadCounterContract() (evmtypes.CompiledContract, error) {\n+\treturn contractutils.LoadContractFromJSONFile(\"Counter.json\")\n+}"
        },
        {
          "filename": "precompiles/vesting/errors.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -7,4 +7,6 @@ const (\n \tErrDifferentFromOrigin = \"tx origin address %s does not match the from address %s\"\n \t// ErrDifferentFunderOrigin is raised when the tx origin address is not the same as the vesting transaction funder.\n \tErrDifferentFunderOrigin = \"tx origin address %s does not match the funder address %s\"\n+\t// ErrInvalidDestination is raised when the destination address is not an EOA or the contract calling the precompile.\n+\tErrInvalidDestination = \"invalid destination address %s. Should be an EOA or the contract calling the precompile\"\n )"
        },
        {
          "filename": "precompiles/vesting/events.go",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -90,10 +90,6 @@ func (p Precompile) EmitCreateClawbackVestingAccountEvent(\n \t\treturn err\n \t}\n \n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\n \t// Create the event\n \tstateDB.AddLog(&ethtypes.Log{\n \t\tAddress:     p.Address(),"
        },
        {
          "filename": "precompiles/vesting/integration_test.go",
          "status": "modified",
          "additions": 907,
          "deletions": 122,
          "patch": "@@ -17,6 +17,7 @@ import (\n \t\"github.com/evmos/evmos/v18/precompiles/vesting\"\n \tevmosutil \"github.com/evmos/evmos/v18/testutil\"\n \ttestutiltx \"github.com/evmos/evmos/v18/testutil/tx\"\n+\t\"github.com/evmos/evmos/v18/utils\"\n \tvestingtypes \"github.com/evmos/evmos/v18/x/vesting/types\"\n \n \t//nolint:revive // dot imports are fine for Ginkgo\n@@ -55,6 +56,8 @@ var (\n \tdifferentAddr = testutiltx.GenerateAddress()\n \t// vestingAddr is a new address that is used to test the vesting extension.\n \tvestingAddr = testutiltx.GenerateAddress()\n+\t// gasPrice to be used on tests txs and calculate the fees\n+\tgasPrice = math.NewInt(1e9)\n )\n \n var _ = Describe(\"Interacting with the vesting extension\", func() {\n@@ -228,19 +231,22 @@ var _ = Describe(\"Interacting with the vesting extension\", func() {\n \t})\n \n \tContext(\"to fund a clawback vesting account\", func() {\n+\n \t\tfor _, callType := range callTypes {\n \t\t\tcallType := callType\n \n-\t\t\tBeforeEach(func() {\n-\t\t\t\tif callType.directCall == false {\n+\t\t\tIt(fmt.Sprintf(\"should fund the vesting when defining only lockup (%s)\", callType.name), func() {\n+\t\t\t\tif !callType.directCall {\n+\t\t\t\t\t// create authorization to allow contract to spend the funder's (s.address) balance\n+\t\t\t\t\t// when funding a vesting account\n \t\t\t\t\terr = vesting.CreateGenericAuthz(s.ctx, s.app.AuthzKeeper, contractAddr, s.address, vesting.FundVestingAccountMsgURL)\n \t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while creating the generic authorization: %v\", err)\n \t\t\t\t}\n-\t\t\t})\n-\n-\t\t\tIt(fmt.Sprintf(\"should fund the vesting when defining only lockup (%s)\", callType.name), func() {\n \t\t\t\ts.CreateTestClawbackVestingAccount(s.address, toAddr)\n-\t\t\t\tcreateClawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\n+\t\t\t\tvestAccInitialBal := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\n+\t\t\t\tfundVestingAccArgs := s.BuildCallArgs(callType, contractAddr).\n \t\t\t\t\tWithMethodName(vesting.FundVestingAccountMethod).\n \t\t\t\t\tWithArgs(\n \t\t\t\t\t\ts.address,\n@@ -253,19 +259,200 @@ var _ = Describe(\"Interacting with the vesting extension\", func() {\n \t\t\t\tfundClawbackVestingCheck := passCheck.\n \t\t\t\t\tWithExpEvents(vesting.EventTypeFundVestingAccount)\n \n-\t\t\t\t_, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, createClawbackArgs, fundClawbackVestingCheck)\n+\t\t\t\t_, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, fundVestingAccArgs, fundClawbackVestingCheck)\n+\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\n+\t\t\t\t// Check the vesting account\n+\t\t\t\t//\n+\t\t\t\t// NOTE: The vesting account is created with the lockup periods only, since the vesting periods are empty.\n+\t\t\t\t// The vesting periods are defaulted to instant vesting, i.e. period length = 0.\n+\t\t\t\ts.ExpectVestingAccount(toAddr, defaultPeriods, instantPeriods)\n+\n+\t\t\t\tvestCoinsAmt := math.NewIntFromBigInt(defaultPeriods[0].Amount[0].Amount)\n+\t\t\t\tvestAccFinalBal := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(vestAccFinalBal.Amount).To(Equal(vestAccInitialBal.Amount.Add(vestCoinsAmt)))\n+\t\t\t})\n+\n+\t\t\tIt(fmt.Sprintf(\"should fund the vesting account from a smart contract when defining only lockup (%s)\", callType.name), func() {\n+\t\t\t\tif callType.directCall {\n+\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t}\n+\t\t\t\ts.CreateTestClawbackVestingAccount(contractAddr, toAddr)\n+\t\t\t\t// send some funds to the smart contract\n+\t\t\t\t// authorization to be able to fund from the smart contract is already in the setup\n+\t\t\t\terr = evmosutil.FundAccount(s.ctx, s.app.BankKeeper, contractAddr.Bytes(), sdk.NewCoins(sdk.NewCoin(utils.BaseDenom, math.NewInt(100))))\n+\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while funding the contract: %v\", err)\n+\n+\t\t\t\ttxSenderInitialBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\t\t\t\tvestAccInitialBal := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\n+\t\t\t\t// Build and execute the tx to fund the vesting account from a smart contract\n+\t\t\t\tfundVestingAccArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\tWithMethodName(vesting.FundVestingAccountMethod).\n+\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\tcontractAddr,\n+\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\tuint64(time.Now().Unix()),\n+\t\t\t\t\t\tdefaultPeriods,\n+\t\t\t\t\t\temptyPeriods,\n+\t\t\t\t\t).\n+\t\t\t\t\tWithGasPrice(gasPrice.BigInt())\n+\n+\t\t\t\tfundClawbackVestingCheck := passCheck.\n+\t\t\t\t\tWithExpEvents(vesting.EventTypeFundVestingAccount)\n+\n+\t\t\t\tres, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, fundVestingAccArgs, fundClawbackVestingCheck)\n \t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\t\t\t\tfees := gasPrice.MulRaw(res.GasUsed)\n \n \t\t\t\t// Check the vesting account\n \t\t\t\t//\n \t\t\t\t// NOTE: The vesting account is created with the lockup periods only, since the vesting periods are empty.\n \t\t\t\t// The vesting periods are defaulted to instant vesting, i.e. period length = 0.\n \t\t\t\ts.ExpectVestingAccount(toAddr, defaultPeriods, instantPeriods)\n+\n+\t\t\t\t// check that tx signer's balance is reduced by the fees paid\n+\t\t\t\ttxSenderFinalBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(txSenderFinalBal.Amount).To(Equal(txSenderInitialBal.Amount.Sub(fees)))\n+\n+\t\t\t\t// check the contract's balance was deducted to fund the vesting account\n+\t\t\t\tcontractFinalBal := s.app.BankKeeper.GetBalance(s.ctx, contractAddr.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(contractFinalBal.Amount).To(Equal(sdk.ZeroInt()))\n+\n+\t\t\t\tvestCoinsAmt := math.NewIntFromBigInt(defaultPeriods[0].Amount[0].Amount)\n+\t\t\t\tvestAccFinalBal := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(vestAccFinalBal.Amount).To(Equal(vestAccInitialBal.Amount.Add(vestCoinsAmt)))\n+\t\t\t})\n+\n+\t\t\tIt(fmt.Sprintf(\"contract that calls funder - should NOT fund the vesting account with a smart contract different than the contract that calls the precompile (%s)\", callType.name), func() {\n+\t\t\t\tif callType.directCall {\n+\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t}\n+\t\t\t\tcounterContract, err := contracts.LoadCounterContract()\n+\t\t\t\tExpect(err).ToNot(HaveOccurred())\n+\n+\t\t\t\tfunderContractAddr, err := s.DeployContract(counterContract)\n+\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while deploying the smart contract: %v\", err)\n+\n+\t\t\t\ts.CreateTestClawbackVestingAccount(funderContractAddr, toAddr)\n+\t\t\t\t// send some funds to the smart contract\n+\t\t\t\t// authorization to be able to fund from the smart contract is already in the setup\n+\t\t\t\tfunderContractInitialAmt := math.NewInt(200)\n+\t\t\t\terr = evmosutil.FundAccount(s.ctx, s.app.BankKeeper, funderContractAddr.Bytes(), sdk.NewCoins(sdk.NewCoin(utils.BaseDenom, funderContractInitialAmt)))\n+\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while funding the contract: %v\", err)\n+\n+\t\t\t\t// create authorization for tx sender to use funder's balance to fund a vesting account\n+\t\t\t\terr = vesting.CreateGenericAuthz(s.ctx, s.app.AuthzKeeper, s.address, funderContractAddr, vesting.FundVestingAccountMsgURL)\n+\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while creating the generic authorization: %v\", err)\n+\n+\t\t\t\ttxSenderInitialBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\n+\t\t\t\t// Build and execute the tx to fund the vesting account from a smart contract\n+\t\t\t\tfundVestingAccArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\tWithMethodName(vesting.FundVestingAccountMethod).\n+\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\tfunderContractAddr,\n+\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\tuint64(time.Now().Unix()),\n+\t\t\t\t\t\tdefaultPeriods,\n+\t\t\t\t\t\temptyPeriods,\n+\t\t\t\t\t)\n+\t\t\t\t_, _, err = contracts.CallContractAndCheckLogs(s.ctx, s.app, fundVestingAccArgs, execRevertedCheck)\n+\t\t\t\tExpect(err).To(HaveOccurred())\n+\n+\t\t\t\t// check that tx signer's balance is reduced by the fees paid\n+\t\t\t\ttxSenderFinalBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(txSenderFinalBal.Amount.LTE(txSenderInitialBal.Amount)).To(BeTrue())\n+\n+\t\t\t\t// the balance of the contract that calls the precompile should remain 0\n+\t\t\t\tcontractFinalBal := s.app.BankKeeper.GetBalance(s.ctx, contractAddr.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(contractFinalBal.Amount).To(Equal(sdk.ZeroInt()))\n+\n+\t\t\t\t// the balance of the funder contract should remain unchanged\n+\t\t\t\tfunderContractFinalBal := s.app.BankKeeper.GetBalance(s.ctx, funderContractAddr.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(funderContractFinalBal.Amount).To(Equal(funderContractInitialAmt))\n+\t\t\t})\n+\n+\t\t\tIt(fmt.Sprintf(\"fund using a third party EOA - should NOT fund the vesting account even if authorized (%s)\", callType.name), func() {\n+\t\t\t\tif callType.directCall {\n+\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t}\n+\n+\t\t\t\t// send some funds to the funder, a third party EOA\n+\t\t\t\tfunderAccAddr, _ := testutiltx.NewAccAddressAndKey()\n+\t\t\t\tfunderHexAddr := common.BytesToAddress(funderAccAddr)\n+\t\t\t\tinitialFunderBalance := math.NewInt(200)\n+\t\t\t\terr = evmosutil.FundAccount(s.ctx, s.app.BankKeeper, funderAccAddr, sdk.NewCoins(sdk.NewCoin(utils.BaseDenom, initialFunderBalance)))\n+\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while funding the third party EOA: %v\", err)\n+\n+\t\t\t\t// create authorization for tx sender to use funder's balance to fund a vesting account\n+\t\t\t\terr = vesting.CreateGenericAuthz(s.ctx, s.app.AuthzKeeper, s.address, funderHexAddr, vesting.FundVestingAccountMsgURL)\n+\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while creating the generic authorization: %v\", err)\n+\n+\t\t\t\t// create clawback vesting account with the corresponding funder\n+\t\t\t\ts.CreateTestClawbackVestingAccount(funderHexAddr, toAddr)\n+\n+\t\t\t\ttxSenderInitialBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\n+\t\t\t\t// Build and execute the tx to fund the vesting account from a third party EOA\n+\t\t\t\tfundVestingAccArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\tWithMethodName(vesting.FundVestingAccountMethod).\n+\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\tfunderHexAddr,\n+\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\tuint64(time.Now().Unix()),\n+\t\t\t\t\t\tdefaultPeriods,\n+\t\t\t\t\t\temptyPeriods,\n+\t\t\t\t\t).\n+\t\t\t\t\tWithGasPrice(gasPrice.BigInt())\n+\n+\t\t\t\t_, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, fundVestingAccArgs, execRevertedCheck)\n+\t\t\t\tExpect(err).To(HaveOccurred())\n+\n+\t\t\t\t// check that tx signer's balance is reduced by the fees paid\n+\t\t\t\ttxSenderFinalBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(txSenderFinalBal.Amount.LTE(txSenderInitialBal.Amount)).To(BeTrue())\n+\n+\t\t\t\t// check the funders's balance remains unchanged\n+\t\t\t\tfunderFinalBal := s.app.BankKeeper.GetBalance(s.ctx, funderAccAddr, s.bondDenom)\n+\t\t\t\tExpect(funderFinalBal.Amount).To(Equal(initialFunderBalance))\n+\t\t\t})\n+\n+\t\t\tIt(fmt.Sprintf(\"should NOT fund the vesting with tx origin funds when calling the precompile from a smart contract and WITHOUT authorization (%s)\", callType.name), func() {\n+\t\t\t\t// when calling from a smart contract\n+\t\t\t\t// the funder (s.address) needs to authorize\n+\t\t\t\t// for the smart contract to use its funds\n+\t\t\t\tif callType.directCall {\n+\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t}\n+\t\t\t\ts.CreateTestClawbackVestingAccount(s.address, toAddr)\n+\t\t\t\tfundVestingAccArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\tWithMethodName(vesting.FundVestingAccountMethod).\n+\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\tuint64(time.Now().Unix()),\n+\t\t\t\t\t\temptyPeriods,\n+\t\t\t\t\t\tdefaultPeriods,\n+\t\t\t\t\t)\n+\n+\t\t\t\t_, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, fundVestingAccArgs, execRevertedCheck)\n+\t\t\t\tExpect(err).To(HaveOccurred(), \"error while calling the contract: %v\", err)\n \t\t\t})\n \n \t\t\tIt(fmt.Sprintf(\"should fund the vesting when defining only vesting (%s)\", callType.name), func() {\n+\t\t\t\t// when calling from a smart contract\n+\t\t\t\t// the funder (s.address) needs to authorize\n+\t\t\t\t// for the smart contract to use its funds\n+\t\t\t\tif !callType.directCall {\n+\t\t\t\t\t// create authorization to allow contract to spend the funder's (s.address) balance\n+\t\t\t\t\t// when funding a vesting account\n+\t\t\t\t\terr = vesting.CreateGenericAuthz(s.ctx, s.app.AuthzKeeper, contractAddr, s.address, vesting.FundVestingAccountMsgURL)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while creating the generic authorization: %v\", err)\n+\t\t\t\t}\n+\n \t\t\t\ts.CreateTestClawbackVestingAccount(s.address, toAddr)\n-\t\t\t\tcreateClawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\tfundVestingAccArgs := s.BuildCallArgs(callType, contractAddr).\n \t\t\t\t\tWithMethodName(vesting.FundVestingAccountMethod).\n \t\t\t\t\tWithArgs(\n \t\t\t\t\t\ts.address,\n@@ -278,7 +465,7 @@ var _ = Describe(\"Interacting with the vesting extension\", func() {\n \t\t\t\tfundClawbackVestingCheck := passCheck.\n \t\t\t\t\tWithExpEvents(vesting.EventTypeFundVestingAccount)\n \n-\t\t\t\t_, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, createClawbackArgs, fundClawbackVestingCheck)\n+\t\t\t\t_, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, fundVestingAccArgs, fundClawbackVestingCheck)\n \t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while calling the contract: %v\", err)\n \n \t\t\t\t// Check the vesting account\n@@ -288,8 +475,190 @@ var _ = Describe(\"Interacting with the vesting extension\", func() {\n \t\t\t\ts.ExpectVestingAccount(toAddr, instantPeriods, defaultPeriods)\n \t\t\t})\n \n+\t\t\tContext(\"Table-driven tests for Withdraw Delegator Rewards\", func() {\n+\t\t\t\t// testCase is a struct used for cases of contracts calls that have some operation\n+\t\t\t\t// performed before and/or after the precompile call\n+\t\t\t\ttype testCase struct {\n+\t\t\t\t\ttransferTo *common.Address\n+\t\t\t\t\tbefore     bool\n+\t\t\t\t\tafter      bool\n+\t\t\t\t}\n+\n+\t\t\t\tvar (\n+\t\t\t\t\targs                   contracts.CallArgs\n+\t\t\t\t\tfunderInitialBal       sdk.Coin\n+\t\t\t\t\tvestingAccInitialBal   sdk.Coin\n+\t\t\t\t\tcontractInitialBalance = math.NewInt(100)\n+\t\t\t\t)\n+\n+\t\t\t\tBeforeEach(func() {\n+\t\t\t\t\targs = s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\tWithMethodName(\"fundVestingAccountAndTransfer\").\n+\t\t\t\t\t\tWithGasPrice(gasPrice.BigInt())\n+\n+\t\t\t\t\t// send some funds to the contract\n+\t\t\t\t\terr := evmosutil.FundAccountWithBaseDenom(s.ctx, s.app.BankKeeper, contractAddr.Bytes(), contractInitialBalance.Int64())\n+\t\t\t\t\tExpect(err).To(BeNil())\n+\n+\t\t\t\t\ts.CreateTestClawbackVestingAccount(s.address, toAddr)\n+\n+\t\t\t\t\tfunderInitialBal = s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\t\t\t\t\tvestingAccInitialBal = s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\n+\t\t\t\t\t// create authorization to allow contract to spend the funder's (s.address) balance\n+\t\t\t\t\t// when funding a vesting account\n+\t\t\t\t\terr = vesting.CreateGenericAuthz(s.ctx, s.app.AuthzKeeper, contractAddr, s.address, vesting.FundVestingAccountMsgURL)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while creating the generic authorization: %v\", err)\n+\t\t\t\t})\n+\n+\t\t\t\tDescribeTable(fmt.Sprintf(\"should fund the vesting account from tx origin when defining only vesting (%s)\", callType.name), func(tc testCase) {\n+\t\t\t\t\tif callType.directCall {\n+\t\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t\t}\n+\t\t\t\t\t// if not specified, default the transferTo to the funder address\n+\t\t\t\t\tif tc.transferTo == nil {\n+\t\t\t\t\t\ttc.transferTo = &s.address\n+\t\t\t\t\t}\n+\t\t\t\t\tfundVestingAccArgs := args.\n+\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\t\t*tc.transferTo,\n+\t\t\t\t\t\t\tuint64(time.Now().Unix()),\n+\t\t\t\t\t\t\temptyPeriods,\n+\t\t\t\t\t\t\tdefaultPeriods,\n+\t\t\t\t\t\t\ttc.before, tc.after, // transfer funds to the funder according to test case\n+\t\t\t\t\t\t).\n+\t\t\t\t\t\tWithGasPrice(gasPrice.BigInt())\n+\n+\t\t\t\t\tfundClawbackVestingCheck := passCheck.\n+\t\t\t\t\t\tWithExpEvents(vesting.EventTypeFundVestingAccount)\n+\n+\t\t\t\t\tres, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, fundVestingAccArgs, fundClawbackVestingCheck)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\n+\t\t\t\t\tfees := gasPrice.MulRaw(res.GasUsed)\n+\n+\t\t\t\t\ttransferredToAmt := math.ZeroInt()\n+\t\t\t\t\tfor _, transferred := range []bool{tc.before, tc.after} {\n+\t\t\t\t\t\tif transferred {\n+\t\t\t\t\t\t\ttransferredToAmt = transferredToAmt.AddRaw(15)\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\t// Check the vesting account\n+\t\t\t\t\t//\n+\t\t\t\t\t// NOTE: The vesting account is created with the vesting periods only, since the lockup periods are empty.\n+\t\t\t\t\t// The lockup periods are defaulted to instant unlocking, i.e. period length = 0.\n+\t\t\t\t\ts.ExpectVestingAccount(toAddr, instantPeriods, defaultPeriods)\n+\n+\t\t\t\t\t// check the contract's balance was deducted to fund the vesting account\n+\t\t\t\t\tcontractFinalBal := s.app.BankKeeper.GetBalance(s.ctx, contractAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(contractFinalBal.Amount).To(Equal(contractInitialBalance.Sub(transferredToAmt)))\n+\n+\t\t\t\t\t// check that the vesting account received the funds\n+\t\t\t\t\tvestCoinsAmt := math.NewIntFromBigInt(defaultPeriods[0].Amount[0].Amount)\n+\t\t\t\t\tvestAccFinalBal := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\texpVestAccFinalBal := vestingAccInitialBal.Amount.Add(vestCoinsAmt)\n+\t\t\t\t\tif *tc.transferTo == toAddr {\n+\t\t\t\t\t\texpVestAccFinalBal = expVestAccFinalBal.Add(transferredToAmt)\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tExpect(vestAccFinalBal.Amount).To(Equal(expVestAccFinalBal))\n+\n+\t\t\t\t\t// check that funder balance is reduced by the fees paid, the amt to fund the vesting account,\n+\t\t\t\t\t// but also got the funds sent from the contract (when corresponds)\n+\t\t\t\t\tfunderFinalBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\n+\t\t\t\t\texpFunderFinalBal := funderInitialBal.Amount.Sub(fees).Sub(vestCoinsAmt)\n+\t\t\t\t\tif *tc.transferTo == s.address {\n+\t\t\t\t\t\texpFunderFinalBal = expFunderFinalBal.Add(transferredToAmt)\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tExpect(funderFinalBal.Amount).To(Equal(expFunderFinalBal))\n+\t\t\t\t},\n+\t\t\t\t\tEntry(\"funder balance change before & after precompile call\", testCase{\n+\t\t\t\t\t\tbefore: true,\n+\t\t\t\t\t\tafter:  true,\n+\t\t\t\t\t}),\n+\t\t\t\t\tEntry(\"funder balance change before precompile call\", testCase{\n+\t\t\t\t\t\tbefore: true,\n+\t\t\t\t\t\tafter:  false,\n+\t\t\t\t\t}),\n+\t\t\t\t\tEntry(\"funder balance change after precompile call\", testCase{\n+\t\t\t\t\t\tbefore: false,\n+\t\t\t\t\t\tafter:  true,\n+\t\t\t\t\t}),\n+\t\t\t\t\tEntry(\"vesting acc balance change before & after precompile call\", testCase{\n+\t\t\t\t\t\ttransferTo: &toAddr,\n+\t\t\t\t\t\tbefore:     true,\n+\t\t\t\t\t\tafter:      true,\n+\t\t\t\t\t}),\n+\t\t\t\t\tEntry(\"vesting acc balance change before precompile call\", testCase{\n+\t\t\t\t\t\ttransferTo: &toAddr,\n+\t\t\t\t\t\tbefore:     true,\n+\t\t\t\t\t\tafter:      false,\n+\t\t\t\t\t}),\n+\t\t\t\t\tEntry(\"vesting acc balance change after precompile call\", testCase{\n+\t\t\t\t\t\ttransferTo: &toAddr,\n+\t\t\t\t\t\tbefore:     false,\n+\t\t\t\t\t\tafter:      true,\n+\t\t\t\t\t}),\n+\t\t\t\t)\n+\t\t\t})\n+\n+\t\t\tIt(fmt.Sprintf(\"should fund the vesting account from a smart contract when defining only vesting (%s)\", callType.name), func() {\n+\t\t\t\tif callType.directCall {\n+\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t}\n+\t\t\t\ts.CreateTestClawbackVestingAccount(contractAddr, toAddr)\n+\t\t\t\t// send some funds to the smart contract\n+\t\t\t\t// authorization is already created in the test setup\n+\t\t\t\terr = evmosutil.FundAccount(s.ctx, s.app.BankKeeper, contractAddr.Bytes(), sdk.NewCoins(sdk.NewCoin(utils.BaseDenom, math.NewInt(100))))\n+\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while funding the contract: %v\", err)\n+\n+\t\t\t\ttxSenderInitialBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\n+\t\t\t\t// Build and execute the tx to fund the vesting account from a smart contract\n+\t\t\t\tcreateClawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\tWithMethodName(vesting.FundVestingAccountMethod).\n+\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\tcontractAddr,\n+\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\tuint64(time.Now().Unix()),\n+\t\t\t\t\t\temptyPeriods,\n+\t\t\t\t\t\tdefaultPeriods,\n+\t\t\t\t\t).\n+\t\t\t\t\tWithGasPrice(gasPrice.BigInt())\n+\n+\t\t\t\tfundClawbackVestingCheck := passCheck.\n+\t\t\t\t\tWithExpEvents(vesting.EventTypeFundVestingAccount)\n+\n+\t\t\t\tres, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, createClawbackArgs, fundClawbackVestingCheck)\n+\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\t\t\t\tfees := gasPrice.MulRaw(res.GasUsed)\n+\n+\t\t\t\t// Check the vesting account\n+\t\t\t\ts.ExpectVestingAccount(toAddr, instantPeriods, defaultPeriods)\n+\n+\t\t\t\t// check that tx signer's balance is reduced by the fees paid\n+\t\t\t\ttxSenderFinalBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(txSenderFinalBal.Amount).To(Equal(txSenderInitialBal.Amount.Sub(fees)))\n+\n+\t\t\t\t// check the contract's balance was deducted to fund the vesting account\n+\t\t\t\tcontractFinalBal := s.app.BankKeeper.GetBalance(s.ctx, contractAddr.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(contractFinalBal.Amount).To(Equal(sdk.ZeroInt()))\n+\t\t\t})\n+\n \t\t\tIt(fmt.Sprintf(\"should fund the vesting when defining both lockup and vesting (%s)\", callType.name), func() {\n \t\t\t\ts.CreateTestClawbackVestingAccount(s.address, toAddr)\n+\t\t\t\t// funder is an EOA (s.address)\n+\t\t\t\t// if calling funding via contract call,\n+\t\t\t\t// need auth from funder addr (s.address)\n+\t\t\t\t// to the contract address\n+\t\t\t\tif !callType.directCall {\n+\t\t\t\t\terr = vesting.CreateGenericAuthz(s.ctx, s.app.AuthzKeeper, contractAddr, s.address, vesting.FundVestingAccountMsgURL)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while creating the generic authorization: %v\", err)\n+\t\t\t\t}\n \t\t\t\tcreateClawbackArgs := s.BuildCallArgs(callType, contractAddr).\n \t\t\t\t\tWithMethodName(vesting.FundVestingAccountMethod).\n \t\t\t\t\tWithArgs(\n@@ -310,6 +679,48 @@ var _ = Describe(\"Interacting with the vesting extension\", func() {\n \t\t\t\ts.ExpectVestingAccount(toAddr, defaultPeriods, defaultPeriods)\n \t\t\t})\n \n+\t\t\tIt(fmt.Sprintf(\"should fund the vesting account from a smart contract when defining both lockup and vesting  (%s)\", callType.name), func() {\n+\t\t\t\tif callType.directCall {\n+\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t}\n+\t\t\t\ts.CreateTestClawbackVestingAccount(contractAddr, toAddr)\n+\t\t\t\t// send some funds to the smart contract\n+\t\t\t\terr = evmosutil.FundAccount(s.ctx, s.app.BankKeeper, contractAddr.Bytes(), sdk.NewCoins(sdk.NewCoin(utils.BaseDenom, math.NewInt(100))))\n+\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while funding the contract: %v\", err)\n+\n+\t\t\t\ttxSenderInitialBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\n+\t\t\t\t// Build and execute the tx to fund the vesting account from a smart contract\n+\t\t\t\tcreateClawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\tWithMethodName(vesting.FundVestingAccountMethod).\n+\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\tcontractAddr,\n+\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\tuint64(time.Now().Unix()),\n+\t\t\t\t\t\tdefaultPeriods,\n+\t\t\t\t\t\tdefaultPeriods,\n+\t\t\t\t\t).\n+\t\t\t\t\tWithGasPrice(gasPrice.BigInt())\n+\n+\t\t\t\tfundClawbackVestingCheck := passCheck.\n+\t\t\t\t\tWithExpEvents(vesting.EventTypeFundVestingAccount)\n+\n+\t\t\t\tres, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, createClawbackArgs, fundClawbackVestingCheck)\n+\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\t\t\t\tfees := gasPrice.MulRaw(res.GasUsed)\n+\n+\t\t\t\t// Check the vesting account\n+\t\t\t\ts.ExpectVestingAccount(toAddr, defaultPeriods, defaultPeriods)\n+\n+\t\t\t\t// check that tx signer's balance is reduced by the fees paid\n+\t\t\t\ttxSenderFinalBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(txSenderFinalBal.Amount).To(Equal(txSenderInitialBal.Amount.Sub(fees)))\n+\n+\t\t\t\t// check the contract's balance was deducted to fund the vesting account\n+\t\t\t\tcontractFinalBal := s.app.BankKeeper.GetBalance(s.ctx, contractAddr.Bytes(), s.bondDenom)\n+\t\t\t\tExpect(contractFinalBal.Amount).To(Equal(sdk.ZeroInt()))\n+\t\t\t})\n+\n \t\t\tIt(fmt.Sprintf(\"should not fund the vesting when defining different total coins for lockup and vesting (%s)\", callType.name), func() {\n \t\t\t\ts.CreateTestClawbackVestingAccount(s.address, toAddr)\n \n@@ -546,6 +957,8 @@ var _ = Describe(\"Interacting with the vesting extension\", func() {\n \t})\n \n \tContext(\"to claw back from a vesting account\", func() {\n+\t\tvar expClawbackAmt = math.NewInt(1000)\n+\n \t\tBeforeEach(func() {\n \t\t\ts.CreateTestClawbackVestingAccount(s.address, toAddr)\n \t\t\ts.FundTestClawbackVestingAccount()\n@@ -554,132 +967,504 @@ var _ = Describe(\"Interacting with the vesting extension\", func() {\n \t\tfor _, callType := range callTypes {\n \t\t\tcallType := callType\n \n-\t\t\tBeforeEach(func() {\n-\t\t\t\tif callType.directCall == false {\n-\t\t\t\t\terr = vesting.CreateGenericAuthz(s.ctx, s.app.AuthzKeeper, contractAddr, s.address, vesting.ClawbackMsgURL)\n-\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while creating the generic authorization: %v\", err)\n-\t\t\t\t}\n-\t\t\t})\n-\n-\t\t\tIt(fmt.Sprintf(\"should claw back from the vesting when sending as the funder (%s)\", callType.name), func() {\n-\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n-\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n-\n-\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n-\t\t\t\t\tWithMethodName(vesting.ClawbackMethod).\n-\t\t\t\t\tWithArgs(\n-\t\t\t\t\t\ts.address,\n-\t\t\t\t\t\ttoAddr,\n-\t\t\t\t\t\tdifferentAddr,\n-\t\t\t\t\t)\n-\n-\t\t\t\tclawbackCheck := passCheck.\n-\t\t\t\t\tWithExpEvents(vesting.EventTypeClawback)\n-\n-\t\t\t\t_, ethRes, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, clawbackCheck)\n-\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\t\t\tContext(\"without authorization\", func() {\n+\t\t\t\tIt(fmt.Sprintf(\"should NOT claw back from the vesting when sending tx from the funder (%s)\", callType.name), func() {\n+\t\t\t\t\tif callType.directCall {\n+\t\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t\t}\n+\t\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n+\n+\t\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\tWithMethodName(vesting.ClawbackMethod).\n+\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\t\tdifferentAddr,\n+\t\t\t\t\t\t)\n \n-\t\t\t\tvar co vesting.ClawbackOutput\n-\t\t\t\terr = s.precompile.UnpackIntoInterface(&co, vesting.ClawbackMethod, ethRes.Ret)\n-\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while unpacking the clawback output: %v\", err)\n-\t\t\t\tExpect(co.Coins).To(Equal(balances), \"expected different clawback amount\")\n+\t\t\t\t\t_, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, execRevertedCheck)\n+\t\t\t\t\tExpect(err).To(HaveOccurred(), \"error while calling the contract: %v\", err)\n \n-\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n-\t\t\t\tExpect(balancePost.Amount.Int64()).To(Equal(int64(100)), \"expected only initial balance after clawback\")\n-\t\t\t\tbalanceReceiver := s.app.BankKeeper.GetBalance(s.ctx, differentAddr.Bytes(), s.bondDenom)\n-\t\t\t\tExpect(balanceReceiver.Amount).To(Equal(math.NewInt(1000)), \"expected receiver to show different balance after clawback\")\n+\t\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePost.Amount).To(Equal(balancePre.Amount))\n+\t\t\t\t\tbalanceReceiver := s.app.BankKeeper.GetBalance(s.ctx, differentAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balanceReceiver.Amount).To(Equal(math.ZeroInt()))\n+\t\t\t\t})\n \t\t\t})\n \n-\t\t\tIt(fmt.Sprintf(\"should return an error when not sending as the funder (%s)\", callType.name), func() {\n-\t\t\t\t// create and fund new account\n-\t\t\t\tdifferentAddr, differentPriv := testutiltx.NewAddrKey()\n-\t\t\t\terr := evmosutil.FundAccountWithBaseDenom(s.ctx, s.app.BankKeeper, differentAddr.Bytes(), 1e18)\n-\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while funding the account: %v\", err)\n-\n-\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n-\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n-\n-\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n-\t\t\t\t\tWithMethodName(vesting.ClawbackMethod).\n-\t\t\t\t\tWithPrivKey(differentPriv).\n-\t\t\t\t\tWithArgs(\n-\t\t\t\t\t\ts.address,\n-\t\t\t\t\t\ttoAddr,\n-\t\t\t\t\t\tdifferentAddr,\n-\t\t\t\t\t)\n-\n-\t\t\t\tclawbackCheck := execRevertedCheck\n-\t\t\t\tif callType.directCall {\n-\t\t\t\t\tclawbackCheck = failCheck.\n-\t\t\t\t\t\tWithErrContains(fmt.Sprintf(\n-\t\t\t\t\t\t\t\"tx origin address %s does not match the funder address %s\",\n-\t\t\t\t\t\t\tdifferentAddr, s.address,\n-\t\t\t\t\t\t))\n-\t\t\t\t}\n-\n-\t\t\t\t_, _, err = contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, clawbackCheck)\n-\t\t\t\tExpect(err).To(HaveOccurred(), \"error while calling the contract: %v\", err)\n-\t\t\t\tif callType.directCall {\n-\t\t\t\t\tExpect(err.Error()).To(ContainSubstring(\"does not match the funder address\"))\n-\t\t\t\t}\n-\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n-\t\t\t\tExpect(balancePost).To(Equal(balancePre), \"expected balance not to have changed\")\n-\t\t\t})\n-\n-\t\t\tIt(fmt.Sprintf(\"should return an error when the vesting does not exist (%s)\", callType.name), func() {\n-\t\t\t\t// fund the new account\n-\t\t\t\terr := evmosutil.FundAccountWithBaseDenom(s.ctx, s.app.BankKeeper, differentAddr.Bytes(), 1e18)\n-\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while funding the account: %v\", err)\n+\t\t\tContext(\"with authorization\", func() {\n+\t\t\t\tBeforeEach(func() {\n+\t\t\t\t\tif callType.directCall == false {\n+\t\t\t\t\t\terr = vesting.CreateGenericAuthz(s.ctx, s.app.AuthzKeeper, contractAddr, s.address, vesting.ClawbackMsgURL)\n+\t\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while creating the generic authorization: %v\", err)\n+\t\t\t\t\t}\n+\t\t\t\t})\n+\n+\t\t\t\tIt(fmt.Sprintf(\"should claw back from the vesting when sending as the funder (%s)\", callType.name), func() {\n+\t\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n+\n+\t\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\tWithMethodName(vesting.ClawbackMethod).\n+\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\t\tdifferentAddr,\n+\t\t\t\t\t\t)\n \n-\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n-\t\t\t\t\tWithMethodName(vesting.ClawbackMethod).\n-\t\t\t\t\tWithArgs(\n-\t\t\t\t\t\ts.address,\n-\t\t\t\t\t\tdifferentAddr,\n-\t\t\t\t\t\ts.address,\n+\t\t\t\t\tclawbackCheck := passCheck.\n+\t\t\t\t\t\tWithExpEvents(vesting.EventTypeClawback)\n+\n+\t\t\t\t\t_, ethRes, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, clawbackCheck)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\n+\t\t\t\t\tvar co vesting.ClawbackOutput\n+\t\t\t\t\terr = s.precompile.UnpackIntoInterface(&co, vesting.ClawbackMethod, ethRes.Ret)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while unpacking the clawback output: %v\", err)\n+\t\t\t\t\tExpect(co.Coins).To(Equal(balances), \"expected different clawback amount\")\n+\n+\t\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePost.Amount.Int64()).To(Equal(int64(100)), \"expected only initial balance after clawback\")\n+\t\t\t\t\tbalanceReceiver := s.app.BankKeeper.GetBalance(s.ctx, differentAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balanceReceiver.Amount).To(Equal(math.NewInt(1000)), \"expected receiver to show different balance after clawback\")\n+\t\t\t\t})\n+\n+\t\t\t\tContext(\"table tests for clawback with state changes\", func() {\n+\t\t\t\t\ttype testCase struct {\n+\t\t\t\t\t\tdest       common.Address\n+\t\t\t\t\t\ttransferTo *common.Address\n+\t\t\t\t\t\tbefore     bool\n+\t\t\t\t\t\tafter      bool\n+\t\t\t\t\t}\n+\t\t\t\t\tDescribeTable(fmt.Sprintf(\"smart contract as funder - contract with state changes on destination address - should claw back from the vesting when sending as the funder (%s)\", callType.name), func(tc testCase) {\n+\t\t\t\t\t\tif callType.directCall {\n+\t\t\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif tc.transferTo == nil {\n+\t\t\t\t\t\t\ttc.transferTo = &tc.dest\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// change the vesting account funder to be the contract\n+\t\t\t\t\t\t_, err := s.app.VestingKeeper.UpdateVestingFunder(s.ctx, &vestingtypes.MsgUpdateVestingFunder{\n+\t\t\t\t\t\t\tFunderAddress:    sdk.AccAddress(s.address.Bytes()).String(),\n+\t\t\t\t\t\t\tNewFunderAddress: sdk.AccAddress(contractAddr.Bytes()).String(),\n+\t\t\t\t\t\t\tVestingAddress:   sdk.AccAddress(toAddr.Bytes()).String(),\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\tExpect(err).ToNot(HaveOccurred())\n+\n+\t\t\t\t\t\t// fund the contract to make internal transfers\n+\t\t\t\t\t\tcontractInitialBalance := math.NewInt(100)\n+\t\t\t\t\t\terr = evmosutil.FundAccountWithBaseDenom(s.ctx, s.app.BankKeeper, contractAddr.Bytes(), contractInitialBalance.Int64())\n+\t\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while funding the contract: %v\", err)\n+\n+\t\t\t\t\t\tvestAccInitialBal := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\t\tExpect(vestAccInitialBal.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n+\n+\t\t\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\t\tWithMethodName(\"clawbackWithTransfer\").\n+\t\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\t\tcontractAddr,\n+\t\t\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\t\t\ttc.dest,\n+\t\t\t\t\t\t\t\t*tc.transferTo,\n+\t\t\t\t\t\t\t\ttc.before,\n+\t\t\t\t\t\t\t\ttc.after,\n+\t\t\t\t\t\t\t)\n+\n+\t\t\t\t\t\tclawbackCheck := passCheck.\n+\t\t\t\t\t\t\tWithExpEvents(vesting.EventTypeClawback)\n+\n+\t\t\t\t\t\t_, ethRes, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, clawbackCheck)\n+\t\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\n+\t\t\t\t\t\tvar co vesting.ClawbackOutput\n+\t\t\t\t\t\terr = s.precompile.UnpackIntoInterface(&co, vesting.ClawbackMethod, ethRes.Ret)\n+\t\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while unpacking the clawback output: %v\", err)\n+\t\t\t\t\t\tExpect(co.Coins).To(Equal(balances), \"expected different clawback amount\")\n+\n+\t\t\t\t\t\tcontractTransferredAmt := math.ZeroInt()\n+\t\t\t\t\t\tfor _, transferred := range []bool{tc.before, tc.after} {\n+\t\t\t\t\t\t\tif transferred {\n+\t\t\t\t\t\t\t\tcontractTransferredAmt = contractTransferredAmt.AddRaw(15)\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tvestAccFinalBalance := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\t\texpVestAccFinalBal := vestAccInitialBal.Amount.Sub(expClawbackAmt)\n+\t\t\t\t\t\tif *tc.transferTo == toAddr {\n+\t\t\t\t\t\t\texpVestAccFinalBal = expVestAccFinalBal.Add(contractTransferredAmt)\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tExpect(vestAccFinalBalance.Amount).To(Equal(expVestAccFinalBal), \"expected only initial balance after clawback\")\n+\n+\t\t\t\t\t\t// contract transfers balances when it is not the destination\n+\t\t\t\t\t\tif tc.dest == contractAddr {\n+\t\t\t\t\t\t\tcontractFinalBalance := s.app.BankKeeper.GetBalance(s.ctx, contractAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\t\t\tExpect(contractFinalBalance.Amount).To(Equal(contractInitialBalance.Add(expClawbackAmt)))\n+\t\t\t\t\t\t\treturn\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tbalanceDest := s.app.BankKeeper.GetBalance(s.ctx, tc.dest.Bytes(), s.bondDenom)\n+\t\t\t\t\t\texpBalDest := expClawbackAmt\n+\t\t\t\t\t\tif *tc.transferTo == tc.dest {\n+\t\t\t\t\t\t\texpBalDest = expBalDest.Add(contractTransferredAmt)\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tExpect(balanceDest.Amount).To(Equal(expBalDest), \"expected receiver to show different balance after clawback\")\n+\n+\t\t\t\t\t\tcontractFinalBalance := s.app.BankKeeper.GetBalance(s.ctx, contractAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\t\tExpect(contractFinalBalance.Amount).To(Equal(contractInitialBalance.Sub(contractTransferredAmt)))\n+\t\t\t\t\t},\n+\t\t\t\t\t\tEntry(\"funder is the destination address - state changes before & after precompile call\", testCase{\n+\t\t\t\t\t\t\tdest:   contractAddr,\n+\t\t\t\t\t\t\tbefore: true,\n+\t\t\t\t\t\t\tafter:  true,\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tEntry(\"funder is the destination address - state changes before precompile call\", testCase{\n+\t\t\t\t\t\t\tdest:   contractAddr,\n+\t\t\t\t\t\t\tbefore: true,\n+\t\t\t\t\t\t\tafter:  false,\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tEntry(\"funder is the destination address - state changes after precompile call\", testCase{\n+\t\t\t\t\t\t\tdest:   contractAddr,\n+\t\t\t\t\t\t\tbefore: false,\n+\t\t\t\t\t\t\tafter:  true,\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tEntry(\"another address is the destination address - state changes before & after precompile\", testCase{\n+\t\t\t\t\t\t\tdest:   differentAddr,\n+\t\t\t\t\t\t\tbefore: true,\n+\t\t\t\t\t\t\tafter:  true,\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tEntry(\"another address is the destination address - state changes before precompile\", testCase{\n+\t\t\t\t\t\t\tdest:   differentAddr,\n+\t\t\t\t\t\t\tbefore: true,\n+\t\t\t\t\t\t\tafter:  false,\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tEntry(\"another address is the destination address - state changes after precompile\", testCase{\n+\t\t\t\t\t\t\tdest:   differentAddr,\n+\t\t\t\t\t\t\tbefore: false,\n+\t\t\t\t\t\t\tafter:  true,\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tEntry(\"another address is the destination address - transfer to vest acc before & after precompile\", testCase{\n+\t\t\t\t\t\t\tdest:       differentAddr,\n+\t\t\t\t\t\t\ttransferTo: &toAddr,\n+\t\t\t\t\t\t\tbefore:     true,\n+\t\t\t\t\t\t\tafter:      true,\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tEntry(\"another address is the destination address - transfer to vest acc before precompile\", testCase{\n+\t\t\t\t\t\t\tdest:       differentAddr,\n+\t\t\t\t\t\t\ttransferTo: &toAddr,\n+\t\t\t\t\t\t\tbefore:     true,\n+\t\t\t\t\t\t\tafter:      false,\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tEntry(\"another address is the destination address - transfer to vest acc after precompile\", testCase{\n+\t\t\t\t\t\t\tdest:       differentAddr,\n+\t\t\t\t\t\t\ttransferTo: &toAddr,\n+\t\t\t\t\t\t\tbefore:     false,\n+\t\t\t\t\t\t\tafter:      true,\n+\t\t\t\t\t\t}),\n \t\t\t\t\t)\n+\t\t\t\t})\n+\n+\t\t\t\tIt(fmt.Sprintf(\"should claw back from the vesting when sending as the funder with the caller smart contract as destination for the clawed back funds (%s)\", callType.name), func() {\n+\t\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n+\n+\t\t\t\t\t// check the contract's (destination) intial balance. Should be 0\n+\t\t\t\t\tcontractInitialBal := s.app.BankKeeper.GetBalance(s.ctx, contractAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(contractInitialBal.Amount).To(Equal(sdk.ZeroInt()))\n+\n+\t\t\t\t\t// get tx sender initial balance\n+\t\t\t\t\ttxSenderInitialBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\n+\t\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\tWithMethodName(vesting.ClawbackMethod).\n+\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\t\tcontractAddr,\n+\t\t\t\t\t\t).\n+\t\t\t\t\t\tWithGasPrice(gasPrice.BigInt())\n+\n+\t\t\t\t\tclawbackCheck := passCheck.\n+\t\t\t\t\t\tWithExpEvents(vesting.EventTypeClawback)\n+\n+\t\t\t\t\tres, ethRes, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, clawbackCheck)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\n+\t\t\t\t\tfees := gasPrice.MulRaw(res.GasUsed)\n+\n+\t\t\t\t\tvar co vesting.ClawbackOutput\n+\t\t\t\t\terr = s.precompile.UnpackIntoInterface(&co, vesting.ClawbackMethod, ethRes.Ret)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while unpacking the clawback output: %v\", err)\n+\t\t\t\t\tExpect(co.Coins).To(Equal(balances), \"expected different clawback amount\")\n+\n+\t\t\t\t\t// check clawback account balance\n+\t\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePost.Amount.Int64()).To(Equal(int64(100)), \"expected only initial balance after clawback\")\n+\n+\t\t\t\t\t// check that tx signer's balance is reduced by the fees paid\n+\t\t\t\t\ttxSenderFinalBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(txSenderFinalBal.Amount).To(Equal(txSenderInitialBal.Amount.Sub(fees)))\n+\n+\t\t\t\t\t// check contract's final balance (clawback destination)\n+\t\t\t\t\tcontractFinalBal := s.app.BankKeeper.GetBalance(s.ctx, contractAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(contractFinalBal.Amount).To(Equal(math.NewInt(1000)), \"expected receiver to show different balance after clawback\")\n+\t\t\t\t})\n+\n+\t\t\t\tIt(fmt.Sprintf(\"clawback with revert after precompile call but before changing contract state - should NOT claw back and revert all balances to initial values (%s)\", callType.name), func() {\n+\t\t\t\t\tif callType.directCall {\n+\t\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t\t}\n+\t\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n+\n+\t\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\tWithMethodName(\"clawbackWithRevert\").\n+\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\t\tdifferentAddr,\n+\t\t\t\t\t\t\ttrue,\n+\t\t\t\t\t\t)\n \n-\t\t\t\tclawbackCheck := execRevertedCheck\n-\t\t\t\t// FIXME: error messages in fail check now work differently!\n-\t\t\t\tif callType.directCall {\n-\t\t\t\t\tclawbackCheck = failCheck.\n-\t\t\t\t\t\tWithErrContains(vestingtypes.ErrNotSubjectToClawback.Error())\n-\t\t\t\t}\n-\n-\t\t\t\t_, _, err = contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, clawbackCheck)\n-\t\t\t\tExpect(err).To(HaveOccurred(), \"error while calling the contract: %v\", err)\n-\t\t\t\tif callType.directCall {\n-\t\t\t\t\tExpect(err.Error()).To(ContainSubstring(\"%s: %s\", sdk.AccAddress(differentAddr.Bytes()), vestingtypes.ErrNotSubjectToClawback.Error()))\n-\t\t\t\t}\n-\t\t\t})\n+\t\t\t\t\t_, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, execRevertedCheck)\n+\t\t\t\t\tExpect(err).To(HaveOccurred())\n+\n+\t\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePost.Amount).To(Equal(balancePre.Amount), \"expected no balance change\")\n+\t\t\t\t\tbalanceReceiver := s.app.BankKeeper.GetBalance(s.ctx, differentAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balanceReceiver.Amount).To(Equal(math.ZeroInt()))\n+\t\t\t\t})\n+\n+\t\t\t\tIt(fmt.Sprintf(\"clawback with revert after precompile after changing contract state - should NOT claw back and revert all balances to initial values (%s)\", callType.name), func() {\n+\t\t\t\t\tif callType.directCall {\n+\t\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t\t}\n+\t\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n+\n+\t\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\tWithMethodName(\"clawbackWithRevert\").\n+\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\t\tdifferentAddr,\n+\t\t\t\t\t\t\tfalse,\n+\t\t\t\t\t\t)\n \n-\t\t\tIt(fmt.Sprintf(\"should succeed and return empty Coins when all tokens are vested (%s)\", callType.name), func() {\n-\t\t\t\t// commit block with time so that vesting has ended\n-\t\t\t\tctx, err := evmosutil.CommitAndCreateNewCtx(s.ctx, s.app, time.Hour*24, nil)\n-\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while committing block: %v\", err)\n-\t\t\t\ts.ctx = ctx\n+\t\t\t\t\t_, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, execRevertedCheck)\n+\t\t\t\t\tExpect(err).To(HaveOccurred())\n+\n+\t\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePost.Amount).To(Equal(balancePre.Amount), \"expected no balance change\")\n+\t\t\t\t\tbalanceReceiver := s.app.BankKeeper.GetBalance(s.ctx, differentAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balanceReceiver.Amount).To(Equal(math.ZeroInt()))\n+\t\t\t\t})\n+\n+\t\t\t\tIt(fmt.Sprintf(\"another contract as destination - should clawback from the vesting when sending as the funder with another smart contract as destination for the clawed back funds (%s)\", callType.name), func() {\n+\t\t\t\t\tcounterContract, err := contracts.LoadCounterContract()\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred())\n+\n+\t\t\t\t\tdestContractAddr, err := s.DeployContract(counterContract)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while deploying the smart contract: %v\", err)\n+\n+\t\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n+\n+\t\t\t\t\t// check the contract's (destination) intial balance. Should be 0\n+\t\t\t\t\tdestContractInitialBal := s.app.BankKeeper.GetBalance(s.ctx, destContractAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(destContractInitialBal.Amount).To(Equal(sdk.ZeroInt()))\n+\n+\t\t\t\t\t// get tx sender initial balance\n+\t\t\t\t\ttxSenderInitialBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\n+\t\t\t\t\tclawbackCheck := passCheck.\n+\t\t\t\t\t\tWithExpEvents(vesting.EventTypeClawback)\n+\n+\t\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\tWithMethodName(vesting.ClawbackMethod).\n+\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\t\tdestContractAddr,\n+\t\t\t\t\t\t).\n+\t\t\t\t\t\tWithGasPrice(gasPrice.BigInt())\n+\n+\t\t\t\t\tres, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, clawbackCheck)\n+\t\t\t\t\tExpect(err).NotTo(HaveOccurred())\n+\t\t\t\t\tfees := gasPrice.MulRaw(res.GasUsed)\n+\n+\t\t\t\t\t// check clawback account balance\n+\t\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePost.Amount).To(Equal(balancePre.Amount.Sub(expClawbackAmt)))\n+\n+\t\t\t\t\t// check that tx signer's balance is reduced by the fees paid\n+\t\t\t\t\ttxSenderFinalBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(txSenderFinalBal.Amount).To(Equal(txSenderInitialBal.Amount.Sub(fees)))\n+\n+\t\t\t\t\t// check caller contract's final balance should be zero\n+\t\t\t\t\tcallerContractFinalBal := s.app.BankKeeper.GetBalance(s.ctx, contractAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(callerContractFinalBal.Amount).To(Equal(math.ZeroInt()))\n+\n+\t\t\t\t\t// check destination contract's final balance should\n+\t\t\t\t\t// have received the clawback amt\n+\t\t\t\t\tdestContractFinalBal := s.app.BankKeeper.GetBalance(s.ctx, destContractAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(destContractFinalBal.Amount).To(Equal(destContractInitialBal.Amount.Add(expClawbackAmt)))\n+\t\t\t\t})\n+\n+\t\t\t\tIt(fmt.Sprintf(\"another contract as destination - should claw back from the vesting when sending as the funder with another smart contract as destination and triggering state change on destination contract (%s)\", callType.name), func() {\n+\t\t\t\t\tif callType.directCall {\n+\t\t\t\t\t\tSkip(\"this should only be run for smart contract calls\")\n+\t\t\t\t\t}\n+\t\t\t\t\tcounterContract, err := contracts.LoadCounterContract()\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred())\n+\n+\t\t\t\t\tdestContractAddr, err := s.DeployContract(counterContract)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while deploying the smart contract: %v\", err)\n+\n+\t\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n+\n+\t\t\t\t\t// check the contract's (destination) intial balance. Should be 0\n+\t\t\t\t\tdestContractInitialBal := s.app.BankKeeper.GetBalance(s.ctx, destContractAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(destContractInitialBal.Amount).To(Equal(sdk.ZeroInt()))\n+\n+\t\t\t\t\t// get tx sender initial balance\n+\t\t\t\t\ttxSenderInitialBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\n+\t\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\tWithMethodName(\"clawbackWithCounterCall\").\n+\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\t\tdestContractAddr,\n+\t\t\t\t\t\t).\n+\t\t\t\t\t\tWithGasPrice(gasPrice.BigInt())\n+\n+\t\t\t\t\t// expect the vesting precompile events and the Counter\n+\t\t\t\t\t// contract's events\n+\t\t\t\t\tclawbackCheck := passCheck.\n+\t\t\t\t\t\tWithABIEvents(mergeEventMaps(\n+\t\t\t\t\t\t\ts.precompile.Events,\n+\t\t\t\t\t\t\tcounterContract.ABI.Events,\n+\t\t\t\t\t\t)).\n+\t\t\t\t\t\tWithExpEvents([]string{\n+\t\t\t\t\t\t\t\"Added\", \"Changed\",\n+\t\t\t\t\t\t\tvesting.EventTypeClawback,\n+\t\t\t\t\t\t\t\"Changed\",\n+\t\t\t\t\t\t}...)\n+\n+\t\t\t\t\tres, _, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, clawbackCheck)\n+\t\t\t\t\tExpect(err).NotTo(HaveOccurred())\n+\t\t\t\t\tfees := gasPrice.MulRaw(res.GasUsed)\n+\n+\t\t\t\t\t// check clawback account balance\n+\t\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePost.Amount).To(Equal(balancePre.Amount.Sub(expClawbackAmt)))\n+\n+\t\t\t\t\t// check that tx signer's balance is reduced by the fees paid\n+\t\t\t\t\ttxSenderFinalBal := s.app.BankKeeper.GetBalance(s.ctx, s.address.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(txSenderFinalBal.Amount).To(Equal(txSenderInitialBal.Amount.Sub(fees)))\n+\n+\t\t\t\t\t// check caller contract's final balance should be zero\n+\t\t\t\t\tcallerContractFinalBal := s.app.BankKeeper.GetBalance(s.ctx, contractAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(callerContractFinalBal.Amount).To(Equal(math.ZeroInt()))\n+\n+\t\t\t\t\t// check destination contract's final balance should\n+\t\t\t\t\t// have received the clawback amt\n+\t\t\t\t\tdestContractFinalBal := s.app.BankKeeper.GetBalance(s.ctx, destContractAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(destContractFinalBal.Amount).To(Equal(destContractInitialBal.Amount.Add(expClawbackAmt)))\n+\t\t\t\t})\n+\n+\t\t\t\tIt(fmt.Sprintf(\"should return an error when not sending as the funder (%s)\", callType.name), func() {\n+\t\t\t\t\t// create and fund new account\n+\t\t\t\t\tdifferentAddr, differentPriv := testutiltx.NewAddrKey()\n+\t\t\t\t\terr := evmosutil.FundAccountWithBaseDenom(s.ctx, s.app.BankKeeper, differentAddr.Bytes(), 1e18)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while funding the account: %v\", err)\n+\n+\t\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n+\n+\t\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\tWithMethodName(vesting.ClawbackMethod).\n+\t\t\t\t\t\tWithPrivKey(differentPriv).\n+\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\t\tdifferentAddr,\n+\t\t\t\t\t\t)\n \n-\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n-\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n+\t\t\t\t\tclawbackCheck := execRevertedCheck\n+\t\t\t\t\tif callType.directCall {\n+\t\t\t\t\t\tclawbackCheck = failCheck.\n+\t\t\t\t\t\t\tWithErrContains(fmt.Sprintf(\n+\t\t\t\t\t\t\t\t\"tx origin address %s does not match the funder address %s\",\n+\t\t\t\t\t\t\t\tdifferentAddr, s.address,\n+\t\t\t\t\t\t\t))\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t_, _, err = contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, clawbackCheck)\n+\t\t\t\t\tExpect(err).To(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\t\t\t\t\tif callType.directCall {\n+\t\t\t\t\t\tExpect(err.Error()).To(ContainSubstring(\"does not match the funder address\"))\n+\t\t\t\t\t}\n+\t\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePost).To(Equal(balancePre), \"expected balance not to have changed\")\n+\t\t\t\t})\n+\n+\t\t\t\tIt(fmt.Sprintf(\"should return an error when the vesting does not exist (%s)\", callType.name), func() {\n+\t\t\t\t\t// fund the new account\n+\t\t\t\t\terr := evmosutil.FundAccountWithBaseDenom(s.ctx, s.app.BankKeeper, differentAddr.Bytes(), 1e18)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while funding the account: %v\", err)\n+\n+\t\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\tWithMethodName(vesting.ClawbackMethod).\n+\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t\tdifferentAddr,\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t)\n \n-\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n-\t\t\t\t\tWithMethodName(vesting.ClawbackMethod).\n-\t\t\t\t\tWithArgs(\n-\t\t\t\t\t\ts.address,\n-\t\t\t\t\t\ttoAddr,\n-\t\t\t\t\t\ts.address,\n-\t\t\t\t\t)\n+\t\t\t\t\tclawbackCheck := execRevertedCheck\n+\t\t\t\t\tif callType.directCall {\n+\t\t\t\t\t\tclawbackCheck = failCheck.\n+\t\t\t\t\t\t\tWithErrContains(vestingtypes.ErrNotSubjectToClawback.Error())\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t_, _, err = contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, clawbackCheck)\n+\t\t\t\t\tExpect(err).To(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\t\t\t\t\tif callType.directCall {\n+\t\t\t\t\t\tExpect(err.Error()).To(ContainSubstring(\"%s: %s\", sdk.AccAddress(differentAddr.Bytes()), vestingtypes.ErrNotSubjectToClawback.Error()))\n+\t\t\t\t\t}\n+\t\t\t\t})\n+\n+\t\t\t\tIt(fmt.Sprintf(\"should succeed and return empty Coins when all tokens are vested (%s)\", callType.name), func() {\n+\t\t\t\t\t// commit block with time so that vesting has ended\n+\t\t\t\t\tctx, err := evmosutil.CommitAndCreateNewCtx(s.ctx, s.app, time.Hour*24, nil)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while committing block: %v\", err)\n+\t\t\t\t\ts.ctx = ctx\n+\n+\t\t\t\t\tbalancePre := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePre.Amount).To(Equal(math.NewInt(1100)), \"expected different balance after setup\")\n+\n+\t\t\t\t\tclawbackArgs := s.BuildCallArgs(callType, contractAddr).\n+\t\t\t\t\t\tWithMethodName(vesting.ClawbackMethod).\n+\t\t\t\t\t\tWithArgs(\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t\ttoAddr,\n+\t\t\t\t\t\t\ts.address,\n+\t\t\t\t\t\t)\n \n-\t\t\t\t_, ethRes, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, passCheck)\n-\t\t\t\tExpect(err).To(HaveOccurred(), \"error while calling the contract: %v\", err)\n+\t\t\t\t\t_, ethRes, err := contracts.CallContractAndCheckLogs(s.ctx, s.app, clawbackArgs, passCheck)\n+\t\t\t\t\tExpect(err).To(HaveOccurred(), \"error while calling the contract: %v\", err)\n \n-\t\t\t\tvar co vesting.ClawbackOutput\n-\t\t\t\terr = s.precompile.UnpackIntoInterface(&co, vesting.ClawbackMethod, ethRes.Ret)\n-\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while unpacking the clawback output: %v\", err)\n-\t\t\t\tExpect(co.Coins).To(BeEmpty(), \"expected empty clawback amount\")\n+\t\t\t\t\tvar co vesting.ClawbackOutput\n+\t\t\t\t\terr = s.precompile.UnpackIntoInterface(&co, vesting.ClawbackMethod, ethRes.Ret)\n+\t\t\t\t\tExpect(err).ToNot(HaveOccurred(), \"error while unpacking the clawback output: %v\", err)\n+\t\t\t\t\tExpect(co.Coins).To(BeEmpty(), \"expected empty clawback amount\")\n \n-\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n-\t\t\t\tExpect(balancePost).To(Equal(balancePre), \"expected balance not to have changed\")\n+\t\t\t\t\tbalancePost := s.app.BankKeeper.GetBalance(s.ctx, toAddr.Bytes(), s.bondDenom)\n+\t\t\t\t\tExpect(balancePost).To(Equal(balancePre), \"expected balance not to have changed\")\n+\t\t\t\t})\n \t\t\t})\n \t\t}\n \t})"
        },
        {
          "filename": "precompiles/vesting/testdata/VestingCaller.json",
          "status": "modified",
          "additions": 335,
          "deletions": 2,
          "patch": "@@ -109,6 +109,149 @@\n       \"stateMutability\": \"nonpayable\",\n       \"type\": \"function\"\n     },\n+    {\n+      \"inputs\": [\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"funder\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"account\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"dest\",\n+          \"type\": \"address\"\n+        }\n+      ],\n+      \"name\": \"clawbackWithCounterCall\",\n+      \"outputs\": [\n+        {\n+          \"components\": [\n+            {\n+              \"internalType\": \"string\",\n+              \"name\": \"denom\",\n+              \"type\": \"string\"\n+            },\n+            {\n+              \"internalType\": \"uint256\",\n+              \"name\": \"amount\",\n+              \"type\": \"uint256\"\n+            }\n+          ],\n+          \"internalType\": \"struct Coin[]\",\n+          \"name\": \"coins\",\n+          \"type\": \"tuple[]\"\n+        }\n+      ],\n+      \"stateMutability\": \"nonpayable\",\n+      \"type\": \"function\"\n+    },\n+    {\n+      \"inputs\": [\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"funder\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"account\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"dest\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"bool\",\n+          \"name\": \"before\",\n+          \"type\": \"bool\"\n+        }\n+      ],\n+      \"name\": \"clawbackWithRevert\",\n+      \"outputs\": [\n+        {\n+          \"components\": [\n+            {\n+              \"internalType\": \"string\",\n+              \"name\": \"denom\",\n+              \"type\": \"string\"\n+            },\n+            {\n+              \"internalType\": \"uint256\",\n+              \"name\": \"amount\",\n+              \"type\": \"uint256\"\n+            }\n+          ],\n+          \"internalType\": \"struct Coin[]\",\n+          \"name\": \"coins\",\n+          \"type\": \"tuple[]\"\n+        }\n+      ],\n+      \"stateMutability\": \"nonpayable\",\n+      \"type\": \"function\"\n+    },\n+    {\n+      \"inputs\": [\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"funder\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"account\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"dest\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"address payable\",\n+          \"name\": \"_transferTo\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"bool\",\n+          \"name\": \"_before\",\n+          \"type\": \"bool\"\n+        },\n+        {\n+          \"internalType\": \"bool\",\n+          \"name\": \"_after\",\n+          \"type\": \"bool\"\n+        }\n+      ],\n+      \"name\": \"clawbackWithTransfer\",\n+      \"outputs\": [\n+        {\n+          \"components\": [\n+            {\n+              \"internalType\": \"string\",\n+              \"name\": \"denom\",\n+              \"type\": \"string\"\n+            },\n+            {\n+              \"internalType\": \"uint256\",\n+              \"name\": \"amount\",\n+              \"type\": \"uint256\"\n+            }\n+          ],\n+          \"internalType\": \"struct Coin[]\",\n+          \"name\": \"coins\",\n+          \"type\": \"tuple[]\"\n+        }\n+      ],\n+      \"stateMutability\": \"nonpayable\",\n+      \"type\": \"function\"\n+    },\n     {\n       \"inputs\": [\n         {\n@@ -122,6 +265,19 @@\n       \"stateMutability\": \"nonpayable\",\n       \"type\": \"function\"\n     },\n+    {\n+      \"inputs\": [],\n+      \"name\": \"counter\",\n+      \"outputs\": [\n+        {\n+          \"internalType\": \"uint256\",\n+          \"name\": \"\",\n+          \"type\": \"uint256\"\n+        }\n+      ],\n+      \"stateMutability\": \"view\",\n+      \"type\": \"function\"\n+    },\n     {\n       \"inputs\": [\n         {\n@@ -233,6 +389,183 @@\n       \"stateMutability\": \"nonpayable\",\n       \"type\": \"function\"\n     },\n+    {\n+      \"inputs\": [\n+        {\n+          \"internalType\": \"address payable\",\n+          \"name\": \"funder\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"to\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"address payable\",\n+          \"name\": \"_transferTo\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"uint64\",\n+          \"name\": \"startTime\",\n+          \"type\": \"uint64\"\n+        },\n+        {\n+          \"components\": [\n+            {\n+              \"internalType\": \"int64\",\n+              \"name\": \"length\",\n+              \"type\": \"int64\"\n+            },\n+            {\n+              \"components\": [\n+                {\n+                  \"internalType\": \"string\",\n+                  \"name\": \"denom\",\n+                  \"type\": \"string\"\n+                },\n+                {\n+                  \"internalType\": \"uint256\",\n+                  \"name\": \"amount\",\n+                  \"type\": \"uint256\"\n+                }\n+              ],\n+              \"internalType\": \"struct Coin[]\",\n+              \"name\": \"amount\",\n+              \"type\": \"tuple[]\"\n+            }\n+          ],\n+          \"internalType\": \"struct Period[]\",\n+          \"name\": \"lockupPeriods\",\n+          \"type\": \"tuple[]\"\n+        },\n+        {\n+          \"components\": [\n+            {\n+              \"internalType\": \"int64\",\n+              \"name\": \"length\",\n+              \"type\": \"int64\"\n+            },\n+            {\n+              \"components\": [\n+                {\n+                  \"internalType\": \"string\",\n+                  \"name\": \"denom\",\n+                  \"type\": \"string\"\n+                },\n+                {\n+                  \"internalType\": \"uint256\",\n+                  \"name\": \"amount\",\n+                  \"type\": \"uint256\"\n+                }\n+              ],\n+              \"internalType\": \"struct Coin[]\",\n+              \"name\": \"amount\",\n+              \"type\": \"tuple[]\"\n+            }\n+          ],\n+          \"internalType\": \"struct Period[]\",\n+          \"name\": \"vestingPeriods\",\n+          \"type\": \"tuple[]\"\n+        },\n+        {\n+          \"internalType\": \"bool\",\n+          \"name\": \"transferBefore\",\n+          \"type\": \"bool\"\n+        },\n+        {\n+          \"internalType\": \"bool\",\n+          \"name\": \"transferAfter\",\n+          \"type\": \"bool\"\n+        }\n+      ],\n+      \"name\": \"fundVestingAccountAndTransfer\",\n+      \"outputs\": [],\n+      \"stateMutability\": \"nonpayable\",\n+      \"type\": \"function\"\n+    },\n+    {\n+      \"inputs\": [\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"funder\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"address\",\n+          \"name\": \"to\",\n+          \"type\": \"address\"\n+        },\n+        {\n+          \"internalType\": \"uint64\",\n+          \"name\": \"startTime\",\n+          \"type\": \"uint64\"\n+        },\n+        {\n+          \"components\": [\n+            {\n+              \"internalType\": \"int64\",\n+              \"name\": \"length\",\n+              \"type\": \"int64\"\n+            },\n+            {\n+              \"components\": [\n+                {\n+                  \"internalType\": \"string\",\n+                  \"name\": \"denom\",\n+                  \"type\": \"string\"\n+                },\n+                {\n+                  \"internalType\": \"uint256\",\n+                  \"name\": \"amount\",\n+                  \"type\": \"uint256\"\n+                }\n+              ],\n+              \"internalType\": \"struct Coin[]\",\n+              \"name\": \"amount\",\n+              \"type\": \"tuple[]\"\n+            }\n+          ],\n+          \"internalType\": \"struct Period[]\",\n+          \"name\": \"lockupPeriods\",\n+          \"type\": \"tuple[]\"\n+        },\n+        {\n+          \"components\": [\n+            {\n+              \"internalType\": \"int64\",\n+              \"name\": \"length\",\n+              \"type\": \"int64\"\n+            },\n+            {\n+              \"components\": [\n+                {\n+                  \"internalType\": \"string\",\n+                  \"name\": \"denom\",\n+                  \"type\": \"string\"\n+                },\n+                {\n+                  \"internalType\": \"uint256\",\n+                  \"name\": \"amount\",\n+                  \"type\": \"uint256\"\n+                }\n+              ],\n+              \"internalType\": \"struct Coin[]\",\n+              \"name\": \"amount\",\n+              \"type\": \"tuple[]\"\n+            }\n+          ],\n+          \"internalType\": \"struct Period[]\",\n+          \"name\": \"vestingPeriods\",\n+          \"type\": \"tuple[]\"\n+        }\n+      ],\n+      \"name\": \"fundVestingAccountWithCounterContract\",\n+      \"outputs\": [],\n+      \"stateMutability\": \"nonpayable\",\n+      \"type\": \"function\"\n+    },\n     {\n       \"inputs\": [\n         {\n@@ -257,8 +590,8 @@\n       \"type\": \"function\"\n     }\n   ],\n-  \"bytecode\": \"\",\n-  \"deployedBytecode\": \"\",\n+  \"bytecode\": \"0x608060405234801561001057600080fd5b506127ac806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636c49d3031161008c5780638e292e40116100665780638e292e40146101fe5780639cfef1291461022e578063cdb501751461024a578063fc9c1a8714610266576100cf565b80636c49d303146101a857806372e7c9ab146101c45780637caef81b146101f4576100cf565b806303f4be50146100d45780631e9178bb1461010457806327e235e3146101205780634fe1a8df146101525780635a2110641461016e57806361bc221a1461018a575b600080fd5b6100ee60048036038101906100e99190611233565b610296565b6040516100fb919061142e565b60405180910390f35b61011e6004803603810190610119919061156b565b61041c565b005b61013a60048036038101906101359190611662565b61068f565b6040516101499392919061168f565b60405180910390f35b61016c600480360381019061016791906116db565b610722565b005b61018860048036038101906101839190611662565b610828565b005b6101926108ee565b60405161019f91906117a6565b60405180910390f35b6101c260048036038101906101bd91906116db565b6108f4565b005b6101de60048036038101906101d99190611233565b610ac0565b6040516101eb919061142e565b60405180910390f35b6101fc610b80565b005b610218600480360381019061021391906117c1565b610c4a565b604051610225919061142e565b60405180910390f35b61024860048036038101906102439190611233565b610d94565b005b610264600480360381019061025f9190611828565b610e60565b005b610280600480360381019061027b919061187b565b610f2c565b60405161028d919061142e565b60405180910390f35b606060008290508073ffffffffffffffffffffffffffffffffffffffff16634f2be91f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b5050505060008081548092919061030f90611937565b919050555061080373ffffffffffffffffffffffffffffffffffffffff166372e7c9ab8686866040518463ffffffff1660e01b81526004016103539392919061198e565b6000604051808303816000875af1158015610372573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061039b9190611c69565b91508073ffffffffffffffffffffffffffffffffffffffff16636deebae36040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103e557600080fd5b505af11580156103f9573d6000803e3d6000fd5b5050505060008081548092919061040f90611cb2565b9190505550509392505050565b81156104e85760008081548092919061043490611937565b919050555060008873ffffffffffffffffffffffffffffffffffffffff16600f60405161046090611d0c565b60006040518083038185875af1925050503d806000811461049d576040519150601f19603f3d011682016040523d82523d6000602084013e6104a2565b606091505b50509050806104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd90611d7e565b60405180910390fd5b505b600061080373ffffffffffffffffffffffffffffffffffffffff16634fe1a8df8c8c8b8b8b8b8b6040518863ffffffff1660e01b815260040161053197969594939291906121f6565b6020604051808303816000875af1158015610550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105749190612270565b9050806105b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ad9061230f565b60405180910390fd5b81156106825760008973ffffffffffffffffffffffffffffffffffffffff16600f6040516105e390611d0c565b60006040518083038185875af1925050503d8060008114610620576040519150601f19603f3d011682016040523d82523d6000602084013e610625565b606091505b5050905080610669576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066090611d7e565b60405180910390fd5b60008081548092919061067b90611937565b9190505550505b5050505050505050505050565b606080606061080373ffffffffffffffffffffffffffffffffffffffff166327e235e3856040518263ffffffff1660e01b81526004016106cf919061232f565b600060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610715919061234a565b9250925092509193909250565b60008081548092919061073490611937565b9190505550600061080373ffffffffffffffffffffffffffffffffffffffff16634fe1a8df898989898989896040518863ffffffff1660e01b815260040161078297969594939291906123f1565b6020604051808303816000875af11580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c59190612270565b905080610807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fe9061230f565b60405180910390fd5b60008081548092919061081990611cb2565b91905055505050505050505050565b600061080373ffffffffffffffffffffffffffffffffffffffff16635a211064836040518263ffffffff1660e01b8152600401610865919061232f565b6020604051808303816000875af1158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a89190612270565b9050806108ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e1906124c8565b60405180910390fd5b5050565b60005481565b60008790508073ffffffffffffffffffffffffffffffffffffffff16634f2be91f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561094157600080fd5b505af1158015610955573d6000803e3d6000fd5b5050505060008081548092919061096b90611937565b9190505550600061080373ffffffffffffffffffffffffffffffffffffffff16634fe1a8df8a8a8a8a8a8a8a6040518863ffffffff1660e01b81526004016109b997969594939291906123f1565b6020604051808303816000875af11580156109d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190612270565b905080610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a359061230f565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16636deebae36040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a8657600080fd5b505af1158015610a9a573d6000803e3d6000fd5b50505050600080815480929190610ab090611cb2565b9190505550505050505050505050565b6060600080815480929190610ad490611937565b919050555061080373ffffffffffffffffffffffffffffffffffffffff166372e7c9ab8585856040518463ffffffff1660e01b8152600401610b189392919061198e565b6000604051808303816000875af1158015610b37573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b609190611c69565b9050600080815480929190610b7490611cb2565b91905055509392505050565b600061080373ffffffffffffffffffffffffffffffffffffffff1663cdb50175333060006040518463ffffffff1660e01b8152600401610bc2939291906124f7565b6020604051808303816000875af1158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c059190612270565b905080610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e906125c6565b60405180910390fd5b50565b6060600080815480929190610c5e90611937565b919050555061080373ffffffffffffffffffffffffffffffffffffffff166372e7c9ab8686866040518463ffffffff1660e01b8152600401610ca29392919061198e565b6000604051808303816000875af1158015610cc1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cea9190611c69565b90508115610d34576000610d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2a90612632565b60405180910390fd5b5b600080815480929190610d4690611cb2565b91905055506000610d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8390612632565b60405180910390fd5b949350505050565b600061080373ffffffffffffffffffffffffffffffffffffffff16639cfef1298585856040518463ffffffff1660e01b8152600401610dd59392919061198e565b6020604051808303816000875af1158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190612270565b905080610e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e51906126c4565b60405180910390fd5b50505050565b600061080373ffffffffffffffffffffffffffffffffffffffff1663cdb501758585856040518463ffffffff1660e01b8152600401610ea1939291906124f7565b6020604051808303816000875af1158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee49190612270565b905080610f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1d9061230f565b60405180910390fd5b50505050565b6060821561102e57600080815480929190610f4690611937565b91905055503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461102d5760008473ffffffffffffffffffffffffffffffffffffffff16600f604051610fa590611d0c565b60006040518083038185875af1925050503d8060008114610fe2576040519150601f19603f3d011682016040523d82523d6000602084013e610fe7565b606091505b505090508061102b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102290612756565b60405180910390fd5b505b5b61080373ffffffffffffffffffffffffffffffffffffffff166372e7c9ab8888886040518463ffffffff1660e01b815260040161106d9392919061198e565b6000604051808303816000875af115801561108c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110b59190611c69565b905081156111b7576000808154809291906110cf90611937565b91905055503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146111b65760008473ffffffffffffffffffffffffffffffffffffffff16600f60405161112e90611d0c565b60006040518083038185875af1925050503d806000811461116b576040519150601f19603f3d011682016040523d82523d6000602084013e611170565b606091505b50509050806111b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ab90612756565b60405180910390fd5b505b5b9695505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611200826111d5565b9050919050565b611210816111f5565b811461121b57600080fd5b50565b60008135905061122d81611207565b92915050565b60008060006060848603121561124c5761124b6111cb565b5b600061125a8682870161121e565b935050602061126b8682870161121e565b925050604061127c8682870161121e565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112ec5780820151818401526020810190506112d1565b60008484015250505050565b6000601f19601f8301169050919050565b6000611314826112b2565b61131e81856112bd565b935061132e8185602086016112ce565b611337816112f8565b840191505092915050565b6000819050919050565b61135581611342565b82525050565b600060408301600083015184820360008601526113788282611309565b915050602083015161138d602086018261134c565b508091505092915050565b60006113a4838361135b565b905092915050565b6000602082019050919050565b60006113c482611286565b6113ce8185611291565b9350836020820285016113e0856112a2565b8060005b8581101561141c57848403895281516113fd8582611398565b9450611408836113ac565b925060208a019950506001810190506113e4565b50829750879550505050505092915050565b6000602082019050818103600083015261144881846113b9565b905092915050565b600061145b826111d5565b9050919050565b61146b81611450565b811461147657600080fd5b50565b60008135905061148881611462565b92915050565b600067ffffffffffffffff82169050919050565b6114ab8161148e565b81146114b657600080fd5b50565b6000813590506114c8816114a2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126114f3576114f26114ce565b5b8235905067ffffffffffffffff8111156115105761150f6114d3565b5b60208301915083602082028301111561152c5761152b6114d8565b5b9250929050565b60008115159050919050565b61154881611533565b811461155357600080fd5b50565b6000813590506115658161153f565b92915050565b6000806000806000806000806000806101008b8d03121561158f5761158e6111cb565b5b600061159d8d828e01611479565b9a505060206115ae8d828e0161121e565b99505060406115bf8d828e01611479565b98505060606115d08d828e016114b9565b97505060808b013567ffffffffffffffff8111156115f1576115f06111d0565b5b6115fd8d828e016114dd565b965096505060a08b013567ffffffffffffffff8111156116205761161f6111d0565b5b61162c8d828e016114dd565b945094505060c061163f8d828e01611556565b92505060e06116508d828e01611556565b9150509295989b9194979a5092959850565b600060208284031215611678576116776111cb565b5b60006116868482850161121e565b91505092915050565b600060608201905081810360008301526116a981866113b9565b905081810360208301526116bd81856113b9565b905081810360408301526116d181846113b9565b9050949350505050565b600080600080600080600060a0888a0312156116fa576116f96111cb565b5b60006117088a828b0161121e565b97505060206117198a828b0161121e565b965050604061172a8a828b016114b9565b955050606088013567ffffffffffffffff81111561174b5761174a6111d0565b5b6117578a828b016114dd565b9450945050608088013567ffffffffffffffff81111561177a576117796111d0565b5b6117868a828b016114dd565b925092505092959891949750929550565b6117a081611342565b82525050565b60006020820190506117bb6000830184611797565b92915050565b600080600080608085870312156117db576117da6111cb565b5b60006117e98782880161121e565b94505060206117fa8782880161121e565b935050604061180b8782880161121e565b925050606061181c87828801611556565b91505092959194509250565b600080600060608486031215611841576118406111cb565b5b600061184f8682870161121e565b93505060206118608682870161121e565b925050604061187186828701611556565b9150509250925092565b60008060008060008060c08789031215611898576118976111cb565b5b60006118a689828a0161121e565b96505060206118b789828a0161121e565b95505060406118c889828a0161121e565b94505060606118d989828a01611479565b93505060806118ea89828a01611556565b92505060a06118fb89828a01611556565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061194282611342565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197457611973611908565b5b600182019050919050565b611988816111f5565b82525050565b60006060820190506119a3600083018661197f565b6119b0602083018561197f565b6119bd604083018461197f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119fd826112f8565b810181811067ffffffffffffffff82111715611a1c57611a1b6119c5565b5b80604052505050565b6000611a2f6111c1565b9050611a3b82826119f4565b919050565b600067ffffffffffffffff821115611a5b57611a5a6119c5565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611a9657611a956119c5565b5b611a9f826112f8565b9050602081019050919050565b6000611abf611aba84611a7b565b611a25565b905082815260208101848484011115611adb57611ada611a76565b5b611ae68482856112ce565b509392505050565b600082601f830112611b0357611b026114ce565b5b8151611b13848260208601611aac565b91505092915050565b611b2581611342565b8114611b3057600080fd5b50565b600081519050611b4281611b1c565b92915050565b600060408284031215611b5e57611b5d611a6c565b5b611b686040611a25565b9050600082015167ffffffffffffffff811115611b8857611b87611a71565b5b611b9484828501611aee565b6000830152506020611ba884828501611b33565b60208301525092915050565b6000611bc7611bc284611a40565b611a25565b90508083825260208201905060208402830185811115611bea57611be96114d8565b5b835b81811015611c3157805167ffffffffffffffff811115611c0f57611c0e6114ce565b5b808601611c1c8982611b48565b85526020850194505050602081019050611bec565b5050509392505050565b600082601f830112611c5057611c4f6114ce565b5b8151611c60848260208601611bb4565b91505092915050565b600060208284031215611c7f57611c7e6111cb565b5b600082015167ffffffffffffffff811115611c9d57611c9c6111d0565b5b611ca984828501611c3b565b91505092915050565b6000611cbd82611342565b915060008203611cd057611ccf611908565b5b600182039050919050565b600081905092915050565b50565b6000611cf6600083611cdb565b9150611d0182611ce6565b600082019050919050565b6000611d1782611ce9565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e6420457468657220746f2066756e6465720000600082015250565b6000611d68601e83611d21565b9150611d7382611d32565b602082019050919050565b60006020820190508181036000830152611d9781611d5b565b9050919050565b6000819050919050565b6000611dc3611dbe611db9846111d5565b611d9e565b6111d5565b9050919050565b6000611dd582611da8565b9050919050565b6000611de782611dca565b9050919050565b611df781611ddc565b82525050565b611e068161148e565b82525050565b600082825260208201905092915050565b6000819050919050565b60008160070b9050919050565b611e3d81611e27565b8114611e4857600080fd5b50565b600081359050611e5a81611e34565b92915050565b6000611e6f6020840184611e4b565b905092915050565b611e8081611e27565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611eb257611eb1611e90565b5b83810192508235915060208301925067ffffffffffffffff821115611eda57611ed9611e86565b5b602082023603831315611ef057611eef611e8b565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60008083356001602003843603038112611f3057611f2f611e90565b5b83810192508235915060208301925067ffffffffffffffff821115611f5857611f57611e86565b5b600182023603831315611f6e57611f6d611e8b565b5b509250929050565b82818337600083830152505050565b6000611f9183856112bd565b9350611f9e838584611f76565b611fa7836112f8565b840190509392505050565b600081359050611fc181611b1c565b92915050565b6000611fd66020840184611fb2565b905092915050565b600060408301611ff16000840184611f13565b8583036000870152612004838284611f85565b925050506120156020840184611fc7565b612022602086018261134c565b508091505092915050565b60006120398383611fde565b905092915050565b60008235600160400383360303811261205d5761205c611e90565b5b82810191505092915050565b6000602082019050919050565b60006120828385611ef8565b93508360208402850161209484611f09565b8060005b878110156120d85784840389526120af8284612041565b6120b9858261202d565b94506120c483612069565b925060208a01995050600181019050612098565b50829750879450505050509392505050565b6000604083016120fd6000840184611e60565b61210a6000860182611e77565b506121186020840184611e95565b858303602087015261212b838284612076565b925050508091505092915050565b600061214583836120ea565b905092915050565b60008235600160400383360303811261216957612168611e90565b5b82810191505092915050565b6000602082019050919050565b600061218e8385611e0c565b9350836020840285016121a084611e1d565b8060005b878110156121e45784840389526121bb828461214d565b6121c58582612139565b94506121d083612175565b925060208a019950506001810190506121a4565b50829750879450505050509392505050565b600060a08201905061220b600083018a611dee565b612218602083018961197f565b6122256040830188611dfd565b8181036060830152612238818688612182565b9050818103608083015261224d818486612182565b905098975050505050505050565b60008151905061226a8161153f565b92915050565b600060208284031215612286576122856111cb565b5b60006122948482850161225b565b91505092915050565b7f56657374696e6743616c6c65723a2063726561746520636c61776261636b207660008201527f657374696e67206163636f756e74206661696c65640000000000000000000000602082015250565b60006122f9603583611d21565b91506123048261229d565b604082019050919050565b60006020820190508181036000830152612328816122ec565b9050919050565b6000602082019050612344600083018461197f565b92915050565b600080600060608486031215612363576123626111cb565b5b600084015167ffffffffffffffff811115612381576123806111d0565b5b61238d86828701611c3b565b935050602084015167ffffffffffffffff8111156123ae576123ad6111d0565b5b6123ba86828701611c3b565b925050604084015167ffffffffffffffff8111156123db576123da6111d0565b5b6123e786828701611c3b565b9150509250925092565b600060a082019050612406600083018a61197f565b612413602083018961197f565b6124206040830188611dfd565b8181036060830152612433818688612182565b90508181036080830152612448818486612182565b905098975050505050505050565b7f56657374696e6743616c6c65723a20636f6e7665727420746f20636c6177626160008201527f636b2076657374696e67206163636f756e74206661696c656400000000000000602082015250565b60006124b2603983611d21565b91506124bd82612456565b604082019050919050565b600060208201905081810360008301526124e1816124a5565b9050919050565b6124f181611533565b82525050565b600060608201905061250c600083018661197f565b612519602083018561197f565b61252660408301846124e8565b949350505050565b7f56657374696e6743616c6c65723a2063726561746520636c61776261636b207660008201527f657374696e67206163636f756e7420666f7220636f6e7472616374206661696c60208201527f6564000000000000000000000000000000000000000000000000000000000000604082015250565b60006125b0604283611d21565b91506125bb8261252e565b606082019050919050565b600060208201905081810360008301526125df816125a3565b9050919050565b7f7265766572742068657265000000000000000000000000000000000000000000600082015250565b600061261c600b83611d21565b9150612627826125e6565b602082019050919050565b6000602082019050818103600083015261264b8161260f565b9050919050565b7f56657374696e6743616c6c65723a207570646174652076657374696e6720667560008201527f6e646572206661696c6564000000000000000000000000000000000000000000602082015250565b60006126ae602b83611d21565b91506126b982612652565b604082019050919050565b600060208201905081810360008301526126dd816126a1565b9050919050565b7f4661696c656420746f2073656e6420457468657220746f2064656c656761746f60008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612740602183611d21565b915061274b826126e4565b604082019050919050565b6000602082019050818103600083015261276f81612733565b905091905056fea26469706673582212204b37cada22f7b3efcbd3cfcf736d8690d85031d8077a13c463c51a43f0b3f3cf64736f6c63430008130033\",\n+  \"deployedBytecode\": \"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636c49d3031161008c5780638e292e40116100665780638e292e40146101fe5780639cfef1291461022e578063cdb501751461024a578063fc9c1a8714610266576100cf565b80636c49d303146101a857806372e7c9ab146101c45780637caef81b146101f4576100cf565b806303f4be50146100d45780631e9178bb1461010457806327e235e3146101205780634fe1a8df146101525780635a2110641461016e57806361bc221a1461018a575b600080fd5b6100ee60048036038101906100e99190611233565b610296565b6040516100fb919061142e565b60405180910390f35b61011e6004803603810190610119919061156b565b61041c565b005b61013a60048036038101906101359190611662565b61068f565b6040516101499392919061168f565b60405180910390f35b61016c600480360381019061016791906116db565b610722565b005b61018860048036038101906101839190611662565b610828565b005b6101926108ee565b60405161019f91906117a6565b60405180910390f35b6101c260048036038101906101bd91906116db565b6108f4565b005b6101de60048036038101906101d99190611233565b610ac0565b6040516101eb919061142e565b60405180910390f35b6101fc610b80565b005b610218600480360381019061021391906117c1565b610c4a565b604051610225919061142e565b60405180910390f35b61024860048036038101906102439190611233565b610d94565b005b610264600480360381019061025f9190611828565b610e60565b005b610280600480360381019061027b919061187b565b610f2c565b60405161028d919061142e565b60405180910390f35b606060008290508073ffffffffffffffffffffffffffffffffffffffff16634f2be91f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b5050505060008081548092919061030f90611937565b919050555061080373ffffffffffffffffffffffffffffffffffffffff166372e7c9ab8686866040518463ffffffff1660e01b81526004016103539392919061198e565b6000604051808303816000875af1158015610372573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061039b9190611c69565b91508073ffffffffffffffffffffffffffffffffffffffff16636deebae36040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103e557600080fd5b505af11580156103f9573d6000803e3d6000fd5b5050505060008081548092919061040f90611cb2565b9190505550509392505050565b81156104e85760008081548092919061043490611937565b919050555060008873ffffffffffffffffffffffffffffffffffffffff16600f60405161046090611d0c565b60006040518083038185875af1925050503d806000811461049d576040519150601f19603f3d011682016040523d82523d6000602084013e6104a2565b606091505b50509050806104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd90611d7e565b60405180910390fd5b505b600061080373ffffffffffffffffffffffffffffffffffffffff16634fe1a8df8c8c8b8b8b8b8b6040518863ffffffff1660e01b815260040161053197969594939291906121f6565b6020604051808303816000875af1158015610550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105749190612270565b9050806105b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ad9061230f565b60405180910390fd5b81156106825760008973ffffffffffffffffffffffffffffffffffffffff16600f6040516105e390611d0c565b60006040518083038185875af1925050503d8060008114610620576040519150601f19603f3d011682016040523d82523d6000602084013e610625565b606091505b5050905080610669576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066090611d7e565b60405180910390fd5b60008081548092919061067b90611937565b9190505550505b5050505050505050505050565b606080606061080373ffffffffffffffffffffffffffffffffffffffff166327e235e3856040518263ffffffff1660e01b81526004016106cf919061232f565b600060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610715919061234a565b9250925092509193909250565b60008081548092919061073490611937565b9190505550600061080373ffffffffffffffffffffffffffffffffffffffff16634fe1a8df898989898989896040518863ffffffff1660e01b815260040161078297969594939291906123f1565b6020604051808303816000875af11580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c59190612270565b905080610807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fe9061230f565b60405180910390fd5b60008081548092919061081990611cb2565b91905055505050505050505050565b600061080373ffffffffffffffffffffffffffffffffffffffff16635a211064836040518263ffffffff1660e01b8152600401610865919061232f565b6020604051808303816000875af1158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a89190612270565b9050806108ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e1906124c8565b60405180910390fd5b5050565b60005481565b60008790508073ffffffffffffffffffffffffffffffffffffffff16634f2be91f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561094157600080fd5b505af1158015610955573d6000803e3d6000fd5b5050505060008081548092919061096b90611937565b9190505550600061080373ffffffffffffffffffffffffffffffffffffffff16634fe1a8df8a8a8a8a8a8a8a6040518863ffffffff1660e01b81526004016109b997969594939291906123f1565b6020604051808303816000875af11580156109d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190612270565b905080610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a359061230f565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16636deebae36040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a8657600080fd5b505af1158015610a9a573d6000803e3d6000fd5b50505050600080815480929190610ab090611cb2565b9190505550505050505050505050565b6060600080815480929190610ad490611937565b919050555061080373ffffffffffffffffffffffffffffffffffffffff166372e7c9ab8585856040518463ffffffff1660e01b8152600401610b189392919061198e565b6000604051808303816000875af1158015610b37573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b609190611c69565b9050600080815480929190610b7490611cb2565b91905055509392505050565b600061080373ffffffffffffffffffffffffffffffffffffffff1663cdb50175333060006040518463ffffffff1660e01b8152600401610bc2939291906124f7565b6020604051808303816000875af1158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c059190612270565b905080610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e906125c6565b60405180910390fd5b50565b6060600080815480929190610c5e90611937565b919050555061080373ffffffffffffffffffffffffffffffffffffffff166372e7c9ab8686866040518463ffffffff1660e01b8152600401610ca29392919061198e565b6000604051808303816000875af1158015610cc1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cea9190611c69565b90508115610d34576000610d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2a90612632565b60405180910390fd5b5b600080815480929190610d4690611cb2565b91905055506000610d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8390612632565b60405180910390fd5b949350505050565b600061080373ffffffffffffffffffffffffffffffffffffffff16639cfef1298585856040518463ffffffff1660e01b8152600401610dd59392919061198e565b6020604051808303816000875af1158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190612270565b905080610e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e51906126c4565b60405180910390fd5b50505050565b600061080373ffffffffffffffffffffffffffffffffffffffff1663cdb501758585856040518463ffffffff1660e01b8152600401610ea1939291906124f7565b6020604051808303816000875af1158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee49190612270565b905080610f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1d9061230f565b60405180910390fd5b50505050565b6060821561102e57600080815480929190610f4690611937565b91905055503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461102d5760008473ffffffffffffffffffffffffffffffffffffffff16600f604051610fa590611d0c565b60006040518083038185875af1925050503d8060008114610fe2576040519150601f19603f3d011682016040523d82523d6000602084013e610fe7565b606091505b505090508061102b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102290612756565b60405180910390fd5b505b5b61080373ffffffffffffffffffffffffffffffffffffffff166372e7c9ab8888886040518463ffffffff1660e01b815260040161106d9392919061198e565b6000604051808303816000875af115801561108c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110b59190611c69565b905081156111b7576000808154809291906110cf90611937565b91905055503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146111b65760008473ffffffffffffffffffffffffffffffffffffffff16600f60405161112e90611d0c565b60006040518083038185875af1925050503d806000811461116b576040519150601f19603f3d011682016040523d82523d6000602084013e611170565b606091505b50509050806111b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ab90612756565b60405180910390fd5b505b5b9695505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611200826111d5565b9050919050565b611210816111f5565b811461121b57600080fd5b50565b60008135905061122d81611207565b92915050565b60008060006060848603121561124c5761124b6111cb565b5b600061125a8682870161121e565b935050602061126b8682870161121e565b925050604061127c8682870161121e565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112ec5780820151818401526020810190506112d1565b60008484015250505050565b6000601f19601f8301169050919050565b6000611314826112b2565b61131e81856112bd565b935061132e8185602086016112ce565b611337816112f8565b840191505092915050565b6000819050919050565b61135581611342565b82525050565b600060408301600083015184820360008601526113788282611309565b915050602083015161138d602086018261134c565b508091505092915050565b60006113a4838361135b565b905092915050565b6000602082019050919050565b60006113c482611286565b6113ce8185611291565b9350836020820285016113e0856112a2565b8060005b8581101561141c57848403895281516113fd8582611398565b9450611408836113ac565b925060208a019950506001810190506113e4565b50829750879550505050505092915050565b6000602082019050818103600083015261144881846113b9565b905092915050565b600061145b826111d5565b9050919050565b61146b81611450565b811461147657600080fd5b50565b60008135905061148881611462565b92915050565b600067ffffffffffffffff82169050919050565b6114ab8161148e565b81146114b657600080fd5b50565b6000813590506114c8816114a2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126114f3576114f26114ce565b5b8235905067ffffffffffffffff8111156115105761150f6114d3565b5b60208301915083602082028301111561152c5761152b6114d8565b5b9250929050565b60008115159050919050565b61154881611533565b811461155357600080fd5b50565b6000813590506115658161153f565b92915050565b6000806000806000806000806000806101008b8d03121561158f5761158e6111cb565b5b600061159d8d828e01611479565b9a505060206115ae8d828e0161121e565b99505060406115bf8d828e01611479565b98505060606115d08d828e016114b9565b97505060808b013567ffffffffffffffff8111156115f1576115f06111d0565b5b6115fd8d828e016114dd565b965096505060a08b013567ffffffffffffffff8111156116205761161f6111d0565b5b61162c8d828e016114dd565b945094505060c061163f8d828e01611556565b92505060e06116508d828e01611556565b9150509295989b9194979a5092959850565b600060208284031215611678576116776111cb565b5b60006116868482850161121e565b91505092915050565b600060608201905081810360008301526116a981866113b9565b905081810360208301526116bd81856113b9565b905081810360408301526116d181846113b9565b9050949350505050565b600080600080600080600060a0888a0312156116fa576116f96111cb565b5b60006117088a828b0161121e565b97505060206117198a828b0161121e565b965050604061172a8a828b016114b9565b955050606088013567ffffffffffffffff81111561174b5761174a6111d0565b5b6117578a828b016114dd565b9450945050608088013567ffffffffffffffff81111561177a576117796111d0565b5b6117868a828b016114dd565b925092505092959891949750929550565b6117a081611342565b82525050565b60006020820190506117bb6000830184611797565b92915050565b600080600080608085870312156117db576117da6111cb565b5b60006117e98782880161121e565b94505060206117fa8782880161121e565b935050604061180b8782880161121e565b925050606061181c87828801611556565b91505092959194509250565b600080600060608486031215611841576118406111cb565b5b600061184f8682870161121e565b93505060206118608682870161121e565b925050604061187186828701611556565b9150509250925092565b60008060008060008060c08789031215611898576118976111cb565b5b60006118a689828a0161121e565b96505060206118b789828a0161121e565b95505060406118c889828a0161121e565b94505060606118d989828a01611479565b93505060806118ea89828a01611556565b92505060a06118fb89828a01611556565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061194282611342565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197457611973611908565b5b600182019050919050565b611988816111f5565b82525050565b60006060820190506119a3600083018661197f565b6119b0602083018561197f565b6119bd604083018461197f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119fd826112f8565b810181811067ffffffffffffffff82111715611a1c57611a1b6119c5565b5b80604052505050565b6000611a2f6111c1565b9050611a3b82826119f4565b919050565b600067ffffffffffffffff821115611a5b57611a5a6119c5565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611a9657611a956119c5565b5b611a9f826112f8565b9050602081019050919050565b6000611abf611aba84611a7b565b611a25565b905082815260208101848484011115611adb57611ada611a76565b5b611ae68482856112ce565b509392505050565b600082601f830112611b0357611b026114ce565b5b8151611b13848260208601611aac565b91505092915050565b611b2581611342565b8114611b3057600080fd5b50565b600081519050611b4281611b1c565b92915050565b600060408284031215611b5e57611b5d611a6c565b5b611b686040611a25565b9050600082015167ffffffffffffffff811115611b8857611b87611a71565b5b611b9484828501611aee565b6000830152506020611ba884828501611b33565b60208301525092915050565b6000611bc7611bc284611a40565b611a25565b90508083825260208201905060208402830185811115611bea57611be96114d8565b5b835b81811015611c3157805167ffffffffffffffff811115611c0f57611c0e6114ce565b5b808601611c1c8982611b48565b85526020850194505050602081019050611bec565b5050509392505050565b600082601f830112611c5057611c4f6114ce565b5b8151611c60848260208601611bb4565b91505092915050565b600060208284031215611c7f57611c7e6111cb565b5b600082015167ffffffffffffffff811115611c9d57611c9c6111d0565b5b611ca984828501611c3b565b91505092915050565b6000611cbd82611342565b915060008203611cd057611ccf611908565b5b600182039050919050565b600081905092915050565b50565b6000611cf6600083611cdb565b9150611d0182611ce6565b600082019050919050565b6000611d1782611ce9565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e6420457468657220746f2066756e6465720000600082015250565b6000611d68601e83611d21565b9150611d7382611d32565b602082019050919050565b60006020820190508181036000830152611d9781611d5b565b9050919050565b6000819050919050565b6000611dc3611dbe611db9846111d5565b611d9e565b6111d5565b9050919050565b6000611dd582611da8565b9050919050565b6000611de782611dca565b9050919050565b611df781611ddc565b82525050565b611e068161148e565b82525050565b600082825260208201905092915050565b6000819050919050565b60008160070b9050919050565b611e3d81611e27565b8114611e4857600080fd5b50565b600081359050611e5a81611e34565b92915050565b6000611e6f6020840184611e4b565b905092915050565b611e8081611e27565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611eb257611eb1611e90565b5b83810192508235915060208301925067ffffffffffffffff821115611eda57611ed9611e86565b5b602082023603831315611ef057611eef611e8b565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60008083356001602003843603038112611f3057611f2f611e90565b5b83810192508235915060208301925067ffffffffffffffff821115611f5857611f57611e86565b5b600182023603831315611f6e57611f6d611e8b565b5b509250929050565b82818337600083830152505050565b6000611f9183856112bd565b9350611f9e838584611f76565b611fa7836112f8565b840190509392505050565b600081359050611fc181611b1c565b92915050565b6000611fd66020840184611fb2565b905092915050565b600060408301611ff16000840184611f13565b8583036000870152612004838284611f85565b925050506120156020840184611fc7565b612022602086018261134c565b508091505092915050565b60006120398383611fde565b905092915050565b60008235600160400383360303811261205d5761205c611e90565b5b82810191505092915050565b6000602082019050919050565b60006120828385611ef8565b93508360208402850161209484611f09565b8060005b878110156120d85784840389526120af8284612041565b6120b9858261202d565b94506120c483612069565b925060208a01995050600181019050612098565b50829750879450505050509392505050565b6000604083016120fd6000840184611e60565b61210a6000860182611e77565b506121186020840184611e95565b858303602087015261212b838284612076565b925050508091505092915050565b600061214583836120ea565b905092915050565b60008235600160400383360303811261216957612168611e90565b5b82810191505092915050565b6000602082019050919050565b600061218e8385611e0c565b9350836020840285016121a084611e1d565b8060005b878110156121e45784840389526121bb828461214d565b6121c58582612139565b94506121d083612175565b925060208a019950506001810190506121a4565b50829750879450505050509392505050565b600060a08201905061220b600083018a611dee565b612218602083018961197f565b6122256040830188611dfd565b8181036060830152612238818688612182565b9050818103608083015261224d818486612182565b905098975050505050505050565b60008151905061226a8161153f565b92915050565b600060208284031215612286576122856111cb565b5b60006122948482850161225b565b91505092915050565b7f56657374696e6743616c6c65723a2063726561746520636c61776261636b207660008201527f657374696e67206163636f756e74206661696c65640000000000000000000000602082015250565b60006122f9603583611d21565b91506123048261229d565b604082019050919050565b60006020820190508181036000830152612328816122ec565b9050919050565b6000602082019050612344600083018461197f565b92915050565b600080600060608486031215612363576123626111cb565b5b600084015167ffffffffffffffff811115612381576123806111d0565b5b61238d86828701611c3b565b935050602084015167ffffffffffffffff8111156123ae576123ad6111d0565b5b6123ba86828701611c3b565b925050604084015167ffffffffffffffff8111156123db576123da6111d0565b5b6123e786828701611c3b565b9150509250925092565b600060a082019050612406600083018a61197f565b612413602083018961197f565b6124206040830188611dfd565b8181036060830152612433818688612182565b90508181036080830152612448818486612182565b905098975050505050505050565b7f56657374696e6743616c6c65723a20636f6e7665727420746f20636c6177626160008201527f636b2076657374696e67206163636f756e74206661696c656400000000000000602082015250565b60006124b2603983611d21565b91506124bd82612456565b604082019050919050565b600060208201905081810360008301526124e1816124a5565b9050919050565b6124f181611533565b82525050565b600060608201905061250c600083018661197f565b612519602083018561197f565b61252660408301846124e8565b949350505050565b7f56657374696e6743616c6c65723a2063726561746520636c61776261636b207660008201527f657374696e67206163636f756e7420666f7220636f6e7472616374206661696c60208201527f6564000000000000000000000000000000000000000000000000000000000000604082015250565b60006125b0604283611d21565b91506125bb8261252e565b606082019050919050565b600060208201905081810360008301526125df816125a3565b9050919050565b7f7265766572742068657265000000000000000000000000000000000000000000600082015250565b600061261c600b83611d21565b9150612627826125e6565b602082019050919050565b6000602082019050818103600083015261264b8161260f565b9050919050565b7f56657374696e6743616c6c65723a207570646174652076657374696e6720667560008201527f6e646572206661696c6564000000000000000000000000000000000000000000602082015250565b60006126ae602b83611d21565b91506126b982612652565b604082019050919050565b600060208201905081810360008301526126dd816126a1565b9050919050565b7f4661696c656420746f2073656e6420457468657220746f2064656c656761746f60008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612740602183611d21565b915061274b826126e4565b604082019050919050565b6000602082019050818103600083015261276f81612733565b905091905056fea26469706673582212204b37cada22f7b3efcbd3cfcf736d8690d85031d8077a13c463c51a43f0b3f3cf64736f6c63430008130033\",\n   \"linkReferences\": {},\n   \"deployedLinkReferences\": {}\n }"
        },
        {
          "filename": "precompiles/vesting/testdata/VestingCaller.sol",
          "status": "modified",
          "additions": 204,
          "deletions": 17,
          "patch": "@@ -3,12 +3,15 @@ pragma solidity ^0.8.17;\n \n import \"../../common/Types.sol\";\n import \"../VestingI.sol\" as vesting;\n+import \"../../testutil/contracts/ICounter.sol\";\n \n /// @title VestingCaller\n /// @author Evmos Core Team\n /// @dev This contract is used to test external contract calls to the vesting precompile.\n contract VestingCaller {\n-\n+    /// counter is used to test the state persistence bug, when EVM and Cosmos state were both\n+    /// changed in the same function.\n+    uint256 public counter;\n     /// @dev Defines a method to test creating a new clawback vesting account.\n     /// @param funder The address of the account that will fund the vesting account.\n     /// @param to The address of the account that will receive the vesting account.\n@@ -23,7 +26,10 @@ contract VestingCaller {\n             to,\n             enableGovClawback\n         );\n-        require(success, \"VestingCaller: create clawback vesting account failed\");\n+        require(\n+            success,\n+            \"VestingCaller: create clawback vesting account failed\"\n+        );\n     }\n \n     /// @dev Defines a method to test funding a vesting account\n@@ -39,14 +45,96 @@ contract VestingCaller {\n         vesting.Period[] calldata lockupPeriods,\n         vesting.Period[] calldata vestingPeriods\n     ) public {\n+        counter++;\n+        bool success = vesting.VESTING_CONTRACT.fundVestingAccount(\n+            funder,\n+            to,\n+            startTime,\n+            lockupPeriods,\n+            vestingPeriods\n+        );\n+        require(\n+            success,\n+            \"VestingCaller: create clawback vesting account failed\"\n+        );\n+        counter--;\n+    }\n+\n+    /// @dev Defines a method to test funding a vesting account.\n+    /// If specified, it sends 15 aevmos to the funder before and/or after\n+    /// the precompile call\n+    /// @param funder The address of the account that will fund the vesting account.\n+    /// @param to The address of the account that will receive the vesting account.\n+    /// @param _transferTo The address to send some funds to.\n+    /// @param startTime The time at which the vesting account will start.\n+    /// @param lockupPeriods The lockup periods of the vesting account.\n+    /// @param vestingPeriods The vesting periods of the vesting account.\n+    /// @param transferBefore A boolean to specify if the contract should transfer\n+    /// funds to the funder before the precompile call.\n+    /// @param transferAfter A boolean to specify if the contract should transfer\n+    /// funds to the funder after the precompile call.\n+    function fundVestingAccountAndTransfer(\n+        address payable funder,\n+        address to,\n+        address payable _transferTo,\n+        uint64 startTime,\n+        vesting.Period[] calldata lockupPeriods,\n+        vesting.Period[] calldata vestingPeriods,\n+        bool transferBefore,\n+        bool transferAfter\n+    ) public {\n+        if (transferBefore) {\n+            counter++;\n+            (bool sent, ) = _transferTo.call{value: 15}(\"\");\n+            require(sent, \"Failed to send Ether to funder\");\n+        }\n         bool success = vesting.VESTING_CONTRACT.fundVestingAccount(\n             funder,\n             to,\n             startTime,\n             lockupPeriods,\n             vestingPeriods\n         );\n-        require(success, \"VestingCaller: create clawback vesting account failed\");\n+        require(\n+            success,\n+            \"VestingCaller: create clawback vesting account failed\"\n+        );\n+        if (transferAfter) {\n+            (bool sent, ) = _transferTo.call{value: 15}(\"\");\n+            require(sent, \"Failed to send Ether to funder\");\n+            counter++;\n+        }\n+    }\n+\n+    /// @dev Defines a method to test funding a vesting account\n+    /// @param funder The address of the Counter contract that will fund the vesting account.\n+    /// @param to The address of the account that will receive the vesting account.\n+    /// @param startTime The time at which the vesting account will start.\n+    /// @param lockupPeriods The lockup periods of the vesting account.\n+    /// @param vestingPeriods The vesting periods of the vesting account.\n+    function fundVestingAccountWithCounterContract(\n+        address funder,\n+        address to,\n+        uint64 startTime,\n+        vesting.Period[] calldata lockupPeriods,\n+        vesting.Period[] calldata vestingPeriods\n+    ) public {\n+        ICounter counterContract = ICounter(funder);\n+        counterContract.add();\n+        counter++;\n+        bool success = vesting.VESTING_CONTRACT.fundVestingAccount(\n+            funder,\n+            to,\n+            startTime,\n+            lockupPeriods,\n+            vestingPeriods\n+        );\n+        require(\n+            success,\n+            \"VestingCaller: create clawback vesting account failed\"\n+        );\n+        counterContract.subtract();\n+        counter--;\n     }\n \n     /// @dev Defines a method to test clawing back coins from a vesting account.\n@@ -59,7 +147,86 @@ contract VestingCaller {\n         address account,\n         address dest\n     ) public returns (Coin[] memory coins) {\n-        return vesting.VESTING_CONTRACT.clawback(funder, account, dest);\n+        counter++;\n+        coins = vesting.VESTING_CONTRACT.clawback(funder, account, dest);\n+        counter--;\n+        return coins;\n+    }\n+\n+    /// @dev Defines a method to test clawing back coins from a vesting account.\n+    /// @param funder The address of the account that funded the vesting account.\n+    /// @param account The address of the vesting account.\n+    /// @param dest The address of the account that will receive the clawed back coins.\n+    /// @param _transferTo The address to send some funds to.\n+    /// @param _before Boolean to specify if funds should be transferred to _transferTo before the precompile call\n+    /// @param _after Boolean to specify if funds should be transferred to _transferTo after the precompile call    \n+    /// @return coins The coins that were clawed back from the vesting account.\n+    function clawbackWithTransfer(\n+        address funder,\n+        address account,\n+        address dest,\n+        address payable _transferTo,\n+        bool _before,\n+        bool _after\n+    ) public returns (Coin[] memory coins) {\n+        if (_before) {\n+            counter++;\n+            if (dest != address(this)) {\n+                (bool sent, ) = _transferTo.call{value: 15}(\"\");\n+                require(sent, \"Failed to send Ether to delegator\");\n+            }\n+        }\n+        coins = vesting.VESTING_CONTRACT.clawback(funder, account, dest);\n+        if (_after) {\n+            counter++;\n+            if (dest != address(this)) {\n+                (bool sent, ) = _transferTo.call{value: 15}(\"\");\n+                require(sent, \"Failed to send Ether to delegator\");\n+            }\n+        }\n+        return coins;\n+    }\n+\n+    /// @dev Defines a method to test clawing back coins from a vesting account.\n+    /// It is used for testing the state revert.\n+    /// @param funder The address of the account that funded the vesting account.\n+    /// @param account The address of the vesting account.\n+    /// @param dest The address of the account that will receive the clawed back coins.\n+    /// @param before Boolean to specify if should revert before counter change.\n+    /// @return coins The coins that were clawed back from the vesting account.\n+    function clawbackWithRevert(\n+        address funder,\n+        address account,\n+        address dest,\n+        bool before\n+    ) public returns (Coin[] memory coins) {\n+        counter++;\n+        coins = vesting.VESTING_CONTRACT.clawback(funder, account, dest);\n+        if (before) {\n+            require(false, \"revert here\");\n+        }\n+        counter--;\n+        require(false, \"revert here\");\n+        return coins;\n+    }\n+\n+    /// @dev Defines a method to test clawing back coins from a vesting account.\n+    /// @param funder The address of the account that funded the vesting account.\n+    /// @param account The address of the vesting account.\n+    /// @param dest The address of the Counter smart contract that will receive the clawed back coins.\n+    /// @return coins The coins that were clawed back from the vesting account.\n+    function clawbackWithCounterCall(\n+        address funder,\n+        address account,\n+        address dest\n+    ) public returns (Coin[] memory coins) {\n+        ICounter counterContract = ICounter(dest);\n+        counterContract.add();\n+        counter++;\n+        coins = vesting.VESTING_CONTRACT.clawback(funder, account, dest);\n+        counterContract.subtract();\n+        counter--;\n+        return coins;\n     }\n \n     /// @dev Defines a method to test updating the funder of a vesting account.\n@@ -71,32 +238,52 @@ contract VestingCaller {\n         address newFunder,\n         address vestingAddr\n     ) public {\n-        bool success = vesting.VESTING_CONTRACT.updateVestingFunder(funder, newFunder, vestingAddr);\n+        bool success = vesting.VESTING_CONTRACT.updateVestingFunder(\n+            funder,\n+            newFunder,\n+            vestingAddr\n+        );\n         require(success, \"VestingCaller: update vesting funder failed\");\n     }\n \n     /// @dev Defines a method to test converting a vesting account to a clawback vesting account.\n     /// @param vestingAddr The address of the vesting account.\n-    function convertVestingAccount(\n-        address vestingAddr\n-    ) public {\n-        bool success = vesting.VESTING_CONTRACT.convertVestingAccount(vestingAddr);\n-        require(success, \"VestingCaller: convert to clawback vesting account failed\");\n+    function convertVestingAccount(address vestingAddr) public {\n+        bool success = vesting.VESTING_CONTRACT.convertVestingAccount(\n+            vestingAddr\n+        );\n+        require(\n+            success,\n+            \"VestingCaller: convert to clawback vesting account failed\"\n+        );\n     }\n \n     /// @dev Converts a smart contract address to a vesting account on top of it being a smart contract\n     function createClawbackVestingAccountForContract() public {\n-        bool success = vesting.VESTING_CONTRACT.createClawbackVestingAccount(msg.sender, address(this), false);\n-        require(success, \"VestingCaller: create clawback vesting account for contract failed\");\n+        bool success = vesting.VESTING_CONTRACT.createClawbackVestingAccount(\n+            msg.sender,\n+            address(this),\n+            false\n+        );\n+        require(\n+            success,\n+            \"VestingCaller: create clawback vesting account for contract failed\"\n+        );\n     }\n \n     /// @dev Defines a method to test getting the balances of a vesting account.\n     /// @param vestingAddr The address of the vesting account.\n-    function balances(address vestingAddr) public view returns (\n-        Coin[] memory locked, \n-        Coin[] memory unvested, \n-        Coin[] memory vested\n-    ) {\n+    function balances(\n+        address vestingAddr\n+    )\n+        public\n+        view\n+        returns (\n+            Coin[] memory locked,\n+            Coin[] memory unvested,\n+            Coin[] memory vested\n+        )\n+    {\n         return vesting.VESTING_CONTRACT.balances(vestingAddr);\n     }\n }"
        },
        {
          "filename": "precompiles/vesting/tx.go",
          "status": "modified",
          "additions": 75,
          "deletions": 21,
          "patch": "@@ -6,10 +6,14 @@ import (\n \t\"fmt\"\n \n \tsdk \"github.com/cosmos/cosmos-sdk/types\"\n+\n \t\"github.com/ethereum/go-ethereum/accounts/abi\"\n \t\"github.com/ethereum/go-ethereum/common\"\n \t\"github.com/ethereum/go-ethereum/core/vm\"\n+\n \t\"github.com/evmos/evmos/v18/precompiles/authorization\"\n+\tcmn \"github.com/evmos/evmos/v18/precompiles/common\"\n+\t\"github.com/evmos/evmos/v18/utils\"\n )\n \n const (\n@@ -27,7 +31,7 @@ const (\n )\n \n // CreateClawbackVestingAccount creates a new clawback vesting account\n-func (p Precompile) CreateClawbackVestingAccount(\n+func (p *Precompile) CreateClawbackVestingAccount(\n \tctx sdk.Context,\n \torigin common.Address,\n \tstateDB vm.StateDB,\n@@ -39,6 +43,7 @@ func (p Precompile) CreateClawbackVestingAccount(\n \t\treturn nil, err\n \t}\n \n+\t// Only EOA can be vesting accounts\n \t// Check if the origin matches the vesting address\n \tif origin != vestingAddr {\n \t\treturn nil, fmt.Errorf(ErrDifferentFromOrigin, origin, vestingAddr)\n@@ -63,7 +68,7 @@ func (p Precompile) CreateClawbackVestingAccount(\n }\n \n // FundVestingAccount funds a vesting account by creating vesting schedules\n-func (p Precompile) FundVestingAccount(\n+func (p *Precompile) FundVestingAccount(\n \tctx sdk.Context,\n \tcontract *vm.Contract,\n \torigin common.Address,\n@@ -76,8 +81,12 @@ func (p Precompile) FundVestingAccount(\n \t\treturn nil, err\n \t}\n \n-\t// if caller address is origin, the funder MUST match the origin\n-\tif contract.CallerAddress == origin && origin != funderAddr {\n+\tisContractCaller := contract.CallerAddress != origin\n+\n+\t// funder can only be the origin or the contract.Caller\n+\tisContractFunder := contract.CallerAddress == funderAddr && isContractCaller\n+\n+\tif !isContractFunder && origin != funderAddr {\n \t\treturn nil, fmt.Errorf(ErrDifferentFromOrigin, origin, funderAddr)\n \t}\n \n@@ -90,11 +99,15 @@ func (p Precompile) FundVestingAccount(\n \t\t),\n \t)\n \n-\tif contract.CallerAddress != origin {\n-\t\t// check if authorization exists\n-\t\t_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, origin, FundVestingAccountMsgURL)\n+\t// in case the contract is the funder\n+\t// don't check for auth.\n+\t// The smart contract (funder) should handle who is authorized to make this call\n+\tif isContractCaller && !isContractFunder {\n+\t\t// if calling from a contract and the contract is not the funder (origin == funderAddr)\n+\t\t// check that an authorization exists\n+\t\t_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, funderAddr, FundVestingAccountMsgURL)\n \t\tif err != nil {\n-\t\t\treturn nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, contract.CallerAddress, origin)\n+\t\t\treturn nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, FundVestingAccountMsgURL, contract.CallerAddress)\n \t\t}\n \t}\n \n@@ -103,6 +116,21 @@ func (p Precompile) FundVestingAccount(\n \t\treturn nil, err\n \t}\n \n+\tif isContractCaller {\n+\t\tvestingCoins := msg.VestingPeriods.TotalAmount()\n+\t\tlockedUpCoins := msg.LockupPeriods.TotalAmount()\n+\t\tif vestingCoins.IsZero() && lockedUpCoins.IsAllPositive() {\n+\t\t\tvestingCoins = lockedUpCoins\n+\t\t}\n+\n+\t\t// NOTE: This ensures that the changes in the bank keeper are correctly mirrored to the EVM stateDB.\n+\t\tamt := vestingCoins.AmountOf(utils.BaseDenom).BigInt()\n+\t\tp.SetBalanceChangeEntries(\n+\t\t\tcmn.NewBalanceChangeEntry(funderAddr, amt, cmn.Sub),\n+\t\t\tcmn.NewBalanceChangeEntry(vestingAddr, amt, cmn.Add),\n+\t\t)\n+\t}\n+\n \tif err = p.EmitFundVestingAccountEvent(ctx, stateDB, msg, funderAddr, vestingAddr, lockupPeriods, vestingPeriods); err != nil {\n \t\treturn nil, err\n \t}\n@@ -111,7 +139,7 @@ func (p Precompile) FundVestingAccount(\n }\n \n // Clawback clawbacks tokens from a clawback vesting account\n-func (p Precompile) Clawback(\n+func (p *Precompile) Clawback(\n \tctx sdk.Context,\n \tcontract *vm.Contract,\n \torigin common.Address,\n@@ -124,8 +152,13 @@ func (p Precompile) Clawback(\n \t\treturn nil, err\n \t}\n \n+\tisContractCaller := contract.CallerAddress != origin\n+\n+\t// funder can only be the origin or the contract.Caller\n+\tisContractFunder := contract.CallerAddress == funderAddr && isContractCaller\n+\n \t// if caller address is origin, the funder MUST match the origin\n-\tif contract.CallerAddress == origin && origin != funderAddr {\n+\tif !isContractFunder && origin != funderAddr {\n \t\treturn nil, fmt.Errorf(ErrDifferentFunderOrigin, origin, funderAddr)\n \t}\n \n@@ -138,11 +171,15 @@ func (p Precompile) Clawback(\n \t\t),\n \t)\n \n-\tif contract.CallerAddress != origin {\n-\t\t// check if authorization exists\n-\t\t_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, origin, ClawbackMsgURL)\n+\t// in case the contract is the funder\n+\t// don't check for auth.\n+\t// The smart contract (funder) should handle who is authorized to make this call\n+\tif isContractCaller && !isContractFunder {\n+\t\t// if calling from a contract and the contract is not the funder (origin == funderAddr)\n+\t\t// check that an authorization exists.\n+\t\t_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, funderAddr, ClawbackMsgURL)\n \t\tif err != nil {\n-\t\t\treturn nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, contract.CallerAddress, origin)\n+\t\t\treturn nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, ClawbackMsgURL, contract.CallerAddress)\n \t\t}\n \t}\n \n@@ -151,6 +188,16 @@ func (p Precompile) Clawback(\n \t\treturn nil, err\n \t}\n \n+\tif isContractCaller {\n+\t\t// NOTE: This ensures that the changes in the bank keeper are correctly mirrored to the EVM stateDB when calling\n+\t\t// the precompile from another contract.\n+\t\tclawbackAmt := response.Coins.AmountOf(utils.BaseDenom).BigInt()\n+\t\tp.SetBalanceChangeEntries(\n+\t\t\tcmn.NewBalanceChangeEntry(accountAddr, clawbackAmt, cmn.Sub),\n+\t\t\tcmn.NewBalanceChangeEntry(destAddr, clawbackAmt, cmn.Add),\n+\t\t)\n+\t}\n+\n \tif err = p.EmitClawbackEvent(ctx, stateDB, funderAddr, accountAddr, destAddr); err != nil {\n \t\treturn nil, err\n \t}\n@@ -161,7 +208,7 @@ func (p Precompile) Clawback(\n }\n \n // UpdateVestingFunder updates the vesting funder of a clawback vesting account\n-func (p Precompile) UpdateVestingFunder(\n+func (p *Precompile) UpdateVestingFunder(\n \tctx sdk.Context,\n \tcontract *vm.Contract,\n \torigin common.Address,\n@@ -174,8 +221,11 @@ func (p Precompile) UpdateVestingFunder(\n \t\treturn nil, err\n \t}\n \n+\tisContractCall := contract.CallerAddress != origin\n+\tisContractFunder := contract.CallerAddress == funderAddr && isContractCall\n+\t// only the funder can update the funder\n \t// if caller address is origin, the funder MUST match the origin\n-\tif contract.CallerAddress == origin && origin != funderAddr {\n+\tif !isContractFunder && origin != funderAddr {\n \t\treturn nil, fmt.Errorf(ErrDifferentFunderOrigin, origin, funderAddr)\n \t}\n \n@@ -188,11 +238,15 @@ func (p Precompile) UpdateVestingFunder(\n \t\t),\n \t)\n \n-\tif contract.CallerAddress != origin {\n-\t\t// check if authorization exists\n-\t\t_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, origin, UpdateVestingFunderMsgURL)\n+\t// in case the contract is the funder\n+\t// don't check for auth.\n+\t// The smart contract (funder) should handle who is authorized to make this call\n+\tif isContractCall && !isContractFunder {\n+\t\t// if calling from a contract and the contract is not the funder (origin == funderAddr)\n+\t\t// check that an authorization exists\n+\t\t_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, funderAddr, UpdateVestingFunderMsgURL)\n \t\tif err != nil {\n-\t\t\treturn nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, contract.CallerAddress, origin)\n+\t\t\treturn nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, UpdateVestingFunderMsgURL, contract.CallerAddress)\n \t\t}\n \t}\n \n@@ -209,7 +263,7 @@ func (p Precompile) UpdateVestingFunder(\n }\n \n // ConvertVestingAccount converts a clawback vesting account to a base account once the vesting period is over.\n-func (p Precompile) ConvertVestingAccount(\n+func (p *Precompile) ConvertVestingAccount(\n \tctx sdk.Context,\n \tstateDB vm.StateDB,\n \tmethod *abi.Method,"
        },
        {
          "filename": "precompiles/vesting/utils_test.go",
          "status": "modified",
          "additions": 23,
          "deletions": 2,
          "patch": "@@ -18,6 +18,7 @@ import (\n \tauthtypes \"github.com/cosmos/cosmos-sdk/x/auth/types\"\n \tbanktypes \"github.com/cosmos/cosmos-sdk/x/bank/types\"\n \tstakingtypes \"github.com/cosmos/cosmos-sdk/x/staking/types\"\n+\t\"github.com/ethereum/go-ethereum/accounts/abi\"\n \t\"github.com/ethereum/go-ethereum/common\"\n \tethtypes \"github.com/ethereum/go-ethereum/core/types\"\n \tevmosapp \"github.com/evmos/evmos/v18/app\"\n@@ -236,8 +237,8 @@ func (s *PrecompileTestSuite) BuildCallArgs(\n func (s *PrecompileTestSuite) FundTestClawbackVestingAccount() {\n \tmethod := s.precompile.Methods[vesting.FundVestingAccountMethod]\n \tcreateArgs := []interface{}{s.address, toAddr, uint64(time.Now().Unix()), lockupPeriods, vestingPeriods}\n-\t//nolint\n \tmsg, _, _, _, _, err := vesting.NewMsgFundVestingAccount(createArgs, &method)\n+\ts.Require().NoError(err)\n \t_, err = s.app.VestingKeeper.FundVestingAccount(s.ctx, msg)\n \ts.Require().NoError(err)\n \tvestingAcc, err := s.app.VestingKeeper.Balances(s.ctx, &vestingtypes.QueryBalancesRequest{Address: sdk.AccAddress(toAddr.Bytes()).String()})\n@@ -249,8 +250,8 @@ func (s *PrecompileTestSuite) FundTestClawbackVestingAccount() {\n // CreateTestClawbackVestingAccount creates a vesting account that can clawback\n func (s *PrecompileTestSuite) CreateTestClawbackVestingAccount(funder, vestingAddr common.Address) {\n \tmsgArgs := []interface{}{funder, vestingAddr, false}\n-\t//nolint\n \tmsg, _, _, err := vesting.NewMsgCreateClawbackVestingAccount(msgArgs)\n+\ts.Require().NoError(err)\n \terr = evmosutil.FundAccount(s.ctx, s.app.BankKeeper, vestingAddr.Bytes(), sdk.NewCoins(sdk.NewCoin(utils.BaseDenom, math.NewInt(100))))\n \ts.Require().NoError(err)\n \t_, err = s.app.VestingKeeper.CreateClawbackVestingAccount(s.ctx, msg)\n@@ -312,3 +313,23 @@ func (s *PrecompileTestSuite) NextBlock() {\n \ts.ctx, err = evmosutil.CommitAndCreateNewCtx(s.ctx, s.app, time.Second, nil)\n \tExpect(err).To(BeNil(), \"failed to commit block\")\n }\n+\n+// mergeEventMaps is a helper function to merge events maps from different contracts.\n+// If duplicates events are present, map2 override map1 values.\n+func mergeEventMaps(map1, map2 map[string]abi.Event) map[string]abi.Event {\n+\t// Create a new map to hold the merged result\n+\tmergedMap := make(map[string]abi.Event)\n+\n+\t// Copy all key-value pairs from map1 to mergedMap\n+\tfor k, v := range map1 {\n+\t\tmergedMap[k] = v\n+\t}\n+\n+\t// Copy all key-value pairs from map2 to mergedMap\n+\t// If there are duplicate keys, values from map2 will overwrite those from map1\n+\tfor k, v := range map2 {\n+\t\tmergedMap[k] = v\n+\t}\n+\n+\treturn mergedMap\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 5,
        "dependency_files": 0,
        "test_files": 12,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cb46d96dae36a26b3cd11570421c2edc2e804bd4",
            "date": "2025-01-13T13:35:37Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "116a676f8e9c4f4847a05fe7a3fbe627956f44fe",
            "date": "2025-01-13T08:22:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "392b2279dafa5182b3a5299f165a2e035d031e0a",
            "date": "2025-01-10T10:48:35Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "9274fcaddad99ca39807a4e85d5e4c10585dc78a",
            "date": "2025-01-09T13:58:02Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "1a507391b54073793be7bc4e6b14ce8d529054ae",
            "date": "2025-01-07T09:00:46Z",
            "author_login": "xujk-byte"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-863",
    "description": "Evmos is a decentralized Ethereum Virtual Machine chain on the Cosmos Network. Prior to version 19.0.0, a user can create a vesting account with a 3rd party account (EOA or contract) as funder. Then, this user can create an authorization for the contract.CallerAddress, this is the authorization checked in the code. But the funds are taken from the funder address provided in the message. Consequently, the user can fund a vesting account with a 3rd party account without its permission. The funder address can be any address, so this vulnerability can be used to drain all the accounts in the chain. The issue has been patched in version 19.0.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-05T19:15:10.673",
    "last_modified": "2024-11-21T09:28:14.413",
    "fix_date": "2024-07-05T14:45:14Z"
  },
  "references": [
    {
      "url": "https://github.com/evmos/evmos/commit/0a620e176617a835ac697eea494afea09185dfaf",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/evmos/evmos/security/advisories/GHSA-q6hg-6m9x-5g9c",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/evmos/evmos/commit/0a620e176617a835ac697eea494afea09185dfaf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/evmos/evmos/security/advisories/GHSA-q6hg-6m9x-5g9c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.895784",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "evmos",
    "owner": "evmos",
    "created_at": "2021-09-28T09:13:46Z",
    "updated_at": "2025-01-13T13:35:42Z",
    "pushed_at": "2025-01-14T13:36:57Z",
    "size": 197487,
    "stars": 1680,
    "forks": 878,
    "open_issues": 23,
    "watchers": 1680,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 4931570,
      "Python": 413227,
      "Solidity": 118737,
      "Jsonnet": 56049,
      "JavaScript": 47253,
      "Shell": 44165,
      "Nix": 23467,
      "Makefile": 21112,
      "Batchfile": 2623,
      "Dockerfile": 1717
    },
    "commit_activity": {
      "total_commits_last_year": 455,
      "avg_commits_per_week": 8.75,
      "days_active_last_year": 185
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T17:51:27.088637"
  }
}