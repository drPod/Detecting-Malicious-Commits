{
  "cve_id": "CVE-2024-39846",
  "github_data": {
    "repository": "6eero/NewPass",
    "fix_commit": "13f0a844d64927450fa751deb7cc06beba699720",
    "related_commits": [
      "13f0a844d64927450fa751deb7cc06beba699720",
      "13f0a844d64927450fa751deb7cc06beba699720"
    ],
    "patch_url": "https://github.com/6eero/NewPass/commit/13f0a844d64927450fa751deb7cc06beba699720.patch",
    "fix_commit_details": {
      "sha": "13f0a844d64927450fa751deb7cc06beba699720",
      "commit_date": "2024-05-31T20:17:46Z",
      "author": {
        "login": "6eero",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Feature: Store password hash in encrypted shared preferences",
        "length": 862,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 98,
        "additions": 87,
        "deletions": 11
      },
      "files": [
        {
          "filename": "app/src/main/java/com/gero/newpass/encryption/PasswordUtils.java",
          "status": "added",
          "additions": 61,
          "deletions": 0,
          "patch": "@@ -0,0 +1,61 @@\n+package com.gero.newpass.encryption;\n+\n+import android.util.Base64;\n+import android.util.Log;\n+\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.spec.InvalidKeySpecException;\n+import java.util.Arrays;\n+\n+import javax.crypto.SecretKeyFactory;\n+import javax.crypto.spec.PBEKeySpec;\n+\n+public class PasswordUtils {\n+\n+    private static final int SALT_LENGTH = 16;   // in bytes (at least 16 bytes)\n+    private static final int HASH_LENGTH = 256; // in bits\n+    private static final int ITERATIONS = 10000;\n+\n+    public static String hashPassword(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {\n+\n+        SecureRandom random = new SecureRandom();\n+        byte[] salt = new byte[SALT_LENGTH];\n+        random.nextBytes(salt);\n+\n+\n+        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, ITERATIONS, HASH_LENGTH);\n+        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n+        byte[] hash = keyFactory.generateSecret(spec).getEncoded();\n+\n+        String saltBase64 = Base64.encodeToString(salt, Base64.NO_WRAP);\n+        String hashBase64 = Base64.encodeToString(hash, Base64.NO_WRAP);\n+\n+        return saltBase64 + \":\" + hashBase64;\n+    }\n+\n+    public static boolean verifyPassword(String password, String storedPassword) throws NoSuchAlgorithmException, InvalidKeySpecException {\n+\n+        String[] parts = storedPassword.split(\":\");\n+\n+        if (parts.length != 2) {\n+            throw new IllegalArgumentException(\"Stored password must have the format 'salt:hash'\");\n+        }\n+\n+        String saltBase64 = parts[0];\n+        String hashBase64 = parts[1];\n+\n+        byte[] salt = Base64.decode(saltBase64, Base64.NO_WRAP);\n+        byte[] hash = Base64.decode(hashBase64, Base64.NO_WRAP);\n+\n+        /*\n+        The password provided by the user during the login attempt is hashed using the same algorithm,\n+        the same number of iterations and the same salt retrieved from the database.\n+         */\n+        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, ITERATIONS, hash.length * 8);\n+        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n+        byte[] testHash = keyFactory.generateSecret(spec).getEncoded();\n+\n+        return java.util.Arrays.equals(hash, testHash);\n+    }\n+}"
        },
        {
          "filename": "app/src/main/java/com/gero/newpass/view/activities/LoginActivity.java",
          "status": "modified",
          "additions": 16,
          "deletions": 6,
          "patch": "@@ -39,6 +39,8 @@\n import com.gero.newpass.utilities.VibrationHelper;\n import com.gero.newpass.viewmodel.LoginViewModel;\n \n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n import java.util.Locale;\n \n public class LoginActivity extends AppCompatActivity {\n@@ -73,11 +75,11 @@ protected void onCreate(Bundle savedInstanceState) {\n         });\n \n         loginViewModel.getLoginSuccessLiveData().observe(this, success -> {\n-            String savedPasswordSharedPreferences = encryptedSharedPreferences.getString(\"password\", \"\");\n+            String hashedPassword = encryptedSharedPreferences.getString(\"password\", \"\");\n \n             if (success) {\n                 Intent intent = new Intent(LoginActivity.this, MainViewActivity.class);\n-                StringHelper.setSharedString(savedPasswordSharedPreferences);\n+                StringHelper.setSharedString(hashedPassword);\n                 startActivity(intent);\n                 finish();\n             } else {\n@@ -90,8 +92,8 @@ protected void onCreate(Bundle savedInstanceState) {\n         //Determining whether to set dark or light mode based on shared preferences\n         SharedPreferencesHelper.toggleDarkLightModeUI(this);\n \n-        String password = encryptedSharedPreferences.getString(\"password\", \"\");\n-        Boolean isPasswordEmpty = password.isEmpty();\n+        String hashedPassword = encryptedSharedPreferences.getString(\"password\", \"\");\n+        Boolean isPasswordEmpty = hashedPassword.isEmpty();\n \n         if (!isPasswordEmpty) {\n             textViewRegisterOrUnlock.setText(getString(R.string.unlock_newpass_button_text));\n@@ -179,7 +181,11 @@ private void registerUser() {\n \n         buttonRegisterOrUnlock.setOnClickListener(v -> {\n             String passwordInput = passwordEntry.getText().toString();\n-            loginViewModel.createUser(passwordInput, encryptedSharedPreferences);\n+            try {\n+                loginViewModel.createUser(passwordInput, encryptedSharedPreferences);\n+            } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\n+                throw new RuntimeException(e);\n+            }\n             VibrationHelper.vibrate(v, VibrationHelper.VibrationType.Strong);\n         });\n     }\n@@ -213,7 +219,11 @@ private void loginWithPassword(View view) {\n                     return true;\n                 case MotionEvent.ACTION_UP:\n                     v.performClick();\n-                    loginViewModel.loginUserWithPassword(passwordInput, encryptedSharedPreferences);\n+                    try {\n+                        loginViewModel.loginUserWithPassword(passwordInput, encryptedSharedPreferences);\n+                    } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\n+                        throw new RuntimeException(e);\n+                    }\n                     VibrationHelper.vibrate(v, VibrationHelper.VibrationType.Strong);\n                     return true;\n             }"
        },
        {
          "filename": "app/src/main/java/com/gero/newpass/viewmodel/LoginViewModel.java",
          "status": "modified",
          "additions": 10,
          "deletions": 5,
          "patch": "@@ -15,8 +15,11 @@\n import androidx.security.crypto.EncryptedSharedPreferences;\n \n import com.gero.newpass.R;\n+import com.gero.newpass.encryption.PasswordUtils;\n import com.gero.newpass.repository.ResourceRepository;\n \n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n import java.util.concurrent.Executor;\n \n public class LoginViewModel extends ViewModel {\n@@ -40,11 +43,11 @@ public LiveData<Boolean> getLoginSuccessLiveData() {\n \n \n \n-    public void loginUserWithPassword(String password, EncryptedSharedPreferences sharedPreferences) {\n+    public void loginUserWithPassword(String password, EncryptedSharedPreferences sharedPreferences) throws NoSuchAlgorithmException, InvalidKeySpecException {\n \n-        String savedPasswordSharedPreferences = sharedPreferences.getString(\"password\", \"\");\n+        String hashedPassword = sharedPreferences.getString(\"password\", \"\");\n \n-        if (savedPasswordSharedPreferences.equals(password)) {\n+        if (PasswordUtils.verifyPassword(password, hashedPassword)) {\n             loginSuccessLiveData.setValue(true);\n             loginMessageLiveData.setValue(resourceRepository.getString(R.string.login_done));\n         } else {\n@@ -88,11 +91,13 @@ public void onAuthenticationFailed() {\n     }\n \n \n-    public void createUser(String password, EncryptedSharedPreferences sharedPreferences) {\n+    public void createUser(String password, EncryptedSharedPreferences sharedPreferences) throws NoSuchAlgorithmException, InvalidKeySpecException {\n \n         if (password.length() >= 4) {\n             SharedPreferences.Editor editor = sharedPreferences.edit();\n-            editor.putString(\"password\", password);\n+\n+            String hashedPassword = PasswordUtils.hashPassword(password);\n+            editor.putString(\"password\", hashedPassword);\n             editor.apply();\n \n             loginSuccessLiveData.setValue(true);"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4f2f168687d8086b189566499d11d2ffa3e4a1a8",
            "date": "2024-06-17T20:56:49Z",
            "author_login": "6eero"
          },
          {
            "sha": "d5df2f78aeebaa91f5a61de320e60e86587b825d",
            "date": "2024-06-17T20:41:18Z",
            "author_login": "6eero"
          },
          {
            "sha": "ab3308de3509fa3ee54f67b4fc425925c7192df9",
            "date": "2024-06-17T20:31:19Z",
            "author_login": "6eero"
          },
          {
            "sha": "8268fde434e30f8dcb2a40ba7cca608bc14e80e1",
            "date": "2024-06-14T21:41:59Z",
            "author_login": "6eero"
          },
          {
            "sha": "064458acb88d6ac4861364c6960ae1f44f936308",
            "date": "2024-06-12T20:39:32Z",
            "author_login": "6eero"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-312",
    "description": "NewPass before 1.2.0 stores passwords (rather than password hashes) directly, which makes it easier to obtain unauthorized access to sensitive information. NOTE: in each case, data at rest is encrypted, but is decrypted within process memory during use.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-29T21:15:09.917",
    "last_modified": "2024-11-25T21:15:15.117",
    "fix_date": "2024-05-31T20:17:46Z"
  },
  "references": [
    {
      "url": "https://github.com/6eero/NewPass/commit/13f0a844d64927450fa751deb7cc06beba699720",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/6eero/NewPass/releases/tag/v1.2.0",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/6eero/NewPass/commit/13f0a844d64927450fa751deb7cc06beba699720",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/6eero/NewPass/releases/tag/v1.2.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.874160",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "NewPass",
    "owner": "6eero",
    "created_at": "2024-03-14T00:35:18Z",
    "updated_at": "2025-01-08T12:34:33Z",
    "pushed_at": "2024-08-16T00:41:50Z",
    "size": 6766,
    "stars": 226,
    "forks": 18,
    "open_issues": 7,
    "watchers": 226,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 134020
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T17:29:40.214521"
  }
}