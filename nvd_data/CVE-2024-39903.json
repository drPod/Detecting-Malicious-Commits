{
  "cve_id": "CVE-2024-39903",
  "github_data": {
    "repository": "widgetti/solara",
    "fix_commit": "df2fd66a7f4e8ffd36e8678697a8a4f76760dc54",
    "related_commits": [
      "df2fd66a7f4e8ffd36e8678697a8a4f76760dc54",
      "df2fd66a7f4e8ffd36e8678697a8a4f76760dc54"
    ],
    "patch_url": "https://github.com/widgetti/solara/commit/df2fd66a7f4e8ffd36e8678697a8a4f76760dc54.patch",
    "fix_commit_details": {
      "sha": "df2fd66a7f4e8ffd36e8678697a8a4f76760dc54",
      "commit_date": "2024-07-11T11:34:04Z",
      "author": {
        "login": "maartenbreddels",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: CVE followup, do not serve relative files",
        "length": 198,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 147,
        "additions": 133,
        "deletions": 14
      },
      "files": [
        {
          "filename": "solara/server/cdn_helper.py",
          "status": "modified",
          "additions": 9,
          "deletions": 11,
          "patch": "@@ -1,9 +1,9 @@\n import logging\n-import os\n import pathlib\n import shutil\n \n import requests\n+from solara.server.utils import path_is_child_of\n \n import solara.settings\n \n@@ -14,6 +14,9 @@\n \n def put_in_cache(base_cache_dir: pathlib.Path, path, data: bytes):\n     cache_path = base_cache_dir / path\n+    if not path_is_child_of(cache_path, base_cache_dir):\n+        raise PermissionError(\"Trying to write outside of cache directory\")\n+\n     pathlib.Path(cache_path.parent).mkdir(parents=True, exist_ok=True)\n     try:\n         logger.info(\"Writing cache file: %s\", cache_path)\n@@ -27,16 +30,8 @@ def get_from_cache(base_cache_dir: pathlib.Path, path):\n     # Make sure cache_path is a subdirectory of base_cache_dir\n     # so we don't accidentally read files from the parent directory\n     # which is a security risk.\n-    # We use os.path.normpath() because we do not want to follow symlinks\n-    # in editable installs, since some packages are symlinked\n-    if not os.path.normpath(cache_path).startswith(os.path.normpath(base_cache_dir)):\n-        logger.warning(\n-            \"Trying to read from outside of cache directory: %s is not a subdir of %s (%s - %s)\",\n-            cache_path,\n-            base_cache_dir,\n-            os.path.normpath(cache_path),\n-            os.path.normpath(base_cache_dir),\n-        )\n+    if not path_is_child_of(cache_path, base_cache_dir):\n+        logger.warning(\"Trying to read from outside of cache directory: %s is not a subdir of %s\", cache_path, base_cache_dir)\n         raise PermissionError(\"Trying to read from outside of cache directory\")\n \n     try:\n@@ -74,6 +69,9 @@ def get_path(base_cache_dir: pathlib.Path, path) -> pathlib.Path:\n     store_path = path if len(parts) != 1 else pathlib.Path(path) / \"__main.js\"\n     cache_path = base_cache_dir / store_path\n \n+    if not path_is_child_of(cache_path, base_cache_dir):\n+        raise PermissionError(\"Trying to read from outside of cache directory\")\n+\n     if cache_path.exists():\n         # before d7eba856f100d5c3c64f4eec22c62390f084cb40 on windows, we could\n         # accidentally write to the cache directory, so we need to check if we still"
        },
        {
          "filename": "solara/server/flask.py",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -199,7 +199,7 @@ def nbext(dir, filename):\n     for directory in server.nbextensions_directories:\n         file = directory / dir / filename\n         if file.exists():\n-            return send_from_directory(directory / dir, filename)\n+            return send_from_directory(directory, dir + os.path.sep + filename)\n     return flask.Response(\"not found\", status=404)\n \n \n@@ -217,7 +217,10 @@ def cdn(path):\n         if not allowed():\n             abort(401)\n         cache_directory = settings.assets.proxy_cache_dir\n-        content = cdn_helper.get_data(Path(cache_directory), path)\n+        try:\n+            content = cdn_helper.get_data(Path(cache_directory), path)\n+        except PermissionError:\n+            return flask.Response(\"not found\", status=404)\n         mime = mimetypes.guess_type(path)\n         return flask.Response(content, mimetype=mime[0])\n "
        },
        {
          "filename": "solara/server/starlette.py",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -3,6 +3,7 @@\n import logging\n import math\n import os\n+from pathlib import Path\n import sys\n import threading\n import typing\n@@ -14,6 +15,8 @@\n import uvicorn.server\n import websockets.legacy.http\n \n+from solara.server.utils import path_is_child_of\n+\n try:\n     import solara_enterprise\n \n@@ -405,6 +408,9 @@ def lookup_path(self, path: str) -> typing.Tuple[str, typing.Optional[os.stat_re\n             original_path = os.path.join(directory, path)\n             full_path = os.path.realpath(original_path)\n             directory = os.path.realpath(directory)\n+            # return early if someone tries to access a file outside of the directory\n+            if not path_is_child_of(Path(original_path), Path(directory)):\n+                return \"\", None\n             try:\n                 return full_path, os.stat(full_path)\n             except (FileNotFoundError, NotADirectoryError):\n@@ -449,7 +455,6 @@ def lookup_path(self, path: str) -> typing.Tuple[str, typing.Optional[os.stat_re\n             full_path = str(get_path(settings.assets.proxy_cache_dir, path))\n         except Exception:\n             return \"\", None\n-\n         return full_path, os.stat(full_path)\n \n "
        },
        {
          "filename": "solara/server/utils.py",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -1,6 +1,7 @@\n import contextlib\n import logging\n import os\n+from pathlib import Path\n import pdb\n import traceback\n \n@@ -16,6 +17,12 @@ def start_error(title, msg, exception: Exception = None):\n     os._exit(-1)\n \n \n+def path_is_child_of(path: Path, parent: Path) -> bool:\n+    # We use os.path.normpath() because we do not want to follow symlinks\n+    # in editable installs, since some packages are symlinked\n+    return os.path.normpath(path).startswith(os.path.normpath(parent))\n+\n+\n @contextlib.contextmanager\n def pdb_guard():\n     from . import settings"
        },
        {
          "filename": "tests/integration/apps/not-allowed",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+not accessible"
        },
        {
          "filename": "tests/integration/apps/public/test.txt",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+test"
        },
        {
          "filename": "tests/integration/apps/secure/app.py",
          "status": "added",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -0,0 +1,4 @@\n+import solara\n+\n+\n+page = solara.Button(\"Click me\")"
        },
        {
          "filename": "tests/integration/server_test.py",
          "status": "modified",
          "additions": 100,
          "deletions": 0,
          "patch": "@@ -5,8 +5,11 @@\n import playwright.sync_api\n import pytest\n import reacton.ipywidgets as w\n+import requests\n \n import solara\n+import solara.server.server\n+from solara.server import settings\n \n HERE = Path(__file__).parent\n \n@@ -211,3 +214,100 @@ def test_kernel_asyncio(browser: playwright.sync_api.Browser, solara_server, sol\n         context1.close()\n         context2.close()\n         solara.server.settings.kernel.threaded = threaded\n+\n+\n+def test_cdn_secure(solara_server, solara_app, extra_include_path):\n+    cdn_url = solara_server.base_url + \"/_solara/cdn\"\n+    assert solara.settings.assets.proxy\n+\n+    with extra_include_path(HERE), solara_app(\"server_test:ClickButton\"):\n+        url = cdn_url + \"/vue-grid-layout@1.0.2/dist/vue-grid-layout.min.js\"\n+        response = requests.get(url)\n+        assert response.status_code == 200\n+        # create a file in /share/solara\n+        test_file = settings.assets.proxy_cache_dir.parent / \"not-allowed\"\n+        test_file.write_text(\"test\")\n+        url = cdn_url + \"/..%2fnot-allowed\"\n+        response = requests.get(url)\n+        assert response.status_code == 404\n+\n+\n+def test_nbextension_secure(solara_server, solara_app, extra_include_path):\n+    nbextensions_url = solara_server.base_url + \"/static/nbextensions\"\n+    nbextensions_directories = [k for k in solara.server.server.nbextensions_directories if k.exists()]\n+    assert nbextensions_directories, \"we should at least test one directory\"\n+    nbextensions_directory = nbextensions_directories[0]\n+\n+    with extra_include_path(HERE), solara_app(\"server_test:ClickButton\"):\n+        url = nbextensions_url + \"/jupyter-vuetify/nodeps.js\"\n+        response = requests.get(url)\n+        assert response.status_code == 200\n+        test_file = nbextensions_directory.parent / \"not-allowed\"\n+        test_file.write_text(\"test\")\n+        url = nbextensions_url + \"/..%2fnot-allowed\"\n+        response = requests.get(url)\n+        assert response.status_code == 404\n+\n+        url = nbextensions_url + \"/foo/..%2f..%2fnot-allowed\"\n+        response = requests.get(url)\n+        assert response.status_code == 404\n+\n+\n+def test_assets_secure(solara_server, solara_app, extra_include_path):\n+    assets_url = solara_server.base_url + \"/static/assets\"\n+    assets_directory = solara.server.server.solara_static.parent / \"assets\"\n+\n+    with extra_include_path(HERE), solara_app(\"server_test:ClickButton\"):\n+        url = assets_url + \"/theme.js\"\n+        response = requests.get(url)\n+        assert response.status_code == 200\n+        test_file = assets_directory.parent / \"__init__.py\"\n+        assert test_file.exists()\n+        url = assets_url + \"/..%2f__init__.py\"\n+        response = requests.get(url)\n+        assert response.status_code == 404\n+\n+        url = assets_url + \"/foo/..%2f..%2f__init__.py\"\n+        response = requests.get(url)\n+        assert response.status_code == 404\n+\n+\n+def test_public_secure(solara_server, solara_app, extra_include_path):\n+    public_url = solara_server.base_url + \"/static/public\"\n+\n+    with solara_app(str(HERE / \"apps/secure/app.py\")):\n+        apps = list(solara.server.app.apps.values())\n+        assert len(apps) == 1\n+        app = apps[0]\n+        public_directory = app.directory.parent / \"public\"\n+        url = public_url + \"/test.txt\"\n+        response = requests.get(url)\n+        assert response.status_code == 200\n+        test_file = public_directory.parent / \"not-allowed\"\n+        assert test_file.exists()\n+        url = public_url + \"/..%2fnot-allowed\"\n+        response = requests.get(url)\n+        assert response.status_code == 404\n+\n+        url = public_url + \"/foo/..%2f..%2fnot-allowed\"\n+        response = requests.get(url)\n+        assert response.status_code == 404\n+\n+\n+def test_static_secure(solara_server, solara_app, extra_include_path):\n+    static_url = solara_server.base_url + \"/static\"\n+    static_directory = solara.server.server.solara_static\n+\n+    with extra_include_path(HERE), solara_app(\"server_test:ClickButton\"):\n+        url = static_url + \"/main.js\"\n+        response = requests.get(url)\n+        assert response.status_code == 200\n+        test_file = static_directory.parent / \"__init__.py\"\n+        assert test_file.exists()\n+        url = static_url + \"/..%2f__init__.py\"\n+        response = requests.get(url)\n+        assert response.status_code == 404\n+\n+        url = static_url + \"/foo/..%2f..%2f__init__.py\"\n+        response = requests.get(url)\n+        assert response.status_code == 404"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f9c02826af4bdd761bd34e1dcc3aa91deb9e8832",
            "date": "2025-01-11T06:33:56Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "5fe30dc27fe99ee056f3a046c0942386b181d00f",
            "date": "2024-12-20T11:29:25Z",
            "author_login": "maartenbreddels"
          },
          {
            "sha": "86fc2ad88a89ffe134eaa6700a8c416bcab036b4",
            "date": "2024-12-20T11:23:28Z",
            "author_login": "maartenbreddels"
          },
          {
            "sha": "31dad767c15e3671e610fcba5ae2b124bb0b5220",
            "date": "2024-12-20T11:09:37Z",
            "author_login": "maartenbreddels"
          },
          {
            "sha": "5f747ecad255d4c2b64d0c7ff994e1aee2af99ca",
            "date": "2025-01-10T06:37:06Z",
            "author_login": "github-actions[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L",
    "cwe_id": "CWE-22",
    "description": "Solara is a pure Python, React-style framework for scaling Jupyter and web apps. A Local File Inclusion (LFI) vulnerability was identified in widgetti/solara, in version <1.35.1, which was fixed in version 1.35.1. This vulnerability arises from the application's failure to properly validate URI fragments for directory traversal sequences such as '../' when serving static files. An attacker can exploit this flaw by manipulating the fragment part of the URI to read arbitrary files on the local file system.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-12T15:15:11.177",
    "last_modified": "2024-11-21T09:28:32.080",
    "fix_date": "2024-07-11T11:34:04Z"
  },
  "references": [
    {
      "url": "https://github.com/widgetti/solara/commit/df2fd66a7f4e8ffd36e8678697a8a4f76760dc54",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/widgetti/solara/security/advisories/GHSA-9794-pc4r-438w",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/widgetti/solara/commit/df2fd66a7f4e8ffd36e8678697a8a4f76760dc54",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/widgetti/solara/security/advisories/GHSA-9794-pc4r-438w",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.480471",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "solara",
    "owner": "widgetti",
    "created_at": "2022-03-09T08:12:01Z",
    "updated_at": "2025-01-14T08:15:45Z",
    "pushed_at": "2025-01-13T23:16:38Z",
    "size": 38625,
    "stars": 1960,
    "forks": 145,
    "open_issues": 266,
    "watchers": 1960,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 1175090,
      "Vue": 126138,
      "CSS": 93997,
      "JavaScript": 34728,
      "Jinja": 26239,
      "TypeScript": 18475,
      "HTML": 10325,
      "Jupyter Notebook": 3758,
      "Shell": 2466,
      "Procfile": 1038
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T18:51:48.287793"
  }
}