{
  "cve_id": "CVE-2024-39912",
  "github_data": {
    "repository": "web-auth/webauthn-framework",
    "fix_commit": "64de11f6cddc71e56c76e0cc4573bf94d02be045",
    "related_commits": [
      "64de11f6cddc71e56c76e0cc4573bf94d02be045",
      "64de11f6cddc71e56c76e0cc4573bf94d02be045"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "64de11f6cddc71e56c76e0cc4573bf94d02be045",
      "commit_date": "2024-07-06T04:53:56Z",
      "author": {
        "login": "Spomky",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add feature to hide existing credentials",
        "length": 468,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 62,
        "additions": 52,
        "deletions": 10
      },
      "files": [
        {
          "filename": "phpstan-baseline.neon",
          "status": "modified",
          "additions": 10,
          "deletions": 5,
          "patch": "@@ -692,6 +692,11 @@ parameters:\n \t\t\tcount: 1\n \t\t\tpath: src/symfony/src/Controller/AttestationControllerFactory.php\n \n+\t\t-\n+\t\t\tmessage: \"#^Method Webauthn\\\\\\\\Bundle\\\\\\\\CredentialOptionsBuilder\\\\\\\\PublicKeyCredentialCreationOptionsBuilder\\\\:\\\\:getFromRequest\\\\(\\\\) invoked with 3 parameters, 2 required\\\\.$#\"\n+\t\t\tcount: 1\n+\t\t\tpath: src/symfony/src/Controller/AttestationRequestController.php\n+\n \t\t-\n \t\t\tmessage: \"#^Call to an undefined method Symfony\\\\\\\\Component\\\\\\\\HttpFoundation\\\\\\\\Request\\\\:\\\\:getContentType\\\\(\\\\)\\\\.$#\"\n \t\t\tcount: 1\n@@ -807,11 +812,6 @@ parameters:\n \t\t\tcount: 1\n \t\t\tpath: src/symfony/src/CredentialOptionsBuilder/ProfileBasedRequestOptionsBuilder.php\n \n-\t\t-\n-\t\t\tmessage: \"#^Should not use function \\\"dump\\\", please change the code\\\\.$#\"\n-\t\t\tcount: 1\n-\t\t\tpath: src/symfony/src/CredentialOptionsBuilder/ProfileBasedRequestOptionsBuilder.php\n-\n \t\t-\n \t\t\tmessage: \"\"\"\n \t\t\t\t#^Fetching class constant class of deprecated class Webauthn\\\\\\\\Bundle\\\\\\\\Event\\\\\\\\AuthenticatorAssertionResponseValidationFailedEvent\\\\:\n@@ -1061,6 +1061,11 @@ parameters:\n \t\t\tcount: 4\n \t\t\tpath: src/symfony/src/DependencyInjection/WebauthnExtension.php\n \n+\t\t-\n+\t\t\tmessage: \"#^Cannot access offset 'hide_existing\u2026' on mixed\\\\.$#\"\n+\t\t\tcount: 1\n+\t\t\tpath: src/symfony/src/DependencyInjection/WebauthnExtension.php\n+\n \t\t-\n \t\t\tmessage: \"#^Cannot access offset 'host' on mixed\\\\.$#\"\n \t\t\tcount: 4"
        },
        {
          "filename": "src/symfony/src/Controller/AttestationControllerFactory.php",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -72,13 +72,15 @@ public function createRequestController(\n         OptionsStorage $optionStorage,\n         CreationOptionsHandler $creationOptionsHandler,\n         FailureHandler|AuthenticationFailureHandlerInterface $failureHandler,\n+        bool $hideExistingExcludedCredentials = false\n     ): AttestationRequestController {\n         return new AttestationRequestController(\n             $optionsBuilder,\n             $userEntityGuesser,\n             $optionStorage,\n             $creationOptionsHandler,\n-            $failureHandler\n+            $failureHandler,\n+            $hideExistingExcludedCredentials\n         );\n     }\n "
        },
        {
          "filename": "src/symfony/src/Controller/AttestationRequestController.php",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -24,14 +24,19 @@ public function __construct(\n         private readonly OptionsStorage $optionsStorage,\n         private readonly CreationOptionsHandler $creationOptionsHandler,\n         private readonly FailureHandler|AuthenticationFailureHandlerInterface $failureHandler,\n+        private readonly bool $hideExistingExcludedCredentials = false,\n     ) {\n     }\n \n     public function __invoke(Request $request): Response\n     {\n         try {\n             $userEntity = $this->userEntityGuesser->findUserEntity($request);\n-            $publicKeyCredentialCreationOptions = $this->extractor->getFromRequest($request, $userEntity);\n+            $publicKeyCredentialCreationOptions = $this->extractor->getFromRequest(\n+                $request,\n+                $userEntity,\n+                $this->hideExistingExcludedCredentials\n+            );\n \n             $response = $this->creationOptionsHandler->onCreationOptions(\n                 $publicKeyCredentialCreationOptions,"
        },
        {
          "filename": "src/symfony/src/CredentialOptionsBuilder/ProfileBasedCreationOptionsBuilder.php",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -48,7 +48,8 @@ public function __construct(\n \n     public function getFromRequest(\n         Request $request,\n-        PublicKeyCredentialUserEntity $userEntity\n+        PublicKeyCredentialUserEntity $userEntity,\n+        bool $hideExistingExcludedCredentials = false\n     ): PublicKeyCredentialCreationOptions {\n         $format = method_exists(\n             $request,\n@@ -57,7 +58,7 @@ public function getFromRequest(\n         $format === 'json' || throw new BadRequestHttpException('Only JSON content type allowed');\n         $content = $request->getContent();\n \n-        $excludedCredentials = $this->getCredentials($userEntity);\n+        $excludedCredentials = $hideExistingExcludedCredentials === true ? [] : $this->getCredentials($userEntity);\n         $optionsRequest = $this->getServerPublicKeyCredentialCreationOptionsRequest($content);\n         $authenticatorSelectionData = $optionsRequest->authenticatorSelection;\n         $authenticatorSelection = null;"
        },
        {
          "filename": "src/symfony/src/CredentialOptionsBuilder/PublicKeyCredentialCreationOptionsBuilder.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -12,6 +12,7 @@ interface PublicKeyCredentialCreationOptionsBuilder\n {\n     public function getFromRequest(\n         Request $request,\n-        PublicKeyCredentialUserEntity $userEntity\n+        PublicKeyCredentialUserEntity $userEntity,\n+        /*bool $hideExistingExcludedCredentials = false*/\n     ): PublicKeyCredentialCreationOptions;\n }"
        },
        {
          "filename": "src/symfony/src/DependencyInjection/Configuration.php",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -354,6 +354,12 @@ private function addControllersConfig(ArrayNodeDefinition $rootNode): void\n             ->scalarNode('user_entity_guesser')\n             ->isRequired()\n             ->end()\n+            ->scalarNode('hide_existing_credentials')\n+                ->info(\n+                    'In order to prevent username enumeration, the existing credentials can be hidden. This is highly recommended when the attestation ceremony is performed by anonymous users.'\n+                )\n+                ->defaultFalse()\n+            ->end()\n             ->scalarNode('options_storage')\n             ->defaultValue(SessionStorage::class)\n             ->info('Service responsible of the options/user entity storage during the ceremony')"
        },
        {
          "filename": "src/symfony/src/DependencyInjection/Factory/Security/WebauthnFactory.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -415,6 +415,7 @@ private function createAttestationRequestControllerAndRoute(\n                 new Reference($optionsStorageId),\n                 new Reference($optionsHandlerId),\n                 new Reference($failureHandlerId),\n+                true,\n             ]);\n         $this->createControllerAndRoute(\n             $container,"
        },
        {
          "filename": "src/symfony/src/DependencyInjection/WebauthnExtension.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -215,6 +215,7 @@ private function loadCreationControllersSupport(ContainerBuilder $container, arr\n                     new Reference($creationConfig['options_storage']),\n                     new Reference($creationConfig['options_handler']),\n                     new Reference($creationConfig['failure_handler']),\n+                    $creationConfig['hide_existing_credentials'] ?? false,\n                 ])\n                 ->addTag(DynamicRouteCompilerPass::TAG, [\n                     'method' => $creationConfig['options_method'],"
        },
        {
          "filename": "tests/symfony/config/config.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -131,6 +131,7 @@ webauthn:\n     enabled: true\n     creation:\n       test:\n+        hide_existing_credentials: true\n         options_path: '/devices/add/options'\n         result_path: '/devices/add'\n         #host: null"
        },
        {
          "filename": "tests/symfony/functional/Attestation/AdditionalAuthenticatorTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -64,6 +64,7 @@ public function anExistingUserCanAskForOptionsUsingTheDedicatedController(): voi\n             static::assertArrayHasKey($expectedKey, $data);\n         }\n         static::assertSame('ok', $data['status']);\n+        static::assertArrayNotHasKey('excludeCredentials', $data); // username enumeration prevention is enabled\n     }\n \n     #[Test]"
        },
        {
          "filename": "tests/symfony/functional/PublicKeyCredentialSourceRepository.php",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -38,6 +38,24 @@ public function __construct(\n             100\n         );\n         $this->saveCredentialSource($publicKeyCredentialSource1);\n+        $publicKeyCredentialSource2 = PublicKeyCredentialSource::create(\n+            base64_decode(\n+                'Ac8zKrpVWv9UCwxY1FyMqkESz2lV4CNwTk2+Hp19LgKbvh5uQ2/i6AMbTbTz1zcNapCEeiLJPlAAVM4L7AIow6I=',\n+                true\n+            ),\n+            PublicKeyCredentialDescriptor::CREDENTIAL_TYPE_PUBLIC_KEY,\n+            [],\n+            AttestationStatement::TYPE_NONE,\n+            EmptyTrustPath::create(),\n+            Uuid::fromBinary(base64_decode('AAAAAAAAAAAAAAAAAAAAAA==', true)),\n+            base64_decode(\n+                'pQECAyYgASFYIJV56vRrFusoDf9hm3iDmllcxxXzzKyO9WruKw4kWx7zIlgg/nq63l8IMJcIdKDJcXRh9hoz0L+nVwP1Oxil3/oNQYs=',\n+                true\n+            ),\n+            '929fba2f-2361-4bc6-a917-bb76aa14c7f9',\n+            100\n+        );\n+        $this->saveCredentialSource($publicKeyCredentialSource2);\n     }\n \n     public function findOneByCredentialId(string $publicKeyCredentialId): ?PublicKeyCredentialSource"
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 8,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88b9c85f278a57a339585cff7f39f73cedd7b1e4",
            "date": "2025-01-18T18:08:06Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "f1432e71dbc4935767fce1960dded4d2090fe80c",
            "date": "2025-01-18T15:33:05Z",
            "author_login": "Spomky"
          },
          {
            "sha": "281025e14c9ea1046e99f534428678d0506b98fd",
            "date": "2025-01-18T15:30:18Z",
            "author_login": "Spomky"
          },
          {
            "sha": "3cc89badd312f644ee918bccbf7196e0f4157105",
            "date": "2025-01-04T10:19:25Z",
            "author_login": "Spomky"
          },
          {
            "sha": "5a43790ca097296593886e3df3ad48acd9e12a8a",
            "date": "2025-01-03T23:01:20Z",
            "author_login": "Spomky"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-204",
    "description": "web-auth/webauthn-lib is an open source set of PHP libraries and a Symfony bundle to allow developers to integrate that authentication mechanism into their web applications. The ProfileBasedRequestOptionsBuilder method returns allowedCredentials without any credentials if no username was found. When WebAuthn is used as the first or only authentication method, an attacker can enumerate usernames based on the absence of the `allowedCredentials` property in the assertion options response. This allows enumeration of valid or invalid usernames. By knowing which usernames are valid, attackers can focus their efforts on a smaller set of potential targets, increasing the efficiency and likelihood of successful attacks. This issue has been addressed in version 4.9.0 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-15T20:15:03.693",
    "last_modified": "2024-11-21T09:28:33.220",
    "fix_date": "2024-07-06T04:53:56Z"
  },
  "references": [
    {
      "url": "https://github.com/web-auth/webauthn-framework/commit/64de11f6cddc71e56c76e0cc4573bf94d02be045",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/web-auth/webauthn-framework/security/advisories/GHSA-875x-g8p7-5w27",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/web-auth/webauthn-framework/commit/64de11f6cddc71e56c76e0cc4573bf94d02be045",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/web-auth/webauthn-framework/security/advisories/GHSA-875x-g8p7-5w27",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.484211",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "webauthn-framework",
    "owner": "web-auth",
    "created_at": "2018-11-22T19:39:31Z",
    "updated_at": "2025-01-22T09:25:37Z",
    "pushed_at": "2025-01-18T18:09:42Z",
    "size": 7887,
    "stars": 438,
    "forks": 60,
    "open_issues": 17,
    "watchers": 438,
    "has_security_policy": false,
    "default_branch": "5.2.x",
    "protected_branches": [],
    "languages": {
      "PHP": 862052,
      "Twig": 88409,
      "TypeScript": 10598,
      "JavaScript": 6194
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:03:11.526896"
  }
}