{
  "cve_id": "CVE-2024-4030",
  "github_data": {
    "repository": "python/cpython",
    "fix_commit": "35c799d79177b962ddace2fa068101465570a29a",
    "related_commits": [
      "35c799d79177b962ddace2fa068101465570a29a",
      "5130731c9e779b97d00a24f54cdce73ce9975dfd",
      "66f8bb76a15e64a1bb7688b177ed29e26230fdee",
      "6d0850c4c8188035643586ab4d8ec2468abd699e",
      "81939dad77001556c527485d31a2d0f4a759033e",
      "8ed546679524140d8282175411fd141fe7df070d",
      "91e3669e01245185569d09e9e6e11641282971ee",
      "94591dca510c796c7d40e9b4167ea56f2fdf28ca",
      "c8f868dc52f98011d0f9b459b6487920bfb0ac4d",
      "d86b49411753bf2c83291e3a14ae43fefded2f84",
      "e1dfa978b1ad210d551385ad8073ec6154f53763",
      "eb29e2f5905da93333d1ce78bc98b151e763ff46",
      "35c799d79177b962ddace2fa068101465570a29a",
      "5130731c9e779b97d00a24f54cdce73ce9975dfd",
      "66f8bb76a15e64a1bb7688b177ed29e26230fdee",
      "6d0850c4c8188035643586ab4d8ec2468abd699e",
      "81939dad77001556c527485d31a2d0f4a759033e",
      "8ed546679524140d8282175411fd141fe7df070d",
      "91e3669e01245185569d09e9e6e11641282971ee",
      "94591dca510c796c7d40e9b4167ea56f2fdf28ca",
      "c8f868dc52f98011d0f9b459b6487920bfb0ac4d",
      "d86b49411753bf2c83291e3a14ae43fefded2f84",
      "e1dfa978b1ad210d551385ad8073ec6154f53763",
      "eb29e2f5905da93333d1ce78bc98b151e763ff46"
    ],
    "patch_url": "https://github.com/python/cpython/commit/35c799d79177b962ddace2fa068101465570a29a.patch",
    "fix_commit_details": {
      "sha": "35c799d79177b962ddace2fa068101465570a29a",
      "commit_date": "2024-05-24T00:13:18Z",
      "author": {
        "login": "zooba",
        "type": "User",
        "stats": {
          "total_commits": 1058,
          "average_weekly_commits": 0.5884315906562848,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 306
        }
      },
      "commit_message": {
        "title": "[3.11] gh-118486: Support mkdir(mode=0o700) on Windows (GH-118488) (GH-118739)",
        "length": 78,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 105,
        "additions": 103,
        "deletions": 2
      },
      "files": [
        {
          "filename": "Doc/library/os.rst",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -2178,6 +2178,10 @@ features:\n    platform-dependent.  On some platforms, they are ignored and you should call\n    :func:`chmod` explicitly to set them.\n \n+   On Windows, a *mode* of ``0o700`` is specifically handled to apply access\n+   control to the new directory such that only the current user and\n+   administrators have access. Other values of *mode* are ignored.\n+\n    This function can also support :ref:`paths relative to directory descriptors\n    <dir_fd>`.\n \n@@ -2192,6 +2196,9 @@ features:\n    .. versionchanged:: 3.6\n       Accepts a :term:`path-like object`.\n \n+   .. versionchanged:: 3.11.10\n+      Windows now handles a *mode* of ``0o700``.\n+\n \n .. function:: makedirs(name, mode=0o777, exist_ok=False)\n "
        },
        {
          "filename": "Doc/whatsnew/3.11.rst",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -899,6 +899,13 @@ os\n   instead of ``CryptGenRandom()`` which is deprecated.\n   (Contributed by Donghee Na in :issue:`44611`.)\n \n+* As of 3.11.10, :func:`os.mkdir` and :func:`os.makedirs` on Windows\n+  now support passing a *mode* value of ``0o700`` to apply access\n+  control to the new directory. This implicitly affects\n+  :func:`tempfile.mkdtemp` and is a mitigation for CVE-2024-4030.\n+  Other values for *mode* continue to be ignored.\n+  (Contributed by Steve Dower in :gh:`118486`.)\n+\n \n .. _whatsnew311-pathlib:\n \n@@ -1059,6 +1066,11 @@ tempfile\n   such as compression modules.\n   (Contributed by Carey Metcalfe in :gh:`70363`.)\n \n+* As of 3.11.10 on Windows, the default mode ``0o700`` used by\n+  :func:`tempfile.mkdtemp` now limits access to the new directory due to\n+  changes to :func:`os.mkdir`. This is a mitigation for CVE-2024-4030.\n+  (Contributed by Steve Dower in :gh:`118486`.)\n+\n \n .. _whatsnew311-threading:\n "
        },
        {
          "filename": "Lib/test/test_os.py",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -1743,6 +1743,18 @@ def test_exist_ok_existing_regular_file(self):\n         self.assertRaises(OSError, os.makedirs, path, exist_ok=True)\n         os.remove(path)\n \n+    @unittest.skipUnless(os.name == 'nt', \"requires Windows\")\n+    def test_win32_mkdir_700(self):\n+        base = os_helper.TESTFN\n+        path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))\n+        os.mkdir(path, mode=0o700)\n+        out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")\n+        os.rmdir(path)\n+        self.assertEqual(\n+            out.strip(),\n+            f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',\n+        )\n+\n     def tearDown(self):\n         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',\n                             'dir4', 'dir5', 'dir6')"
        },
        {
          "filename": "Lib/test/test_tempfile.py",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@\n import stat\n import types\n import weakref\n+import subprocess\n from unittest import mock\n \n import unittest\n@@ -801,6 +802,33 @@ def test_mode(self):\n         finally:\n             os.rmdir(dir)\n \n+    @unittest.skipUnless(os.name == \"nt\", \"Only on Windows.\")\n+    def test_mode_win32(self):\n+        # Use icacls.exe to extract the users with some level of access\n+        # Main thing we are testing is that the BUILTIN\\Users group has\n+        # no access. The exact ACL is going to vary based on which user\n+        # is running the test.\n+        dir = self.do_create()\n+        try:\n+            out = subprocess.check_output([\"icacls.exe\", dir], encoding=\"oem\").casefold()\n+        finally:\n+            os.rmdir(dir)\n+\n+        dir = dir.casefold()\n+        users = set()\n+        found_user = False\n+        for line in out.strip().splitlines():\n+            acl = None\n+            # First line of result includes our directory\n+            if line.startswith(dir):\n+                acl = line.removeprefix(dir).strip()\n+            elif line and line[:1].isspace():\n+                acl = line.strip()\n+            if acl:\n+                users.add(acl.partition(\":\")[0])\n+\n+        self.assertNotIn(r\"BUILTIN\\Users\".casefold(), users)\n+\n     def test_collision_with_existing_file(self):\n         # mkdtemp tries another name when a file with\n         # the chosen name already exists"
        },
        {
          "filename": "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst",
          "status": "added",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -0,0 +1,4 @@\n+:func:`os.mkdir` on Windows now accepts *mode* of ``0o700`` to restrict\n+the new directory to the current user. This fixes CVE-2024-4030\n+affecting :func:`tempfile.mkdtemp` in scenarios where the base temporary\n+directory is more permissive than the default."
        },
        {
          "filename": "Modules/posixmodule.c",
          "status": "modified",
          "additions": 40,
          "deletions": 2,
          "patch": "@@ -34,6 +34,11 @@\n #include \"pycore_pystate.h\"       // _PyInterpreterState_GET()\n #include \"pycore_signal.h\"        // Py_NSIG\n \n+#ifdef MS_WINDOWS\n+#  include <aclapi.h>             // SetEntriesInAcl\n+#  include <sddl.h>               // SDDL_REVISION_1\n+#endif\n+\n #include \"structmember.h\"         // PyMemberDef\n #ifndef MS_WINDOWS\n #  include \"posixmodule.h\"\n@@ -4611,6 +4616,12 @@ os_mkdir_impl(PyObject *module, path_t *path, int mode, int dir_fd)\n /*[clinic end generated code: output=a70446903abe821f input=a61722e1576fab03]*/\n {\n     int result;\n+#ifdef MS_WINDOWS\n+    int error = 0;\n+    int pathError = 0;\n+    SECURITY_ATTRIBUTES secAttr = { sizeof(secAttr) };\n+    SECURITY_ATTRIBUTES *pSecAttr = NULL;\n+#endif\n #ifdef HAVE_MKDIRAT\n     int mkdirat_unavailable = 0;\n #endif\n@@ -4622,11 +4633,38 @@ os_mkdir_impl(PyObject *module, path_t *path, int mode, int dir_fd)\n \n #ifdef MS_WINDOWS\n     Py_BEGIN_ALLOW_THREADS\n-    result = CreateDirectoryW(path->wide, NULL);\n+    if (mode == 0700 /* 0o700 */) {\n+        ULONG sdSize;\n+        pSecAttr = &secAttr;\n+        // Set a discretionary ACL (D) that is protected (P) and includes\n+        // inheritable (OICI) entries that allow (A) full control (FA) to\n+        // SYSTEM (SY), Administrators (BA), and the owner (OW).\n+        if (!ConvertStringSecurityDescriptorToSecurityDescriptorW(\n+            L\"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\",\n+            SDDL_REVISION_1,\n+            &secAttr.lpSecurityDescriptor,\n+            &sdSize\n+        )) {\n+            error = GetLastError();\n+        }\n+    }\n+    if (!error) {\n+        result = CreateDirectoryW(path->wide, pSecAttr);\n+        if (secAttr.lpSecurityDescriptor &&\n+            // uncommonly, LocalFree returns non-zero on error, but still uses\n+            // GetLastError() to see what the error code is\n+            LocalFree(secAttr.lpSecurityDescriptor)) {\n+            error = GetLastError();\n+        }\n+    }\n     Py_END_ALLOW_THREADS\n \n-    if (!result)\n+    if (error) {\n+        return PyErr_SetFromWindowsErr(error);\n+    }\n+    if (!result) {\n         return path_error(path);\n+    }\n #else\n     Py_BEGIN_ALLOW_THREADS\n #if HAVE_MKDIRAT"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b5ee0258bf5bb60a5a5a65c64717853e06b64808",
            "date": "2025-01-14T19:56:11Z",
            "author_login": "mpage"
          },
          {
            "sha": "1c13c56a34fc4c4d8969f0b6dc93d5208a50d61b",
            "date": "2025-01-14T19:43:42Z",
            "author_login": "nascheme"
          },
          {
            "sha": "d906bde250d59c396d8dab92285b832c66cdec27",
            "date": "2025-01-14T16:07:37Z",
            "author_login": "picnixz"
          },
          {
            "sha": "d786ac7f584f23c3206f4c86032bdabe83c17b51",
            "date": "2025-01-14T15:31:13Z",
            "author_login": "vstinner"
          },
          {
            "sha": "43ef9587ae869fd11711a3bb126e65afe9177342",
            "date": "2025-01-14T15:29:21Z",
            "author_login": "vstinner"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-276",
    "description": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-07T21:15:09.467",
    "last_modified": "2024-11-21T09:42:03.650",
    "fix_date": "2024-05-24T00:13:18Z"
  },
  "references": [
    {
      "url": "https://github.com/python/cpython/commit/35c799d79177b962ddace2fa068101465570a29a",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/5130731c9e779b97d00a24f54cdce73ce9975dfd",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/66f8bb76a15e64a1bb7688b177ed29e26230fdee",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/6d0850c4c8188035643586ab4d8ec2468abd699e",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/81939dad77001556c527485d31a2d0f4a759033e",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/8ed546679524140d8282175411fd141fe7df070d",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/91e3669e01245185569d09e9e6e11641282971ee",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/94591dca510c796c7d40e9b4167ea56f2fdf28ca",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/c8f868dc52f98011d0f9b459b6487920bfb0ac4d",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/eb29e2f5905da93333d1ce78bc98b151e763ff46",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/issues/118486",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/PRGS5OR3N3PNPT4BMV2VAGN5GMUI5636/",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240705-0005/",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/35c799d79177b962ddace2fa068101465570a29a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/5130731c9e779b97d00a24f54cdce73ce9975dfd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/66f8bb76a15e64a1bb7688b177ed29e26230fdee",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/6d0850c4c8188035643586ab4d8ec2468abd699e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/81939dad77001556c527485d31a2d0f4a759033e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/8ed546679524140d8282175411fd141fe7df070d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/91e3669e01245185569d09e9e6e11641282971ee",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/94591dca510c796c7d40e9b4167ea56f2fdf28ca",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/c8f868dc52f98011d0f9b459b6487920bfb0ac4d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/eb29e2f5905da93333d1ce78bc98b151e763ff46",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/issues/118486",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/PRGS5OR3N3PNPT4BMV2VAGN5GMUI5636/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240705-0005/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:20.875527",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cpython",
    "owner": "python",
    "created_at": "2017-02-10T19:23:51Z",
    "updated_at": "2025-01-14T11:40:35Z",
    "pushed_at": "2025-01-14T11:26:26Z",
    "size": 657526,
    "stars": 64721,
    "forks": 30871,
    "open_issues": 8974,
    "watchers": 64721,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.9",
      "3.10",
      "3.11",
      "3.12",
      "3.13",
      "main"
    ],
    "languages": {
      "Python": 35947988,
      "C": 20215174,
      "C++": 463381,
      "M4": 257753,
      "HTML": 206335,
      "Batchfile": 78178,
      "Shell": 71664,
      "Roff": 45666,
      "Makefile": 36295,
      "Objective-C": 33051,
      "Common Lisp": 24579,
      "PLSQL": 22886,
      "PowerShell": 20323,
      "Rich Text Format": 6905,
      "JavaScript": 4245,
      "Kotlin": 3800,
      "Assembly": 2552,
      "DTrace": 2196,
      "CSS": 1325,
      "XSLT": 1174,
      "CMake": 327,
      "VBScript": 70
    },
    "commit_activity": {
      "total_commits_last_year": 5718,
      "avg_commits_per_week": 109.96153846153847,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:09:03.245623"
  }
}