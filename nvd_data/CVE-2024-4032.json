{
  "cve_id": "CVE-2024-4032",
  "github_data": {
    "repository": "python/cpython",
    "fix_commit": "22adf29da8d99933ffed8647d3e0726edd16f7f8",
    "related_commits": [
      "22adf29da8d99933ffed8647d3e0726edd16f7f8",
      "40d75c2b7f5c67e254d0a025e0f2e2c7ada7f69f",
      "895f7e2ac23eff4743143beef0f0c5ac71ea27d3",
      "ba431579efdcbaed7a96f2ac4ea0775879a332fb",
      "c62c9e518b784fe44432a3f4fc265fb95b651906",
      "f86b17ac511e68192ba71f27e752321a3252cee3",
      "22adf29da8d99933ffed8647d3e0726edd16f7f8",
      "40d75c2b7f5c67e254d0a025e0f2e2c7ada7f69f",
      "895f7e2ac23eff4743143beef0f0c5ac71ea27d3",
      "ba431579efdcbaed7a96f2ac4ea0775879a332fb",
      "c62c9e518b784fe44432a3f4fc265fb95b651906",
      "f86b17ac511e68192ba71f27e752321a3252cee3"
    ],
    "patch_url": "https://github.com/python/cpython/commit/22adf29da8d99933ffed8647d3e0726edd16f7f8.patch",
    "fix_commit_details": {
      "sha": "22adf29da8d99933ffed8647d3e0726edd16f7f8",
      "commit_date": "2024-05-07T09:57:58Z",
      "author": {
        "login": "encukou",
        "type": "User",
        "stats": {
          "total_commits": 244,
          "average_weekly_commits": 0.135706340378198,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 131
        }
      },
      "commit_message": {
        "title": "[3.9] gh-113171: gh-65056: Fix \"private\" (non-global) IP address ranges (GH-113179) (GH-113186) (GH-118177) (GH-118472)",
        "length": 1113,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 216,
        "additions": 195,
        "deletions": 21
      },
      "files": [
        {
          "filename": "Doc/library/ipaddress.rst",
          "status": "modified",
          "additions": 39,
          "deletions": 4,
          "patch": "@@ -188,18 +188,53 @@ write code that handles both IP versions correctly.  Address objects are\n \n    .. attribute:: is_private\n \n-      ``True`` if the address is allocated for private networks.  See\n+      ``True`` if the address is defined as not globally reachable by\n       iana-ipv4-special-registry_ (for IPv4) or iana-ipv6-special-registry_\n-      (for IPv6).\n+      (for IPv6) with the following exceptions:\n+\n+      * ``is_private`` is ``False`` for the shared address space (``100.64.0.0/10``)\n+      * For IPv4-mapped IPv6-addresses the ``is_private`` value is determined by the\n+        semantics of the underlying IPv4 addresses and the following condition holds\n+        (see :attr:`IPv6Address.ipv4_mapped`)::\n+\n+            address.is_private == address.ipv4_mapped.is_private\n+\n+      ``is_private`` has value opposite to :attr:`is_global`, except for the shared address space\n+      (``100.64.0.0/10`` range) where they are both ``False``.\n+\n+      .. versionchanged:: 3.9.20\n+\n+         Fixed some false positives and false negatives.\n+\n+         * ``192.0.0.0/24`` is considered private with the exception of ``192.0.0.9/32`` and\n+           ``192.0.0.10/32`` (previously: only the ``192.0.0.0/29`` sub-range was considered private).\n+         * ``64:ff9b:1::/48`` is considered private.\n+         * ``2002::/16`` is considered private.\n+         * There are exceptions within ``2001::/23`` (otherwise considered private): ``2001:1::1/128``,\n+           ``2001:1::2/128``, ``2001:3::/32``, ``2001:4:112::/48``, ``2001:20::/28``, ``2001:30::/28``.\n+           The exceptions are not considered private.\n \n    .. attribute:: is_global\n \n-      ``True`` if the address is allocated for public networks.  See\n+      ``True`` if the address is defined as globally reachable by\n       iana-ipv4-special-registry_ (for IPv4) or iana-ipv6-special-registry_\n-      (for IPv6).\n+      (for IPv6) with the following exception:\n+\n+      For IPv4-mapped IPv6-addresses the ``is_private`` value is determined by the\n+      semantics of the underlying IPv4 addresses and the following condition holds\n+      (see :attr:`IPv6Address.ipv4_mapped`)::\n+\n+         address.is_global == address.ipv4_mapped.is_global\n+\n+      ``is_global`` has value opposite to :attr:`is_private`, except for the shared address space\n+      (``100.64.0.0/10`` range) where they are both ``False``.\n \n       .. versionadded:: 3.4\n \n+      .. versionchanged:: 3.9.20\n+\n+         Fixed some false positives and false negatives, see :attr:`is_private` for details.\n+\n    .. attribute:: is_unspecified\n \n       ``True`` if the address is unspecified.  See :RFC:`5735` (for IPv4)"
        },
        {
          "filename": "Doc/tools/susp-ignored.csv",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -169,6 +169,14 @@ library/ipaddress,,:db00,2001:db00::0/24\n library/ipaddress,,::,2001:db00::0/24\n library/ipaddress,,:db00,2001:db00::0/ffff:ff00::\n library/ipaddress,,::,2001:db00::0/ffff:ff00::\n+library/ipaddress,,:ff9b,64:ff9b:1::/48\n+library/ipaddress,,::,64:ff9b:1::/48\n+library/ipaddress,,::,2001::\n+library/ipaddress,,::,2001:1::\n+library/ipaddress,,::,2001:3::\n+library/ipaddress,,::,2001:4:112::\n+library/ipaddress,,::,2001:20::\n+library/ipaddress,,::,2001:30::\n library/itertools,,:step,elements from seq[start:stop:step]\n library/itertools,,:stop,elements from seq[start:stop:step]\n library/itertools,,::,kernel = tuple(kernel)[::-1]"
        },
        {
          "filename": "Doc/whatsnew/3.9.rst",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -1616,3 +1616,12 @@ tarfile\n   :exc:`DeprecationWarning`.\n   In Python 3.14, the default will switch to ``'data'``.\n   (Contributed by Petr Viktorin in :pep:`706`.)\n+\n+Notable changes in 3.9.20\n+=========================\n+\n+ipaddress\n+---------\n+\n+* Fixed ``is_global`` and ``is_private`` behavior in ``IPv4Address``,\n+  ``IPv6Address``, ``IPv4Network`` and ``IPv6Network``."
        },
        {
          "filename": "Lib/ipaddress.py",
          "status": "modified",
          "additions": 78,
          "deletions": 17,
          "patch": "@@ -1322,18 +1322,41 @@ def is_reserved(self):\n     @property\n     @functools.lru_cache()\n     def is_private(self):\n-        \"\"\"Test if this address is allocated for private networks.\n+        \"\"\"``True`` if the address is defined as not globally reachable by\n+        iana-ipv4-special-registry_ (for IPv4) or iana-ipv6-special-registry_\n+        (for IPv6) with the following exceptions:\n \n-        Returns:\n-            A boolean, True if the address is reserved per\n-            iana-ipv4-special-registry.\n+        * ``is_private`` is ``False`` for ``100.64.0.0/10``\n+        * For IPv4-mapped IPv6-addresses the ``is_private`` value is determined by the\n+            semantics of the underlying IPv4 addresses and the following condition holds\n+            (see :attr:`IPv6Address.ipv4_mapped`)::\n+\n+                address.is_private == address.ipv4_mapped.is_private\n \n+        ``is_private`` has value opposite to :attr:`is_global`, except for the ``100.64.0.0/10``\n+        IPv4 range where they are both ``False``.\n         \"\"\"\n-        return any(self in net for net in self._constants._private_networks)\n+        return (\n+            any(self in net for net in self._constants._private_networks)\n+            and all(self not in net for net in self._constants._private_networks_exceptions)\n+        )\n \n     @property\n     @functools.lru_cache()\n     def is_global(self):\n+        \"\"\"``True`` if the address is defined as globally reachable by\n+        iana-ipv4-special-registry_ (for IPv4) or iana-ipv6-special-registry_\n+        (for IPv6) with the following exception:\n+\n+        For IPv4-mapped IPv6-addresses the ``is_private`` value is determined by the\n+        semantics of the underlying IPv4 addresses and the following condition holds\n+        (see :attr:`IPv6Address.ipv4_mapped`)::\n+\n+            address.is_global == address.ipv4_mapped.is_global\n+\n+        ``is_global`` has value opposite to :attr:`is_private`, except for the ``100.64.0.0/10``\n+        IPv4 range where they are both ``False``.\n+        \"\"\"\n         return self not in self._constants._public_network and not self.is_private\n \n     @property\n@@ -1537,13 +1560,15 @@ class _IPv4Constants:\n \n     _public_network = IPv4Network('100.64.0.0/10')\n \n+    # Not globally reachable address blocks listed on\n+    # https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\n     _private_networks = [\n         IPv4Network('0.0.0.0/8'),\n         IPv4Network('10.0.0.0/8'),\n         IPv4Network('127.0.0.0/8'),\n         IPv4Network('169.254.0.0/16'),\n         IPv4Network('172.16.0.0/12'),\n-        IPv4Network('192.0.0.0/29'),\n+        IPv4Network('192.0.0.0/24'),\n         IPv4Network('192.0.0.170/31'),\n         IPv4Network('192.0.2.0/24'),\n         IPv4Network('192.168.0.0/16'),\n@@ -1554,6 +1579,11 @@ class _IPv4Constants:\n         IPv4Network('255.255.255.255/32'),\n         ]\n \n+    _private_networks_exceptions = [\n+        IPv4Network('192.0.0.9/32'),\n+        IPv4Network('192.0.0.10/32'),\n+    ]\n+\n     _reserved_network = IPv4Network('240.0.0.0/4')\n \n     _unspecified_address = IPv4Address('0.0.0.0')\n@@ -1995,23 +2025,42 @@ def is_site_local(self):\n     @property\n     @functools.lru_cache()\n     def is_private(self):\n-        \"\"\"Test if this address is allocated for private networks.\n+        \"\"\"``True`` if the address is defined as not globally reachable by\n+        iana-ipv4-special-registry_ (for IPv4) or iana-ipv6-special-registry_\n+        (for IPv6) with the following exceptions:\n \n-        Returns:\n-            A boolean, True if the address is reserved per\n-            iana-ipv6-special-registry.\n+        * ``is_private`` is ``False`` for ``100.64.0.0/10``\n+        * For IPv4-mapped IPv6-addresses the ``is_private`` value is determined by the\n+            semantics of the underlying IPv4 addresses and the following condition holds\n+            (see :attr:`IPv6Address.ipv4_mapped`)::\n+\n+                address.is_private == address.ipv4_mapped.is_private\n \n+        ``is_private`` has value opposite to :attr:`is_global`, except for the ``100.64.0.0/10``\n+        IPv4 range where they are both ``False``.\n         \"\"\"\n-        return any(self in net for net in self._constants._private_networks)\n+        ipv4_mapped = self.ipv4_mapped\n+        if ipv4_mapped is not None:\n+            return ipv4_mapped.is_private\n+        return (\n+            any(self in net for net in self._constants._private_networks)\n+            and all(self not in net for net in self._constants._private_networks_exceptions)\n+        )\n \n     @property\n     def is_global(self):\n-        \"\"\"Test if this address is allocated for public networks.\n+        \"\"\"``True`` if the address is defined as globally reachable by\n+        iana-ipv4-special-registry_ (for IPv4) or iana-ipv6-special-registry_\n+        (for IPv6) with the following exception:\n \n-        Returns:\n-            A boolean, true if the address is not reserved per\n-            iana-ipv6-special-registry.\n+        For IPv4-mapped IPv6-addresses the ``is_private`` value is determined by the\n+        semantics of the underlying IPv4 addresses and the following condition holds\n+        (see :attr:`IPv6Address.ipv4_mapped`)::\n+\n+            address.is_global == address.ipv4_mapped.is_global\n \n+        ``is_global`` has value opposite to :attr:`is_private`, except for the ``100.64.0.0/10``\n+        IPv4 range where they are both ``False``.\n         \"\"\"\n         return not self.is_private\n \n@@ -2252,19 +2301,31 @@ class _IPv6Constants:\n \n     _multicast_network = IPv6Network('ff00::/8')\n \n+    # Not globally reachable address blocks listed on\n+    # https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml\n     _private_networks = [\n         IPv6Network('::1/128'),\n         IPv6Network('::/128'),\n         IPv6Network('::ffff:0:0/96'),\n+        IPv6Network('64:ff9b:1::/48'),\n         IPv6Network('100::/64'),\n         IPv6Network('2001::/23'),\n-        IPv6Network('2001:2::/48'),\n         IPv6Network('2001:db8::/32'),\n-        IPv6Network('2001:10::/28'),\n+        # IANA says N/A, let's consider it not globally reachable to be safe\n+        IPv6Network('2002::/16'),\n         IPv6Network('fc00::/7'),\n         IPv6Network('fe80::/10'),\n         ]\n \n+    _private_networks_exceptions = [\n+        IPv6Network('2001:1::1/128'),\n+        IPv6Network('2001:1::2/128'),\n+        IPv6Network('2001:3::/32'),\n+        IPv6Network('2001:4:112::/48'),\n+        IPv6Network('2001:20::/28'),\n+        IPv6Network('2001:30::/28'),\n+    ]\n+\n     _reserved_networks = [\n         IPv6Network('::/8'), IPv6Network('100::/8'),\n         IPv6Network('200::/7'), IPv6Network('400::/6'),"
        },
        {
          "filename": "Lib/test/test_ipaddress.py",
          "status": "modified",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -2263,6 +2263,10 @@ def testReservedIpv4(self):\n         self.assertEqual(True, ipaddress.ip_address(\n                 '172.31.255.255').is_private)\n         self.assertEqual(False, ipaddress.ip_address('172.32.0.0').is_private)\n+        self.assertFalse(ipaddress.ip_address('192.0.0.0').is_global)\n+        self.assertTrue(ipaddress.ip_address('192.0.0.9').is_global)\n+        self.assertTrue(ipaddress.ip_address('192.0.0.10').is_global)\n+        self.assertFalse(ipaddress.ip_address('192.0.0.255').is_global)\n \n         self.assertEqual(True,\n                          ipaddress.ip_address('169.254.100.200').is_link_local)\n@@ -2278,6 +2282,40 @@ def testReservedIpv4(self):\n         self.assertEqual(False, ipaddress.ip_address('128.0.0.0').is_loopback)\n         self.assertEqual(True, ipaddress.ip_network('0.0.0.0').is_unspecified)\n \n+    def testPrivateNetworks(self):\n+        self.assertEqual(True, ipaddress.ip_network(\"0.0.0.0/0\").is_private)\n+        self.assertEqual(False, ipaddress.ip_network(\"1.0.0.0/8\").is_private)\n+\n+        self.assertEqual(True, ipaddress.ip_network(\"0.0.0.0/8\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"10.0.0.0/8\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"127.0.0.0/8\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"169.254.0.0/16\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"172.16.0.0/12\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"192.0.0.0/29\").is_private)\n+        self.assertEqual(False, ipaddress.ip_network(\"192.0.0.9/32\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"192.0.0.170/31\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"192.0.2.0/24\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"192.168.0.0/16\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"198.18.0.0/15\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"198.51.100.0/24\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"203.0.113.0/24\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"240.0.0.0/4\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"255.255.255.255/32\").is_private)\n+\n+        self.assertEqual(False, ipaddress.ip_network(\"::/0\").is_private)\n+        self.assertEqual(False, ipaddress.ip_network(\"::ff/128\").is_private)\n+\n+        self.assertEqual(True, ipaddress.ip_network(\"::1/128\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"::/128\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"::ffff:0:0/96\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"100::/64\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"2001:2::/48\").is_private)\n+        self.assertEqual(False, ipaddress.ip_network(\"2001:3::/48\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"2001:db8::/32\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"2001:10::/28\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"fc00::/7\").is_private)\n+        self.assertEqual(True, ipaddress.ip_network(\"fe80::/10\").is_private)\n+\n     def testReservedIpv6(self):\n \n         self.assertEqual(True, ipaddress.ip_network('ffff::').is_multicast)\n@@ -2351,6 +2389,20 @@ def testReservedIpv6(self):\n         self.assertEqual(True, ipaddress.ip_address('0::0').is_unspecified)\n         self.assertEqual(False, ipaddress.ip_address('::1').is_unspecified)\n \n+        self.assertFalse(ipaddress.ip_address('64:ff9b:1::').is_global)\n+        self.assertFalse(ipaddress.ip_address('2001::').is_global)\n+        self.assertTrue(ipaddress.ip_address('2001:1::1').is_global)\n+        self.assertTrue(ipaddress.ip_address('2001:1::2').is_global)\n+        self.assertFalse(ipaddress.ip_address('2001:2::').is_global)\n+        self.assertTrue(ipaddress.ip_address('2001:3::').is_global)\n+        self.assertFalse(ipaddress.ip_address('2001:4::').is_global)\n+        self.assertTrue(ipaddress.ip_address('2001:4:112::').is_global)\n+        self.assertFalse(ipaddress.ip_address('2001:10::').is_global)\n+        self.assertTrue(ipaddress.ip_address('2001:20::').is_global)\n+        self.assertTrue(ipaddress.ip_address('2001:30::').is_global)\n+        self.assertFalse(ipaddress.ip_address('2001:40::').is_global)\n+        self.assertFalse(ipaddress.ip_address('2002::').is_global)\n+\n         # some generic IETF reserved addresses\n         self.assertEqual(True, ipaddress.ip_address('100::').is_reserved)\n         self.assertEqual(True, ipaddress.ip_network('4000::1/128').is_reserved)"
        },
        {
          "filename": "Misc/NEWS.d/next/Library/2024-03-14-01-38-44.gh-issue-113171.VFnObz.rst",
          "status": "added",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -0,0 +1,9 @@\n+Fixed various false positives and false negatives in\n+\n+* :attr:`ipaddress.IPv4Address.is_private` (see these docs for details)\n+* :attr:`ipaddress.IPv4Address.is_global`\n+* :attr:`ipaddress.IPv6Address.is_private`\n+* :attr:`ipaddress.IPv6Address.is_global`\n+\n+Also in the corresponding :class:`ipaddress.IPv4Network` and :class:`ipaddress.IPv6Network`\n+attributes."
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bbd3300ae82a71da483dbb0c345175ba090263c4",
            "date": "2025-01-14T13:25:33Z",
            "author_login": "picnixz"
          },
          {
            "sha": "859db49029b1021e24b5c99d4a9a0f57327d1b57",
            "date": "2025-01-14T13:19:32Z",
            "author_login": "serhiy-storchaka"
          },
          {
            "sha": "75bd42c73718ca54ed70d5bf90cbc76c2c1d5ddc",
            "date": "2025-01-14T13:18:25Z",
            "author_login": "serhiy-storchaka"
          },
          {
            "sha": "ff3e145b2770ffe86c905b1092747ce3d8381319",
            "date": "2025-01-14T11:26:26Z",
            "author_login": "picnixz"
          },
          {
            "sha": "1153e66e20124b8f3484bcaddbc0e252d31161a6",
            "date": "2025-01-14T10:18:52Z",
            "author_login": "vstinner"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-697",
    "description": "The \u201cipaddress\u201d module contained incorrect information about whether certain IPv4 and IPv6 addresses were designated as \u201cglobally reachable\u201d or \u201cprivate\u201d. This affected the is_private and is_global properties of the ipaddress.IPv4Address, ipaddress.IPv4Network, ipaddress.IPv6Address, and ipaddress.IPv6Network classes, where values wouldn\u2019t be returned in accordance with the latest information from the IANA Special-Purpose Address Registries.\n\nCPython 3.12.4 and 3.13.0a6 contain updated information from these registries and thus have the intended behavior.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-17T15:15:52.517",
    "last_modified": "2024-11-21T09:42:03.990",
    "fix_date": "2024-05-07T09:57:58Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/06/17/3",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/22adf29da8d99933ffed8647d3e0726edd16f7f8",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/40d75c2b7f5c67e254d0a025e0f2e2c7ada7f69f",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/895f7e2ac23eff4743143beef0f0c5ac71ea27d3",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/ba431579efdcbaed7a96f2ac4ea0775879a332fb",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/c62c9e518b784fe44432a3f4fc265fb95b651906",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/f86b17ac511e68192ba71f27e752321a3252cee3",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/issues/113171",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/pull/113179",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/NRUHDUS2IV2USIZM2CVMSFL6SCKU3RZA/",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240726-0004/",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/06/17/3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/22adf29da8d99933ffed8647d3e0726edd16f7f8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/40d75c2b7f5c67e254d0a025e0f2e2c7ada7f69f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/895f7e2ac23eff4743143beef0f0c5ac71ea27d3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/ba431579efdcbaed7a96f2ac4ea0775879a332fb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/c62c9e518b784fe44432a3f4fc265fb95b651906",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/f86b17ac511e68192ba71f27e752321a3252cee3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/issues/113171",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/pull/113179",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/NRUHDUS2IV2USIZM2CVMSFL6SCKU3RZA/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240726-0004/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.834017",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cpython",
    "owner": "python",
    "created_at": "2017-02-10T19:23:51Z",
    "updated_at": "2025-01-14T11:40:35Z",
    "pushed_at": "2025-01-14T11:26:26Z",
    "size": 657526,
    "stars": 64721,
    "forks": 30871,
    "open_issues": 8974,
    "watchers": 64721,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.9",
      "3.10",
      "3.11",
      "3.12",
      "3.13",
      "main"
    ],
    "languages": {
      "Python": 35947988,
      "C": 20215174,
      "C++": 463381,
      "M4": 257753,
      "HTML": 206335,
      "Batchfile": 78178,
      "Shell": 71664,
      "Roff": 45666,
      "Makefile": 36295,
      "Objective-C": 33051,
      "Common Lisp": 24579,
      "PLSQL": 22886,
      "PowerShell": 20323,
      "Rich Text Format": 6905,
      "JavaScript": 4245,
      "Kotlin": 3800,
      "Assembly": 2552,
      "DTrace": 2196,
      "CSS": 1325,
      "XSLT": 1174,
      "CMake": 327,
      "VBScript": 70
    },
    "commit_activity": {
      "total_commits_last_year": 5718,
      "avg_commits_per_week": 109.96153846153847,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:09:03.245623"
  }
}