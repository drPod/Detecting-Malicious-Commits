{
  "cve_id": "CVE-2024-40627",
  "github_data": {
    "repository": "busykoala/fastapi-opa",
    "fix_commit": "9588109ff651f7ffc92687129c4956126443fb8c",
    "related_commits": [
      "9588109ff651f7ffc92687129c4956126443fb8c",
      "9588109ff651f7ffc92687129c4956126443fb8c"
    ],
    "patch_url": "https://github.com/busykoala/fastapi-opa/commit/9588109ff651f7ffc92687129c4956126443fb8c.patch",
    "fix_commit_details": {
      "sha": "9588109ff651f7ffc92687129c4956126443fb8c",
      "commit_date": "2024-07-15T09:44:41Z",
      "author": {
        "login": "busykoala",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #73 from busykoala/options_auth",
        "length": 110,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 1377,
        "additions": 1031,
        "deletions": 346
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -1,5 +1,13 @@\n # Change Log\n \n+## [2.0.1] - 2024-07-15\n+- Security Improvement: Added authentication and authorization checks for HTTP\n+  OPTIONS requests in OpaMiddleware. This ensures that OPTIONS requests are\n+  subjected to the same security policies as other HTTP methods, preventing\n+  potential information leaks.\n+  [See advisory for more details](https://github.com/advisories/GHSA-5f5c-8rvc-j8wf)\n+- Update dependencies due to multiple vulnerabilities.\n+\n ## [2.0.0] - 2024-02-07\n - Drop Python 3.7 support due to FastAPI update\n - Update dependencies due to vulnerabilities:"
        },
        {
          "filename": "fastapi_opa/opa/opa_middleware.py",
          "status": "modified",
          "additions": 2,
          "deletions": 9,
          "patch": "@@ -18,12 +18,7 @@\n from fastapi_opa.auth.exceptions import AuthenticationException\n from fastapi_opa.opa.opa_config import OPAConfig\n \n-try:\n-    Pattern = re.Pattern\n-except AttributeError:\n-    # Python3.6 does not contain re.Pattern\n-    Pattern = None\n-\n+Pattern = re.Pattern\n logger = logging.getLogger(__name__)\n \n \n@@ -76,15 +71,13 @@ async def __call__(\n         own_receive = OwnReceive(receive)\n         request = Request(scope, own_receive, send)\n \n-        if request.method == \"OPTIONS\":\n-            return await self.app(scope, receive, send)\n-\n         # allow openapi endpoints without authentication\n         if should_skip_endpoint(request.url.path, self.skip_endpoints):\n             return await self.app(scope, receive, send)\n \n         # authenticate user or get redirect to identity provider\n         successful = False\n+        user_info_or_auth_redirect = None\n         for auth in self.config.authentication:\n             try:\n                 user_info_or_auth_redirect = auth.authenticate("
        },
        {
          "filename": "poetry.lock",
          "status": "modified",
          "additions": 931,
          "deletions": 336,
          "patch": null
        },
        {
          "filename": "pyproject.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n [tool.poetry]\n name = \"fastapi-opa\"\n-version = \"2.0.0\"\n+version = \"2.0.1\"\n description = \"Fastapi OPA middleware incl. auth flow.\"\n authors = [\"Matthias Osswald <info@busykoala.io>\"]\n license = \"GPL-3.0-or-later\""
        },
        {
          "filename": "tests/conftest.py",
          "status": "modified",
          "additions": 38,
          "deletions": 0,
          "patch": "@@ -3,6 +3,8 @@\n import nest_asyncio\n import pytest\n from fastapi import FastAPI\n+from fastapi import HTTPException\n+from fastapi import Response\n from fastapi.testclient import TestClient\n \n from fastapi_opa import OPAConfig\n@@ -15,6 +17,12 @@\n \n nest_asyncio.apply()\n \n+# Sample data for the test\n+WRITABLE_ITEMS = {\n+    1: True,\n+    2: False,\n+}\n+\n \n @pytest.fixture\n def client():\n@@ -29,6 +37,21 @@ def client():\n     async def root() -> Dict:\n         return {\"msg\": \"success\"}\n \n+    @app.get(\"/items/{item_id}\")\n+    async def read_item(item_id: int):\n+        if item_id not in WRITABLE_ITEMS:\n+            raise HTTPException(status_code=404)\n+        return {\"item_id\": item_id}\n+\n+    @app.options(\"/items/{item_id}\")\n+    async def read_item_options(response: Response, item_id: int) -> Dict:\n+        if item_id not in WRITABLE_ITEMS:\n+            raise HTTPException(status_code=404)\n+        response.headers[\"Allow\"] = \"OPTIONS, GET\" + (\n+            \", POST\" if WRITABLE_ITEMS[item_id] else \"\"\n+        )\n+        return {}\n+\n     yield TestClient(app)\n \n \n@@ -76,6 +99,21 @@ def client_multiple_authentications(api_key_auth):\n     async def root() -> Dict:\n         return {\"msg\": \"success\"}\n \n+    @app.get(\"/items/{item_id}\")\n+    async def read_item(item_id: int):\n+        if item_id not in WRITABLE_ITEMS:\n+            raise HTTPException(status_code=404)\n+        return {\"item_id\": item_id}\n+\n+    @app.options(\"/items/{item_id}\")\n+    async def read_item_options(response: Response, item_id: int) -> Dict:\n+        if item_id not in WRITABLE_ITEMS:\n+            raise HTTPException(status_code=404)\n+        response.headers[\"Allow\"] = \"OPTIONS, GET\" + (\n+            \", POST\" if WRITABLE_ITEMS[item_id] else \"\"\n+        )\n+        return {}\n+\n     yield TestClient(app)\n \n "
        },
        {
          "filename": "tests/test_option_requests.py",
          "status": "added",
          "additions": 51,
          "deletions": 0,
          "patch": "@@ -0,0 +1,51 @@\n+from unittest.mock import patch\n+\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+\n+@pytest.fixture\n+def mock_opa_response():\n+    with patch(\"fastapi_opa.opa.opa_middleware.requests.post\") as mock_post:\n+        mock_post.return_value.status_code = 200\n+        mock_post.return_value.json.return_value = {\"result\": {\"allow\": True}}\n+        yield mock_post\n+\n+\n+def test_options_request_with_auth(\n+    client_multiple_authentications, api_key_auth, mock_opa_response\n+):\n+    client: TestClient = client_multiple_authentications\n+\n+    # Test OPTIONS request for an existing item with authentication\n+    response = client.options(\n+        \"/items/1\",\n+        headers={api_key_auth[\"header_key\"]: api_key_auth[\"api_key\"]},\n+    )\n+    assert response.status_code == 200\n+    assert response.headers[\"Allow\"] == \"OPTIONS, GET, POST\"\n+    assert response.json() == {}\n+\n+    # Test OPTIONS request for a non-existing item with authentication\n+    response = client.options(\n+        \"/items/3\",\n+        headers={api_key_auth[\"header_key\"]: api_key_auth[\"api_key\"]},\n+    )\n+    assert response.status_code == 404\n+    assert response.json() == {\"detail\": \"Not Found\"}\n+\n+\n+def test_options_request_without_auth(\n+    client_multiple_authentications, mock_opa_response\n+):\n+    client: TestClient = client_multiple_authentications\n+\n+    # Test OPTIONS request for an existing item without authentication\n+    response = client.options(\"/items/1\")\n+    assert response.status_code == 401\n+    assert response.json() == {\"message\": \"Unauthorized\"}\n+\n+    # Test OPTIONS request for a non-existing item without authentication\n+    response = client.options(\"/items/3\")\n+    assert response.status_code == 401\n+    assert response.json() == {\"message\": \"Unauthorized\"}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f7d5ccd6b35c5892966277b643232ca880cbb80d",
            "date": "2025-01-01T20:27:16Z",
            "author_login": "busykoala"
          },
          {
            "sha": "bba4b64b1496e4edcbba51a3294d95786d0b17f4",
            "date": "2025-01-01T20:22:45Z",
            "author_login": "busykoala"
          },
          {
            "sha": "5531586c87e44ddb4492ab3236cea3aa10ba84e7",
            "date": "2025-01-01T20:16:28Z",
            "author_login": "busykoala"
          },
          {
            "sha": "47c3bb785168a0badfc8dad7108edcda62088780",
            "date": "2025-01-01T20:10:04Z",
            "author_login": "busykoala"
          },
          {
            "sha": "6f1853e05c25fccc6710383f601ebc2df921abc0",
            "date": "2024-10-18T13:21:31Z",
            "author_login": "busykoala"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-204",
    "description": "Fastapi OPA is an opensource fastapi middleware which includes auth flow. HTTP `OPTIONS` requests are always allowed by `OpaMiddleware`, even when they lack authentication, and are passed through directly to the application. `OpaMiddleware` allows all HTTP `OPTIONS` requests without evaluating it against any policy. If an application provides different responses to HTTP `OPTIONS` requests based on an entity existing (such as to indicate whether an entity is writable on a system level), an unauthenticated attacker could discover which entities exist within an application. This issue has been addressed in release version 2.0.1. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-15T20:15:05.033",
    "last_modified": "2024-11-21T09:31:23.393",
    "fix_date": "2024-07-15T09:44:41Z"
  },
  "references": [
    {
      "url": "https://github.com/busykoala/fastapi-opa/blob/6dd6f8c87e908fe080784a74707f016f1422b58a/fastapi_opa/opa/opa_middleware.py#L79-L80",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/busykoala/fastapi-opa/commit/9588109ff651f7ffc92687129c4956126443fb8c",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/busykoala/fastapi-opa/security/advisories/GHSA-5f5c-8rvc-j8wf",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/busykoala/fastapi-opa/blob/6dd6f8c87e908fe080784a74707f016f1422b58a/fastapi_opa/opa/opa_middleware.py#L79-L80",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/busykoala/fastapi-opa/commit/9588109ff651f7ffc92687129c4956126443fb8c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/busykoala/fastapi-opa/security/advisories/GHSA-5f5c-8rvc-j8wf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.484915",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "fastapi-opa",
    "owner": "busykoala",
    "created_at": "2021-04-03T16:54:48Z",
    "updated_at": "2025-01-05T12:46:17Z",
    "pushed_at": "2025-01-01T20:27:18Z",
    "size": 597,
    "stars": 57,
    "forks": 13,
    "open_issues": 0,
    "watchers": 57,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 68359,
      "Nix": 403
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T19:18:46.208325"
  }
}