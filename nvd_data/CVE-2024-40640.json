{
  "cve_id": "CVE-2024-40640",
  "github_data": {
    "repository": "matrix-org/vodozemac",
    "fix_commit": "734b6c6948d4b2bdee3dd8b4efa591d93a61d272",
    "related_commits": [
      "734b6c6948d4b2bdee3dd8b4efa591d93a61d272",
      "734b6c6948d4b2bdee3dd8b4efa591d93a61d272"
    ],
    "patch_url": "https://github.com/matrix-org/vodozemac/commit/734b6c6948d4b2bdee3dd8b4efa591d93a61d272.patch",
    "fix_commit_details": {
      "sha": "734b6c6948d4b2bdee3dd8b4efa591d93a61d272",
      "commit_date": "2024-05-18T09:02:08Z",
      "author": {
        "login": "poljar",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: Use a constant-time Base64 encoder for secret key material",
        "length": 513,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 33,
        "additions": 21,
        "deletions": 12
      },
      "files": [
        {
          "filename": "Cargo.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -29,6 +29,7 @@ low-level-api = []\n aes = \"0.8.4\"\n arrayvec = { version = \"0.7.4\", features = [\"serde\"] }\n base64 = \"0.22.1\"\n+base64ct = { version = \"1.6.0\", features = [\"std\", \"alloc\"] }\n cbc = { version = \"0.1.2\", features = [\"std\"] }\n chacha20poly1305 = \"0.10.1\"\n curve25519-dalek = { version = \"4.1.2\", default-features = false, features = [\"zeroize\"] }"
        },
        {
          "filename": "src/megolm/session_keys.rs",
          "status": "modified",
          "additions": 7,
          "deletions": 9,
          "patch": "@@ -14,15 +14,13 @@\n \n use std::io::{Cursor, Read};\n \n+use base64ct::Encoding;\n use serde::{Deserialize, Serialize};\n use thiserror::Error;\n use zeroize::Zeroize;\n \n use super::ratchet::Ratchet;\n-use crate::{\n-    utilities::{base64_decode, base64_encode},\n-    Ed25519PublicKey, Ed25519Signature, SignatureError,\n-};\n+use crate::{Ed25519PublicKey, Ed25519Signature, SignatureError};\n \n /// Error type describing failure modes for the `SessionKey` and\n /// `ExportedSessionKey` decoding.\n@@ -36,7 +34,7 @@ pub enum SessionKeyDecodeError {\n     Read(#[from] std::io::Error),\n     /// The encoded session key wasn't valid base64.\n     #[error(\"The session key wasn't valid base64: {0}\")]\n-    Base64(#[from] base64::DecodeError),\n+    Base64(#[from] base64ct::Error),\n     /// The signature on the session key was invalid.\n     #[error(\"The signature on the session key was invalid: {0}\")]\n     Signature(#[from] SignatureError),\n@@ -93,7 +91,7 @@ impl ExportedSessionKey {\n     pub fn to_base64(&self) -> String {\n         let mut bytes = self.to_bytes();\n \n-        let ret = base64_encode(&bytes);\n+        let ret = base64ct::Base64Unpadded::encode_string(&bytes);\n \n         bytes.zeroize();\n \n@@ -102,7 +100,7 @@ impl ExportedSessionKey {\n \n     /// Deserialize the `ExportedSessionKey` from base64 encoded string.\n     pub fn from_base64(key: &str) -> Result<Self, SessionKeyDecodeError> {\n-        let mut bytes = base64_decode(key)?;\n+        let mut bytes = base64ct::Base64Unpadded::decode_vec(key)?;\n         let ret = Self::from_bytes(&bytes);\n \n         bytes.zeroize();\n@@ -268,7 +266,7 @@ impl SessionKey {\n     /// to a string using unpadded base64 as the encoding.\n     pub fn to_base64(&self) -> String {\n         let mut bytes = self.to_bytes();\n-        let ret = base64_encode(&bytes);\n+        let ret = base64ct::Base64Unpadded::encode_string(&bytes);\n \n         bytes.zeroize();\n \n@@ -277,7 +275,7 @@ impl SessionKey {\n \n     /// Deserialize the `SessionKey` from base64 encoded string.\n     pub fn from_base64(key: &str) -> Result<Self, SessionKeyDecodeError> {\n-        let mut bytes = base64_decode(key)?;\n+        let mut bytes = base64ct::Base64Unpadded::decode_vec(key)?;\n         let ret = Self::from_bytes(&bytes);\n \n         bytes.zeroize();"
        },
        {
          "filename": "src/types/ed25519.rs",
          "status": "modified",
          "additions": 11,
          "deletions": 3,
          "patch": "@@ -15,6 +15,7 @@\n use std::fmt::Display;\n \n use base64::decoded_len_estimate;\n+use base64ct::Encoding;\n use curve25519_dalek::EdwardsPoint;\n #[cfg(not(fuzzing))]\n use ed25519_dalek::Verifier;\n@@ -226,7 +227,7 @@ impl Ed25519SecretKey {\n     /// otherwise an unintentional copy of the key might exist in memory.\n     pub fn to_base64(&self) -> String {\n         let mut bytes = self.to_bytes();\n-        let ret = base64_encode(bytes.as_ref());\n+        let ret = base64ct::Base64Unpadded::encode_string(bytes.as_ref());\n \n         bytes.zeroize();\n \n@@ -242,9 +243,16 @@ impl Ed25519SecretKey {\n                 length: decoded_len_estimate(input.len()),\n             })\n         } else {\n-            let mut bytes = base64_decode(input)?;\n-            let mut key_bytes = [0u8; 32];\n+            // Ed25519 secret keys can sometimes be encoded with padding, don't ask me why.\n+            // This means that if the unpadded decoding fails, we have to attempt the padded\n+            // one.\n+            let mut bytes = if let Ok(bytes) = base64ct::Base64Unpadded::decode_vec(input) {\n+                bytes\n+            } else {\n+                base64ct::Base64::decode_vec(input)?\n+            };\n \n+            let mut key_bytes = [0u8; 32];\n             key_bytes.copy_from_slice(&bytes);\n             let key = Self::from_slice(&key_bytes);\n "
        },
        {
          "filename": "src/types/mod.rs",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -46,6 +46,8 @@ impl KeyId {\n pub enum KeyError {\n     #[error(\"Failed decoding a public key from base64: {}\", .0)]\n     Base64Error(#[from] base64::DecodeError),\n+    #[error(\"Failed to decode a private key from base64: {}\", .0)]\n+    Base64PrivateKey(#[from] base64ct::Error),\n     #[error(\n         \"Failed decoding {key_type} key from base64: \\\n         Invalid number of bytes for {key_type}, expected {expected_length}, got {length}.\""
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b19bc5389ffa52e6981e5b5066d2af0b53c1392c",
            "date": "2025-01-09T12:16:15Z",
            "author_login": "poljar"
          },
          {
            "sha": "93efff0f5b84418bd66bf2f6d71d3c193407e1e6",
            "date": "2025-01-09T11:59:46Z",
            "author_login": "poljar"
          },
          {
            "sha": "95eafecd8a1c83cfddf1935ee2afeb8c864dac7a",
            "date": "2025-01-09T11:35:13Z",
            "author_login": "poljar"
          },
          {
            "sha": "44f1b6efd5457cc80c02a1701af457f1e676c450",
            "date": "2024-11-21T09:37:15Z",
            "author_login": "poljar"
          },
          {
            "sha": "5eb25a61b42f75c7f40f5ef99ef7b25fed4a5a78",
            "date": "2024-11-18T11:04:11Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.9,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-208",
    "description": "vodozemac is an open source implementation of Olm and Megolm in pure Rust.  Versions before 0.7.0 of vodozemac use a non-constant time base64 implementation for importing key material for Megolm group sessions and `PkDecryption` Ed25519 secret keys. This flaw might allow an attacker to infer some information about the secret key material through a side-channel attack. The use of a non-constant time base64 implementation might allow an attacker to observe timing variations in the encoding and decoding operations of the secret key material. This could potentially provide insights into the underlying secret key material. The impact of this vulnerability is considered low because exploiting the attacker is required to have access to high precision timing measurements, as well as repeated access to the base64 encoding or decoding processes.  Additionally, the estimated leakage amount is bounded and low according to the referenced paper. This has been patched in commit 734b6c6948d4b2bdee3dd8b4efa591d93a61d272 which has been included in release version 0.7.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-07-17T18:15:04.787",
    "last_modified": "2024-11-21T09:31:24.770",
    "fix_date": "2024-05-18T09:02:08Z"
  },
  "references": [
    {
      "url": "https://arxiv.org/abs/2108.04600",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/vodozemac/commit/734b6c6948d4b2bdee3dd8b4efa591d93a61d272",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/vodozemac/security/advisories/GHSA-j8cm-g7r6-hfpq",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://arxiv.org/abs/2108.04600",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/vodozemac/commit/734b6c6948d4b2bdee3dd8b4efa591d93a61d272",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/vodozemac/security/advisories/GHSA-j8cm-g7r6-hfpq",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.491344",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vodozemac",
    "owner": "matrix-org",
    "created_at": "2021-12-16T21:16:53Z",
    "updated_at": "2025-01-14T12:58:09Z",
    "pushed_at": "2025-01-14T12:58:27Z",
    "size": 6067,
    "stars": 192,
    "forks": 32,
    "open_issues": 7,
    "watchers": 192,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Rust": 400423,
      "Makefile": 178
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T22:28:48.290211"
  }
}