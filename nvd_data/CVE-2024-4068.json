{
  "cve_id": "CVE-2024-4068",
  "github_data": {
    "repository": "micromatch/braces",
    "fix_commit": "415d660c3002d1ab7e63dbf490c9851da80596ff",
    "related_commits": [
      "415d660c3002d1ab7e63dbf490c9851da80596ff",
      "415d660c3002d1ab7e63dbf490c9851da80596ff"
    ],
    "patch_url": "https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff.patch",
    "fix_commit_details": {
      "sha": "415d660c3002d1ab7e63dbf490c9851da80596ff",
      "commit_date": "2024-05-21T07:42:30Z",
      "author": {
        "login": "AaronMoat",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Snyk js braces 6838727 (#40)",
        "length": 300,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 103,
        "additions": 24,
        "deletions": 79
      },
      "files": [
        {
          "filename": ".verb.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -167,7 +167,7 @@ console.log(braces.expand('a{b}c'));\n \n **Type**: `Number`\n \n-**Default**: `65,536`\n+**Default**: `10,000`\n \n **Description**: Limit the length of the input string. Useful when the input string is generated or your application allows users to pass a string, et cetera.\n "
        },
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 13,
          "patch": "@@ -178,26 +178,14 @@ console.log(braces.expand('a{b}c'));\n \n **Type**: `Number`\n \n-**Default**: `65,536`\n+**Default**: `10,000`\n \n **Description**: Limit the length of the input string. Useful when the input string is generated or your application allows users to pass a string, et cetera.\n \n ```js\n console.log(braces('a/{b,c}/d', { maxLength: 3 })); //=> throws an error\n ```\n \n-### options.maxSymbols\n-\n-**Type**: `Number`\n-\n-**Default**: `1024`\n-\n-**Description**: Limit the count of unique symbols the input string.\n-\n-```js\n-console.log(braces('a/{b,c}/d', { maxSymbols: 2 })); //=> throws an error\n-```\n-\n ### options.expand\n \n **Type**: `Boolean`"
        },
        {
          "filename": "lib/constants.js",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -1,8 +1,7 @@\n 'use strict';\n \n module.exports = {\n-  MAX_LENGTH: 1024 * 64,\n-  MAX_SYMBOLS: 1024,\n+  MAX_LENGTH: 10000,\n \n   // Digits\n   CHAR_0: '0', /* 0 */"
        },
        {
          "filename": "lib/parse.js",
          "status": "modified",
          "additions": 21,
          "deletions": 41,
          "patch": "@@ -1,15 +1,13 @@\n 'use strict';\n \n const stringify = require('./stringify');\n-const {isCorrectBraces, validateInput} = require('./validate-input');\n \n /**\n  * Constants\n  */\n \n const {\n   MAX_LENGTH,\n-  MAX_SYMBOLS,\n   CHAR_BACKSLASH, /* \\ */\n   CHAR_BACKTICK, /* ` */\n   CHAR_COMMA, /* , */\n@@ -36,11 +34,6 @@ const parse = (input, options = {}) => {\n   }\n \n   let opts = options || {};\n-\n-  validateInput(input, {\n-    maxSymbols: opts.maxSymbols || MAX_SYMBOLS,\n-  });\n-\n   let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n   if (input.length > max) {\n     throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);\n@@ -311,43 +304,30 @@ const parse = (input, options = {}) => {\n     push({ type: 'text', value });\n   }\n \n-  flattenBlocks(stack)\n-  markImbalancedBraces(ast);\n-  push({ type: 'eos' });\n-\n-  return ast;\n-};\n-\n-module.exports = parse;\n-\n-function markImbalancedBraces({nodes}) {\n   // Mark imbalanced braces and brackets as invalid\n-  for (const node of nodes) {\n-    if (!node.nodes && !node.invalid) {\n-      if (node.type === 'open') node.isOpen = true;\n-      if (node.type === 'close') node.isClose = true;\n-      if (!node.nodes) node.type = 'text';\n-\n-      node.invalid = true;\n-    }\n-\n-    delete node.parent;\n-    delete node.prev;\n-  }\n-}\n-\n-function flattenBlocks(stack) {\n-  let block;\n   do {\n     block = stack.pop();\n \n-    if (block.type === 'root')\n-      continue;\n+    if (block.type !== 'root') {\n+      block.nodes.forEach(node => {\n+        if (!node.nodes) {\n+          if (node.type === 'open') node.isOpen = true;\n+          if (node.type === 'close') node.isClose = true;\n+          if (!node.nodes) node.type = 'text';\n+          node.invalid = true;\n+        }\n+      });\n \n-    // get the location of the block on parent.nodes (block's siblings)\n-    let parent = stack.at(-1);\n-    let index = parent.nodes.indexOf(block);\n-    // replace the (invalid) block with its nodes\n-    parent.nodes.splice(index, 1, ...block.nodes);\n+      // get the location of the block on parent.nodes (block's siblings)\n+      let parent = stack[stack.length - 1];\n+      let index = parent.nodes.indexOf(block);\n+      // replace the (invalid) block with it's nodes\n+      parent.nodes.splice(index, 1, ...block.nodes);\n+    }\n   } while (stack.length > 0);\n-}\n+\n+  push({ type: 'eos' });\n+  return ast;\n+};\n+\n+module.exports = parse;"
        },
        {
          "filename": "lib/validate-input.js",
          "status": "removed",
          "additions": 0,
          "deletions": 12,
          "patch": "@@ -1,12 +0,0 @@\n-module.exports.validateInput = (line, {maxSymbols}) => {\n-  const symbols = {};\n-\n-    for (const current of line) {\n-        symbols[current] = (symbols[current] || 0) + 1;\n-    }\n-\n-    for (const [value, count] of Object.entries(symbols)) {\n-      if (count > maxSymbols)\n-        throw SyntaxError(`To many symbols '${value}'. Maximum: ${maxSymbols} allowed. Received: ${count}`);\n-    }\n-};"
        },
        {
          "filename": "test/braces.parse.js",
          "status": "modified",
          "additions": 0,
          "deletions": 10,
          "patch": "@@ -10,16 +10,6 @@ describe('braces.parse()', () => {\n       let MAX_LENGTH = 1024 * 64;\n       assert.throws(() => parse('.'.repeat(MAX_LENGTH + 2)));\n     });\n-    it('should throw an error when symbols exceeds max symbols count default', () => {\n-      let SYMBOLS= 1024;\n-      assert.throws(() => parse('.'.repeat(MAX_SYMBOLS * 2)));\n-    });\n-    it('should throw an error when symbols exceeds max symbols count ', () => {\n-      let SYMBOLS= 2;\n-      assert.throws(() => parse('...', {\n-        maxSymbols: 2,\n-      }));\n-    });\n   });\n \n   describe('valid', () => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "142b15fb9c705dbff80d661086f4b2198a76d991",
            "date": "2025-01-07T20:14:07Z",
            "author_login": "mrmlnc"
          },
          {
            "sha": "977c75a38a1045ee95cf3e6b433cea613cbec4f2",
            "date": "2025-01-07T13:49:35Z",
            "author_login": "mrmlnc"
          },
          {
            "sha": "43eff29396c5600f76ab022650f7e0c9fe3580f2",
            "date": "2025-01-07T13:47:47Z",
            "author_login": "mrmlnc"
          },
          {
            "sha": "690ada6621662e54e1ba9ad0755b0bbd431f95b5",
            "date": "2025-01-07T13:47:39Z",
            "author_login": "mrmlnc"
          },
          {
            "sha": "f3556744a11634bff0f340e209b0184daf77235c",
            "date": "2025-01-07T13:45:10Z",
            "author_login": "mrmlnc"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-1050",
    "description": "The NPM package `braces`, versions prior to 3.0.3, fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-14T15:42:48.660",
    "last_modified": "2024-11-21T09:42:07.710",
    "fix_date": "2024-05-21T07:42:30Z"
  },
  "references": [
    {
      "url": "https://devhub.checkmarx.com/cve-details/CVE-2024-4068/",
      "source": "596c5446-0ce5-4ba2-aa66-48b3b757a647",
      "tags": []
    },
    {
      "url": "https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff",
      "source": "596c5446-0ce5-4ba2-aa66-48b3b757a647",
      "tags": []
    },
    {
      "url": "https://github.com/micromatch/braces/issues/35",
      "source": "596c5446-0ce5-4ba2-aa66-48b3b757a647",
      "tags": []
    },
    {
      "url": "https://github.com/micromatch/braces/pull/37",
      "source": "596c5446-0ce5-4ba2-aa66-48b3b757a647",
      "tags": []
    },
    {
      "url": "https://github.com/micromatch/braces/pull/40",
      "source": "596c5446-0ce5-4ba2-aa66-48b3b757a647",
      "tags": []
    },
    {
      "url": "https://devhub.checkmarx.com/cve-details/CVE-2024-4068/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/micromatch/braces/issues/35",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/micromatch/braces/pull/37",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/micromatch/braces/pull/40",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:20.899746",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "braces",
    "owner": "micromatch",
    "created_at": "2014-10-20T16:26:13Z",
    "updated_at": "2025-01-09T16:33:39Z",
    "pushed_at": "2025-01-07T20:14:07Z",
    "size": 425,
    "stars": 230,
    "forks": 67,
    "open_issues": 6,
    "watchers": 230,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 122943
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T22:39:14.766932"
  }
}