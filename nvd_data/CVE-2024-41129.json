{
  "cve_id": "CVE-2024-41129",
  "github_data": {
    "repository": "canonical/operator",
    "fix_commit": "fea6d2072435a62170d4c01272572f1a7e916e61",
    "related_commits": [
      "fea6d2072435a62170d4c01272572f1a7e916e61",
      "fea6d2072435a62170d4c01272572f1a7e916e61"
    ],
    "patch_url": "https://github.com/canonical/operator/commit/fea6d2072435a62170d4c01272572f1a7e916e61.patch",
    "fix_commit_details": {
      "sha": "fea6d2072435a62170d4c01272572f1a7e916e61",
      "commit_date": "2024-07-22T00:45:52Z",
      "author": {
        "login": "dimaqq",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: use temp dir for secret data (#1290)",
        "length": 395,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 58,
        "additions": 40,
        "deletions": 18
      },
      "files": [
        {
          "filename": "ops/model.py",
          "status": "modified",
          "additions": 14,
          "deletions": 9,
          "patch": "@@ -3598,11 +3598,13 @@ def secret_set(\n             args.extend(['--expire', expire.isoformat()])\n         if rotate is not None:\n             args += ['--rotate', rotate.value]\n-        if content is not None:\n-            # The content has already been validated with Secret._validate_content\n-            for k, v in content.items():\n-                args.append(f'{k}={v}')\n-        self._run_for_secret('secret-set', *args)\n+        with tempfile.TemporaryDirectory() as tmp:\n+            # The content is None or has already been validated with Secret._validate_content\n+            for k, v in (content or {}).items():\n+                with open(f'{tmp}/{k}', mode='w', encoding='utf-8') as f:\n+                    f.write(v)\n+                args.append(f'{k}#file={tmp}/{k}')\n+            self._run_for_secret('secret-set', *args)\n \n     def secret_add(\n         self,\n@@ -3625,10 +3627,13 @@ def secret_add(\n             args += ['--rotate', rotate.value]\n         if owner is not None:\n             args += ['--owner', owner]\n-        # The content has already been validated with Secret._validate_content\n-        for k, v in content.items():\n-            args.append(f'{k}={v}')\n-        result = self._run('secret-add', *args, return_output=True)\n+        with tempfile.TemporaryDirectory() as tmp:\n+            # The content has already been validated with Secret._validate_content\n+            for k, v in content.items():\n+                with open(f'{tmp}/{k}', mode='w', encoding='utf-8') as f:\n+                    f.write(v)\n+                args.append(f'{k}#file={tmp}/{k}')\n+            result = self._run('secret-add', *args, return_output=True)\n         secret_id = typing.cast(str, result)\n         return secret_id.strip()\n "
        },
        {
          "filename": "test/test_helpers.py",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -153,6 +153,15 @@ def write(self, name: str, content: str):\n             f.write(\n                 \"\"\"#!/bin/sh\n {{ printf {name}; printf \"\\\\036%s\" \"$@\"; printf \"\\\\034\"; }} >> {path}/calls.txt\n+\n+# Capture key and data from key#file=/some/path arguments\n+for word in \"$@\"; do\n+  echo \"$word\" | grep -q \"#file=\" || continue\n+  key=$(echo \"$word\" | cut -d'#' -f1)\n+  path=$(echo \"$word\" | cut -d'=' -f2)\n+  cp \"$path\" \"{path}/$key.secret\"\n+done\n+\n {content}\"\"\".format_map(template_args)\n             )\n         path.chmod(0o755)\n@@ -175,6 +184,9 @@ def calls(self, clear: bool = False) -> typing.List[typing.List[str]]:\n                 f.truncate(0)\n         return calls\n \n+    def secrets(self) -> typing.Dict[str, str]:\n+        return {p.stem: p.read_text() for p in self.path.iterdir() if p.suffix == '.secret'}\n+\n \n class FakeScriptTest(unittest.TestCase):\n     def test_fake_script_works(self):"
        },
        {
          "filename": "test/test_model.py",
          "status": "modified",
          "additions": 14,
          "deletions": 9,
          "patch": "@@ -24,7 +24,7 @@\n import unittest\n from collections import OrderedDict\n from textwrap import dedent\n-from unittest.mock import MagicMock, patch\n+from unittest.mock import ANY, MagicMock, patch\n \n import pytest\n \n@@ -3349,7 +3349,8 @@ def test_app_add_secret_simple(self, fake_script: FakeScript, model: ops.Model):\n         assert secret.id == 'secret:123'\n         assert secret.label is None\n \n-        assert fake_script.calls(clear=True) == [['secret-add', '--owner', 'application', 'foo=x']]\n+        assert fake_script.calls(clear=True) == [['secret-add', '--owner', 'application', ANY]]\n+        assert fake_script.secrets() == {'foo': 'x'}\n \n     def test_app_add_secret_args(self, fake_script: FakeScript, model: ops.Model):\n         fake_script.write('secret-add', 'echo secret:234')\n@@ -3379,10 +3380,11 @@ def test_app_add_secret_args(self, fake_script: FakeScript, model: ops.Model):\n                 'hourly',\n                 '--owner',\n                 'application',\n-                'foo=x',\n-                'bar=y',\n+                ANY,\n+                ANY,\n             ]\n         ]\n+        assert fake_script.secrets() == {'foo': 'x', 'bar': 'y'}\n \n     def test_unit_add_secret_simple(self, fake_script: FakeScript, model: ops.Model):\n         fake_script.write('secret-add', 'echo secret:345')\n@@ -3392,7 +3394,8 @@ def test_unit_add_secret_simple(self, fake_script: FakeScript, model: ops.Model)\n         assert secret.id == 'secret:345'\n         assert secret.label is None\n \n-        assert fake_script.calls(clear=True) == [['secret-add', '--owner', 'unit', 'foo=x']]\n+        assert fake_script.calls(clear=True) == [['secret-add', '--owner', 'unit', ANY]]\n+        assert fake_script.secrets() == {'foo': 'x'}\n \n     def test_unit_add_secret_args(self, fake_script: FakeScript, model: ops.Model):\n         fake_script.write('secret-add', 'echo secret:456')\n@@ -3422,10 +3425,11 @@ def test_unit_add_secret_args(self, fake_script: FakeScript, model: ops.Model):\n                 'yearly',\n                 '--owner',\n                 'unit',\n-                'foo=w',\n-                'bar=z',\n+                ANY,\n+                ANY,\n             ]\n         ]\n+        assert fake_script.secrets() == {'foo': 'w', 'bar': 'z'}\n \n     def test_unit_add_secret_errors(self, model: ops.Model):\n         # Additional add_secret tests are done in TestApplication\n@@ -3721,10 +3725,11 @@ def test_set_content(self, model: ops.Model, fake_script: FakeScript):\n             secret.set_content({'s': 't'})  # ensure it validates content (key too short)\n \n         assert fake_script.calls(clear=True) == [\n-            ['secret-set', 'secret:x', 'foo=bar'],\n+            ['secret-set', 'secret:x', ANY],\n             ['secret-info-get', '--label', 'y', '--format=json'],\n-            ['secret-set', 'secret:z', 'bar=foo'],\n+            ['secret-set', 'secret:z', ANY],\n         ]\n+        assert fake_script.secrets() == {'foo': 'bar', 'bar': 'foo'}\n \n     def test_set_info(self, model: ops.Model, fake_script: FakeScript):\n         fake_script.write('secret-set', \"\"\"exit 0\"\"\")"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cece866bada2d9ada7a240846123a1c67faf48ee",
            "date": "2025-01-09T00:28:47Z",
            "author_login": "benhoyt"
          },
          {
            "sha": "02197b3bed0851fd31ba724b0575c1b74c7fb68b",
            "date": "2025-01-09T00:09:53Z",
            "author_login": "dwilding"
          },
          {
            "sha": "1d9ffb5bd3924c9048e5bebe56124ccd2a89e00e",
            "date": "2025-01-08T23:09:22Z",
            "author_login": "prints-charming-bot"
          },
          {
            "sha": "9bc00c6cdd9c625f464fa912faee152eaa9d2e68",
            "date": "2025-01-08T20:35:10Z",
            "author_login": "tonyandrewmeyer"
          },
          {
            "sha": "6536f2a22da9a029d773616957504d4132137a3d",
            "date": "2024-12-20T02:24:54Z",
            "author_login": "tonyandrewmeyer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.4,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-532",
    "description": "The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (>=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-22T15:15:03.710",
    "last_modified": "2024-11-21T09:32:17.440",
    "fix_date": "2024-07-22T00:45:52Z"
  },
  "references": [
    {
      "url": "https://github.com/canonical/operator/commit/fea6d2072435a62170d4c01272572f1a7e916e61",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/canonical/operator/security/advisories/GHSA-hcmv-jmqh-fjgm",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/canonical/operator/commit/fea6d2072435a62170d4c01272572f1a7e916e61",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/canonical/operator/security/advisories/GHSA-hcmv-jmqh-fjgm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.509155",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "operator",
    "owner": "canonical",
    "created_at": "2019-10-01T13:06:11Z",
    "updated_at": "2025-01-09T00:28:52Z",
    "pushed_at": "2025-01-09T00:28:48Z",
    "size": 4141,
    "stars": 246,
    "forks": 122,
    "open_issues": 61,
    "watchers": 246,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.5-maintenance",
      "2.5-maintenance",
      "2.16-maintenance",
      "main"
    ],
    "languages": {
      "Python": 1868970,
      "Batchfile": 582,
      "Shell": 572
    },
    "commit_activity": {
      "total_commits_last_year": 380,
      "avg_commits_per_week": 7.3076923076923075,
      "days_active_last_year": 141
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T22:53:57.086322"
  }
}