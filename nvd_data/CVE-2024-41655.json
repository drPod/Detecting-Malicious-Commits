{
  "cve_id": "CVE-2024-41655",
  "github_data": {
    "repository": "danocmx/node-tf2-item-format",
    "fix_commit": "5cffcc16a9261d6a937bda72bfe6830e02e31eec",
    "related_commits": [
      "5cffcc16a9261d6a937bda72bfe6830e02e31eec",
      "5cffcc16a9261d6a937bda72bfe6830e02e31eec"
    ],
    "patch_url": "https://github.com/danocmx/node-tf2-item-format/commit/5cffcc16a9261d6a937bda72bfe6830e02e31eec.patch",
    "fix_commit_details": {
      "sha": "5cffcc16a9261d6a937bda72bfe6830e02e31eec",
      "commit_date": "2024-07-22T09:02:28Z",
      "author": {
        "login": "danocmx",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #371 from danocmx/fix/regex",
        "length": 87,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 63,
        "additions": 44,
        "deletions": 19
      },
      "files": [
        {
          "filename": "src/parseEconItem/ParsedEcon/getDescriptions/paint.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@ import { EconDescription } from '../../../types';\n  */\n export function isPaint(description: EconDescription): boolean {\n \treturn (\n-\t\t/^Paint Color: /.test(description.value) &&\n+\t\tdescription.value.startsWith('Paint Color: ') &&\n \t\tdescription.color === '756b5e'\n \t);\n }"
        },
        {
          "filename": "src/parseEconItem/ParsedEcon/getDescriptions/spell.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -7,7 +7,7 @@ import { EconDescription } from '../../../types';\n  */\n export function isSpell(description: EconDescription): boolean {\n \treturn (\n-\t\t/^Halloween: .*/.test(description.value) &&\n+\t\tdescription.value.startsWith('Halloween: ') &&\n \t\tdescription.color === '7ea9d1'\n \t);\n }"
        },
        {
          "filename": "src/parseString/Attributes/getQuality/isHaunted.ts",
          "status": "modified",
          "additions": 12,
          "deletions": 3,
          "patch": "@@ -6,8 +6,17 @@ export default function (name: string): boolean {\n \t);\n }\n \n+const HAUNTED_EXCEPTIONS = [\n+\t'Haunted Hat',\n+\t'Haunted Ghosts',\n+\t'Haunted Phantasm',\n+\t'Haunted Metal Scrap',\n+\t'Haunted Kraken',\n+\t'Haunted Forever',\n+\t'Haunted Wick',\n+\t'Haunted Cremation',\n+];\n+\n function isHauntedException(name: string): boolean {\n-\treturn /(Haunted Hat)|(Haunted Ghosts)|(Haunted Phantasm)|(Haunted Metal Scrap)|(Haunted Kraken)|(Haunted Forever)|(Haunted Wick)|(Haunted Cremation)/.test(\n-\t\tname\n-\t);\n+\treturn HAUNTED_EXCEPTIONS.some((exception) => name.includes(exception));\n }"
        },
        {
          "filename": "src/parseString/Attributes/getQuality/isStrange.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -2,8 +2,14 @@ export default function (name: string): boolean {\n \treturn name.includes('Strange ') && !isStrangeException(name);\n }\n \n+const STRANGE_EXCEPTIONS = [\n+\t'Strange Bacon Grease',\n+\t'Strange Filter: ',\n+\t'Strange Count Transfer Tool',\n+\t'Strange Part: ',\n+\t'Strange Cosmetic Part: ',\n+];\n+\n function isStrangeException(name: string): boolean {\n-\treturn /(Strange Bacon Grease|Strange Filter: |Strange Count Transfer Tool|Strange Part: |Strange Cosmetic Part: )/.test(\n-\t\tname\n-\t);\n+\treturn STRANGE_EXCEPTIONS.some((exception) => name.includes(exception));\n }"
        },
        {
          "filename": "src/parseString/Attributes/getQuality/isVintage.ts",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -6,6 +6,11 @@ export default function (name: string): boolean {\n \t);\n }\n \n+const VINTAGE_EXCEPTIONS = [\n+\t'Vintage Merryweather',\n+\t'Vintage Tyrolean',\n+];\n+\n function isVintageException(name: string): boolean {\n-\treturn /Vintage (Merryweather|Tyrolean)/.test(name);\n+\treturn VINTAGE_EXCEPTIONS.some((exception) => name.includes(exception));\n }"
        },
        {
          "filename": "src/parseString/Attributes/getQuality/matchQuality.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@\n  * @return {string} quality\n  */\n export default function (name: string): string {\n-\t// Does not include strangee and vintage for exception reasons.\n+\t// Does not include strange and vintage for exception reasons.\n \tconst match =\n \t\tname.match(/(Normal|Genuine|Unique|Unusual|Self-Made|Collector's) /) ||\n \t\t[];"
        },
        {
          "filename": "src/parseString/Attributes/getUsableItem.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -48,17 +48,23 @@ export default function (name: string): Partial<TargetOutputItem> | null {\n }\n \n function isStrangifierChemistrySet(name: string): boolean {\n-\treturn / Strangifier Chemistry Set/.test(name);\n+\treturn name.includes(' Strangifier Chemistry Set');\n }\n \n+const TARGET_EXCEPTIONS = [\n+\t\"Killer's Kit\",\n+\t\"Coffin Kit\",\n+\t\"Summer Starter Kit\"\n+];\n+\n function getItemIfTarget(name: string): string | void {\n-\tif (/(Killer's Kit|Coffin Kit|Summer Starter Kit)/.test(name)) return;\n+\tif (TARGET_EXCEPTIONS.some((exception) => name.includes(exception))) return;\n \n \t// eslint-disable-next-line consistent-return\n \treturn (name.match(/ (Kit Fabricator|Kit|Strangifier|Unusualifier)/) ||\n \t\t[])[1];\n }\n \n function isChemistrySet(name: string): boolean {\n-\treturn / Chemistry Set/.test(name);\n+\treturn name.includes(' Chemistry Set') ;\n }"
        },
        {
          "filename": "src/shared/decomposeName.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -51,10 +51,9 @@ export default function (\n \t\t} else {\n \t\t\tconst toRemove = getUsableItemToRemove(attributes);\n \n-\t\t\titemName = itemName.replace(\n-\t\t\t\tnew RegExp(`(( ${toRemove})|(${toRemove} ))`),\n-\t\t\t\t''\n-\t\t\t);\n+\t\t\titemName = itemName\n+\t\t\t\t.replace(` ${toRemove}`, '')\n+\t\t\t\t.replace(`${toRemove} `, '');\n \t\t}\n \t} else if (killstreak) itemName = itemName.replace(`${killstreak} `, ''); // Killstreak stat is kept\n "
        },
        {
          "filename": "src/shared/isUniqueHat.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -46,7 +46,7 @@ const EXCEPTIONS = [\n  * Only happens to hats with unique quality.\n  */\n export default function (name: string, attributes?: Attributes): boolean {\n-\tif (!/^The /.test(name)) {\n+\tif (!name.startsWith('The ')) {\n \t\treturn false;\n \t}\n "
        },
        {
          "filename": "src/stringify.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -189,7 +189,7 @@ function canAddKillstreak(\n }\n \n function isKillstreakKitOrFabricator(name: string, target?: string): boolean {\n-\treturn !!(target && (/ Kit/.test(name) || / Fabricator/.test(name))); // This checks for fabricator too.\n+\treturn !!(target && (name.includes(' Kit') || name.includes(' Fabricator'))); // This checks for fabricator too.\n }\n \n function isUniqueHat("
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6a1247101478e5b9c512ad856f80ad79b54742b0",
            "date": "2025-01-13T22:28:27Z",
            "author_login": "danocmx"
          },
          {
            "sha": "60630fcbcd4c1865fd89ebdff004b0e7e6f91265",
            "date": "2025-01-10T04:59:32Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "fb982ecf7733c9b0e3b7b08e9b0c50bc36748e08",
            "date": "2025-01-07T17:32:04Z",
            "author_login": "danocmx"
          },
          {
            "sha": "2f4fa707f5ee5e9cc19c2e6cb6e2b157334b5eed",
            "date": "2025-01-06T04:48:58Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0aa6d65921236fec4b6f32684f984786bd6cf782",
            "date": "2025-01-03T19:55:02Z",
            "author_login": "danocmx"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-624",
    "description": "TF2 Item Format helps users format TF2 items to the community standards. Versions of `tf2-item-format` since at least `4.2.6`  and prior to `5.9.14` are vulnerable to a Regular Expression Denial of Service (ReDoS) attack when parsing crafted user input. This vulnerability can be exploited by an attacker to perform DoS attacks on any service that uses any `tf2-item-format` to parse user input. Version `5.9.14` contains a fix for the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-23T15:15:05.207",
    "last_modified": "2024-11-21T09:32:54.903",
    "fix_date": "2024-07-22T09:02:28Z"
  },
  "references": [
    {
      "url": "https://github.com/danocmx/node-tf2-item-format/commit/5cffcc16a9261d6a937bda72bfe6830e02e31eec",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/danocmx/node-tf2-item-format/releases/tag/v5.9.14",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/danocmx/node-tf2-item-format/security/advisories/GHSA-8h55-q5qq-p685",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/danocmx/node-tf2-item-format/commit/5cffcc16a9261d6a937bda72bfe6830e02e31eec",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/danocmx/node-tf2-item-format/releases/tag/v5.9.14",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/danocmx/node-tf2-item-format/security/advisories/GHSA-8h55-q5qq-p685",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.511687",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "node-tf2-item-format",
    "owner": "danocmx",
    "created_at": "2019-03-28T21:15:45Z",
    "updated_at": "2025-01-13T22:28:32Z",
    "pushed_at": "2025-01-13T22:28:34Z",
    "size": 3577,
    "stars": 24,
    "forks": 7,
    "open_issues": 6,
    "watchers": 24,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 373662,
      "TypeScript": 95525
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:28:22.455764"
  }
}