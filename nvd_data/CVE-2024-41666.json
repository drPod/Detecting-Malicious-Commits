{
  "cve_id": "CVE-2024-41666",
  "github_data": {
    "repository": "argoproj/argo-cd",
    "fix_commit": "05edb2a9ca48f0f10608c1b49fbb0cf7164f6476",
    "related_commits": [
      "05edb2a9ca48f0f10608c1b49fbb0cf7164f6476",
      "e96f32d233504101ddac028a5bf8117433d333d6",
      "ef535230d8bd8ad7b18aab1ea1063e9751d348c4",
      "05edb2a9ca48f0f10608c1b49fbb0cf7164f6476",
      "e96f32d233504101ddac028a5bf8117433d333d6",
      "ef535230d8bd8ad7b18aab1ea1063e9751d348c4"
    ],
    "patch_url": "https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476.patch",
    "fix_commit_details": {
      "sha": "05edb2a9ca48f0f10608c1b49fbb0cf7164f6476",
      "commit_date": "2024-07-24T09:18:16Z",
      "author": {
        "login": "pasha-codefresh",
        "type": "User",
        "stats": {
          "total_commits": 261,
          "average_weekly_commits": 0.7209944751381215,
          "total_additions": 223909,
          "total_deletions": 165744,
          "weeks_active": 88
        }
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 604,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 169,
        "additions": 159,
        "deletions": 10
      },
      "files": [
        {
          "filename": "server/application/terminal.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -225,7 +225,7 @@ func (s *terminalHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n \n \tfieldLog.Info(\"terminal session starting\")\n \n-\tsession, err := newTerminalSession(w, r, nil, s.sessionManager)\n+\tsession, err := newTerminalSession(ctx, w, r, nil, s.sessionManager, appRBACName, s.enf)\n \tif err != nil {\n \t\thttp.Error(w, \"Failed to start terminal session\", http.StatusBadRequest)\n \t\treturn"
        },
        {
          "filename": "server/application/websocket.go",
          "status": "modified",
          "additions": 43,
          "deletions": 4,
          "patch": "@@ -1,15 +1,19 @@\n package application\n \n import (\n+\t\"context\"\n \t\"encoding/json\"\n \t\"fmt\"\n-\t\"github.com/argoproj/argo-cd/v2/common\"\n-\thttputil \"github.com/argoproj/argo-cd/v2/util/http\"\n-\tutil_session \"github.com/argoproj/argo-cd/v2/util/session\"\n \t\"net/http\"\n \t\"sync\"\n \t\"time\"\n \n+\t\"github.com/argoproj/argo-cd/v2/common\"\n+\t\"github.com/argoproj/argo-cd/v2/server/rbacpolicy\"\n+\thttputil \"github.com/argoproj/argo-cd/v2/util/http\"\n+\t\"github.com/argoproj/argo-cd/v2/util/rbac\"\n+\tutil_session \"github.com/argoproj/argo-cd/v2/util/session\"\n+\n \t\"github.com/gorilla/websocket\"\n \tlog \"github.com/sirupsen/logrus\"\n \t\"k8s.io/client-go/tools/remotecommand\"\n@@ -31,6 +35,7 @@ var upgrader = func() websocket.Upgrader {\n \n // terminalSession implements PtyHandler\n type terminalSession struct {\n+\tctx            context.Context\n \twsConn         *websocket.Conn\n \tsizeChan       chan remotecommand.TerminalSize\n \tdoneChan       chan struct{}\n@@ -39,6 +44,8 @@ type terminalSession struct {\n \twriteLock      sync.Mutex\n \tsessionManager *util_session.SessionManager\n \ttoken          *string\n+\tappRBACName    string\n+\tenf            *rbac.Enforcer\n }\n \n // getToken get auth token from web socket request\n@@ -48,7 +55,7 @@ func getToken(r *http.Request) (string, error) {\n }\n \n // newTerminalSession create terminalSession\n-func newTerminalSession(w http.ResponseWriter, r *http.Request, responseHeader http.Header, sessionManager *util_session.SessionManager) (*terminalSession, error) {\n+func newTerminalSession(ctx context.Context, w http.ResponseWriter, r *http.Request, responseHeader http.Header, sessionManager *util_session.SessionManager, appRBACName string, enf *rbac.Enforcer) (*terminalSession, error) {\n \ttoken, err := getToken(r)\n \tif err != nil {\n \t\treturn nil, err\n@@ -59,12 +66,15 @@ func newTerminalSession(w http.ResponseWriter, r *http.Request, responseHeader h\n \t\treturn nil, err\n \t}\n \tsession := &terminalSession{\n+\t\tctx:            ctx,\n \t\twsConn:         conn,\n \t\ttty:            true,\n \t\tsizeChan:       make(chan remotecommand.TerminalSize),\n \t\tdoneChan:       make(chan struct{}),\n \t\tsessionManager: sessionManager,\n \t\ttoken:          &token,\n+\t\tappRBACName:    appRBACName,\n+\t\tenf:            enf,\n \t}\n \treturn session, nil\n }\n@@ -125,6 +135,29 @@ func (t *terminalSession) reconnect() (int, error) {\n \treturn 0, nil\n }\n \n+func (t *terminalSession) validatePermissions(p []byte) (int, error) {\n+\tpermissionDeniedMessage, _ := json.Marshal(TerminalMessage{\n+\t\tOperation: \"stdout\",\n+\t\tData:      \"Permission denied\",\n+\t})\n+\tif err := t.enf.EnforceErr(t.ctx.Value(\"claims\"), rbacpolicy.ResourceApplications, rbacpolicy.ActionGet, t.appRBACName); err != nil {\n+\t\terr = t.wsConn.WriteMessage(websocket.TextMessage, permissionDeniedMessage)\n+\t\tif err != nil {\n+\t\t\tlog.Errorf(\"permission denied message err: %v\", err)\n+\t\t}\n+\t\treturn copy(p, EndOfTransmission), permissionDeniedErr\n+\t}\n+\n+\tif err := t.enf.EnforceErr(t.ctx.Value(\"claims\"), rbacpolicy.ResourceExec, rbacpolicy.ActionCreate, t.appRBACName); err != nil {\n+\t\terr = t.wsConn.WriteMessage(websocket.TextMessage, permissionDeniedMessage)\n+\t\tif err != nil {\n+\t\t\tlog.Errorf(\"permission denied message err: %v\", err)\n+\t\t}\n+\t\treturn copy(p, EndOfTransmission), permissionDeniedErr\n+\t}\n+\treturn 0, nil\n+}\n+\n // Read called in a loop from remotecommand as long as the process is running\n func (t *terminalSession) Read(p []byte) (int, error) {\n \t// check if token still valid\n@@ -135,6 +168,12 @@ func (t *terminalSession) Read(p []byte) (int, error) {\n \t\treturn t.reconnect()\n \t}\n \n+\t// validate permissions\n+\tcode, err := t.validatePermissions(p)\n+\tif err != nil {\n+\t\treturn code, err\n+\t}\n+\n \tt.readLock.Lock()\n \t_, message, err := t.wsConn.ReadMessage()\n \tt.readLock.Unlock()"
        },
        {
          "filename": "server/application/websocket_test.go",
          "status": "modified",
          "additions": 115,
          "deletions": 5,
          "patch": "@@ -1,23 +1,65 @@\n package application\n \n import (\n+\t\"context\"\n \t\"encoding/json\"\n-\t\"github.com/gorilla/websocket\"\n-\t\"github.com/stretchr/testify/assert\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"strings\"\n \t\"testing\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/client-go/kubernetes/fake\"\n+\n+\t\"github.com/argoproj/argo-cd/v2/common\"\n+\t\"github.com/argoproj/argo-cd/v2/util/assets\"\n+\t\"github.com/argoproj/argo-cd/v2/util/rbac\"\n+\n+\t\"github.com/golang-jwt/jwt/v4\"\n+\t\"github.com/gorilla/websocket\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n )\n \n-func reconnect(w http.ResponseWriter, r *http.Request) {\n+func newTestTerminalSession(w http.ResponseWriter, r *http.Request) terminalSession {\n \tvar upgrader = websocket.Upgrader{}\n \tc, err := upgrader.Upgrade(w, r, nil)\n \tif err != nil {\n-\t\treturn\n+\t\treturn terminalSession{}\n \t}\n \n-\tts := terminalSession{wsConn: c}\n+\treturn terminalSession{wsConn: c}\n+}\n+\n+func newEnforcer() *rbac.Enforcer {\n+\tadditionalConfig := make(map[string]string, 0)\n+\tkubeclientset := fake.NewSimpleClientset(&v1.ConfigMap{\n+\t\tObjectMeta: metav1.ObjectMeta{\n+\t\t\tNamespace: testNamespace,\n+\t\t\tName:      \"argocd-cm\",\n+\t\t\tLabels: map[string]string{\n+\t\t\t\t\"app.kubernetes.io/part-of\": \"argocd\",\n+\t\t\t},\n+\t\t},\n+\t\tData: additionalConfig,\n+\t}, &v1.Secret{\n+\t\tObjectMeta: metav1.ObjectMeta{\n+\t\t\tName:      \"argocd-secret\",\n+\t\t\tNamespace: testNamespace,\n+\t\t},\n+\t\tData: map[string][]byte{\n+\t\t\t\"admin.password\":   []byte(\"test\"),\n+\t\t\t\"server.secretkey\": []byte(\"test\"),\n+\t\t},\n+\t})\n+\n+\tenforcer := rbac.NewEnforcer(kubeclientset, testNamespace, common.ArgoCDRBACConfigMapName, nil)\n+\treturn enforcer\n+}\n+\n+func reconnect(w http.ResponseWriter, r *http.Request) {\n+\tts := newTestTerminalSession(w, r)\n \t_, _ = ts.reconnect()\n }\n \n@@ -44,3 +86,71 @@ func TestReconnect(t *testing.T) {\n \tassert.Equal(t, message.Data, ReconnectMessage)\n \n }\n+\n+func TestValidateWithAdminPermissions(t *testing.T) {\n+\tvalidate := func(w http.ResponseWriter, r *http.Request) {\n+\t\tenf := newEnforcer()\n+\t\t_ = enf.SetBuiltinPolicy(assets.BuiltinPolicyCSV)\n+\t\tenf.SetDefaultRole(\"role:admin\")\n+\t\tenf.SetClaimsEnforcerFunc(func(claims jwt.Claims, rvals ...interface{}) bool {\n+\t\t\treturn true\n+\t\t})\n+\t\tts := newTestTerminalSession(w, r)\n+\t\tts.enf = enf\n+\t\tts.appRBACName = \"test\"\n+\t\t// nolint:staticcheck\n+\t\tts.ctx = context.WithValue(context.Background(), \"claims\", &jwt.MapClaims{\"groups\": []string{\"admin\"}})\n+\t\t_, err := ts.validatePermissions([]byte{})\n+\t\trequire.NoError(t, err)\n+\t}\n+\n+\ts := httptest.NewServer(http.HandlerFunc(validate))\n+\tdefer s.Close()\n+\n+\tu := \"ws\" + strings.TrimPrefix(s.URL, \"http\")\n+\n+\t// Connect to the server\n+\tws, _, err := websocket.DefaultDialer.Dial(u, nil)\n+\trequire.NoError(t, err)\n+\n+\tdefer ws.Close()\n+}\n+\n+func TestValidateWithoutPermissions(t *testing.T) {\n+\tvalidate := func(w http.ResponseWriter, r *http.Request) {\n+\t\tenf := newEnforcer()\n+\t\t_ = enf.SetBuiltinPolicy(assets.BuiltinPolicyCSV)\n+\t\tenf.SetDefaultRole(\"role:test\")\n+\t\tenf.SetClaimsEnforcerFunc(func(claims jwt.Claims, rvals ...interface{}) bool {\n+\t\t\treturn false\n+\t\t})\n+\t\tts := newTestTerminalSession(w, r)\n+\t\tts.enf = enf\n+\t\tts.appRBACName = \"test\"\n+\t\t// nolint:staticcheck\n+\t\tts.ctx = context.WithValue(context.Background(), \"claims\", &jwt.MapClaims{\"groups\": []string{\"test\"}})\n+\t\t_, err := ts.validatePermissions([]byte{})\n+\t\trequire.Error(t, err)\n+\t\tassert.Equal(t, permissionDeniedErr.Error(), err.Error())\n+\t}\n+\n+\ts := httptest.NewServer(http.HandlerFunc(validate))\n+\tdefer s.Close()\n+\n+\tu := \"ws\" + strings.TrimPrefix(s.URL, \"http\")\n+\n+\t// Connect to the server\n+\tws, _, err := websocket.DefaultDialer.Dial(u, nil)\n+\trequire.NoError(t, err)\n+\n+\tdefer ws.Close()\n+\n+\t_, p, _ := ws.ReadMessage()\n+\n+\tvar message TerminalMessage\n+\n+\terr = json.Unmarshal(p, &message)\n+\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, \"Permission denied\", message.Data)\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c3600d240a42a4708ec65091ffb23689b4513f85",
            "date": "2025-01-14T12:37:06Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b77d9d9f5f9cf3862ef75e14a5877a3fcf60fa40",
            "date": "2025-01-14T12:16:41Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2f579404f68ded0b0156fc25d6e554640c4ad009",
            "date": "2025-01-14T12:12:38Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "5d84eb4ff3b7eee0c800b388b2a3a873f8f7f7d8",
            "date": "2025-01-14T12:12:11Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "d3dda53cf63fb05fdaa582aacdfd95d51617fbb4",
            "date": "2025-01-14T12:11:29Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-269",
    "description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Argo CD has a Web-based terminal that allows users to get a shell inside a running pod, just as they would with kubectl exec. Starting in version 2.6.0, when the administrator enables this function and grants permission to the user `p, role:myrole, exec, create, */*, allow`, even if the user revokes this permission, the user can still perform operations in the container, as long as the user keeps the terminal view open for a long time. Although the token expiration and revocation of the user are fixed, however, the fix does not address the situation of revocation of only user `p, role:myrole, exec, create, */*, allow` permissions, which may still lead to the leakage of sensitive information. A patch for this vulnerability has been released in Argo CD versions 2.11.7, 2.10.16, and 2.9.21.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-24T18:15:05.090",
    "last_modified": "2025-01-09T16:54:08.037",
    "fix_date": "2024-07-24T09:18:16Z"
  },
  "references": [
    {
      "url": "https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.515862",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "argo-cd",
    "owner": "argoproj",
    "created_at": "2018-02-09T11:12:01Z",
    "updated_at": "2025-01-14T12:37:12Z",
    "pushed_at": "2025-01-14T12:37:08Z",
    "size": 125601,
    "stars": 18420,
    "forks": 5620,
    "open_issues": 3601,
    "watchers": 18420,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 6686751,
      "TypeScript": 1298168,
      "Lua": 199797,
      "SCSS": 92938,
      "Shell": 58329,
      "Makefile": 24983,
      "Dockerfile": 15204,
      "Procfile": 10040,
      "JavaScript": 5975,
      "CSS": 2209,
      "Mustache": 1066,
      "HTML": 895
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:15:10.212233"
  }
}