{
  "cve_id": "CVE-2024-41668",
  "github_data": {
    "repository": "cBioPortal/cbioportal",
    "fix_commit": "ea8642fdbda2d61d2ab34b9da7a1594680bbbcd5",
    "related_commits": [
      "ea8642fdbda2d61d2ab34b9da7a1594680bbbcd5",
      "ea8642fdbda2d61d2ab34b9da7a1594680bbbcd5"
    ],
    "patch_url": "https://github.com/cBioPortal/cbioportal/commit/ea8642fdbda2d61d2ab34b9da7a1594680bbbcd5.patch",
    "fix_commit_details": {
      "sha": "ea8642fdbda2d61d2ab34b9da7a1594680bbbcd5",
      "commit_date": "2024-07-12T14:34:43Z",
      "author": {
        "login": "onursumer",
        "type": "User",
        "stats": {
          "total_commits": 1265,
          "average_weekly_commits": 1.7816901408450705,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 239
        }
      },
      "commit_message": {
        "title": "Restrict proxy access to known hosts only (#10884)",
        "length": 125,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 106,
        "additions": 10,
        "deletions": 96
      },
      "files": [
        {
          "filename": "src/main/java/org/cbioportal/proxy/ProxyController.java",
          "status": "modified",
          "additions": 10,
          "deletions": 96,
          "patch": "@@ -13,24 +13,17 @@\n import org.springframework.http.ResponseEntity;\n import org.springframework.http.converter.StringHttpMessageConverter;\n import org.springframework.security.core.Authentication;\n-import org.springframework.util.ObjectUtils;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.ResponseStatus;\n import org.springframework.web.bind.annotation.RestController;\n import org.springframework.web.client.RestTemplate;\n \n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.InputStream;\n import java.io.UnsupportedEncodingException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.nio.charset.StandardCharsets;\n-import java.util.Properties;\n import java.util.regex.Pattern;\n \n // TODO Consider creating separate DispatcherServlets as in the original web.xml\n@@ -64,27 +57,13 @@ public class ProxyController {\n \n     @Value(\"${darwin.regex:Test}\")\n     private String darwinRegex;\n-    \n-    \n-    @RequestMapping(\"/**\")\n-    public String proxy(@RequestBody(required = false) String body, HttpMethod method, HttpServletRequest request)\n-        throws URISyntaxException {\n-        HttpHeaders httpHeaders = initHeaders(request);\n \n-        // TODO when reimplemeting different dispatcherservlets with different context roots\n-        // reset this to  'String requestPathInfo = request.getPathInfo();'\n-        String requestPathInfo = request.getPathInfo() == null? request.getServletPath() : request.getPathInfo();\n-        requestPathInfo = requestPathInfo.replace(\"proxy/\", \"\"); \n-        return exchangeData(body,\n-            buildUri(requestPathInfo, request.getQueryString(), false),\n-            method,\n-            httpHeaders,\n-            String.class\n-        ).getBody();\n-    }\n-    //TODO: Hey figure out if we need this\n-    @RequestMapping(\"/legacy/proxy/oncokb/**\")\n-    public String legacyProxyOncokb(\n+    /**\n+     * This dev endpoint can be used (with a personal access token) instead of the production endpoint.\n+     * This is useful when debugging the frontend proxy API calls.\n+     */\n+    @RequestMapping(\"/dev/oncokb/**\")\n+    public String devProxyOncokb(\n         @RequestBody(required = false) String body,\n         HttpMethod method,\n         HttpServletRequest request\n@@ -94,7 +73,7 @@ public String legacyProxyOncokb(\n         \n         return exchangeOncokbData(\n             body,\n-            request.getPathInfo().replaceFirst(\"/oncokb\", \"\"),\n+            request.getPathInfo().replaceFirst(\"/dev/oncokb\", \"\"),\n             request.getQueryString(),\n             method,\n             getOncokbHeaders(request, token)\n@@ -168,32 +147,6 @@ private HttpHeaders getOncokbHeaders(HttpServletRequest request, String token) {\n         return httpHeaders;\n     }\n     \n-    //TODO: Figure out what is different (Rebased from Spring Boot Branch)\n-    @RequestMapping(\"/proxy/oncokb/**\")\n-    public String proxyOncokb(@RequestBody(required = false) String body, HttpMethod method, HttpServletRequest request)\n-        throws URISyntaxException {\n-        \n-        if (!this.showOncokb) {\n-            throw new OncoKBServiceIsDisabledException();\n-        }\n-\n-        HttpHeaders httpHeaders = initHeaders(request);\n-\n-        if (!ObjectUtils.isEmpty(this.oncokbToken)) {\n-            httpHeaders.add(\"Authorization\", \"Bearer \" + this.oncokbToken);\n-        }\n-\n-        // TODO when reimplemeting different dispatcherservlets with different context roots\n-        // reset this to  'String requestPathInfo = request.getPathInfo();'\n-        String requestPathInfo = request.getPathInfo() == null? request.getServletPath() : request.getPathInfo();\n-        String replaceString =  request.getPathInfo() == null? \"/proxy/oncokb\" : \"/oncokb\";\n-        return exchangeData(body,\n-            buildUri(this.oncokbApiUrl + requestPathInfo.replaceFirst(replaceString, \"\"), request.getQueryString()),\n-            method,\n-            httpHeaders,\n-            String.class).getBody();\n-    }\n-    \n     @GetMapping(\"/checkDarwinAccess\")\n     public ResponseEntity<String> checkDarwinAccess(HttpServletRequest request, Authentication authentication) {\n         String user = authentication != null ? authentication.getName(): \"anonymousUser\";\n@@ -226,54 +179,15 @@ private <T> ResponseEntity<T> exchangeData(String body, URI uri, HttpMethod meth\n         return restTemplate.exchange(uri, method, new HttpEntity<>(body, httpHeaders), responseType);\n     }\n \n-\n-    private InputStream getResourceStream(String propertiesFileName)\n-    {\n-        String resourceFilename = null;\n-        InputStream resourceFIS = null;\n-\n-        try {\n-            String home = System.getenv(\"PORTAL_HOME\");\n-            if (home != null) {\n-                resourceFilename =\n-                    home + File.separator + propertiesFileName;\n-                resourceFIS = new FileInputStream(resourceFilename);\n-            }\n-        } catch (FileNotFoundException e) {\n-        }\n-\n-        if (resourceFIS == null) {\n-            resourceFIS = this.getClass().getClassLoader().\n-                getResourceAsStream(propertiesFileName);\n-        }\n-\n-        return resourceFIS;\n-    }\n-    private Properties loadProperties(InputStream resourceInputStream)\n-    {\n-        Properties properties = new Properties();\n-\n-        try {\n-            properties.load(resourceInputStream);\n-            resourceInputStream.close();\n-        }\n-        catch (IOException e) {\n-            System.out.println(\"Error loading properties file: \" + e.getMessage());\n-        }\n-\n-        return properties;\n-    }\n-\n     @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = \"OncoKB service is disabled\")\n     public class OncoKBServiceIsDisabledException extends RuntimeException {\n     }\n \n-    @ResponseStatus(code = HttpStatus.FORBIDDEN, reason = \"No OncoKB access token is provided\")\n-    public class NoOncoKBTokenProvidedException extends RuntimeException {\n-    }\n-\n     @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = \"Fair Usage Agreement is missing\")\n     public class OncoKBProxyUserAgreementException extends RuntimeException {\n     }\n \n+    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = \"Unknown/Invalid hostname\")\n+    public class UnknownHostException extends RuntimeException {\n+    }\n }\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "50f78d9bd78fe1e8c37becadb7cd627763ca03e8",
            "date": "2025-01-13T21:28:07Z",
            "author_login": "gblaih"
          },
          {
            "sha": "3e67e8a4be12cd79c75de075ab398a760bcee83e",
            "date": "2025-01-13T16:37:36Z",
            "author_login": "zainasir"
          },
          {
            "sha": "003fd14279fe131629209d6dac9ab30e0d694a07",
            "date": "2025-01-13T15:52:53Z",
            "author_login": "zainasir"
          },
          {
            "sha": "5e1bc35f67984f87a4662424b85e0f8225ce2cd0",
            "date": "2025-01-13T15:48:29Z",
            "author_login": "zainasir"
          },
          {
            "sha": "19599f28c9e6ff15696b4af17b45b1528a71317f",
            "date": "2025-01-10T20:21:21Z",
            "author_login": "onursumer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-918",
    "description": "The cBioPortal for Cancer Genomics provides visualization, analysis, and download of large-scale cancer genomics data sets. When running a publicly exposed proxy endpoint without authentication, cBioPortal could allow someone to perform a Server Side Request Forgery (SSRF) attack. Logged in users could do the same on private instances. A fix has been released in version 6.0.12. As a workaround, one might be able to disable `/proxy` endpoint entirely via, for example, nginx.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-23T19:15:13.437",
    "last_modified": "2024-11-21T09:32:56.450",
    "fix_date": "2024-07-12T14:34:43Z"
  },
  "references": [
    {
      "url": "https://github.com/cBioPortal/cbioportal/commit/ea8642fdbda2d61d2ab34b9da7a1594680bbbcd5",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/cBioPortal/cbioportal/pull/10884",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/cBioPortal/cbioportal/releases/tag/v6.0.12",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/cBioPortal/cbioportal/security/advisories/GHSA-9h44-r3c3-q7rm",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://www.wizlynxgroup.com/security-research-advisories/vuln/WLX-2024-004",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/cBioPortal/cbioportal/commit/ea8642fdbda2d61d2ab34b9da7a1594680bbbcd5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/cBioPortal/cbioportal/pull/10884",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/cBioPortal/cbioportal/releases/tag/v6.0.12",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/cBioPortal/cbioportal/security/advisories/GHSA-9h44-r3c3-q7rm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.wizlynxgroup.com/security-research-advisories/vuln/WLX-2024-004",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.512554",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cbioportal",
    "owner": "cBioPortal",
    "created_at": "2015-03-18T20:09:09Z",
    "updated_at": "2025-01-14T13:44:52Z",
    "pushed_at": "2025-01-13T21:29:02Z",
    "size": 345847,
    "stars": 699,
    "forks": 574,
    "open_issues": 291,
    "watchers": 699,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 4439048,
      "HTML": 333293,
      "JavaScript": 178990,
      "ActionScript": 106472,
      "Shell": 15262,
      "Perl": 7342,
      "Dockerfile": 4524
    },
    "commit_activity": {
      "total_commits_last_year": 372,
      "avg_commits_per_week": 7.153846153846154,
      "days_active_last_year": 128
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T14:25:44.046952"
  }
}