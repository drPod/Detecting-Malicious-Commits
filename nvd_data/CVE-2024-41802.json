{
  "cve_id": "CVE-2024-41802",
  "github_data": {
    "repository": "xibosignage/xibo-cms",
    "fix_commit": "b7a5899338cd841a39702e3fcaff76aa0ffe4075",
    "related_commits": [
      "b7a5899338cd841a39702e3fcaff76aa0ffe4075",
      "b7a5899338cd841a39702e3fcaff76aa0ffe4075"
    ],
    "patch_url": "https://github.com/xibosignage/xibo-cms/commit/b7a5899338cd841a39702e3fcaff76aa0ffe4075.patch",
    "fix_commit_details": {
      "sha": "b7a5899338cd841a39702e3fcaff76aa0ffe4075",
      "commit_date": "2024-07-12T17:08:55Z",
      "author": {
        "login": "dasgarner",
        "type": "User",
        "stats": {
          "total_commits": 6643,
          "average_weekly_commits": 8.345477386934673,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 616
        }
      },
      "commit_message": {
        "title": "DataSet: improve query structure in importJSON/addRow",
        "length": 96,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 58,
        "additions": 41,
        "deletions": 17
      },
      "files": [
        {
          "filename": "lib/Controller/DataSet.php",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -1067,15 +1067,23 @@ public function importJson($dataSetId)\n \n                     // Build a filter to select existing records\n                     $filter = '';\n+                    $params = [];\n+                    $i = 0;\n                     foreach ($data['uniqueKeys'] as $uniqueKey) {\n                         if (isset($sanitizedRow[$uniqueKey])) {\n-                            $filter .= 'AND `' . $uniqueKey . '` = \\'' . $sanitizedRow[$uniqueKey] . '\\' ';\n+                            $i++;\n+                            $filter .= 'AND `' . $uniqueKey . '` = :uniqueKey_' . $i;\n+                            $params['uniqueKey_' . $i] = $sanitizedRow[$uniqueKey];\n                         }\n                     }\n                     $filter = trim($filter, 'AND');\n \n                     // Use the unique keys to look up this row and see if it exists\n-                    $existingRows = $dataSet->getData(['filter' => $filter], ['includeFormulaColumns' => false, 'requireTotal' => false]);\n+                    $existingRows = $dataSet->getData(\n+                        ['filter' => $filter],\n+                        ['includeFormulaColumns' => false, 'requireTotal' => false],\n+                        $params\n+                    );\n \n                     if (count($existingRows) > 0) {\n                         foreach ($existingRows as $existingRow) {"
        },
        {
          "filename": "lib/Controller/DataSetData.php",
          "status": "modified",
          "additions": 15,
          "deletions": 7,
          "patch": "@@ -112,11 +112,15 @@ public function grid($dataSetId)\n \n         // Filter criteria\n         $filter = '';\n+        $params = [];\n+        $i = 0;\n         foreach ($dataSet->getColumn() as $column) {\n             /* @var \\Xibo\\Entity\\DataSetColumn $column */\n             if ($column->dataSetColumnTypeId == 1) {\n+                $i++;\n                 if ($this->getSanitizer()->getString($column->heading) != null) {\n-                    $filter .= 'AND ' . $column->heading . ' LIKE \\'%' . $this->getSanitizer()->getString($column->heading) . '%\\' ';\n+                    $filter .= 'AND `' . $column->heading . '` LIKE :heading_' . $i;\n+                    $params['heading_' . $i] = '%' . $this->getSanitizer()->getString($column->heading) . '%';\n                 }\n             }\n         }\n@@ -126,12 +130,16 @@ public function grid($dataSetId)\n         $filter = $this->gridRenderFilter(['filter' => $this->getSanitizer()->getParam('filter', $filter)]);\n \n         try {\n-            $data = $dataSet->getData([\n-                'order' => $sorting,\n-                'start' => $filter['start'],\n-                'size' => $filter['length'],\n-                'filter' => $filter['filter']\n-            ]);\n+            $data = $dataSet->getData(\n+                [\n+                    'order' => $sorting,\n+                    'start' => $filter['start'],\n+                    'size' => $filter['length'],\n+                    'filter' => $filter['filter']\n+                ],\n+                [],\n+                $params\n+            );\n         } catch (\\Exception $e) {\n             $data = ['exception' => __('Error getting DataSet data, failed with following message: ') . $e->getMessage()];\n             $this->getLog()->error('Error getting DataSet data, failed with following message: ' . $e->getMessage());"
        },
        {
          "filename": "lib/Entity/DataSet.php",
          "status": "modified",
          "additions": 16,
          "deletions": 8,
          "patch": "@@ -387,10 +387,11 @@ public function getUniqueColumnValues($columns)\n      * Get DataSet Data\n      * @param array $filterBy\n      * @param array $options\n+     * @param array $extraParams Extra params to apply to the final query\n      * @return array\n      * @throws NotFoundException\n      */\n-    public function getData($filterBy = [], $options = [])\n+    public function getData($filterBy = [], $options = [], $extraParams = [])\n     {\n         $start = $this->sanitizer->getInt('start', 0, $filterBy);\n         $size = $this->sanitizer->getInt('size', 0, $filterBy);\n@@ -403,8 +404,8 @@ public function getData($filterBy = [], $options = [])\n             'requireTotal' => true\n         ], $options);\n \n-        // Params\n-        $params = [];\n+        // Params (start from extraParams supplied)\n+        $params = $extraParams;\n \n         // Sanitize the filter options provided\n         // Get the Latitude and Longitude ( might be used in a formula )\n@@ -1003,15 +1004,22 @@ public function addRow($row)\n         $this->lastDataEdit = time();\n \n         // Build a query to insert\n+        $params = [];\n         $keys = array_keys($row);\n-        $keys[] = 'id';\n \n-        $values = array_values($row);\n-        $values[] = NULL;\n+        $sql = 'INSERT INTO `dataset_' . $this->dataSetId\n+            . '` (`' . implode('`, `', $keys) . '`) VALUES (';\n \n-        $sql = 'INSERT INTO `dataset_' . $this->dataSetId . '` (`' . implode('`, `', $keys) . '`) VALUES (' . implode(',', array_fill(0, count($values), '?')) . ')';\n+        $i = 0;\n+        foreach ($row as $value) {\n+            $i++;\n+            $sql .= ':value' . $i . ',';\n+            $params['value' . $i] = $value;\n+        }\n+        $sql = rtrim($sql, ',');\n+        $sql .= ')';\n \n-        return $this->getStore()->insert($sql, $values);\n+        return $this->getStore()->insert($sql, $params);\n     }\n \n     /**"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "baad63a883af2cb7722787606fa6d969a7207aa9",
            "date": "2025-01-14T11:25:37Z",
            "author_login": "mgbaybay"
          },
          {
            "sha": "f4418e8c16f8b329997d704fa389fd45a08fa17c",
            "date": "2025-01-10T16:47:44Z",
            "author_login": "mgbaybay"
          },
          {
            "sha": "7682f3ca9687a7abada5b7ebbda8df984cad034d",
            "date": "2025-01-10T16:16:41Z",
            "author_login": "maurofmferrao"
          },
          {
            "sha": "847f5441d792825fc2072a275867b4b4a9153e7a",
            "date": "2025-01-10T14:23:25Z",
            "author_login": "nadzpogi"
          },
          {
            "sha": "19502ff238171f6fa4ced399bdb420929996f03f",
            "date": "2025-01-09T16:54:36Z",
            "author_login": "maurofmferrao"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-89",
    "description": "Xibo is a content management system (CMS). An SQL injection vulnerability was discovered in the API routes inside the CMS responsible for Filtering DataSets. This allows an authenticated user to to obtain and modify arbitrary data from the Xibo database by injecting specially crafted values in to the APIs for importing JSON and importing a Layout containing DataSet data.\nUsers should upgrade to version 3.3.12 or 4.0.14 which fix this issue",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-30T16:15:04.400",
    "last_modified": "2024-11-21T09:33:06.117",
    "fix_date": "2024-07-12T17:08:55Z"
  },
  "references": [
    {
      "url": "https://github.com/xibosignage/xibo-cms/commit/b7a5899338cd841a39702e3fcaff76aa0ffe4075",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xibosignage/xibo-cms/security/advisories/GHSA-x4qm-vvhp-g7c2",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://xibosignage.com/blog/security-advisory-2024-07",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xibosignage/xibo-cms/commit/b7a5899338cd841a39702e3fcaff76aa0ffe4075",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xibosignage/xibo-cms/security/advisories/GHSA-x4qm-vvhp-g7c2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://xibosignage.com/blog/security-advisory-2024-07",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.503601",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xibo-cms",
    "owner": "xibosignage",
    "created_at": "2015-01-08T13:10:34Z",
    "updated_at": "2025-01-14T11:25:41Z",
    "pushed_at": "2025-01-14T11:25:52Z",
    "size": 199650,
    "stars": 394,
    "forks": 286,
    "open_issues": 6,
    "watchers": 394,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "kopff",
      "master"
    ],
    "languages": {
      "PHP": 7461954,
      "Twig": 2434420,
      "JavaScript": 1823110,
      "Handlebars": 224198,
      "SCSS": 166721,
      "CSS": 83520,
      "Shell": 26455,
      "C": 15992,
      "Python": 12616,
      "Dockerfile": 7927,
      "HTML": 2
    },
    "commit_activity": {
      "total_commits_last_year": 499,
      "avg_commits_per_week": 9.596153846153847,
      "days_active_last_year": 168
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:38:15.726881"
  }
}