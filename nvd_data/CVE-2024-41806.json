{
  "cve_id": "CVE-2024-41806",
  "github_data": {
    "repository": "openedx/edx-platform",
    "fix_commit": "cb729a3ced0404736dfa0ae768526c82b608657b",
    "related_commits": [
      "cb729a3ced0404736dfa0ae768526c82b608657b",
      "cb729a3ced0404736dfa0ae768526c82b608657b"
    ],
    "patch_url": "https://github.com/openedx/edx-platform/commit/cb729a3ced0404736dfa0ae768526c82b608657b.patch",
    "fix_commit_details": {
      "sha": "cb729a3ced0404736dfa0ae768526c82b608657b",
      "commit_date": "2024-07-25T14:12:57Z",
      "author": {
        "login": "feanil",
        "type": "User",
        "stats": {
          "total_commits": 1095,
          "average_weekly_commits": 1.5985401459854014,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 222
        }
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 50,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 105,
        "additions": 79,
        "deletions": 26
      },
      "files": [
        {
          "filename": "cms/djangoapps/contentstore/utils.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1670,7 +1670,7 @@ def get_home_context(request, no_course=False):\n         LIBRARY_AUTHORING_MICROFRONTEND_URL,\n         LIBRARIES_ENABLED,\n         should_redirect_to_library_authoring_mfe,\n-        user_can_create_library,\n+        user_can_view_create_library_button,\n     )\n \n     active_courses = []\n@@ -1699,7 +1699,7 @@ def get_home_context(request, no_course=False):\n         'library_authoring_mfe_url': LIBRARY_AUTHORING_MICROFRONTEND_URL,\n         'taxonomy_list_mfe_url': get_taxonomy_list_url(),\n         'libraries': libraries,\n-        'show_new_library_button': user_can_create_library(user) and not should_redirect_to_library_authoring_mfe(),\n+        'show_new_library_button': user_can_view_create_library_button(user) and not should_redirect_to_library_authoring_mfe(),\n         'user': user,\n         'request_course_creator_url': reverse('request_course_creator'),\n         'course_creator_status': _get_course_creator_status(user),"
        },
        {
          "filename": "cms/djangoapps/contentstore/views/library.py",
          "status": "modified",
          "additions": 52,
          "deletions": 10,
          "patch": "@@ -10,7 +10,7 @@\n from django.conf import settings\n from django.contrib.auth.decorators import login_required\n from django.core.exceptions import PermissionDenied\n-from django.http import Http404, HttpResponseForbidden, HttpResponseNotAllowed\n+from django.http import Http404, HttpResponseNotAllowed\n from django.utils.translation import gettext as _\n from django.views.decorators.csrf import ensure_csrf_cookie\n from django.views.decorators.http import require_http_methods\n@@ -68,13 +68,10 @@ def should_redirect_to_library_authoring_mfe():\n         REDIRECT_TO_LIBRARY_AUTHORING_MICROFRONTEND.is_enabled()\n     )\n \n-\n-def user_can_create_library(user, org=None):\n+def user_can_view_create_library_button(user):\n     \"\"\"\n-    Helper method for returning the library creation status for a particular user,\n-    taking into account the value LIBRARIES_ENABLED.\n+    Helper method for displaying the visibilty of the create_library_button.\n     \"\"\"\n-\n     if not LIBRARIES_ENABLED:\n         return False\n     elif user.is_staff:\n@@ -84,8 +81,57 @@ def user_can_create_library(user, org=None):\n         has_org_staff_role = OrgStaffRole().get_orgs_for_user(user).exists()\n         has_course_staff_role = UserBasedRole(user=user, role=CourseStaffRole.ROLE).courses_with_role().exists()\n         has_course_admin_role = UserBasedRole(user=user, role=CourseInstructorRole.ROLE).courses_with_role().exists()\n+        return is_course_creator or has_org_staff_role or has_course_staff_role or has_course_admin_role\n+    else:\n+        # EDUCATOR-1924: DISABLE_LIBRARY_CREATION overrides DISABLE_COURSE_CREATION, if present.\n+        disable_library_creation = settings.FEATURES.get('DISABLE_LIBRARY_CREATION', None)\n+        disable_course_creation = settings.FEATURES.get('DISABLE_COURSE_CREATION', False)\n+        if disable_library_creation is not None:\n+            return not disable_library_creation\n+        else:\n+            return not disable_course_creation\n \n+\n+\n+def user_can_create_library(user, org):\n+    \"\"\"\n+    Helper method for returning the library creation status for a particular user,\n+    taking into account the value LIBRARIES_ENABLED.\n+\n+    if the ENABLE_CREATOR_GROUP value is False, then any user can create a library (in any org),\n+    if library creation is enabled.\n+\n+    if the ENABLE_CREATOR_GROUP value is true, then what a user can do varies by thier role.\n+\n+    Global Staff: can make libraries in any org.\n+    Course Creator Group Members: can make libraries in any org.\n+    Organization Staff: Can make libraries in the organization for which they are staff.\n+    Course Staff: Can make libraries in the organization which has courses of which they are staff.\n+    Course Admin: Can make libraries in the organization which has courses of which they are Admin.\n+    \"\"\"\n+    if org is None:\n+        return False\n+    if not LIBRARIES_ENABLED:\n+        return False\n+    elif user.is_staff:\n+        return True\n+    if settings.FEATURES.get('ENABLE_CREATOR_GROUP', False):\n+        is_course_creator = get_course_creator_status(user) == 'granted'\n+        has_org_staff_role = org in OrgStaffRole().get_orgs_for_user(user)\n+        has_course_staff_role = (\n+            UserBasedRole(user=user, role=CourseStaffRole.ROLE)\n+            .courses_with_role()\n+            .filter(org=org)\n+            .exists()\n+        )\n+        has_course_admin_role = (\n+            UserBasedRole(user=user, role=CourseInstructorRole.ROLE)\n+            .courses_with_role()\n+            .filter(org=org)\n+            .exists()\n+        )\n         return is_course_creator or has_org_staff_role or has_course_staff_role or has_course_admin_role\n+\n     else:\n         # EDUCATOR-1924: DISABLE_LIBRARY_CREATION overrides DISABLE_COURSE_CREATION, if present.\n         disable_library_creation = settings.FEATURES.get('DISABLE_LIBRARY_CREATION', None)\n@@ -108,12 +154,8 @@ def library_handler(request, library_key_string=None):\n         raise Http404  # Should never happen because we test the feature in urls.py also\n \n     if request.method == 'POST':\n-        if not user_can_create_library(request.user):\n-            return HttpResponseForbidden()\n-\n         if library_key_string is not None:\n             return HttpResponseNotAllowed((\"POST\",))\n-\n         return _create_library(request)\n \n     else:"
        },
        {
          "filename": "cms/djangoapps/contentstore/views/tests/test_library.py",
          "status": "modified",
          "additions": 25,
          "deletions": 14,
          "patch": "@@ -59,55 +59,66 @@ def setUp(self):\n     @mock.patch(\"cms.djangoapps.contentstore.views.library.LIBRARIES_ENABLED\", False)\n     def test_library_creator_status_libraries_not_enabled(self):\n         _, nostaff_user = self.create_non_staff_authed_user_client()\n-        self.assertEqual(user_can_create_library(nostaff_user), False)\n+        self.assertEqual(user_can_create_library(nostaff_user, None), False)\n \n     # When creator group is disabled, non-staff users can create libraries\n     @mock.patch(\"cms.djangoapps.contentstore.views.library.LIBRARIES_ENABLED\", True)\n     def test_library_creator_status_with_no_course_creator_role(self):\n         _, nostaff_user = self.create_non_staff_authed_user_client()\n-        self.assertEqual(user_can_create_library(nostaff_user), True)\n+        self.assertEqual(user_can_create_library(nostaff_user, 'An Org'), True)\n \n     # When creator group is enabled, Non staff users cannot create libraries\n     @mock.patch(\"cms.djangoapps.contentstore.views.library.LIBRARIES_ENABLED\", True)\n     def test_library_creator_status_for_enabled_creator_group_setting_for_non_staff_users(self):\n         _, nostaff_user = self.create_non_staff_authed_user_client()\n         with mock.patch.dict('django.conf.settings.FEATURES', {\"ENABLE_CREATOR_GROUP\": True}):\n-            self.assertEqual(user_can_create_library(nostaff_user), False)\n+            self.assertEqual(user_can_create_library(nostaff_user, None), False)\n \n-    # Global staff can create libraries\n+    # Global staff can create libraries for any org, even ones that don't exist.\n     @mock.patch(\"cms.djangoapps.contentstore.views.library.LIBRARIES_ENABLED\", True)\n     def test_library_creator_status_with_is_staff_user(self):\n-        self.assertEqual(user_can_create_library(self.user), True)\n+        print(self.user.is_staff)\n+        self.assertEqual(user_can_create_library(self.user, 'aNyOrg'), True)\n \n-    # When creator groups are enabled, global staff can create libraries\n+    # Global staff can create libraries for any org, but an org has to be supplied.\n+    @mock.patch(\"cms.djangoapps.contentstore.views.library.LIBRARIES_ENABLED\", True)\n+    def test_library_creator_status_with_is_staff_user_no_org(self):\n+        print(self.user.is_staff)\n+        self.assertEqual(user_can_create_library(self.user, None), False)\n+\n+    # When creator groups are enabled, global staff can create libraries in any org\n     @mock.patch(\"cms.djangoapps.contentstore.views.library.LIBRARIES_ENABLED\", True)\n     def test_library_creator_status_for_enabled_creator_group_setting_with_is_staff_user(self):\n         with mock.patch.dict('django.conf.settings.FEATURES', {\"ENABLE_CREATOR_GROUP\": True}):\n-            self.assertEqual(user_can_create_library(self.user), True)\n+            self.assertEqual(user_can_create_library(self.user, 'RandomOrg'), True)\n \n-    # When creator groups are enabled, course creators can create libraries\n+    # When creator groups are enabled, course creators can create libraries in any org.\n     @mock.patch(\"cms.djangoapps.contentstore.views.library.LIBRARIES_ENABLED\", True)\n     def test_library_creator_status_with_course_creator_role_for_enabled_creator_group_setting(self):\n         _, nostaff_user = self.create_non_staff_authed_user_client()\n         with mock.patch.dict('django.conf.settings.FEATURES', {\"ENABLE_CREATOR_GROUP\": True}):\n             grant_course_creator_status(self.user, nostaff_user)\n-            self.assertEqual(user_can_create_library(nostaff_user), True)\n+            self.assertEqual(user_can_create_library(nostaff_user, 'soMeRandOmoRg'), True)\n \n     # When creator groups are enabled, course staff members can create libraries\n+    # but only in the org they are course staff for.\n     @mock.patch(\"cms.djangoapps.contentstore.views.library.LIBRARIES_ENABLED\", True)\n     def test_library_creator_status_with_course_staff_role_for_enabled_creator_group_setting(self):\n         _, nostaff_user = self.create_non_staff_authed_user_client()\n         with mock.patch.dict('django.conf.settings.FEATURES', {\"ENABLE_CREATOR_GROUP\": True}):\n             auth.add_users(self.user, CourseStaffRole(self.course.id), nostaff_user)\n-            self.assertEqual(user_can_create_library(nostaff_user), True)\n+            self.assertEqual(user_can_create_library(nostaff_user, self.course.org), True)\n+            self.assertEqual(user_can_create_library(nostaff_user, 'SomEOtherOrg'), False)\n \n     # When creator groups are enabled, course instructor members can create libraries\n+     # but only in the org they are course staff for.\n     @mock.patch(\"cms.djangoapps.contentstore.views.library.LIBRARIES_ENABLED\", True)\n     def test_library_creator_status_with_course_instructor_role_for_enabled_creator_group_setting(self):\n         _, nostaff_user = self.create_non_staff_authed_user_client()\n         with mock.patch.dict('django.conf.settings.FEATURES', {\"ENABLE_CREATOR_GROUP\": True}):\n             auth.add_users(self.user, CourseInstructorRole(self.course.id), nostaff_user)\n-            self.assertEqual(user_can_create_library(nostaff_user), True)\n+            self.assertEqual(user_can_create_library(nostaff_user, self.course.org), True)\n+            self.assertEqual(user_can_create_library(nostaff_user, 'SomEOtherOrg'), False)\n \n     @ddt.data(\n         (False, False, True),\n@@ -131,7 +142,7 @@ def test_library_creator_status_settings(self, disable_course, disable_library,\n                     \"DISABLE_LIBRARY_CREATION\": disable_library\n                 }\n             ):\n-                self.assertEqual(user_can_create_library(nostaff_user), expected_status)\n+                self.assertEqual(user_can_create_library(nostaff_user, 'SomEOrg'), expected_status)\n \n     @mock.patch.dict('django.conf.settings.FEATURES', {'DISABLE_COURSE_CREATION': True})\n     @mock.patch(\"cms.djangoapps.contentstore.views.library.LIBRARIES_ENABLED\", True)\n@@ -140,7 +151,7 @@ def test_library_creator_status_with_no_course_creator_role_and_disabled_nonstaf\n         Ensure that `DISABLE_COURSE_CREATION` feature works with libraries as well.\n         \"\"\"\n         nostaff_client, nostaff_user = self.create_non_staff_authed_user_client()\n-        self.assertFalse(user_can_create_library(nostaff_user))\n+        self.assertFalse(user_can_create_library(nostaff_user, 'SomEOrg'))\n \n         # To be explicit, this user can GET, but not POST\n         get_response = nostaff_client.get_json(LIBRARY_REST_URL)\n@@ -251,7 +262,7 @@ def test_lib_create_permission_course_staff_role(self):\n         auth.add_users(self.user, CourseStaffRole(self.course.id), ns_user)\n         self.assertTrue(auth.user_has_role(ns_user, CourseStaffRole(self.course.id)))\n         response = self.client.ajax_post(LIBRARY_REST_URL, {\n-            'org': 'org', 'library': 'lib', 'display_name': \"New Library\",\n+            'org': self.course.org, 'library': 'lib', 'display_name': \"New Library\",\n         })\n         self.assertEqual(response.status_code, 200)\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "755bf9809127988c0278fe5aef2b7c80aa34b742",
            "date": "2025-01-14T16:56:51Z",
            "author_login": "PKulkoRaccoonGang"
          },
          {
            "sha": "511b440045d650666ae1f3bf0ba5bf47d29b376b",
            "date": "2025-01-14T14:44:53Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "952c297941d87cfa26c8c081a1d5b4622360e583",
            "date": "2025-01-14T14:37:16Z",
            "author_login": "pdpinch"
          },
          {
            "sha": "51c99c5a23a5dcee579d2e84bccf55ea7d42b6c6",
            "date": "2025-01-14T14:04:32Z",
            "author_login": "pdpinch"
          },
          {
            "sha": "ad4ef9f1d3d54170eb4b70b1f834e48612312dc8",
            "date": "2025-01-14T13:59:11Z",
            "author_login": "pdpinch"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-284",
    "description": "The Open edX Platform is a learning management platform. Instructors can upload csv files containing learner information to create cohorts in the instructor dashboard. These files are uploaded using the django default storage. With certain storage backends, uploads may become publicly available when the uploader uses versions master, palm, olive, nutmeg, maple, lilac, koa, or juniper. The patch in commit cb729a3ced0404736dfa0ae768526c82b608657b ensures that cohorts data uploaded to AWS S3 buckets is written with a private ACL. Beyond patching, deployers should also ensure that existing cohorts uploads have a private ACL, or that other precautions are taken to avoid public access.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-25T15:15:11.210",
    "last_modified": "2024-11-21T09:33:06.713",
    "fix_date": "2024-07-25T14:12:57Z"
  },
  "references": [
    {
      "url": "https://github.com/openedx/edx-platform/commit/cb729a3ced0404736dfa0ae768526c82b608657b",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/openedx/edx-platform/security/advisories/GHSA-4528-7fh6-x75c",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/openedx/edx-platform/commit/cb729a3ced0404736dfa0ae768526c82b608657b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/openedx/edx-platform/security/advisories/GHSA-4528-7fh6-x75c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.519270",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "edx-platform",
    "owner": "openedx",
    "created_at": "2013-05-30T20:20:38Z",
    "updated_at": "2025-01-14T16:56:56Z",
    "pushed_at": "2025-01-14T17:05:41Z",
    "size": 2250207,
    "stars": 7533,
    "forks": 3907,
    "open_issues": 407,
    "watchers": 7533,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "2u/project-theseus",
      "2u/release"
    ],
    "languages": {
      "Python": 27708607,
      "JavaScript": 6758062,
      "HTML": 2928663,
      "SCSS": 1319958,
      "CSS": 182838,
      "Shell": 15985,
      "Makefile": 9413,
      "ASL": 7611,
      "ActionScript": 3539,
      "Dockerfile": 1850,
      "Jinja": 732,
      "Mustache": 15
    },
    "commit_activity": {
      "total_commits_last_year": 1824,
      "avg_commits_per_week": 35.07692307692308,
      "days_active_last_year": 269
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T17:46:24.608185"
  }
}