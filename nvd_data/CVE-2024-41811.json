{
  "cve_id": "CVE-2024-41811",
  "github_data": {
    "repository": "Icinga/ipl-web",
    "fix_commit": "492336fdb57a5bb0881ed642ab36f5841337571e",
    "related_commits": [
      "492336fdb57a5bb0881ed642ab36f5841337571e"
    ],
    "patch_url": "https://github.com/Icinga/ipl-web/commit/492336fdb57a5bb0881ed642ab36f5841337571e.patch",
    "fix_commit_details": {
      "sha": "492336fdb57a5bb0881ed642ab36f5841337571e",
      "commit_date": "2024-07-26T13:15:21Z",
      "author": {
        "login": "nilmerg",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "CsrfCounterMeasure: Only validate transmitted tokens",
        "length": 52,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 127,
        "additions": 102,
        "deletions": 25
      },
      "files": [
        {
          "filename": "src/Common/CsrfCounterMeasure.php",
          "status": "modified",
          "additions": 33,
          "deletions": 25,
          "patch": "@@ -2,13 +2,14 @@\n \n namespace ipl\\Web\\Common;\n \n+use Error;\n use ipl\\Html\\Contract\\FormElement;\n-use ipl\\Html\\Form;\n+use ipl\\Html\\FormElement\\HiddenElement;\n \n trait CsrfCounterMeasure\n {\n     /**\n-     * Create a form element to counter measure CSRF attacks\n+     * Create a form element to countermeasure CSRF attacks\n      *\n      * @param string $uniqueId A unique ID that persists through different requests\n      *\n@@ -21,28 +22,35 @@ protected function createCsrfCounterMeasure($uniqueId)\n         $seed = random_bytes(16);\n         $token = base64_encode($seed) . '|' . hash($hashAlgo, $uniqueId . $seed);\n \n-        /** @var Form $this */\n-        return $this->createElement(\n-            'hidden',\n-            'CSRFToken',\n-            [\n-                'ignore'        => true,\n-                'required'      => true,\n-                'value'         => $token,\n-                'validators'    => ['Callback' => function ($token) use ($uniqueId, $hashAlgo) {\n-                    if (strpos($token, '|') === false) {\n-                        die('Invalid CSRF token provided');\n-                    }\n-\n-                    list($seed, $hash) = explode('|', $token);\n-\n-                    if ($hash !== hash($hashAlgo, $uniqueId . base64_decode($seed))) {\n-                        die('Invalid CSRF token provided');\n-                    }\n-\n-                    return true;\n-                }]\n-            ]\n-        );\n+        $options = [\n+            'ignore'        => true,\n+            'required'      => true,\n+            'validators'    => ['Callback' => function ($token) use ($uniqueId, $hashAlgo) {\n+                if (empty($token) || strpos($token, '|') === false) {\n+                    throw new Error('Invalid CSRF token provided');\n+                }\n+\n+                list($seed, $hash) = explode('|', $token);\n+\n+                if ($hash !== hash($hashAlgo, $uniqueId . base64_decode($seed))) {\n+                    throw new Error('Invalid CSRF token provided');\n+                }\n+\n+                return true;\n+            }]\n+        ];\n+\n+        $element = new class ('CSRFToken', $options) extends HiddenElement {\n+            public function hasValue(): bool\n+            {\n+                return true; // The validator must run even if the value is empty\n+            }\n+        };\n+\n+        $element->getAttributes()->registerAttributeCallback('value', function () use ($token) {\n+            return $token;\n+        });\n+\n+        return $element;\n     }\n }"
        },
        {
          "filename": "tests/Common/CsrfCounterMeasureTest.php",
          "status": "added",
          "additions": 69,
          "deletions": 0,
          "patch": "@@ -0,0 +1,69 @@\n+<?php\n+\n+namespace ipl\\Tests\\Web\\Common;\n+\n+use ipl\\Html\\Contract\\FormElement;\n+use ipl\\Html\\Form;\n+use ipl\\Html\\FormElement\\HiddenElement;\n+use ipl\\Tests\\Web\\TestCase;\n+use ipl\\Web\\Common\\CsrfCounterMeasure;\n+\n+class CsrfCounterMeasureTest extends TestCase\n+{\n+    public function testTokenCreation()\n+    {\n+        $token = $this->createElement();\n+\n+        $this->assertInstanceOf(HiddenElement::class, $token);\n+        $this->assertMatchesRegularExpression(\n+            '/ value=\"[^\"]+\\|[^\"]+\"/',\n+            (string) $token,\n+            'The value is not rendered or does not contain a seed and a hash'\n+        );\n+    }\n+\n+    public function testMissingToken()\n+    {\n+        $token = $this->createElement();\n+\n+        $this->assertNull($token->getValue(), 'The default value must only be set after the form is rendered');\n+\n+        $this->expectError();\n+        $this->expectErrorMessage('Invalid CSRF token provided');\n+\n+        $token->isValid();\n+    }\n+\n+    public function testValidToken()\n+    {\n+        $token = $this->createElement();\n+\n+        $this->assertSame(1, preg_match('/ value=\"([^\"]+)\"/', (string) $token, $matches));\n+\n+        $token->setValue($matches[1]);\n+        $this->assertTrue($token->isValid(), 'Token should be valid with the default value');\n+    }\n+\n+    public function testInvalidToken()\n+    {\n+        $token = $this->createElement();\n+\n+        $token->setValue('invalid');\n+\n+        $this->expectError();\n+        $this->expectErrorMessage('Invalid CSRF token provided');\n+\n+        $token->isValid();\n+    }\n+\n+    private function createElement(): FormElement\n+    {\n+        $form = new class extends Form {\n+            use CsrfCounterMeasure {\n+                createCsrfCounterMeasure as public;\n+            }\n+        };\n+\n+        return $form->createCsrfCounterMeasure('uniqueId');\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "003c51bc459e1b8f0386c5de66fbd7d0371eadf8",
            "date": "2024-11-25T13:27:49Z",
            "author_login": "sukhwinder33445"
          },
          {
            "sha": "e880e10f145e083128b2bac26a0f77065640c0d0",
            "date": "2024-11-21T11:30:15Z",
            "author_login": "sukhwinder33445"
          },
          {
            "sha": "a116f184b1a419a2cf54c4a810db7cbe5f4a9c9a",
            "date": "2024-10-31T13:53:15Z",
            "author_login": "sukhwinder33445"
          },
          {
            "sha": "f449fa78a03c0269180630dfcccce18d888bec00",
            "date": "2024-10-24T11:30:54Z",
            "author_login": "raviks789"
          },
          {
            "sha": "e0918ebc0a82f9d5b326cf56e60c7f8e47f6496b",
            "date": "2024-10-07T14:22:42Z",
            "author_login": "nilmerg"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-352",
    "description": "ipl/web is a set of common web components for php projects. Some of the recent development by Icinga is, under certain circumstances, susceptible to cross site request forgery. (CSRF). All affected products, in any version, will be unaffected by this once `icinga-php-library` is upgraded. Version 0.10.1 includes a fix for this. It will be published as part of the `icinga-php-library` v0.14.1 release.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-08-05T21:15:38.673",
    "last_modified": "2024-08-06T16:30:24.547",
    "fix_date": "2024-07-26T13:15:21Z"
  },
  "references": [
    {
      "url": "https://github.com/Icinga/ipl-web/commit/492336fdb57a5bb0881ed642ab36f5841337571e",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Icinga/ipl-web/security/advisories/GHSA-w9pg-7c3h-fc8j",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.533539",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ipl-web",
    "owner": "Icinga",
    "created_at": "2018-11-20T15:04:50Z",
    "updated_at": "2024-12-09T15:55:30Z",
    "pushed_at": "2024-12-09T15:57:02Z",
    "size": 1440,
    "stars": 2,
    "forks": 1,
    "open_issues": 13,
    "watchers": 2,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "PHP": 359545,
      "JavaScript": 148335,
      "Less": 50975,
      "CSS": 1344
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T18:45:49.565918"
  }
}