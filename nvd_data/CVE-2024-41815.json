{
  "cve_id": "CVE-2024-41815",
  "github_data": {
    "repository": "starship/starship",
    "fix_commit": "cfc58161e0ec595db90af686ad77a73df6d44d74",
    "related_commits": [
      "cfc58161e0ec595db90af686ad77a73df6d44d74",
      "cfc58161e0ec595db90af686ad77a73df6d44d74"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "cfc58161e0ec595db90af686ad77a73df6d44d74",
      "commit_date": "2024-07-26T17:31:41Z",
      "author": {
        "login": "davidkna",
        "type": "User",
        "stats": {
          "total_commits": 351,
          "average_weekly_commits": 1.1508196721311474,
          "total_additions": 44376,
          "total_deletions": 52064,
          "weeks_active": 165
        }
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 53,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 105,
        "additions": 85,
        "deletions": 20
      },
      "files": [
        {
          "filename": ".github/config-schema.json",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -6444,6 +6444,10 @@\n         \"ignore_timeout\": {\n           \"default\": false,\n           \"type\": \"boolean\"\n+        },\n+        \"unsafe_no_escape\": {\n+          \"default\": false,\n+          \"type\": \"boolean\"\n         }\n       },\n       \"additionalProperties\": false"
        },
        {
          "filename": "docs/config/README.md",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -4756,11 +4756,12 @@ If you have an interesting example not covered there, feel free to share it ther\n \n :::\n \n-::: warning Command output is printed unescaped to the prompt\n+::: warning If `unsafe_no_escape` is enabled or prior to starship v1.20 command output is printed unescaped to the prompt.\n \n Whatever output the command generates is printed unmodified in the prompt. This means if the output\n-contains special sequences that are interpreted by your shell they will be expanded when displayed.\n-These special sequences are shell specific, e.g. you can write a command module that writes bash sequences,\n+contains shell-specific interpretable sequences, they could be interpreted on display.\n+Depending on the shell, this can mean that e.g. strings enclosed by backticks are executed by the shell.\n+Such sequences are usually shell specific, e.g. you can write a command module that writes bash sequences,\n e.g. `\\h`, but this module will not work in a fish or zsh shell.\n \n Format strings can also contain shell specific prompt sequences, e.g.\n@@ -4778,6 +4779,7 @@ Format strings can also contain shell specific prompt sequences, e.g.\n | `require_repo`      | `false`                         | If `true`, the module will only be shown in paths containing a (git) repository. This option alone is not sufficient display condition in absence of other options.                                                                                                                           |\n | `shell`             |                                 | [See below](#custom-command-shell)                                                                                                                                                                                                                                                            |\n | `description`       | `'<custom module>'`             | The description of the module that is shown when running `starship explain`.                                                                                                                                                                                                                  |\n+| `unsafe_no_escape`  | `false`                         | When set, command output is not escaped of characters that could be interpreted by the shell.                                                                                                                                                                                                 |\n | `detect_files`      | `[]`                            | The files that will be searched in the working directory for a match.                                                                                                                                                                                                                         |\n | `detect_folders`    | `[]`                            | The directories that will be searched in the working directory for a match.                                                                                                                                                                                                                   |\n | `detect_extensions` | `[]`                            | The extensions that will be searched in the working directory for a match.                                                                                                                                                                                                                    |"
        },
        {
          "filename": "src/configs/custom.rs",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -30,6 +30,7 @@ pub struct CustomConfig<'a> {\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub use_stdin: Option<bool>,\n     pub ignore_timeout: bool,\n+    pub unsafe_no_escape: bool,\n }\n \n impl<'a> Default for CustomConfig<'a> {\n@@ -50,6 +51,7 @@ impl<'a> Default for CustomConfig<'a> {\n             os: None,\n             use_stdin: None,\n             ignore_timeout: false,\n+            unsafe_no_escape: false,\n         }\n     }\n }"
        },
        {
          "filename": "src/modules/custom.rs",
          "status": "modified",
          "additions": 74,
          "deletions": 17,
          "patch": "@@ -59,30 +59,38 @@ pub fn module<'a>(name: &str, context: &'a Context) -> Option<Module<'a>> {\n         }\n     }\n \n-    let parsed = StringFormatter::new(config.format).and_then(|formatter| {\n-        formatter\n+    let variables_closure = |variable: &str| match variable {\n+        \"output\" => {\n+            let output = exec_command(config.command, context, &config)?;\n+            let trimmed = output.trim();\n+\n+            if trimmed.is_empty() {\n+                None\n+            } else {\n+                Some(Ok(trimmed.to_string()))\n+            }\n+        }\n+        _ => None,\n+    };\n+\n+    let parsed = StringFormatter::new(config.format).and_then(|mut formatter| {\n+        formatter = formatter\n             .map_meta(|var, _| match var {\n                 \"symbol\" => Some(config.symbol),\n                 _ => None,\n             })\n             .map_style(|variable| match variable {\n                 \"style\" => Some(Ok(config.style)),\n                 _ => None,\n-            })\n-            .map_no_escaping(|variable| match variable {\n-                \"output\" => {\n-                    let output = exec_command(config.command, context, &config)?;\n-                    let trimmed = output.trim();\n-\n-                    if trimmed.is_empty() {\n-                        None\n-                    } else {\n-                        Some(Ok(trimmed.to_string()))\n-                    }\n-                }\n-                _ => None,\n-            })\n-            .parse(None, Some(context))\n+            });\n+\n+        if config.unsafe_no_escape {\n+            formatter = formatter.map_no_escaping(variables_closure)\n+        } else {\n+            formatter = formatter.map(variables_closure)\n+        }\n+\n+        formatter.parse(None, Some(context))\n     });\n \n     match parsed {\n@@ -244,6 +252,11 @@ fn exec_when(cmd: &str, config: &CustomConfig, context: &Context) -> bool {\n fn exec_command(cmd: &str, context: &Context, config: &CustomConfig) -> Option<String> {\n     log::trace!(\"Running '{cmd}'\");\n \n+    #[cfg(test)]\n+    if cmd == \"__starship_to_be_escaped\" {\n+        return Some(\"`to_be_escaped`\".to_string());\n+    }\n+\n     if let Some(output) = shell_command(cmd, config, context) {\n         if !output.status.success() {\n             log::trace!(\"Non-zero exit code '{:?}'\", output.status.code());\n@@ -298,6 +311,7 @@ fn handle_shell(command: &mut Command, shell: &str, shell_args: &[&str]) -> bool\n mod tests {\n     use super::*;\n \n+    use crate::context::Shell;\n     use crate::test::{fixture_repo, FixtureProvider, ModuleRenderer};\n     use nu_ansi_term::Color;\n     use std::fs::File;\n@@ -761,4 +775,47 @@ mod tests {\n         assert_eq!(expected, actual);\n         repo_dir.close()\n     }\n+\n+    #[test]\n+    fn output_is_escaped() -> io::Result<()> {\n+        let dir = tempfile::tempdir()?;\n+\n+        let actual = ModuleRenderer::new(\"custom.test\")\n+            .path(dir.path())\n+            .config(toml::toml! {\n+                [custom.test]\n+                format = \"$output\"\n+                command = \"__starship_to_be_escaped\"\n+                when = true\n+                ignore_timeout = true\n+            })\n+            .shell(Shell::Bash)\n+            .collect();\n+        let expected = Some(\"\\\\`to_be_escaped\\\\`\".to_string());\n+        assert_eq!(expected, actual);\n+\n+        dir.close()\n+    }\n+\n+    #[test]\n+    fn unsafe_no_escape() -> io::Result<()> {\n+        let dir = tempfile::tempdir()?;\n+\n+        let actual = ModuleRenderer::new(\"custom.test\")\n+            .path(dir.path())\n+            .config(toml::toml! {\n+                [custom.test]\n+                format = \"$output\"\n+                command = \"__starship_to_be_escaped\"\n+                when = true\n+                ignore_timeout = true\n+                unsafe_no_escape = true\n+            })\n+            .shell(Shell::Bash)\n+            .collect();\n+        let expected = Some(\"`to_be_escaped`\".to_string());\n+        assert_eq!(expected, actual);\n+\n+        dir.close()\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b8256340137846751e40b9f965f7196e12f67766",
            "date": "2025-01-22T04:33:16Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "0150e763cb704a04006697eccca06bc01cf234eb",
            "date": "2025-01-22T02:55:30Z",
            "author_login": "davidkna"
          },
          {
            "sha": "03f67eff686e970c048c6291a6ee62ad08cb9350",
            "date": "2025-01-20T21:25:25Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "6ff9b05fc136b3edb44d4823ab14c24fc83f6201",
            "date": "2025-01-20T05:15:12Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "9bab8af8f70781d7c91d213298423320b18e48f7",
            "date": "2025-01-20T05:13:36Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-77",
    "description": "Starship is a cross-shell prompt. Starting in version 1.0.0 and prior to version 1.20.0, undocumented and unpredictable shell expansion and/or quoting rules make it easily to accidentally cause shell injection when using custom commands with starship in bash. This issue only affects users with custom commands, so the scope is limited, and without knowledge of others' commands, it could be hard to successfully target someone. Version 1.20.0 fixes the vulnerability.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-07-26T21:15:14.370",
    "last_modified": "2024-11-21T09:33:07.663",
    "fix_date": "2024-07-26T17:31:41Z"
  },
  "references": [
    {
      "url": "https://github.com/starship/starship/commit/cfc58161e0ec595db90af686ad77a73df6d44d74",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/starship/starship/releases/tag/v1.20.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/starship/starship/security/advisories/GHSA-vx24-x4mv-vwr5",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/starship/starship/commit/cfc58161e0ec595db90af686ad77a73df6d44d74",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/starship/starship/releases/tag/v1.20.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/starship/starship/security/advisories/GHSA-vx24-x4mv-vwr5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.483997",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "starship",
    "owner": "starship",
    "created_at": "2019-04-02T03:23:12Z",
    "updated_at": "2025-01-26T07:36:01Z",
    "pushed_at": "2025-01-24T19:37:05Z",
    "size": 39288,
    "stars": 46727,
    "forks": 2015,
    "open_issues": 805,
    "watchers": 46727,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Rust": 1381199,
      "Shell": 41103,
      "PowerShell": 16122,
      "Lua": 2062,
      "Xonsh": 1370,
      "HTML": 1243,
      "Nu": 1161,
      "Elvish": 1073
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "isc"
    },
    "collected_at": "2025-01-26T08:02:37.064966"
  }
}