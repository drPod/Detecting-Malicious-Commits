{
  "cve_id": "CVE-2024-41942",
  "github_data": {
    "repository": "jupyterhub/jupyterhub",
    "fix_commit": "99e2720b0fc626cbeeca3c6337f917fdacfaa428",
    "related_commits": [
      "99e2720b0fc626cbeeca3c6337f917fdacfaa428",
      "ff2db557a85b6980f90c3158634bf924063ab8ba"
    ],
    "patch_url": "https://github.com/jupyterhub/jupyterhub/commit/99e2720b0fc626cbeeca3c6337f917fdacfaa428.patch",
    "fix_commit_details": {
      "sha": "99e2720b0fc626cbeeca3c6337f917fdacfaa428",
      "commit_date": "2024-07-02T09:53:30Z",
      "author": {
        "login": "minrk",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "only admins can modify admins",
        "length": 133,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 115,
        "additions": 99,
        "deletions": 16
      },
      "files": [
        {
          "filename": "jupyterhub/apihandlers/users.py",
          "status": "modified",
          "additions": 20,
          "deletions": 4,
          "patch": "@@ -186,6 +186,8 @@ async def post(self):\n         # admin is set for all users\n         # to create admin and non-admin users requires at least two API requests\n         admin = data.get('admin', False)\n+        if admin and not self.current_user.admin:\n+            raise web.HTTPError(403, \"Only admins can grant admin permissions\")\n \n         to_create = []\n         invalid_names = []\n@@ -259,12 +261,16 @@ async def post(self, user_name):\n         if user is not None:\n             raise web.HTTPError(409, \"User %s already exists\" % user_name)\n \n-        user = self.user_from_username(user_name)\n         if data:\n             self._check_user_model(data)\n-            if 'admin' in data:\n-                user.admin = data['admin']\n-                assign_default_roles(self.db, entity=user)\n+            if data.get('admin', False) and not self.current_user.admin:\n+                raise web.HTTPError(403, \"Only admins can grant admin permissions\")\n+\n+        # create the user\n+        user = self.user_from_username(user_name)\n+        if data and data.get('admin', False):\n+            user.admin = data['admin']\n+            assign_default_roles(self.db, entity=user)\n         self.db.commit()\n \n         try:\n@@ -322,7 +328,17 @@ async def patch(self, user_name):\n                     400,\n                     \"User %s already exists, username must be unique\" % data['name'],\n                 )\n+\n+        if not self.current_user.admin:\n+            if user.admin:\n+                raise web.HTTPError(403, \"Only admins can modify other admins\")\n+            if 'admin' in data and data['admin']:\n+                raise web.HTTPError(403, \"Only admins can grant admin permissions\")\n         for key, value in data.items():\n+            value_s = \"...\" if key == \"auth_state\" else repr(value)\n+            self.log.info(\n+                f\"{self.current_user.name} setting {key}={value_s} for {user.name}\"\n+            )\n             if key == 'auth_state':\n                 await user.save_auth_state(value)\n             else:"
        },
        {
          "filename": "jupyterhub/scopes.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -48,7 +48,7 @@\n         'doc_description': 'Access the admin page. Permission to take actions via the admin page granted separately.',\n     },\n     'admin:users': {\n-        'description': 'Read, write, create and delete users and their authentication state, not including their servers or tokens.',\n+        'description': 'Read, modify, create, and delete users and their authentication state, not including their servers or tokens. This is an extremely privileged scope and should be considered tantamount to superuser.',\n         'subscopes': ['admin:auth_state', 'users', 'read:roles:users', 'delete:users'],\n     },\n     'admin:auth_state': {'description': 'Read a user\u2019s authentication state.'},\n@@ -109,7 +109,7 @@\n         'subscopes': ['groups', 'read:roles:groups', 'delete:groups'],\n     },\n     'groups': {\n-        'description': 'Read and write group information, including adding/removing users to/from groups.',\n+        'description': 'Read and write group information, including adding/removing users to/from groups. Note: adding users to groups is a way of granting permissions to users of the group,and may grant _access_ to users of other groups.',\n         'subscopes': ['read:groups', 'list:groups'],\n     },\n     'list:groups': {"
        },
        {
          "filename": "jupyterhub/tests/test_api.py",
          "status": "modified",
          "additions": 77,
          "deletions": 10,
          "patch": "@@ -665,16 +665,25 @@ async def test_add_multi_user(app):\n \n @mark.user\n @mark.role\n-async def test_add_multi_user_admin(app):\n+@mark.parametrize(\"is_admin\", [True, False])\n+async def test_add_multi_user_admin(app, create_user_with_scopes, is_admin):\n     db = app.db\n+    requester = create_user_with_scopes(\"admin:users\")\n+    requester.admin = is_admin\n+    db.commit()\n     names = ['c', 'd']\n     r = await api_request(\n         app,\n         'users',\n         method='post',\n         data=json.dumps({'usernames': names, 'admin': True}),\n+        name=requester.name,\n     )\n-    assert r.status_code == 201\n+    if is_admin:\n+        assert r.status_code == 201\n+    else:\n+        assert r.status_code == 403\n+        return\n     reply = r.json()\n     r_names = [user['name'] for user in reply]\n     assert names == r_names\n@@ -712,13 +721,26 @@ async def test_add_user_duplicate(app):\n \n @mark.user\n @mark.role\n-async def test_add_admin(app):\n+@mark.parametrize(\"is_admin\", [True, False])\n+async def test_add_admin(app, create_user_with_scopes, is_admin):\n     db = app.db\n     name = 'newadmin'\n+    user = create_user_with_scopes(\"admin:users\")\n+    user.admin = is_admin\n+    db.commit()\n     r = await api_request(\n-        app, 'users', name, method='post', data=json.dumps({'admin': True})\n+        app,\n+        'users',\n+        name,\n+        method='post',\n+        data=json.dumps({'admin': True}),\n+        name=user.name,\n     )\n-    assert r.status_code == 201\n+    if is_admin:\n+        assert r.status_code == 201\n+    else:\n+        assert r.status_code == 403\n+        return\n     user = find_user(db, name)\n     assert user is not None\n     assert user.name == name\n@@ -738,9 +760,14 @@ async def test_delete_user(app):\n \n @mark.user\n @mark.role\n-async def test_make_admin(app):\n+@mark.parametrize(\"is_admin\", [True, False])\n+async def test_user_make_admin(app, create_user_with_scopes, is_admin):\n     db = app.db\n-    name = 'admin2'\n+    requester = create_user_with_scopes('admin:users')\n+    requester.admin = is_admin\n+    db.commit()\n+\n+    name = new_username(\"make_admin\")\n     r = await api_request(app, 'users', name, method='post')\n     assert r.status_code == 201\n     user = find_user(db, name)\n@@ -751,10 +778,18 @@ async def test_make_admin(app):\n     assert orm.Role.find(db, 'admin') not in user.roles\n \n     r = await api_request(\n-        app, 'users', name, method='patch', data=json.dumps({'admin': True})\n+        app,\n+        'users',\n+        name,\n+        method='patch',\n+        data=json.dumps({'admin': True}),\n+        name=requester.name,\n     )\n-\n-    assert r.status_code == 200\n+    if is_admin:\n+        assert r.status_code == 200\n+    else:\n+        assert r.status_code == 403\n+        return\n     user = find_user(db, name)\n     assert user is not None\n     assert user.name == name\n@@ -763,6 +798,38 @@ async def test_make_admin(app):\n     assert orm.Role.find(db, 'admin') in user.roles\n \n \n+@mark.user\n+@mark.parametrize(\"requester_is_admin\", [True, False])\n+@mark.parametrize(\"user_is_admin\", [True, False])\n+async def test_user_set_name(\n+    app, user, create_user_with_scopes, requester_is_admin, user_is_admin\n+):\n+    db = app.db\n+    requester = create_user_with_scopes('admin:users')\n+    requester.admin = requester_is_admin\n+    user.admin = user_is_admin\n+    db.commit()\n+    new_name = new_username()\n+\n+    r = await api_request(\n+        app,\n+        'users',\n+        user.name,\n+        method='patch',\n+        data=json.dumps({'name': new_name}),\n+        name=requester.name,\n+    )\n+    if requester_is_admin or not user_is_admin:\n+        assert r.status_code == 200\n+    else:\n+        assert r.status_code == 403\n+        return\n+    renamed = find_user(db, new_name)\n+    assert renamed is not None\n+    assert renamed.name == new_name\n+    assert renamed.id == user.id\n+\n+\n @mark.user\n async def test_set_auth_state(app, auth_state_enabled):\n     auth_state = {'secret': 'hello'}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8f9723f0a7f0eb3d2b7481eec9ef08e6de44a54d",
            "date": "2025-01-09T08:21:52Z",
            "author_login": "minrk"
          },
          {
            "sha": "8391d1d5cf4d6431c5ad8cdbca3866a43f103227",
            "date": "2025-01-09T08:21:26Z",
            "author_login": "minrk"
          },
          {
            "sha": "7a76cfd89d43540921a73a4e6227a171fe82283c",
            "date": "2025-01-08T22:47:29Z",
            "author_login": "manics"
          },
          {
            "sha": "4d574123615fff6c9d7fb72439ccc80feb9e71c7",
            "date": "2025-01-08T16:28:06Z",
            "author_login": "agoose77"
          },
          {
            "sha": "3003b8482ad46e9a402495f611db7f1a3f293849",
            "date": "2025-01-07T08:02:48Z",
            "author_login": "minrk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-274",
    "description": "JupyterHub is software that allows one to create a multi-user server for Jupyter notebooks. Prior to versions 4.1.6 and 5.1.0, if a user is granted the `admin:users` scope, they may escalate their own privileges by making themselves a full admin user. The impact is relatively small in that `admin:users` is already an extremely privileged scope only granted to trusted users.\nIn effect, `admin:users` is equivalent to `admin=True`, which is not intended. Note that the change here only prevents escalation to the built-in JupyterHub admin role that has unrestricted permissions. It does not prevent users with e.g. `groups` permissions from granting themselves or other users permissions via group membership, which is intentional. Versions 4.1.6 and 5.1.0 fix this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-08T15:15:17.527",
    "last_modified": "2024-08-12T15:53:27.457",
    "fix_date": "2024-07-02T09:53:30Z"
  },
  "references": [
    {
      "url": "https://github.com/jupyterhub/jupyterhub/commit/99e2720b0fc626cbeeca3c6337f917fdacfaa428",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/jupyterhub/commit/ff2db557a85b6980f90c3158634bf924063ab8ba",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/jupyterhub/security/advisories/GHSA-9x4q-3gxw-849f",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.543290",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jupyterhub",
    "owner": "jupyterhub",
    "created_at": "2014-06-12T23:22:10Z",
    "updated_at": "2025-01-14T02:17:19Z",
    "pushed_at": "2025-01-09T08:21:54Z",
    "size": 33681,
    "stars": 7871,
    "forks": 2034,
    "open_issues": 185,
    "watchers": 7871,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 1576154,
      "JavaScript": 117662,
      "HTML": 40763,
      "SCSS": 6141,
      "Dockerfile": 5999,
      "CSS": 4430,
      "Shell": 3105,
      "Mako": 494
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T17:08:24.448274"
  }
}