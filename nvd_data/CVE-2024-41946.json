{
  "cve_id": "CVE-2024-41946",
  "github_data": {
    "repository": "ruby/rexml",
    "fix_commit": "033d1909a8f259d5a7c53681bcaf14f13bcf0368",
    "related_commits": [
      "033d1909a8f259d5a7c53681bcaf14f13bcf0368"
    ],
    "patch_url": "https://github.com/ruby/rexml/commit/033d1909a8f259d5a7c53681bcaf14f13bcf0368.patch",
    "fix_commit_details": {
      "sha": "033d1909a8f259d5a7c53681bcaf14f13bcf0368",
      "commit_date": "2024-08-01T00:20:31Z",
      "author": {
        "login": "naitoh",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add support for XML entity expansion limitation in SAX and pull parsers (#187)",
        "length": 241,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 234,
        "additions": 222,
        "deletions": 12
      },
      "files": [
        {
          "filename": "lib/rexml/parsers/baseparser.rb",
          "status": "modified",
          "additions": 18,
          "deletions": 1,
          "patch": "@@ -154,13 +154,15 @@ def initialize( source )\n         self.stream = source\n         @listeners = []\n         @prefixes = Set.new\n+        @entity_expansion_count = 0\n       end\n \n       def add_listener( listener )\n         @listeners << listener\n       end\n \n       attr_reader :source\n+      attr_reader :entity_expansion_count\n \n       def stream=( source )\n         @source = SourceFactory.create_from( source )\n@@ -513,7 +515,9 @@ def pull_event\n       def entity( reference, entities )\n         value = nil\n         value = entities[ reference ] if entities\n-        if not value\n+        if value\n+          record_entity_expansion\n+        else\n           value = DEFAULT_ENTITIES[ reference ]\n           value = value[2] if value\n         end\n@@ -552,12 +556,17 @@ def unnormalize( string, entities=nil, filter=nil )\n         }\n         matches.collect!{|x|x[0]}.compact!\n         if matches.size > 0\n+          sum = 0\n           matches.each do |entity_reference|\n             unless filter and filter.include?(entity_reference)\n               entity_value = entity( entity_reference, entities )\n               if entity_value\n                 re = Private::DEFAULT_ENTITIES_PATTERNS[entity_reference] || /&#{entity_reference};/\n                 rv.gsub!( re, entity_value )\n+                sum += rv.bytesize\n+                if sum > Security.entity_expansion_text_limit\n+                  raise \"entity expansion has grown too large\"\n+                end\n               else\n                 er = DEFAULT_ENTITIES[entity_reference]\n                 rv.gsub!( er[0], er[2] ) if er\n@@ -570,6 +579,14 @@ def unnormalize( string, entities=nil, filter=nil )\n       end\n \n       private\n+\n+      def record_entity_expansion\n+        @entity_expansion_count += 1\n+        if @entity_expansion_count > Security.entity_expansion_limit\n+          raise \"number of entity expansions exceeded, processing aborted.\"\n+        end\n+      end\n+\n       def need_source_encoding_update?(xml_declaration_encoding)\n         return false if xml_declaration_encoding.nil?\n         return false if /\\AUTF-16\\z/i =~ xml_declaration_encoding"
        },
        {
          "filename": "lib/rexml/parsers/pullparser.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -47,6 +47,10 @@ def add_listener( listener )\n         @listeners << listener\n       end\n \n+      def entity_expansion_count\n+        @parser.entity_expansion_count\n+      end\n+\n       def each\n         while has_next?\n           yield self.pull"
        },
        {
          "filename": "lib/rexml/parsers/sax2parser.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -22,6 +22,10 @@ def source\n         @parser.source\n       end\n \n+      def entity_expansion_count\n+        @parser.entity_expansion_count\n+      end\n+\n       def add_listener( listener )\n         @parser.add_listener( listener )\n       end"
        },
        {
          "filename": "test/test_document.rb",
          "status": "modified",
          "additions": 14,
          "deletions": 11,
          "patch": "@@ -41,7 +41,7 @@ def teardown\n \n       class GeneralEntityTest < self\n         def test_have_value\n-          xml = <<EOF\n+          xml = <<XML\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!DOCTYPE member [\n   <!ENTITY a \"&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;\">\n@@ -55,23 +55,24 @@ def test_have_value\n <member>\n &a;\n </member>\n-EOF\n+XML\n \n           doc = REXML::Document.new(xml)\n-          assert_raise(RuntimeError) do\n+          assert_raise(RuntimeError.new(\"entity expansion has grown too large\")) do\n             doc.root.children.first.value\n           end\n+\n           REXML::Security.entity_expansion_limit = 100\n           assert_equal(100, REXML::Security.entity_expansion_limit)\n           doc = REXML::Document.new(xml)\n-          assert_raise(RuntimeError) do\n+          assert_raise(RuntimeError.new(\"number of entity expansions exceeded, processing aborted.\")) do\n             doc.root.children.first.value\n           end\n           assert_equal(101, doc.entity_expansion_count)\n         end\n \n         def test_empty_value\n-          xml = <<EOF\n+          xml = <<XML\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!DOCTYPE member [\n   <!ENTITY a \"&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;\">\n@@ -85,23 +86,24 @@ def test_empty_value\n <member>\n &a;\n </member>\n-EOF\n+XML\n \n           doc = REXML::Document.new(xml)\n-          assert_raise(RuntimeError) do\n+          assert_raise(RuntimeError.new(\"number of entity expansions exceeded, processing aborted.\")) do\n             doc.root.children.first.value\n           end\n+\n           REXML::Security.entity_expansion_limit = 100\n           assert_equal(100, REXML::Security.entity_expansion_limit)\n           doc = REXML::Document.new(xml)\n-          assert_raise(RuntimeError) do\n+          assert_raise(RuntimeError.new(\"number of entity expansions exceeded, processing aborted.\")) do\n             doc.root.children.first.value\n           end\n           assert_equal(101, doc.entity_expansion_count)\n         end\n \n         def test_with_default_entity\n-          xml = <<EOF\n+          xml = <<XML\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!DOCTYPE member [\n   <!ENTITY a \"a\">\n@@ -112,14 +114,15 @@ def test_with_default_entity\n &a2;\n &lt;\n </member>\n-EOF\n+XML\n \n           REXML::Security.entity_expansion_limit = 4\n           doc = REXML::Document.new(xml)\n           assert_equal(\"\\na\\na a\\n<\\n\", doc.root.children.first.value)\n+\n           REXML::Security.entity_expansion_limit = 3\n           doc = REXML::Document.new(xml)\n-          assert_raise(RuntimeError) do\n+          assert_raise(RuntimeError.new(\"number of entity expansions exceeded, processing aborted.\")) do\n             doc.root.children.first.value\n           end\n         end"
        },
        {
          "filename": "test/test_pullparser.rb",
          "status": "modified",
          "additions": 96,
          "deletions": 0,
          "patch": "@@ -155,5 +155,101 @@ def test_peek\n       end\n       assert_equal( 0, names.length )\n     end\n+\n+    class EntityExpansionLimitTest < Test::Unit::TestCase\n+      def setup\n+        @default_entity_expansion_limit = REXML::Security.entity_expansion_limit\n+      end\n+\n+      def teardown\n+        REXML::Security.entity_expansion_limit = @default_entity_expansion_limit\n+      end\n+\n+      class GeneralEntityTest < self\n+        def test_have_value\n+          source = <<-XML\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE member [\n+  <!ENTITY a \"&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;\">\n+  <!ENTITY b \"&c;&c;&c;&c;&c;&c;&c;&c;&c;&c;\">\n+  <!ENTITY c \"&d;&d;&d;&d;&d;&d;&d;&d;&d;&d;\">\n+  <!ENTITY d \"&e;&e;&e;&e;&e;&e;&e;&e;&e;&e;\">\n+  <!ENTITY e \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\">\n+]>\n+<member>\n+&a;\n+</member>\n+          XML\n+\n+          parser = REXML::Parsers::PullParser.new(source)\n+          assert_raise(RuntimeError.new(\"entity expansion has grown too large\")) do\n+            while parser.has_next?\n+              parser.pull\n+            end\n+          end\n+        end\n+\n+        def test_empty_value\n+          source = <<-XML\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE member [\n+  <!ENTITY a \"&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;\">\n+  <!ENTITY b \"&c;&c;&c;&c;&c;&c;&c;&c;&c;&c;\">\n+  <!ENTITY c \"&d;&d;&d;&d;&d;&d;&d;&d;&d;&d;\">\n+  <!ENTITY d \"&e;&e;&e;&e;&e;&e;&e;&e;&e;&e;\">\n+  <!ENTITY e \"\">\n+]>\n+<member>\n+&a;\n+</member>\n+          XML\n+\n+          parser = REXML::Parsers::PullParser.new(source)\n+          assert_raise(RuntimeError.new(\"number of entity expansions exceeded, processing aborted.\")) do\n+            while parser.has_next?\n+              parser.pull\n+            end\n+          end\n+\n+          REXML::Security.entity_expansion_limit = 100\n+          parser = REXML::Parsers::PullParser.new(source)\n+          assert_raise(RuntimeError.new(\"number of entity expansions exceeded, processing aborted.\")) do\n+            while parser.has_next?\n+              parser.pull\n+            end\n+          end\n+          assert_equal(101, parser.entity_expansion_count)\n+        end\n+\n+        def test_with_default_entity\n+          source = <<-XML\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE member [\n+  <!ENTITY a \"a\">\n+  <!ENTITY a2 \"&a; &a;\">\n+]>\n+<member>\n+&a;\n+&a2;\n+&lt;\n+</member>\n+          XML\n+\n+          REXML::Security.entity_expansion_limit = 4\n+          parser = REXML::Parsers::PullParser.new(source)\n+          while parser.has_next?\n+            parser.pull\n+          end\n+\n+          REXML::Security.entity_expansion_limit = 3\n+          parser = REXML::Parsers::PullParser.new(source)\n+          assert_raise(RuntimeError.new(\"number of entity expansions exceeded, processing aborted.\")) do\n+            while parser.has_next?\n+              parser.pull\n+            end\n+          end\n+        end\n+      end\n+    end\n   end\n end"
        },
        {
          "filename": "test/test_sax.rb",
          "status": "modified",
          "additions": 86,
          "deletions": 0,
          "patch": "@@ -99,6 +99,92 @@ def test_sax2\n       end\n     end\n \n+    class EntityExpansionLimitTest < Test::Unit::TestCase\n+      def setup\n+        @default_entity_expansion_limit = REXML::Security.entity_expansion_limit\n+      end\n+\n+      def teardown\n+        REXML::Security.entity_expansion_limit = @default_entity_expansion_limit\n+      end\n+\n+      class GeneralEntityTest < self\n+        def test_have_value\n+          source = <<-XML\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE member [\n+  <!ENTITY a \"&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;\">\n+  <!ENTITY b \"&c;&c;&c;&c;&c;&c;&c;&c;&c;&c;\">\n+  <!ENTITY c \"&d;&d;&d;&d;&d;&d;&d;&d;&d;&d;\">\n+  <!ENTITY d \"&e;&e;&e;&e;&e;&e;&e;&e;&e;&e;\">\n+  <!ENTITY e \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\">\n+]>\n+<member>\n+&a;\n+</member>\n+          XML\n+\n+          sax = REXML::Parsers::SAX2Parser.new(source)\n+          assert_raise(RuntimeError.new(\"entity expansion has grown too large\")) do\n+            sax.parse\n+          end\n+        end\n+\n+        def test_empty_value\n+          source = <<-XML\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE member [\n+  <!ENTITY a \"&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;\">\n+  <!ENTITY b \"&c;&c;&c;&c;&c;&c;&c;&c;&c;&c;\">\n+  <!ENTITY c \"&d;&d;&d;&d;&d;&d;&d;&d;&d;&d;\">\n+  <!ENTITY d \"&e;&e;&e;&e;&e;&e;&e;&e;&e;&e;\">\n+  <!ENTITY e \"\">\n+]>\n+<member>\n+&a;\n+</member>\n+          XML\n+\n+          sax = REXML::Parsers::SAX2Parser.new(source)\n+          assert_raise(RuntimeError.new(\"number of entity expansions exceeded, processing aborted.\")) do\n+            sax.parse\n+          end\n+\n+          REXML::Security.entity_expansion_limit = 100\n+          sax = REXML::Parsers::SAX2Parser.new(source)\n+          assert_raise(RuntimeError.new(\"number of entity expansions exceeded, processing aborted.\")) do\n+            sax.parse\n+          end\n+          assert_equal(101, sax.entity_expansion_count)\n+        end\n+\n+        def test_with_default_entity\n+          source = <<-XML\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE member [\n+  <!ENTITY a \"a\">\n+  <!ENTITY a2 \"&a; &a;\">\n+]>\n+<member>\n+&a;\n+&a2;\n+&lt;\n+</member>\n+          XML\n+\n+          REXML::Security.entity_expansion_limit = 4\n+          sax = REXML::Parsers::SAX2Parser.new(source)\n+          sax.parse\n+\n+          REXML::Security.entity_expansion_limit = 3\n+          sax = REXML::Parsers::SAX2Parser.new(source)\n+          assert_raise(RuntimeError.new(\"number of entity expansions exceeded, processing aborted.\")) do\n+            sax.parse\n+          end\n+        end\n+      end\n+    end\n+\n     # used by test_simple_doctype_listener\n     # submitted by Jeff Barczewski\n     class SimpleDoctypeListener"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b70388c2638d90ebd2ae471bd85239d8469b8e62",
            "date": "2024-12-20T22:59:47Z",
            "author_login": "naitoh"
          },
          {
            "sha": "bb0bedd25dbb69b247b0894a6c357f8903a2b9a2",
            "date": "2024-12-19T02:18:52Z",
            "author_login": "naitoh"
          },
          {
            "sha": "a1d875b23340df6b33d3bbe6b17cca807eb0e3d2",
            "date": "2024-12-15T02:19:55Z",
            "author_login": "kou"
          },
          {
            "sha": "19d8ebfbcfb3816fdad050baa74da40d6f04ffac",
            "date": "2024-12-15T02:18:54Z",
            "author_login": "kou"
          },
          {
            "sha": "dfc775343b3b4aec4c046b9df17bbe571612a861",
            "date": "2024-12-15T02:14:48Z",
            "author_login": "kou"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-400",
    "description": "REXML is an XML toolkit for Ruby. The REXML gem 3.3.2 has a DoS vulnerability when it parses an XML that has many entity expansions with SAX2 or pull parser API. The REXML gem 3.3.3 or later include the patch to fix the vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-01T15:15:14.100",
    "last_modified": "2024-09-05T16:09:45.503",
    "fix_date": "2024-08-01T00:20:31Z"
  },
  "references": [
    {
      "url": "https://github.com/ruby/rexml/commit/033d1909a8f259d5a7c53681bcaf14f13bcf0368",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ruby/rexml/security/advisories/GHSA-5866-49gr-22v4",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.ruby-lang.org/en/news/2008/08/23/dos-vulnerability-in-rexml",
      "source": "security-advisories@github.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://www.ruby-lang.org/en/news/2024/08/01/dos-rexml-cve-2024-41946",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.518907",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rexml",
    "owner": "ruby",
    "created_at": "2018-05-31T03:11:12Z",
    "updated_at": "2024-12-20T22:59:51Z",
    "pushed_at": "2024-12-20T23:00:03Z",
    "size": 3978,
    "stars": 141,
    "forks": 70,
    "open_issues": 17,
    "watchers": 141,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Ruby": 677583,
      "XSLT": 13913,
      "Scilab": 745
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-2-clause"
    },
    "collected_at": "2025-01-14T16:29:57.965078"
  }
}