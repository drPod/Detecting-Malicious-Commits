{
  "cve_id": "CVE-2024-41950",
  "github_data": {
    "repository": "deepset-ai/haystack",
    "fix_commit": "3fed1366c448b02189851bf08166c1f6477a02b0",
    "related_commits": [
      "3fed1366c448b02189851bf08166c1f6477a02b0",
      "6c25a5c73e83aa32c3241ba84a5cbb3ac0e8a89e"
    ],
    "patch_url": "https://github.com/deepset-ai/haystack/commit/3fed1366c448b02189851bf08166c1f6477a02b0.patch",
    "fix_commit_details": {
      "sha": "3fed1366c448b02189851bf08166c1f6477a02b0",
      "commit_date": "2024-07-26T14:02:09Z",
      "author": {
        "login": "silvanocerza",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: Fix issue that could lead to RCE if using unsecure Jinja templates (#8095)",
        "length": 249,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 163,
        "additions": 83,
        "deletions": 80
      },
      "files": [
        {
          "filename": "haystack/components/builders/chat_prompt_builder.py",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -4,7 +4,8 @@\n \n from typing import Any, Dict, List, Optional, Set\n \n-from jinja2 import Template, meta\n+from jinja2 import meta\n+from jinja2.sandbox import SandboxedEnvironment\n \n from haystack import component, default_from_dict, default_to_dict, logging\n from haystack.dataclasses.chat_message import ChatMessage, ChatRole\n@@ -123,12 +124,12 @@ def __init__(\n         self.required_variables = required_variables or []\n         self.template = template\n         variables = variables or []\n+        self._env = SandboxedEnvironment()\n         if template and not variables:\n             for message in template:\n                 if message.is_from(ChatRole.USER) or message.is_from(ChatRole.SYSTEM):\n                     # infere variables from template\n-                    msg_template = Template(message.content)\n-                    ast = msg_template.environment.parse(message.content)\n+                    ast = self._env.parse(message.content)\n                     template_variables = meta.find_undeclared_variables(ast)\n                     variables += list(template_variables)\n \n@@ -194,7 +195,8 @@ def run(\n         for message in template:\n             if message.is_from(ChatRole.USER) or message.is_from(ChatRole.SYSTEM):\n                 self._validate_variables(set(template_variables_combined.keys()))\n-                compiled_template = Template(message.content)\n+\n+                compiled_template = self._env.from_string(message.content)\n                 rendered_content = compiled_template.render(template_variables_combined)\n                 rendered_message = (\n                     ChatMessage.from_user(rendered_content)"
        },
        {
          "filename": "haystack/components/builders/prompt_builder.py",
          "status": "modified",
          "additions": 8,
          "deletions": 5,
          "patch": "@@ -4,7 +4,8 @@\n \n from typing import Any, Dict, List, Optional, Set\n \n-from jinja2 import Template, meta\n+from jinja2 import meta\n+from jinja2.sandbox import SandboxedEnvironment\n \n from haystack import component, default_to_dict\n \n@@ -158,10 +159,12 @@ def __init__(\n         self._variables = variables\n         self._required_variables = required_variables\n         self.required_variables = required_variables or []\n-        self.template = Template(template)\n+\n+        self._env = SandboxedEnvironment()\n+        self.template = self._env.from_string(template)\n         if not variables:\n             # infere variables from template\n-            ast = self.template.environment.parse(template)\n+            ast = self._env.parse(template)\n             template_variables = meta.find_undeclared_variables(ast)\n             variables = list(template_variables)\n \n@@ -216,8 +219,8 @@ def run(self, template: Optional[str] = None, template_variables: Optional[Dict[\n         self._validate_variables(set(template_variables_combined.keys()))\n \n         compiled_template = self.template\n-        if isinstance(template, str):\n-            compiled_template = Template(template)\n+        if template is not None:\n+            compiled_template = self._env.from_string(template)\n \n         result = compiled_template.render(template_variables_combined)\n         return {\"prompt\": result}"
        },
        {
          "filename": "haystack/components/converters/output_adapter.py",
          "status": "modified",
          "additions": 18,
          "deletions": 12,
          "patch": "@@ -2,11 +2,13 @@\n #\n # SPDX-License-Identifier: Apache-2.0\n \n+import ast\n+import contextlib\n from typing import Any, Callable, Dict, Optional, Set\n \n import jinja2.runtime\n from jinja2 import TemplateSyntaxError, meta\n-from jinja2.nativetypes import NativeEnvironment\n+from jinja2.sandbox import SandboxedEnvironment\n from typing_extensions import TypeAlias\n \n from haystack import component, default_from_dict, default_to_dict\n@@ -58,18 +60,18 @@ def __init__(self, template: str, output_type: TypeAlias, custom_filters: Option\n \n         # Create a Jinja native environment, we need it to:\n         # a) add custom filters to the environment for filter compilation stage\n-        env = NativeEnvironment()\n+        self._env = SandboxedEnvironment(undefined=jinja2.runtime.StrictUndefined)\n         try:\n-            env.parse(template)  # Validate template syntax\n+            self._env.parse(template)  # Validate template syntax\n             self.template = template\n         except TemplateSyntaxError as e:\n             raise ValueError(f\"Invalid Jinja template '{template}': {e}\") from e\n \n         for name, filter_func in self.custom_filters.items():\n-            env.filters[name] = filter_func\n+            self._env.filters[name] = filter_func\n \n         # b) extract variables in the template\n-        route_input_names = self._extract_variables(env)\n+        route_input_names = self._extract_variables(self._env)\n         input_types.update(route_input_names)\n \n         # the env is not needed, discarded automatically\n@@ -92,16 +94,22 @@ def run(self, **kwargs):\n         # check if kwargs are empty\n         if not kwargs:\n             raise ValueError(\"No input data provided for output adaptation\")\n-        env = NativeEnvironment()\n         for name, filter_func in self.custom_filters.items():\n-            env.filters[name] = filter_func\n+            self._env.filters[name] = filter_func\n         adapted_outputs = {}\n         try:\n-            adapted_output_template = env.from_string(self.template)\n+            adapted_output_template = self._env.from_string(self.template)\n             output_result = adapted_output_template.render(**kwargs)\n             if isinstance(output_result, jinja2.runtime.Undefined):\n                 raise OutputAdaptationException(f\"Undefined variable in the template {self.template}; kwargs: {kwargs}\")\n \n+            # We suppress the exception in case the output is already a string, otherwise\n+            # we try to evaluate it and would fail.\n+            # This must be done cause the output could be different literal structures.\n+            # This doesn't support any user types.\n+            with contextlib.suppress(Exception):\n+                output_result = ast.literal_eval(output_result)\n+\n             adapted_outputs[\"output\"] = output_result\n         except Exception as e:\n             raise OutputAdaptationException(f\"Error adapting {self.template} with {kwargs}: {e}\") from e\n@@ -135,14 +143,12 @@ def from_dict(cls, data: Dict[str, Any]) -> \"OutputAdapter\":\n             init_params[\"custom_filters\"][name] = deserialize_callable(filter_func) if filter_func else None\n         return default_from_dict(cls, data)\n \n-    def _extract_variables(self, env: NativeEnvironment) -> Set[str]:\n+    def _extract_variables(self, env: SandboxedEnvironment) -> Set[str]:\n         \"\"\"\n         Extracts all variables from a list of Jinja template strings.\n \n         :param env: A Jinja native environment.\n         :return: A set of variable names extracted from the template strings.\n         \"\"\"\n-        variables = set()\n         ast = env.parse(self.template)\n-        variables.update(meta.find_undeclared_variables(ast))\n-        return variables\n+        return meta.find_undeclared_variables(ast)"
        },
        {
          "filename": "haystack/components/routers/conditional_router.py",
          "status": "modified",
          "additions": 17,
          "deletions": 10,
          "patch": "@@ -2,10 +2,13 @@\n #\n # SPDX-License-Identifier: Apache-2.0\n \n+import ast\n+import contextlib\n from typing import Any, Callable, Dict, List, Optional, Set\n \n from jinja2 import Environment, TemplateSyntaxError, meta\n from jinja2.nativetypes import NativeEnvironment\n+from jinja2.sandbox import SandboxedEnvironment\n \n from haystack import component, default_from_dict, default_to_dict, logging\n from haystack.utils import deserialize_callable, deserialize_type, serialize_callable, serialize_type\n@@ -125,16 +128,16 @@ def __init__(self, routes: List[Dict], custom_filters: Optional[Dict[str, Callab\n         self.custom_filters = custom_filters or {}\n \n         # Create a Jinja native environment to inspect variables in the condition templates\n-        env = NativeEnvironment()\n-        env.filters.update(self.custom_filters)\n+        self._env = SandboxedEnvironment()\n+        self._env.filters.update(self.custom_filters)\n \n         # Inspect the routes to determine input and output types.\n         input_types: Set[str] = set()  # let's just store the name, type will always be Any\n         output_types: Dict[str, str] = {}\n \n         for route in routes:\n             # extract inputs\n-            route_input_names = self._extract_variables(env, [route[\"output\"], route[\"condition\"]])\n+            route_input_names = self._extract_variables(self._env, [route[\"output\"], route[\"condition\"]])\n             input_types.update(route_input_names)\n \n             # extract outputs\n@@ -194,16 +197,20 @@ def run(self, **kwargs):\n             routes.\n         \"\"\"\n         # Create a Jinja native environment to evaluate the condition templates as Python expressions\n-        env = NativeEnvironment()\n-        env.filters.update(self.custom_filters)\n-\n         for route in self.routes:\n             try:\n-                t = env.from_string(route[\"condition\"])\n-                if t.render(**kwargs):\n+                t = self._env.from_string(route[\"condition\"])\n+                rendered = t.render(**kwargs)\n+                if ast.literal_eval(rendered):\n                     # We now evaluate the `output` expression to determine the route output\n-                    t_output = env.from_string(route[\"output\"])\n+                    t_output = self._env.from_string(route[\"output\"])\n                     output = t_output.render(**kwargs)\n+                    # We suppress the exception in case the output is already a string, otherwise\n+                    # we try to evaluate it and would fail.\n+                    # This must be done cause the output could be different literal structures.\n+                    # This doesn't support any user types.\n+                    with contextlib.suppress(Exception):\n+                        output = ast.literal_eval(output)\n                     # and return the output as a dictionary under the output_name key\n                     return {route[\"output_name\"]: output}\n             except Exception as e:\n@@ -234,7 +241,7 @@ def _validate_routes(self, routes: List[Dict]):\n                 if not self._validate_template(env, route[field]):\n                     raise ValueError(f\"Invalid template for field '{field}': {route[field]}\")\n \n-    def _extract_variables(self, env: NativeEnvironment, templates: List[str]) -> Set[str]:\n+    def _extract_variables(self, env: SandboxedEnvironment, templates: List[str]) -> Set[str]:\n         \"\"\"\n         Extracts all variables from a list of Jinja template strings.\n "
        },
        {
          "filename": "haystack/core/pipeline/template.py",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -6,7 +6,8 @@\n from pathlib import Path\n from typing import Any, Dict, Optional, Union\n \n-from jinja2 import Environment, PackageLoader, TemplateSyntaxError, meta\n+from jinja2 import PackageLoader, TemplateSyntaxError, meta\n+from jinja2.sandbox import SandboxedEnvironment\n \n TEMPLATE_FILE_EXTENSION = \".yaml.jinja2\"\n TEMPLATE_HOME_DIR = Path(__file__).resolve().parent / \"predefined\"\n@@ -74,7 +75,7 @@ def __init__(self, template_content: str):\n \n         :param template_content: The raw template source to use in the template.\n         \"\"\"\n-        env = Environment(\n+        env = SandboxedEnvironment(\n             loader=PackageLoader(\"haystack.core.pipeline\", \"predefined\"), trim_blocks=True, lstrip_blocks=True\n         )\n         try:"
        },
        {
          "filename": "releasenotes/notes/fix-jinja-env-81c98225b22dc827.yaml",
          "status": "added",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -0,0 +1,14 @@\n+---\n+upgrade:\n+  - |\n+    `OutputAdapter` and `ConditionalRouter` can't return users inputs anymore.\n+security:\n+  - |\n+    Fix issue that could lead to remote code execution when using insecure Jinja template in the following Components:\n+\n+    - `PromptBuilder`\n+    - `ChatPromptBuilder`\n+    - `OutputAdapter`\n+    - `ConditionalRouter`\n+\n+    The same issue has been fixed in the `PipelineTemplate` class too."
        },
        {
          "filename": "test/components/routers/test_conditional_router.py",
          "status": "modified",
          "additions": 17,
          "deletions": 47,
          "patch": "@@ -97,7 +97,23 @@ def test_router_initialized(self, routes):\n         assert set(router.__haystack_input__._sockets_dict.keys()) == {\"query\", \"streams\"}\n         assert set(router.__haystack_output__._sockets_dict.keys()) == {\"query\", \"streams\"}\n \n-    def test_router_evaluate_condition_expressions(self, router):\n+    def test_router_evaluate_condition_expressions(self):\n+        router = ConditionalRouter(\n+            [\n+                {\n+                    \"condition\": \"{{streams|length < 2}}\",\n+                    \"output\": \"{{query}}\",\n+                    \"output_type\": str,\n+                    \"output_name\": \"query\",\n+                },\n+                {\n+                    \"condition\": \"{{streams|length >= 2}}\",\n+                    \"output\": \"{{streams}}\",\n+                    \"output_type\": List[int],\n+                    \"output_name\": \"streams\",\n+                },\n+            ]\n+        )\n         # first route should be selected\n         kwargs = {\"streams\": [1, 2, 3], \"query\": \"test\"}\n         result = router.run(**kwargs)\n@@ -227,52 +243,6 @@ def test_router_de_serialization(self):\n         # check that the result is the same and correct\n         assert result1 == result2 and result1 == {\"streams\": [1, 2, 3]}\n \n-    def test_router_de_serialization_user_type(self):\n-        routes = [\n-            {\n-                \"condition\": \"{{streams|length < 2}}\",\n-                \"output\": \"{{message}}\",\n-                \"output_type\": ChatMessage,\n-                \"output_name\": \"message\",\n-            },\n-            {\n-                \"condition\": \"{{streams|length >= 2}}\",\n-                \"output\": \"{{streams}}\",\n-                \"output_type\": List[int],\n-                \"output_name\": \"streams\",\n-            },\n-        ]\n-        router = ConditionalRouter(routes)\n-        router_dict = router.to_dict()\n-\n-        # assert that the router dict is correct, with all keys and values being strings\n-        for route in router_dict[\"init_parameters\"][\"routes\"]:\n-            for key in route.keys():\n-                assert isinstance(key, str)\n-                assert isinstance(route[key], str)\n-\n-        # check that the output_type is a string and a proper class name\n-        assert (\n-            router_dict[\"init_parameters\"][\"routes\"][0][\"output_type\"]\n-            == \"haystack.dataclasses.chat_message.ChatMessage\"\n-        )\n-\n-        # deserialize the router\n-        new_router = ConditionalRouter.from_dict(router_dict)\n-\n-        # check that the output_type is the right class\n-        assert new_router.routes[0][\"output_type\"] == ChatMessage\n-        assert router.routes == new_router.routes\n-\n-        # now use both routers to run the same message\n-        message = ChatMessage.from_user(\"ciao\")\n-        kwargs = {\"streams\": [1], \"message\": message}\n-        result1 = router.run(**kwargs)\n-        result2 = new_router.run(**kwargs)\n-\n-        # check that the result is the same and correct\n-        assert result1 == result2 and result1[\"message\"].content == message.content\n-\n     def test_router_serialization_idempotence(self):\n         routes = [\n             {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "425ce9b98f9f277c8fc14d8a468b0962f968a5e8",
            "date": "2025-01-14T15:47:29Z",
            "author_login": "davidsbatista"
          },
          {
            "sha": "34bd31ef3265b58703aff994120deff24c24a2bd",
            "date": "2025-01-14T11:27:31Z",
            "author_login": "davidsbatista"
          },
          {
            "sha": "ed40d9f001ed78b070bacd700509b495aa09a8de",
            "date": "2025-01-13T14:23:33Z",
            "author_login": "HaystackBot"
          },
          {
            "sha": "ec8666545df69db7709fc9bc9e3d1e0aa122fca0",
            "date": "2025-01-13T10:46:34Z",
            "author_login": "davidsbatista"
          },
          {
            "sha": "d147c7658f85a23677a7a25714a954c5b3bffc98",
            "date": "2025-01-13T10:15:33Z",
            "author_login": "vblagoje"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-1336",
    "description": "Haystack is an end-to-end LLM framework that allows you to build applications powered by LLMs, Transformer models, vector search and more. Haystack clients that let their users create and run Pipelines from scratch are vulnerable to remote code executions. Certain Components in Haystack use Jinja2 templates, if anyone can create and render that template on the client machine they run any code. The vulnerability has been fixed with Haystack `2.3.1`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-07-31T16:15:04.797",
    "last_modified": "2024-08-01T12:42:36.933",
    "fix_date": "2024-07-26T14:02:09Z"
  },
  "references": [
    {
      "url": "https://github.com/deepset-ai/haystack/commit/3fed1366c448b02189851bf08166c1f6477a02b0",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/deepset-ai/haystack/commit/6c25a5c73e83aa32c3241ba84a5cbb3ac0e8a89e",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/deepset-ai/haystack/pull/8095",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/deepset-ai/haystack/pull/8096",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/deepset-ai/haystack/releases/tag/v2.3.1",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/deepset-ai/haystack/security/advisories/GHSA-hx9v-6r9f-w677",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.513941",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "haystack",
    "owner": "deepset-ai",
    "created_at": "2019-11-14T09:05:28Z",
    "updated_at": "2025-01-14T17:26:19Z",
    "pushed_at": "2025-01-14T17:45:53Z",
    "size": 45024,
    "stars": 18591,
    "forks": 1998,
    "open_issues": 114,
    "watchers": 18591,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 2715623,
      "HTML": 91718,
      "Jinja": 5351,
      "Gherkin": 3355,
      "HCL": 591
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T18:54:24.216217"
  }
}