{
  "cve_id": "CVE-2024-42029",
  "github_data": {
    "repository": "hyprwm/xdg-desktop-portal-hyprland",
    "fix_commit": "0bb709491baffd69f4f861802f00cf60c77cc2cd",
    "related_commits": [
      "0bb709491baffd69f4f861802f00cf60c77cc2cd",
      "0bb709491baffd69f4f861802f00cf60c77cc2cd"
    ],
    "patch_url": "https://github.com/hyprwm/xdg-desktop-portal-hyprland/commit/0bb709491baffd69f4f861802f00cf60c77cc2cd.patch",
    "fix_commit_details": {
      "sha": "0bb709491baffd69f4f861802f00cf60c77cc2cd",
      "commit_date": "2024-07-22T11:32:39Z",
      "author": {
        "login": "vaxerski",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "core: sanitize environment and paths from user data",
        "length": 63,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 60,
        "additions": 36,
        "deletions": 24
      },
      "files": [
        {
          "filename": "src/core/PortalManager.cpp",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -41,7 +41,7 @@ static void handleOutputDone(void* data, struct wl_output* wl_output) {\n }\n \n static void handleOutputMode(void* data, struct wl_output* wl_output, uint32_t flags, int32_t width, int32_t height, int32_t refresh) {\n-    const auto POUTPUT = (SOutput*)data;\n+    const auto POUTPUT   = (SOutput*)data;\n     POUTPUT->refreshRate = std::round(refresh / 1000.0);\n }\n "
        },
        {
          "filename": "src/helpers/Log.hpp",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -3,8 +3,7 @@\n #include <iostream>\n #include <string>\n \n-enum eLogLevel\n-{\n+enum eLogLevel {\n     TRACE = 0,\n     INFO,\n     LOG,\n@@ -17,7 +16,7 @@ enum eLogLevel\n     if (!(expr)) {                                                                                                                                                                 \\\n         Debug::log(CRIT, \"\\n==========================================================================================\\nASSERTION FAILED! \\n\\n{}\\n\\nat: line {} in {}\",            \\\n                    std::format(reason, ##__VA_ARGS__), __LINE__,                                                                                                                   \\\n-                   ([]() constexpr->std::string { return std::string(__FILE__).substr(std::string(__FILE__).find_last_of('/') + 1); })().c_str());                                 \\\n+                   ([]() constexpr -> std::string { return std::string(__FILE__).substr(std::string(__FILE__).find_last_of('/') + 1); })().c_str());                               \\\n         printf(\"Assertion failed! See the log in /tmp/hypr/hyprland.log for more info.\");                                                                                          \\\n         *((int*)nullptr) = 1; /* so that we crash and get a coredump */                                                                                                            \\\n     }"
        },
        {
          "filename": "src/helpers/MiscFunctions.hpp",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,6 +3,6 @@\n #include <sdbus-c++/Message.h>\n \n std::string execAndGet(const char* cmd);\n-void addHyprlandNotification(const std::string& icon, float timeMs, const std::string& color, const std::string& message);\n-bool inShellPath(const std::string& exec);\n-void sendEmptyDbusMethodReply(sdbus::MethodCall& call, u_int32_t responseCode);\n\\ No newline at end of file\n+void        addHyprlandNotification(const std::string& icon, float timeMs, const std::string& color, const std::string& message);\n+bool        inShellPath(const std::string& exec);\n+void        sendEmptyDbusMethodReply(sdbus::MethodCall& call, u_int32_t responseCode);\n\\ No newline at end of file"
        },
        {
          "filename": "src/portals/Screencopy.cpp",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -689,7 +689,8 @@ void CScreencopyPortal::queueNextShareFrame(CScreencopyPortal::SSession* pSessio\n     Debug::log(TRACE, \"[screencopy] set fps {}, frame took {:.2f}ms, ms till next refresh {:.2f}, estimated actual fps: {:.2f}\", pSession->sharingData.framerate, FRAMETOOKMS,\n                MSTILNEXTREFRESH, std::clamp(1000.0 / FRAMETOOKMS, 1.0, (double)pSession->sharingData.framerate));\n \n-    g_pPortalManager->addTimer({std::clamp(MSTILNEXTREFRESH - 1.0 /* safezone */, 6.0, 1000.0), [pSession]() { g_pPortalManager->m_sPortals.screencopy->startFrameCopy(pSession); }});\n+    g_pPortalManager->addTimer(\n+        {std::clamp(MSTILNEXTREFRESH - 1.0 /* safezone */, 6.0, 1000.0), [pSession]() { g_pPortalManager->m_sPortals.screencopy->startFrameCopy(pSession); }});\n }\n bool CScreencopyPortal::hasToplevelCapabilities() {\n     return m_sState.toplevel;"
        },
        {
          "filename": "src/portals/Screenshot.cpp",
          "status": "modified",
          "additions": 20,
          "deletions": 9,
          "patch": "@@ -6,7 +6,9 @@\n #include <regex>\n #include <filesystem>\n \n-void pickHyprPicker(sdbus::MethodCall& call) {\n+std::string lastScreenshot;\n+\n+void        pickHyprPicker(sdbus::MethodCall& call) {\n     const std::string HYPRPICKER_CMD = \"hyprpicker --format=rgb --no-fancy\";\n     std::string       rgbColor       = execAndGet(HYPRPICKER_CMD.c_str());\n \n@@ -68,7 +70,7 @@ void pickSlurp(sdbus::MethodCall& call) {\n         maxValString             = maxValString.substr(0, maxValString.find(' '));\n         uint32_t maxVal          = std::stoi(maxValString);\n \n-        double r, g, b;\n+        double   r, g, b;\n \n         // 1 byte per triplet\n         if (maxVal < 256) {\n@@ -86,7 +88,7 @@ void pickSlurp(sdbus::MethodCall& call) {\n             b = ((byteString[4] << 8) | byteString[5]) / (maxVal * 1.0);\n         }\n \n-        auto reply = call.createReply();\n+        auto                                            reply = call.createReply();\n \n         std::unordered_map<std::string, sdbus::Variant> results;\n         results[\"color\"] = sdbus::Struct(std::tuple{r, g, b});\n@@ -133,26 +135,35 @@ void CScreenshotPortal::onScreenshot(sdbus::MethodCall& call) {\n     bool isInteractive = options.count(\"interactive\") && options[\"interactive\"].get<bool>() && inShellPath(\"slurp\");\n \n     // make screenshot\n-    const std::string HYPR_DIR             = \"/tmp/hypr/\";\n-    const std::string SNAP_FILE            = \"xdph_screenshot.png\";\n-    const std::string FILE_PATH            = HYPR_DIR + SNAP_FILE;\n-    const std::string SNAP_CMD             = \"grim \" + FILE_PATH;\n-    const std::string SNAP_INTERACTIVE_CMD = \"grim -g \\\"$(slurp)\\\" \" + FILE_PATH;\n+\n+    const auto RUNTIME_DIR = getenv(\"XDG_RUNTIME_DIR\");\n+    srand(time(nullptr));\n+\n+    const std::string                               HYPR_DIR             = RUNTIME_DIR ? std::string{RUNTIME_DIR} + \"/hypr/\" : \"/tmp/hypr/\";\n+    const std::string                               SNAP_FILE            = std::format(\"xdph_screenshot_{:x}.png\", rand()); // rand() is good enough\n+    const std::string                               FILE_PATH            = HYPR_DIR + SNAP_FILE;\n+    const std::string                               SNAP_CMD             = \"grim '\" + FILE_PATH + \"'\";\n+    const std::string                               SNAP_INTERACTIVE_CMD = \"grim -g \\\"$(slurp)\\\" '\" + FILE_PATH + \"'\";\n \n     std::unordered_map<std::string, sdbus::Variant> results;\n     results[\"uri\"] = \"file://\" + FILE_PATH;\n \n     std::filesystem::remove(FILE_PATH);\n     std::filesystem::create_directory(HYPR_DIR);\n \n+    // remove last screenshot. This could cause issues if the app hasn't read the screenshot back yet, but oh well.\n+    if (!lastScreenshot.empty())\n+        std::filesystem::remove(lastScreenshot);\n+    lastScreenshot = FILE_PATH;\n+\n     if (isInteractive)\n         execAndGet(SNAP_INTERACTIVE_CMD.c_str());\n     else\n         execAndGet(SNAP_CMD.c_str());\n \n     uint32_t responseCode = std::filesystem::exists(FILE_PATH) ? 0 : 1;\n \n-    auto reply = call.createReply();\n+    auto     reply = call.createReply();\n     reply << responseCode;\n     reply << results;\n     reply.send();"
        },
        {
          "filename": "src/portals/Screenshot.hpp",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -13,6 +13,6 @@ class CScreenshotPortal {\n   private:\n     std::unique_ptr<sdbus::IObject> m_pObject;\n \n-    const std::string INTERFACE_NAME = \"org.freedesktop.impl.portal.Screenshot\";\n-    const std::string OBJECT_PATH    = \"/org/freedesktop/portal/desktop\";\n+    const std::string               INTERFACE_NAME = \"org.freedesktop.impl.portal.Screenshot\";\n+    const std::string               OBJECT_PATH    = \"/org/freedesktop/portal/desktop\";\n };"
        },
        {
          "filename": "src/shared/ScreencopyShared.cpp",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -16,7 +16,7 @@ std::string sanitizeNameForWindowList(const std::string& name) {\n     for (size_t i = 1; i < result.size(); ++i) {\n         if (result[i - 1] == '>' && result[i] == ']')\n             result[i] = ' ';\n-        if (result[i] == '\\\"')\n+        if (result[i] == '\\\"' || result[i] == '\\'')\n             result[i] = ' ';\n     }\n     return result;\n@@ -43,8 +43,10 @@ SSelectionData promptForScreencopySelection() {\n     const char*    XCURSOR_SIZE                = getenv(\"XCURSOR_SIZE\");\n     const char*    HYPRLAND_INSTANCE_SIGNATURE = getenv(\"HYPRLAND_INSTANCE_SIGNATURE\");\n \n-    std::string    cmd =\n-        std::format(\"WAYLAND_DISPLAY={} QT_QPA_PLATFORM=\\\"wayland\\\" XCURSOR_SIZE={} HYPRLAND_INSTANCE_SIGNATURE={} XDPH_WINDOW_SHARING_LIST=\\\"{}\\\" hyprland-share-picker 2>&1\",\n+    // DANGEROUS: we are sending a list of app IDs and titles via env. Make sure it's in 'singlequotes' to avoid something like $(rm -rf /)\n+    // TODO: this is dumb, use a pipe or something.\n+    std::string cmd =\n+        std::format(\"WAYLAND_DISPLAY='{}' QT_QPA_PLATFORM='wayland' XCURSOR_SIZE='{}' HYPRLAND_INSTANCE_SIGNATURE='{}' XDPH_WINDOW_SHARING_LIST='{}' hyprland-share-picker 2>&1\",\n                     WAYLAND_DISPLAY ? WAYLAND_DISPLAY : \"\", XCURSOR_SIZE ? XCURSOR_SIZE : \"24\", HYPRLAND_INSTANCE_SIGNATURE ? HYPRLAND_INSTANCE_SIGNATURE : \"0\", buildWindowList());\n \n     const auto RETVAL = execAndGet(cmd.c_str());"
        },
        {
          "filename": "src/shared/ScreencopyShared.hpp",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -18,8 +18,7 @@ extern \"C\" {\n #define XDPH_PWR_BUFFERS_MIN 2\n #define XDPH_PWR_ALIGN       16\n \n-enum eSelectionType\n-{\n+enum eSelectionType {\n     TYPE_INVALID = -1,\n     TYPE_OUTPUT  = 0,\n     TYPE_WINDOW,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7613351375de66ca0d56689e333d460e2db05454",
            "date": "2025-01-09T11:13:23Z",
            "author_login": "checkraisefold"
          },
          {
            "sha": "d7f18dda5e511749fa1511185db3536208fb1a63",
            "date": "2024-12-22T22:29:56Z",
            "author_login": "fufexan"
          },
          {
            "sha": "fa50ab342b29f0981eab8c1ba57648d8c9d8c85c",
            "date": "2024-12-19T00:48:58Z",
            "author_login": "vaxerski"
          },
          {
            "sha": "3e884d941ca819c1f2e50df8bdae0debded1ed87",
            "date": "2024-12-17T08:08:11Z",
            "author_login": "fufexan"
          },
          {
            "sha": "7116c9fffff106e11de4c5d0c34c9d252a46d70d",
            "date": "2024-12-16T21:22:24Z",
            "author_login": "khaneliman"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-78",
    "description": "xdg-desktop-portal-hyprland (aka an XDG Desktop Portal backend for Hyprland) before 1.3.3 allows OS command execution, e.g., because single quotes are not used when sending a list of app IDs and titles via the environment.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-27T04:15:02.760",
    "last_modified": "2024-11-21T09:33:27.177",
    "fix_date": "2024-07-22T11:32:39Z"
  },
  "references": [
    {
      "url": "https://github.com/hyprwm/xdg-desktop-portal-hyprland/commit/0bb709491baffd69f4f861802f00cf60c77cc2cd",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/hyprwm/xdg-desktop-portal-hyprland/issues/242",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/hyprwm/xdg-desktop-portal-hyprland/releases/tag/v1.3.3",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/hyprwm/xdg-desktop-portal-hyprland/commit/0bb709491baffd69f4f861802f00cf60c77cc2cd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/hyprwm/xdg-desktop-portal-hyprland/issues/242",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/hyprwm/xdg-desktop-portal-hyprland/releases/tag/v1.3.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.484354",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xdg-desktop-portal-hyprland",
    "owner": "hyprwm",
    "created_at": "2022-12-03T20:44:32Z",
    "updated_at": "2025-01-12T16:37:29Z",
    "pushed_at": "2025-01-09T11:13:23Z",
    "size": 579,
    "stars": 331,
    "forks": 52,
    "open_issues": 58,
    "watchers": 331,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C++": 148410,
      "CMake": 7075,
      "Nix": 5262,
      "Meson": 4994,
      "Makefile": 179
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T18:29:17.567203"
  }
}