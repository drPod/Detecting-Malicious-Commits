{
  "cve_id": "CVE-2024-42358",
  "github_data": {
    "repository": "michaelrsweet/pdfio",
    "fix_commit": "e4e1c39578279386b0ab9f9ac14b20a8bad4f935",
    "related_commits": [
      "e4e1c39578279386b0ab9f9ac14b20a8bad4f935"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "e4e1c39578279386b0ab9f9ac14b20a8bad4f935",
      "commit_date": "2024-08-06T01:47:48Z",
      "author": {
        "login": "michaelrsweet",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 57,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 74,
        "additions": 57,
        "deletions": 17
      },
      "files": [
        {
          "filename": "CHANGES.md",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -2,6 +2,13 @@ Changes in PDFio\n ================\n \n \n+v1.3.1 (August DD, 2024)\n+------------------------\n+\n+- CVE 2024-42358: Updated TrueType font reader to avoid large memory\n+  allocations.\n+\n+\n v1.3.0 (June 28, 2024)\n ----------------------\n "
        },
        {
          "filename": "configure",
          "status": "modified",
          "additions": 12,
          "deletions": 12,
          "patch": "@@ -1,6 +1,6 @@\n #! /bin/sh\n # Guess values for system-dependent variables and create Makefiles.\n-# Generated by GNU Autoconf 2.71 for pdfio 1.3.0.\n+# Generated by GNU Autoconf 2.71 for pdfio 1.3.1.\n #\n # Report bugs to <https://github.com/michaelrsweet/pdfio/issues>.\n #\n@@ -610,8 +610,8 @@ MAKEFLAGS=\n # Identity of this package.\n PACKAGE_NAME='pdfio'\n PACKAGE_TARNAME='pdfio'\n-PACKAGE_VERSION='1.3.0'\n-PACKAGE_STRING='pdfio 1.3.0'\n+PACKAGE_VERSION='1.3.1'\n+PACKAGE_STRING='pdfio 1.3.1'\n PACKAGE_BUGREPORT='https://github.com/michaelrsweet/pdfio/issues'\n PACKAGE_URL='https://www.msweet.org/pdfio'\n \n@@ -1293,7 +1293,7 @@ if test \"$ac_init_help\" = \"long\"; then\n   # Omit some internal or obsolete options to make the list less imposing.\n   # This message is too long to be a string in the A/UX 3.1 sh.\n   cat <<_ACEOF\n-\\`configure' configures pdfio 1.3.0 to adapt to many kinds of systems.\n+\\`configure' configures pdfio 1.3.1 to adapt to many kinds of systems.\n \n Usage: $0 [OPTION]... [VAR=VALUE]...\n \n@@ -1359,7 +1359,7 @@ fi\n \n if test -n \"$ac_init_help\"; then\n   case $ac_init_help in\n-     short | recursive ) echo \"Configuration of pdfio 1.3.0:\";;\n+     short | recursive ) echo \"Configuration of pdfio 1.3.1:\";;\n    esac\n   cat <<\\_ACEOF\n \n@@ -1456,7 +1456,7 @@ fi\n test -n \"$ac_init_help\" && exit $ac_status\n if $ac_init_version; then\n   cat <<\\_ACEOF\n-pdfio configure 1.3.0\n+pdfio configure 1.3.1\n generated by GNU Autoconf 2.71\n \n Copyright (C) 2021 Free Software Foundation, Inc.\n@@ -1612,7 +1612,7 @@ cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n \n-It was created by pdfio $as_me 1.3.0, which was\n+It was created by pdfio $as_me 1.3.1, which was\n generated by GNU Autoconf 2.71.  Invocation command line was\n \n   $ $0$ac_configure_args_raw\n@@ -2368,9 +2368,9 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n-PDFIO_VERSION=\"1.3.0\"\n-PDFIO_VERSION_MAJOR=\"`echo 1.3.0 | awk -F. '{print $1}'`\"\n-PDFIO_VERSION_MINOR=\"`echo 1.3.0 | awk -F. '{printf(\"%d\\n\",$2);}'`\"\n+PDFIO_VERSION=\"1.3.1\"\n+PDFIO_VERSION_MAJOR=\"`echo 1.3.1 | awk -F. '{print $1}'`\"\n+PDFIO_VERSION_MINOR=\"`echo 1.3.1 | awk -F. '{printf(\"%d\\n\",$2);}'`\"\n \n \n \n@@ -4935,7 +4935,7 @@ cat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n # report actual input values of CONFIG_FILES etc. instead of their\n # values after options handling.\n ac_log=\"\n-This file was extended by pdfio $as_me 1.3.0, which was\n+This file was extended by pdfio $as_me 1.3.1, which was\n generated by GNU Autoconf 2.71.  Invocation command line was\n \n   CONFIG_FILES    = $CONFIG_FILES\n@@ -4991,7 +4991,7 @@ ac_cs_config_escaped=`printf \"%s\\n\" \"$ac_cs_config\" | sed \"s/^ //; s/'/'\\\\\\\\\\\\\\\\\n cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\n ac_cs_config='$ac_cs_config_escaped'\n ac_cs_version=\"\\\\\n-pdfio config.status 1.3.0\n+pdfio config.status 1.3.1\n configured by $0, generated by GNU Autoconf 2.71,\n   with options \\\\\"\\$ac_cs_config\\\\\"\n "
        },
        {
          "filename": "configure.ac",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -21,7 +21,7 @@ AC_PREREQ([2.70])\n \n \n dnl Package name and version...\n-AC_INIT([pdfio], [1.3.0], [https://github.com/michaelrsweet/pdfio/issues], [pdfio], [https://www.msweet.org/pdfio])\n+AC_INIT([pdfio], [1.3.1], [https://github.com/michaelrsweet/pdfio/issues], [pdfio], [https://www.msweet.org/pdfio])\n \n PDFIO_VERSION=\"AC_PACKAGE_VERSION\"\n PDFIO_VERSION_MAJOR=\"`echo AC_PACKAGE_VERSION | awk -F. '{print $1}'`\""
        },
        {
          "filename": "pdfio.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -23,7 +23,7 @@ extern \"C\" {\n // Version number...\n //\n \n-#  define PDFIO_VERSION\t\t\"1.3.0\"\n+#  define PDFIO_VERSION\t\t\"1.3.1\"\n \n \n //"
        },
        {
          "filename": "ttf.c",
          "status": "modified",
          "additions": 36,
          "deletions": 3,
          "patch": "@@ -3,7 +3,7 @@\n //\n //     https://github.com/michaelrsweet/ttf\n //\n-// Copyright \u00a9 2018-2023 by Michael R Sweet.\n+// Copyright \u00a9 2018-2024 by Michael R Sweet.\n //\n // Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n // information.\n@@ -99,7 +99,7 @@ typedef __int64 ssize_t;\t\t// POSIX type not present on Windows...\n //\n \n #define TTF_FONT_MAX_CHAR\t262144\t// Maximum number of character values\n-\n+#define TTF_FONT_MAX_GROUPS\t65536\t// Maximum number of sub-groups\n \n //\n // TTF/OFF tag constants...\n@@ -1285,7 +1285,14 @@ read_cmap(ttf_t *font)\t\t\t// I - Font\n //          segCount --;\t\t\t// Last segment is not used (sigh)\n \n \t  font->num_cmap = segments[segCount - 1].endCode + 1;\n-\t  font->cmap     = cmapptr = (int *)malloc(font->num_cmap * sizeof(int));\n+\n+\t  if (font->num_cmap > TTF_FONT_MAX_CHAR)\n+\t  {\n+\t    errorf(font, \"Invalid cmap table with %u characters.\", (unsigned)font->num_cmap);\n+\t    return (false);\n+\t  }\n+\n+\t  font->cmap = cmapptr = (int *)malloc(font->num_cmap * sizeof(int));\n \n \t  if (!font->cmap)\n           {\n@@ -1356,6 +1363,12 @@ read_cmap(ttf_t *font)\t\t\t// I - Font\n \n \t  TTF_DEBUG(\"read_cmap: nGroups=%u\\n\", nGroups);\n \n+\t  if (nGroups > TTF_FONT_MAX_GROUPS)\n+\t  {\n+\t    errorf(font, \"Invalid cmap table with %u groups.\", nGroups);\n+\t    return (false);\n+\t  }\n+\n \t  if ((groups = (_ttf_off_cmap12_t *)calloc(nGroups, sizeof(_ttf_off_cmap12_t))) == NULL)\n           {\n             errorf(font, \"Unable to allocate memory for cmap.\");\n@@ -1376,6 +1389,13 @@ read_cmap(ttf_t *font)\t\t\t// I - Font\n \t  // Based on the end code of the segent table, allocate space for the\n \t  // uncompressed cmap table...\n           TTF_DEBUG(\"read_cmap: num_cmap=%u\\n\", (unsigned)font->num_cmap);\n+\n+\t  if (font->num_cmap > TTF_FONT_MAX_CHAR)\n+\t  {\n+\t    errorf(font, \"Invalid cmap table with %u characters.\", (unsigned)font->num_cmap);\n+\t    return (false);\n+\t  }\n+\n \t  font->cmap = cmapptr = (int *)malloc(font->num_cmap * sizeof(int));\n \n \t  if (!font->cmap)\n@@ -1426,6 +1446,12 @@ read_cmap(ttf_t *font)\t\t\t// I - Font\n \n \t  TTF_DEBUG(\"read_cmap: nGroups=%u\\n\", nGroups);\n \n+\t  if (nGroups > TTF_FONT_MAX_GROUPS)\n+\t  {\n+\t    errorf(font, \"Invalid cmap table with %u groups.\", nGroups);\n+\t    return (false);\n+\t  }\n+\n \t  if ((groups = (_ttf_off_cmap13_t *)calloc(nGroups, sizeof(_ttf_off_cmap13_t))) == NULL)\n \t  {\n \t    errorf(font, \"Unable to allocate memory for cmap.\");\n@@ -1446,6 +1472,13 @@ read_cmap(ttf_t *font)\t\t\t// I - Font\n \t  // Based on the end code of the segent table, allocate space for the\n \t  // uncompressed cmap table...\n           TTF_DEBUG(\"read_cmap: num_cmap=%u\\n\", (unsigned)font->num_cmap);\n+\n+\t  if (font->num_cmap > TTF_FONT_MAX_CHAR)\n+\t  {\n+\t    errorf(font, \"Invalid cmap table with %u characters.\", (unsigned)font->num_cmap);\n+\t    return (false);\n+\t  }\n+\n \t  font->cmap = cmapptr = (int *)malloc(font->num_cmap * sizeof(int));\n \n \t  if (!font->cmap)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "48fe8d1bc9d56189001600065cad84cc05851886",
            "date": "2025-01-24T20:31:31Z",
            "author_login": "michaelrsweet"
          },
          {
            "sha": "a4026bfe00d9b2109eda79f74f63e8a9b76171fa",
            "date": "2025-01-24T20:30:59Z",
            "author_login": "michaelrsweet"
          },
          {
            "sha": "1e945cb7501fc48ce120e391c9e97160b596ccab",
            "date": "2025-01-24T19:44:44Z",
            "author_login": "michaelrsweet"
          },
          {
            "sha": "4cb4ceaadd2ba97b6cce800790e1ca771bff93b0",
            "date": "2025-01-24T19:42:41Z",
            "author_login": "michaelrsweet"
          },
          {
            "sha": "cca7383c73142e936aaf42d8acb797562483f760",
            "date": "2025-01-24T15:43:41Z",
            "author_login": "michaelrsweet"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.2,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-835",
    "description": "PDFio is a simple C library for reading and writing PDF files. There is a denial of service (DOS) vulnerability in the TTF parser. Maliciously crafted TTF files can cause the program to utilize 100% of the Memory and enter an infinite loop. This can also lead to a heap-buffer-overflow vulnerability. An infinite loop occurs in the read_camp function by nGroups value. The ttf.h library is vulnerable. A value called nGroups is extracted from the file, and by changing that value, you can cause the program to utilize 100% of the Memory and enter an infinite loop. If the value of nGroups in the file is small, an infinite loop will not occur. This library, whether used as a standalone binary or as part of another application, is vulnerable to DOS attacks when parsing certain types of files. Automated systems, including web servers that use this code to convert PDF submissions into plaintext, can be DOSed if an attacker uploads a malicious TTF file. This issue has been addressed in release version 1.3.1. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-06T17:15:54.103",
    "last_modified": "2024-08-12T18:50:20.967",
    "fix_date": "2024-08-06T01:47:48Z"
  },
  "references": [
    {
      "url": "https://github.com/michaelrsweet/pdfio/commit/e4e1c39578279386b0ab9f9ac14b20a8bad4f935",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/michaelrsweet/pdfio/security/advisories/GHSA-4hh9-j68x-8353",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.538121",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "pdfio",
    "owner": "michaelrsweet",
    "created_at": "2021-05-30T14:03:24Z",
    "updated_at": "2025-01-10T19:54:16Z",
    "pushed_at": "2025-01-10T19:54:13Z",
    "size": 8680,
    "stars": 213,
    "forks": 45,
    "open_issues": 11,
    "watchers": 213,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C": 631847,
      "M4": 8088,
      "Makefile": 7650,
      "Shell": 7358,
      "Batchfile": 395
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T18:29:35.004782"
  }
}