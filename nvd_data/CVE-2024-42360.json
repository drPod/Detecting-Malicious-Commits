{
  "cve_id": "CVE-2024-42360",
  "github_data": {
    "repository": "wurmlab/sequenceserver",
    "fix_commit": "457e52709f7f9ed2fceed59b3db564cb50785dba",
    "related_commits": [
      "457e52709f7f9ed2fceed59b3db564cb50785dba"
    ],
    "patch_url": "https://github.com/wurmlab/sequenceserver/commit/457e52709f7f9ed2fceed59b3db564cb50785dba.patch",
    "fix_commit_details": {
      "sha": "457e52709f7f9ed2fceed59b3db564cb50785dba",
      "commit_date": "2024-07-04T09:45:42Z",
      "author": {
        "login": "tadast",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #759 from wurmlab/tt/escaping",
        "length": 85,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 97,
        "additions": 92,
        "deletions": 5
      },
      "files": [
        {
          "filename": "lib/sequenceserver/api_errors.rb",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -52,6 +52,30 @@ def message\n     end\n   end\n \n+  # InvalidParameterError is a more generic error class that can be\n+  # raised when the frontend sends a request with an invalid parameter\n+  class InvalidParameterError < ValidationError\n+    attr_reader :more_info\n+\n+    def initialize(more_info)\n+      super\n+      @more_info = more_info\n+    end\n+\n+    def http_status\n+      422\n+    end\n+\n+    def title\n+      'Invalid parameter'\n+    end\n+\n+    def message\n+      \"The action you're trying to perform is not possible because \\\n+        one of the provided parameters is invalid.\"\n+    end\n+  end\n+\n   # API errors have an http status, title, message, and additional information\n   # like stacktrace or information from program output.\n   APIError = Class.new(Error)"
        },
        {
          "filename": "lib/sequenceserver/blast.rb",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -1,3 +1,9 @@\n require_relative 'blast/job'\n require_relative 'blast/report'\n require_relative 'blast/constants'\n+\n+module SequenceServer\n+  module BLAST\n+    VALID_SEQUENCE_ID = /\\A[a-zA-Z0-9\\-_.:*#|\\[\\]]+\\z/\n+  end\n+end"
        },
        {
          "filename": "lib/sequenceserver/database.rb",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -37,8 +37,19 @@ def initialize(*args)\n     alias path name\n \n     def retrieve(accession, coords = nil)\n+      fail(\n+        InvalidSequenceIdError,\n+        \"Invalid sequence id: #{accession}\"\n+      ) unless accession =~ SequenceServer::BLAST::VALID_SEQUENCE_ID\n+\n       cmd = \"blastdbcmd -db #{name} -entry '#{accession}'\"\n+\n       if coords\n+        fail(\n+          InvalidParameterError,\n+          \"Invalid range coordinates: #{coords}\"\n+        ) unless coords =~ /[0-9]+-[0-9]*/\n+\n         cmd << \" -range #{coords}\"\n       end\n       out, = sys(cmd, path: config[:bin])\n@@ -52,6 +63,8 @@ def retrieve(accession, coords = nil)\n     # Returns true if the database contains the given sequence id.\n     # Returns false otherwise.\n     def include?(id)\n+      fail ArgumentError, \"Invalid sequence id: #{id}\" unless id =~ SequenceServer::BLAST::VALID_SEQUENCE_ID\n+\n       cmd = \"blastdbcmd -entry '#{id}' -db #{name}\"\n       sys(cmd, path: config[:bin]) rescue false\n     end"
        },
        {
          "filename": "lib/sequenceserver/sequence.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -232,9 +232,8 @@ def validate\n           )\n         end\n \n-        valid_id_regex = /\\A[a-zA-Z0-9-_.:*#|\\[\\]]+\\z/\n         invalid_sequence_ids = sequence_ids.reject do |id|\n-          id =~ valid_id_regex\n+          id =~ SequenceServer::BLAST::VALID_SEQUENCE_ID\n         end\n \n         unless invalid_sequence_ids.empty?"
        },
        {
          "filename": "spec/database_spec.rb",
          "status": "modified",
          "additions": 47,
          "deletions": 2,
          "patch": "@@ -27,8 +27,53 @@ module SequenceServer\n       Database[id].first\n     end\n \n-    it 'knows if a given accession is in the database or not' do\n-      solenopsis_protein_database.include?('SI2.2.0_06267').should be_truthy\n+    describe '#include?' do\n+      it 'knows if a given accession is present in the database' do\n+        expect(solenopsis_protein_database).to include('SI2.2.0_06267')\n+      end\n+\n+      it 'knows if a given accession is absent in the database' do\n+        expect(solenopsis_protein_database).not_to include('LOL.2.0_404')\n+      end\n+\n+      it 'validates the id' do\n+        expect do\n+          solenopsis_protein_database.include?(\"';hi\")\n+        end.to raise_error(ArgumentError, \"Invalid sequence id: ';hi\")\n+      end\n+    end\n+\n+    describe '.retrieve' do\n+      it \"retrieves the sequence for a given accession\" do\n+        sequence = Database.retrieve(\"SI2.2.0_06267\")\n+        expect(sequence).to include('SI2.2.0_06267')\n+        expect(sequence).to include('MNTLWLSLWDYPGKL') # start of fasta sequence\n+      end\n+\n+      it \"retrieves an open sequence range for a given accession\" do\n+        sequence = Database.retrieve(\"SI2.2.0_06267:10-\")\n+        expect(sequence).to include('SI2.2.0_06267')\n+        expect(sequence).not_to include('MNTLWLSLWD') # excludes first 10 chars\n+        expect(sequence.lines[1]).to start_with('DYPGKLP') # start at an offset of 10\n+      end\n+\n+      it \"retrieves a closed sequence range for a given accession\" do\n+        sequence = Database.retrieve(\"SI2.2.0_06267:1-10\")\n+        expect(sequence).to include('SI2.2.0_06267')\n+        expect(sequence.lines.last.size).to eq(10)\n+      end\n+\n+      it \"validates the sequence id\" do\n+        expect do\n+          Database.retrieve(\"';hi\")\n+        end.to raise_error(SequenceServer::InvalidSequenceIdError)\n+      end\n+\n+      it \"validates the range\" do\n+        expect do\n+          Database.retrieve(\"SI2.2.0_06267:';hi\")\n+        end.to raise_error(SequenceServer::InvalidParameterError)\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "spec/fixtures/38334a72-e8e7-4732-872b-24d3f8723563/expected_outputs/frontend.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "345048e536f5afc9534e1f79dbdde37eee84ac6c",
            "date": "2024-12-02T10:58:47Z",
            "author_login": "joko3ono"
          },
          {
            "sha": "191affb0aefd2dc76ce5bd38c19e81512a825942",
            "date": "2024-12-02T10:38:13Z",
            "author_login": "joko3ono"
          },
          {
            "sha": "9b79a1695af789a86ecaeebe6de3263183000a87",
            "date": "2024-11-18T11:58:46Z",
            "author_login": "tadast"
          },
          {
            "sha": "d04d167db3b36d5b124af5bda69466f6e9f01615",
            "date": "2024-11-18T10:55:15Z",
            "author_login": "yannickwurm"
          },
          {
            "sha": "e4e0520d2046fdb5d1599158be733f22cb9b448b",
            "date": "2024-11-18T10:37:59Z",
            "author_login": "tadast"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-77",
    "description": "SequenceServer lets you rapidly set up a BLAST+ server with an intuitive user interface for personal or group use. Several HTTP endpoints did not properly sanitize user input and/or query parameters. This could be exploited to inject and run unwanted shell commands. This vulnerability has been fixed in 3.1.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-14T20:15:12.533",
    "last_modified": "2024-08-16T20:00:10.467",
    "fix_date": "2024-07-04T09:45:42Z"
  },
  "references": [
    {
      "url": "https://github.com/wurmlab/sequenceserver/commit/457e52709f7f9ed2fceed59b3db564cb50785dba",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/wurmlab/sequenceserver/security/advisories/GHSA-qv32-5wm2-p32h",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.346792",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sequenceserver",
    "owner": "wurmlab",
    "created_at": "2010-10-01T06:19:41Z",
    "updated_at": "2024-12-27T13:12:18Z",
    "pushed_at": "2025-01-05T13:42:01Z",
    "size": 129587,
    "stars": 274,
    "forks": 114,
    "open_issues": 90,
    "watchers": 274,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "0.8.x",
      "1.0.x",
      "master"
    ],
    "languages": {
      "JavaScript": 939367,
      "Ruby": 465441,
      "HTML": 76169,
      "CSS": 25868,
      "Dockerfile": 3553,
      "Shell": 685
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T16:40:59.174764"
  }
}