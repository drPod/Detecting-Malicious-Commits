{
  "cve_id": "CVE-2024-42368",
  "github_data": {
    "repository": "open-telemetry/opentelemetry-collector-contrib",
    "fix_commit": "c9bd3eff0bb357d9c812a0d8defd3b09db95699a",
    "related_commits": [
      "c9bd3eff0bb357d9c812a0d8defd3b09db95699a"
    ],
    "patch_url": "https://github.com/open-telemetry/opentelemetry-collector-contrib/commit/c9bd3eff0bb357d9c812a0d8defd3b09db95699a.patch",
    "fix_commit_details": {
      "sha": "c9bd3eff0bb357d9c812a0d8defd3b09db95699a",
      "commit_date": "2024-08-08T15:24:15Z",
      "author": {
        "login": "codeboten",
        "type": "User",
        "stats": {
          "total_commits": 455,
          "average_weekly_commits": 1.3150289017341041,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 93
        }
      },
      "commit_message": {
        "title": "[extension/bearertokenauth] use constant time comparison (#34516)",
        "length": 546,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 94,
        "additions": 62,
        "deletions": 32
      },
      "files": [
        {
          "filename": ".chloggen/codeboten_bearerauth-patch.yaml",
          "status": "added",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -0,0 +1,27 @@\n+# Use this changelog template to create an entry for release notes.\n+\n+# One of 'breaking', 'deprecation', 'new_component', 'enhancement', 'bug_fix'\n+change_type: enhancement\n+\n+# The name of the component, or a single word describing the area of concern, (e.g. filelogreceiver)\n+component: bearertokenauthextension\n+\n+# A brief description of the change.  Surround your text with quotes (\"\") if it needs to start with a backtick (`).\n+note: use constant time comparison\n+\n+# Mandatory: One or more tracking issues related to the change. You can use the PR number here if no issue exists.\n+issues: [34516]\n+\n+# (Optional) One or more lines of additional information to render under the primary note.\n+# These lines will be padded with 2 spaces and then inserted directly into the document.\n+# Use pipe (|) for multiline entries.\n+subtext:\n+\n+# If your change doesn't affect end users or the exported elements of any package,\n+# you should instead start your pull request title with [chore] or use the \"Skip Changelog\" label.\n+# Optional: The change log or logs in which this entry should be included.\n+# e.g. '[user]' or '[user, api]'\n+# Include 'user' if the change is relevant to end users.\n+# Include 'api' if there is a change to a library API.\n+# Default: '[user]'\n+change_logs: []"
        },
        {
          "filename": "extension/bearertokenauthextension/bearertokenauth.go",
          "status": "modified",
          "additions": 34,
          "deletions": 31,
          "patch": "@@ -5,11 +5,12 @@ package bearertokenauthextension // import \"github.com/open-telemetry/openteleme\n \n import (\n \t\"context\"\n+\t\"crypto/subtle\"\n \t\"errors\"\n \t\"fmt\"\n \t\"net/http\"\n \t\"os\"\n-\t\"sync\"\n+\t\"sync/atomic\"\n \n \t\"github.com/fsnotify/fsnotify\"\n \t\"go.opentelemetry.io/collector/component\"\n@@ -42,9 +43,8 @@ var (\n \n // BearerTokenAuth is an implementation of auth.Client. It embeds a static authorization \"bearer\" token in every rpc call.\n type BearerTokenAuth struct {\n-\tmuTokenString sync.RWMutex\n-\tscheme        string\n-\ttokenString   string\n+\tscheme                   string\n+\tauthorizationValueAtomic atomic.Value\n \n \tshutdownCH chan struct{}\n \n@@ -58,12 +58,13 @@ func newBearerTokenAuth(cfg *Config, logger *zap.Logger) *BearerTokenAuth {\n \tif cfg.Filename != \"\" && cfg.BearerToken != \"\" {\n \t\tlogger.Warn(\"a filename is specified. Configured token is ignored!\")\n \t}\n-\treturn &BearerTokenAuth{\n-\t\tscheme:      cfg.Scheme,\n-\t\ttokenString: string(cfg.BearerToken),\n-\t\tfilename:    cfg.Filename,\n-\t\tlogger:      logger,\n+\ta := &BearerTokenAuth{\n+\t\tscheme:   cfg.Scheme,\n+\t\tfilename: cfg.Filename,\n+\t\tlogger:   logger,\n \t}\n+\ta.setAuthorizationValue(string(cfg.BearerToken))\n+\treturn a\n }\n \n // Start of BearerTokenAuth does nothing and returns nil if no filename\n@@ -135,9 +136,21 @@ func (b *BearerTokenAuth) refreshToken() {\n \t\tb.logger.Error(err.Error())\n \t\treturn\n \t}\n-\tb.muTokenString.Lock()\n-\tb.tokenString = string(token)\n-\tb.muTokenString.Unlock()\n+\tb.setAuthorizationValue(string(token))\n+}\n+\n+func (b *BearerTokenAuth) setAuthorizationValue(token string) {\n+\tvalue := token\n+\tif b.scheme != \"\" {\n+\t\tvalue = b.scheme + \" \" + value\n+\t}\n+\tb.authorizationValueAtomic.Store(value)\n+}\n+\n+// authorizationValue returns the Authorization header/metadata value\n+// to set for client auth, and expected value for server auth.\n+func (b *BearerTokenAuth) authorizationValue() string {\n+\treturn b.authorizationValueAtomic.Load().(string)\n }\n \n // Shutdown of BearerTokenAuth does nothing and returns nil\n@@ -158,22 +171,15 @@ func (b *BearerTokenAuth) Shutdown(_ context.Context) error {\n // PerRPCCredentials returns PerRPCAuth an implementation of credentials.PerRPCCredentials that\n func (b *BearerTokenAuth) PerRPCCredentials() (credentials.PerRPCCredentials, error) {\n \treturn &PerRPCAuth{\n-\t\tmetadata: map[string]string{\"authorization\": b.bearerToken()},\n+\t\tmetadata: map[string]string{\"authorization\": b.authorizationValue()},\n \t}, nil\n }\n \n-func (b *BearerTokenAuth) bearerToken() string {\n-\tb.muTokenString.RLock()\n-\ttoken := fmt.Sprintf(\"%s %s\", b.scheme, b.tokenString)\n-\tb.muTokenString.RUnlock()\n-\treturn token\n-}\n-\n // RoundTripper is not implemented by BearerTokenAuth\n func (b *BearerTokenAuth) RoundTripper(base http.RoundTripper) (http.RoundTripper, error) {\n \treturn &BearerAuthRoundTripper{\n-\t\tbaseTransport:   base,\n-\t\tbearerTokenFunc: b.bearerToken,\n+\t\tbaseTransport: base,\n+\t\tauth:          b,\n \t}, nil\n }\n \n@@ -184,23 +190,20 @@ func (b *BearerTokenAuth) Authenticate(ctx context.Context, headers map[string][\n \t\tauth, ok = headers[\"Authorization\"]\n \t}\n \tif !ok || len(auth) == 0 {\n-\t\treturn ctx, errors.New(\"authentication didn't succeed\")\n+\t\treturn ctx, errors.New(\"missing or empty authorization header\")\n \t}\n \ttoken := auth[0]\n-\texpect := b.tokenString\n-\tif len(b.scheme) != 0 {\n-\t\texpect = fmt.Sprintf(\"%s %s\", b.scheme, expect)\n-\t}\n-\tif expect != token {\n+\texpect := b.authorizationValue()\n+\tif subtle.ConstantTimeCompare([]byte(expect), []byte(token)) == 0 {\n \t\treturn ctx, fmt.Errorf(\"scheme or token does not match: %s\", token)\n \t}\n \treturn ctx, nil\n }\n \n // BearerAuthRoundTripper intercepts and adds Bearer token Authorization headers to each http request.\n type BearerAuthRoundTripper struct {\n-\tbaseTransport   http.RoundTripper\n-\tbearerTokenFunc func() string\n+\tbaseTransport http.RoundTripper\n+\tauth          *BearerTokenAuth\n }\n \n // RoundTrip modifies the original request and adds Bearer token Authorization headers.\n@@ -209,6 +212,6 @@ func (interceptor *BearerAuthRoundTripper) RoundTrip(req *http.Request) (*http.R\n \tif req2.Header == nil {\n \t\treq2.Header = make(http.Header)\n \t}\n-\treq2.Header.Set(\"Authorization\", interceptor.bearerTokenFunc())\n+\treq2.Header.Set(\"Authorization\", interceptor.auth.authorizationValue())\n \treturn interceptor.baseTransport.RoundTrip(req2)\n }"
        },
        {
          "filename": "extension/bearertokenauthextension/bearertokenauth_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -92,7 +92,7 @@ func TestBearerAuthenticator(t *testing.T) {\n \t}\n \texpectedHeaders := http.Header{\n \t\t\"Foo\":           {\"bar\"},\n-\t\t\"Authorization\": {bauth.bearerToken()},\n+\t\t\"Authorization\": {\"Bearer \" + string(cfg.BearerToken)},\n \t}\n \n \tresp, err := roundTripper.RoundTrip(&http.Request{Header: orgHeaders})"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0c6fb3d14cd122a18432bcf49ea0df14127cbda0",
            "date": "2025-01-14T19:41:45Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "a55cbb9e4afcffbd6588de3489960f0a4a79ce2f",
            "date": "2025-01-14T19:37:07Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "e083c5fd4418c2df269384c11db9d76d358c8d80",
            "date": "2025-01-14T19:34:59Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "dcd640a19c1198f1f35d482a0761bd46eb3dd392",
            "date": "2025-01-14T19:11:42Z",
            "author_login": "dmitryax"
          },
          {
            "sha": "17ad32cfb3f7d7bbece81f6b5e5a19171c16bec5",
            "date": "2025-01-14T19:09:09Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:L",
    "cwe_id": "CWE-208",
    "description": "OpenTelemetry, also known as OTel, is a vendor-neutral open source Observability framework for instrumenting, generating, collecting, and exporting telemetry data such as traces, metrics, and logs. The bearertokenauth extension's server authenticator performs a simple, non-constant time string comparison of the received & configured bearer tokens. This impacts anyone using the `bearertokenauth` server authenticator. Malicious clients with network access to the collector may perform a timing attack against a collector with this authenticator to guess the configured token, by iteratively sending tokens and comparing the response time. This would allow an attacker to introduce fabricated or bad data into the collector's telemetry pipeline. The observable timing vulnerability was fixed by using constant-time comparison in  0.107.0",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-13T20:15:08.447",
    "last_modified": "2024-08-14T02:07:05.410",
    "fix_date": "2024-08-08T15:24:15Z"
  },
  "references": [
    {
      "url": "https://github.com/open-telemetry/opentelemetry-collector-contrib/commit/c9bd3eff0bb357d9c812a0d8defd3b09db95699a",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/34516",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-collector-contrib/security/advisories/GHSA-rfxf-mf63-cpqv",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.566644",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "opentelemetry-collector-contrib",
    "owner": "open-telemetry",
    "created_at": "2019-07-11T14:54:32Z",
    "updated_at": "2025-01-14T19:41:51Z",
    "pushed_at": "2025-01-14T19:41:47Z",
    "size": 523963,
    "stars": 3203,
    "forks": 2474,
    "open_issues": 912,
    "watchers": 3203,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "Fluentforward-receiver-not-listen-port-#9110",
      "benchmarks",
      "chore/postgresqlreceiver",
      "codeboten/add-disable-aws-context-propagation",
      "coralogix-exporter-last-pr",
      "crobert-1-patch-2",
      "dependabot-prs/2023-03-08T024000",
      "dependabot-prs/2023-04-24T190659",
      "dependabot-prs/2023-04-24T205842",
      "dependabot-prs/2023-05-10T203517",
      "dependabot-prs/2023-05-15T215110",
      "dmitryax-patch-2",
      "feature/tigran/hostmetricsentities",
      "filestorage-as-beta",
      "increase-integration-test-timeout",
      "julien.lebot/initial_support_for_tls_settings",
      "lp/implement-redaction-processor",
      "main",
      "mdatagen-uipdate-metadata-schema",
      "msg/schema-transformer-processor",
      "ottl-add-element-xml",
      "prepare-release-prs/0.74.0",
      "prepare-release-prs/0.76.1",
      "prepare-release-prs/0.86.0",
      "release/v0.2.x",
      "release/v0.3.x",
      "release/v0.4.x",
      "release/v0.6.x"
    ],
    "languages": {
      "Go": 21886144,
      "Makefile": 31947,
      "Shell": 7331,
      "Dockerfile": 1949,
      "HTML": 259
    },
    "commit_activity": {
      "total_commits_last_year": 5266,
      "avg_commits_per_week": 101.26923076923077,
      "days_active_last_year": 303
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T19:52:48.287176"
  }
}