{
  "cve_id": "CVE-2024-42458",
  "github_data": {
    "repository": "any1/neatvnc",
    "fix_commit": "cc71650a69abc2573a0d96d082409d2468802d47",
    "related_commits": [
      "cc71650a69abc2573a0d96d082409d2468802d47"
    ],
    "patch_url": "https://github.com/any1/neatvnc/commit/cc71650a69abc2573a0d96d082409d2468802d47.patch",
    "fix_commit_details": {
      "sha": "cc71650a69abc2573a0d96d082409d2468802d47",
      "commit_date": "2024-08-01T20:14:47Z",
      "author": {
        "login": "any1",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add sanity check for chosen security type",
        "length": 41,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 85,
        "additions": 60,
        "deletions": 25
      },
      "files": [
        {
          "filename": "include/common.h",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -38,6 +38,7 @@\n #define MAX_OUTGOING_FRAMES 4\n #define MSG_BUFFER_SIZE 4096\n #define MAX_CUT_TEXT_SIZE 10000000\n+#define MAX_SECURITY_TYPES 32\n \n enum nvnc_client_state {\n \tVNC_CLIENT_STATE_ERROR = -1,\n@@ -167,6 +168,9 @@ struct nvnc {\n \tstruct crypto_rsa_priv_key* rsa_priv;\n #endif\n \n+\tint n_security_types;\n+\tenum rfb_security_type security_types[MAX_SECURITY_TYPES];\n+\n \tuint32_t n_damage_clients;\n };\n "
        },
        {
          "filename": "src/server.c",
          "status": "modified",
          "additions": 56,
          "deletions": 25,
          "patch": "@@ -67,7 +67,6 @@\n #endif\n \n #define DEFAULT_NAME \"Neat VNC\"\n-#define SECURITY_TYPES_MAX 3\n #define APPLE_DH_SERVER_KEY_LENGTH 256\n \n #define UDIV_UP(a, b) (((a) + (b) - 1) / (b))\n@@ -215,52 +214,79 @@ static int handle_unsupported_version(struct nvnc_client* client)\n \treturn 0;\n }\n \n-static int on_version_message(struct nvnc_client* client)\n+static void init_security_types(struct nvnc* server)\n {\n-\tstruct nvnc* server = client->server;\n-\n-\tif (client->buffer_len - client->buffer_index < 12)\n-\t\treturn 0;\n-\n-\tchar version_string[13];\n-\tmemcpy(version_string, client->msg_buffer + client->buffer_index, 12);\n-\tversion_string[12] = '\\0';\n-\n-\tif (strcmp(RFB_VERSION_MESSAGE, version_string) != 0)\n-\t\treturn handle_unsupported_version(client);\n+#define ADD_SECURITY_TYPE(type) \\\n+\tassert(server->n_security_types < MAX_SECURITY_TYPES); \\\n+\tserver->security_types[server->n_security_types++] = (type);\n \n-\tuint8_t buf[sizeof(struct rfb_security_types_msg) +\n-\t\tSECURITY_TYPES_MAX] = {};\n-\tstruct rfb_security_types_msg* security =\n-\t\t(struct rfb_security_types_msg*)buf;\n+\tif (server->n_security_types > 0)\n+\t\treturn;\n \n-\tsecurity->n = 0;\n \tif (server->auth_flags & NVNC_AUTH_REQUIRE_AUTH) {\n \t\tassert(server->auth_fn);\n \n #ifdef ENABLE_TLS\n \t\tif (server->tls_creds) {\n-\t\t\tsecurity->types[security->n++] = RFB_SECURITY_TYPE_VENCRYPT;\n+\t\t\tADD_SECURITY_TYPE(RFB_SECURITY_TYPE_VENCRYPT);\n \t\t}\n #endif\n \n #ifdef HAVE_CRYPTO\n-\t\tsecurity->types[security->n++] = RFB_SECURITY_TYPE_RSA_AES256;\n-\t\tsecurity->types[security->n++] = RFB_SECURITY_TYPE_RSA_AES;\n+\t\tADD_SECURITY_TYPE(RFB_SECURITY_TYPE_RSA_AES256);\n+\t\tADD_SECURITY_TYPE(RFB_SECURITY_TYPE_RSA_AES);\n \n \t\tif (!(server->auth_flags & NVNC_AUTH_REQUIRE_ENCRYPTION)) {\n-\t\t\tsecurity->types[security->n++] = RFB_SECURITY_TYPE_APPLE_DH;\n+\t\t\tADD_SECURITY_TYPE(RFB_SECURITY_TYPE_APPLE_DH);\n \t\t}\n #endif\n \t} else {\n-\t\tsecurity->n = 1;\n-\t\tsecurity->types[0] = RFB_SECURITY_TYPE_NONE;\n+\t\tADD_SECURITY_TYPE(RFB_SECURITY_TYPE_NONE);\n \t}\n \n-\tif (security->n == 0) {\n+\tif (server->n_security_types == 0) {\n \t\tnvnc_log(NVNC_LOG_PANIC, \"Failed to satisfy requested security constraints\");\n \t}\n \n+#undef ADD_SECURITY_TYPE\n+}\n+\n+static bool is_allowed_security_type(const struct nvnc* server, uint8_t type)\n+{\n+\tfor (int i = 0; i < server->n_security_types; ++i) {\n+\t\tif ((uint8_t)server->security_types[i] == type) {\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\treturn false;\n+}\n+\n+static int on_version_message(struct nvnc_client* client)\n+{\n+\tstruct nvnc* server = client->server;\n+\n+\tif (client->buffer_len - client->buffer_index < 12)\n+\t\treturn 0;\n+\n+\tchar version_string[13];\n+\tmemcpy(version_string, client->msg_buffer + client->buffer_index, 12);\n+\tversion_string[12] = '\\0';\n+\n+\tif (strcmp(RFB_VERSION_MESSAGE, version_string) != 0)\n+\t\treturn handle_unsupported_version(client);\n+\n+\tuint8_t buf[sizeof(struct rfb_security_types_msg) +\n+\t\tMAX_SECURITY_TYPES] = {};\n+\tstruct rfb_security_types_msg* security =\n+\t\t(struct rfb_security_types_msg*)buf;\n+\n+\tinit_security_types(server);\n+\n+\tsecurity->n = server->n_security_types;\n+\tfor (int i = 0; i < server->n_security_types; ++i) {\n+\t\tsecurity->types[i] = server->security_types[i];\n+\t}\n+\n \tstream_write(client->net_stream, security, sizeof(*security) +\n \t\t\tsecurity->n, NULL, NULL);\n \n@@ -798,6 +824,11 @@ static int on_security_message(struct nvnc_client* client)\n \tuint8_t type = client->msg_buffer[client->buffer_index];\n \tnvnc_log(NVNC_LOG_DEBUG, \"Client chose security type: %d\", type);\n \n+\tif (!is_allowed_security_type(client->server, type)) {\n+\t\tsecurity_handshake_failed(client, NULL, \"Illegal security type\");\n+\t\treturn sizeof(type);\n+\t}\n+\n \tswitch (type) {\n \tcase RFB_SECURITY_TYPE_NONE:\n \t\tsecurity_handshake_ok(client, NULL);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8eba00a0285a2403a1b71619d6d47afa2f6466ac",
            "date": "2025-01-10T06:31:20Z",
            "author_login": "layercak3"
          },
          {
            "sha": "c96b1c4a3bc424d932a36429fff73a318331d062",
            "date": "2025-01-02T12:31:02Z",
            "author_login": "any1"
          },
          {
            "sha": "8c4584b43f6144164e435eb39d5bfe986da219fe",
            "date": "2024-12-28T23:18:57Z",
            "author_login": "any1"
          },
          {
            "sha": "41b74848b8ba5023c9cb08141ce34b1df9bb98c6",
            "date": "2024-12-28T20:06:54Z",
            "author_login": "any1"
          },
          {
            "sha": "2e5d52baf6c949937e7c49f5e5aa2fc4a5b90c74",
            "date": "2024-12-28T19:52:00Z",
            "author_login": "any1"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": null,
    "description": "server.c in Neat VNC (aka neatvnc) before 0.8.1 does not properly validate the security type, a related issue to CVE-2006-2369.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-02T04:17:30.593",
    "last_modified": "2024-09-05T15:51:34.307",
    "fix_date": "2024-08-01T20:14:47Z"
  },
  "references": [
    {
      "url": "https://github.com/any1/neatvnc/commit/cc71650a69abc2573a0d96d082409d2468802d47",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/any1/neatvnc/compare/v0.8.0...v0.8.1",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/any1/neatvnc/releases/tag/v0.8.1",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.openwall.com/lists/oss-security/2024/08/02/1",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch"
      ]
    },
    {
      "url": "https://www.openwall.com/lists/oss-security/2024/08/02/10",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://www.openwall.com/lists/oss-security/2024/08/02/7",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.524751",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "neatvnc",
    "owner": "any1",
    "created_at": "2019-08-13T17:31:21Z",
    "updated_at": "2025-01-11T14:30:00Z",
    "pushed_at": "2025-01-11T14:20:16Z",
    "size": 2387,
    "stars": 129,
    "forks": 34,
    "open_issues": 18,
    "watchers": 129,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 445328,
      "C++": 291995,
      "Meson": 7524
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "isc"
    },
    "collected_at": "2025-01-14T18:32:51.726076"
  }
}