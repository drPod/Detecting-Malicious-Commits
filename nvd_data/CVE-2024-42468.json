{
  "cve_id": "CVE-2024-42468",
  "github_data": {
    "repository": "openhab/openhab-webui",
    "fix_commit": "630e8525835c698cf58856aa43782d92b18087f2",
    "related_commits": [
      "630e8525835c698cf58856aa43782d92b18087f2"
    ],
    "patch_url": "https://github.com/openhab/openhab-webui/commit/630e8525835c698cf58856aa43782d92b18087f2.patch",
    "fix_commit_details": {
      "sha": "630e8525835c698cf58856aa43782d92b18087f2",
      "commit_date": "2024-07-17T20:00:00Z",
      "author": {
        "login": "peuter",
        "type": "User",
        "stats": {
          "total_commits": 8,
          "average_weekly_commits": 0.025889967637540454,
          "total_additions": 10731,
          "total_deletions": 24508,
          "weeks_active": 8
        }
      },
      "commit_message": {
        "title": "[cometvisu] Security fixes  & cleanup for cometvisu backend (#2671)",
        "length": 289,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 1422,
        "additions": 104,
        "deletions": 1318
      },
      "files": [
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/ManagerSettings.java",
          "status": "modified",
          "additions": 11,
          "deletions": 9,
          "patch": "@@ -109,16 +109,18 @@ private void refreshMounts() {\n         for (final String target : Config.mountPoints.keySet()) {\n             if (!target.contains(\"..\") && !\"demo\".equalsIgnoreCase(target)) {\n                 String value = (String) Config.mountPoints.get(target);\n-                String[] parts = value.split(\":\");\n-                String source = parts[0];\n-                if (!source.contains(\"..\") || (allowLookup && lookupMount.matcher(source).find())) {\n-                    boolean writeable = parts.length > 1 && parts[1].contains(\"w\");\n-                    boolean showSubDirs = parts.length > 1 && parts[1].contains(\"s\");\n-                    if (source.startsWith(File.separator)) {\n-                        source = source.substring(1);\n+                if (value != null) {\n+                    String[] parts = value.split(\":\");\n+                    String source = parts[0];\n+                    if (!source.contains(\"..\") || (allowLookup && lookupMount.matcher(source).find())) {\n+                        boolean writeable = parts.length > 1 && parts[1].contains(\"w\");\n+                        boolean showSubDirs = parts.length > 1 && parts[1].contains(\"s\");\n+                        if (source.startsWith(File.separator)) {\n+                            source = source.substring(1);\n+                        }\n+                        MountPoint mount = new MountPoint(Paths.get(target), Paths.get(source), showSubDirs, writeable);\n+                        mounts.add(mount);\n                     }\n-                    MountPoint mount = new MountPoint(Paths.get(target), Paths.get(source), showSubDirs, writeable);\n-                    mounts.add(mount);\n                 }\n             }\n         }"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/StateBeanMessageBodyWriter.java",
          "status": "removed",
          "additions": 0,
          "deletions": 89,
          "patch": "@@ -1,89 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal;\n-\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.MultivaluedMap;\n-import javax.ws.rs.ext.MessageBodyWriter;\n-import javax.ws.rs.ext.Provider;\n-\n-import org.openhab.ui.cometvisu.internal.backend.model.StateBean;\n-\n-/**\n- * {@link StateBeanMessageBodyWriter} is used to serialize state update messages\n- * for the CometVisu client\n- *\n- * @author Tobias Br\u00e4utigam - Initial contribution\n- */\n-@Provider\n-@Produces(MediaType.APPLICATION_JSON)\n-public class StateBeanMessageBodyWriter implements MessageBodyWriter<Object> {\n-\n-    @Override\n-    public long getSize(Object arg0, Class<?> arg1, Type arg2, Annotation[] arg3, MediaType arg4) {\n-        // deprecated by JAX-RS 2.0 and ignored by Jersey runtime\n-        return 0;\n-    }\n-\n-    @Override\n-    public boolean isWriteable(Class<?> type, Type genericType, Annotation[] arg2, MediaType arg3) {\n-        return (type == StateBean.class || genericType == StateBean.class);\n-    }\n-\n-    @Override\n-    public void writeTo(Object stateBean, Class<?> type, Type genericType, Annotation[] annotations,\n-            MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)\n-            throws IOException, WebApplicationException {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(serialize(stateBean));\n-        try (DataOutputStream dos = new DataOutputStream(entityStream)) {\n-            dos.writeUTF(sb.toString());\n-        }\n-    }\n-\n-    /**\n-     *\n-     * @param bean\n-     *            - StateBean or List<StateBean>\n-     * @return String\n-     *         - CV-Protocol state update json format {d:{item:state,...}}\n-     */\n-    public String serialize(Object bean) {\n-        String msg = \"{\\\"d\\\":{\";\n-        if (bean instanceof StateBean stateBean) {\n-            msg += \"\\\"\" + stateBean.name + \"\\\":\\\"\" + stateBean.state + \"\\\"\";\n-        } else if (bean instanceof List<?>) {\n-            List<String> states = new ArrayList<>();\n-            for (Object bo : (List<?>) bean) {\n-                if (bo instanceof StateBean stateBean) {\n-                    states.add(\"\\\"\" + stateBean.name + \"\\\":\\\"\" + stateBean.state + \"\\\"\");\n-                }\n-            }\n-            if (!states.isEmpty()) {\n-                msg += String.join(\",\", states);\n-            }\n-        }\n-        msg += \"}}\";\n-        return msg;\n-    }\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/model/ConfigBean.java",
          "status": "removed",
          "additions": 0,
          "deletions": 27,
          "patch": "@@ -1,27 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.backend.model;\n-\n-/**\n- * This is a java bean that is used with JAXB to define the backend configurationfor the\n- * Cometvisu client.\n- *\n- * @author Tobias Br\u00e4utigam - Initial contribution\n- *\n- */\n-public class ConfigBean {\n-    public String name = \"openhab2\";\n-    public String transport = \"sse\";\n-    public String baseURL = \"/rest/cv/\";\n-    public ResourcesBean resources;\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/model/LoginBean.java",
          "status": "removed",
          "additions": 0,
          "deletions": 26,
          "patch": "@@ -1,26 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.backend.model;\n-\n-/**\n- * This is a java bean that is used with JAXB to define the login entry\n- * page of the Cometvisu interface.\n- *\n- * @author Tobias Br\u00e4utigam - Initial contribution\n- *\n- */\n-public class LoginBean {\n-    public String v;\n-    public String s;\n-    public ConfigBean c;\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/model/ResourcesBean.java",
          "status": "removed",
          "additions": 0,
          "deletions": 27,
          "patch": "@@ -1,27 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.backend.model;\n-\n-/**\n- * This is a java bean that is used with JAXB to define the resources of backend configuration for the\n- * Cometvisu client.\n- *\n- * @author Tobias Br\u00e4utigam - Initial contribution\n- *\n- */\n-public class ResourcesBean {\n-    public String read;\n-    public String rrd;\n-    public String write;\n-    public String rest;\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/model/StateBean.java",
          "status": "removed",
          "additions": 0,
          "deletions": 25,
          "patch": "@@ -1,25 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.backend.model;\n-\n-/**\n- * Item bean for broadcasted item states.\n- * \n- * @author Tobias Br\u00e4utigam - Initial Contribution and API\n- */\n-public class StateBean {\n-\n-    public String name;\n-\n-    public String state;\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/model/SuccessBean.java",
          "status": "removed",
          "additions": 0,
          "deletions": 24,
          "patch": "@@ -1,24 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.backend.model;\n-\n-/**\n- * This is a java bean that is used with JAXB to define the login entry\n- * page of the Cometvisu interface.\n- *\n- * @author Tobias Br\u00e4utigam - Initial contribution\n- *\n- */\n-public class SuccessBean {\n-    public int success;\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/model/rest/RestBackendEnvironmentState.java",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -12,6 +12,7 @@\n  */\n package org.openhab.ui.cometvisu.internal.backend.model.rest;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.openhab.core.OpenHAB;\n \n /**\n@@ -21,16 +22,18 @@\n  * @author Tobias Br\u00e4utigam - Initial contribution\n  *\n  */\n+@NonNullByDefault\n public class RestBackendEnvironmentState {\n     // as we are just simulating we use a fixed version here to tell that we are compatible\n     public int PHP_VERSION_ID = 80100;\n     public String phpversion = \"8.1.0\";\n \n-    public String SERVER_SIGNATURE;\n-    public String SERVER_SOFTWARE;\n+    public String SERVER_SIGNATURE = \"\";\n+    public String SERVER_SOFTWARE = \"\";\n     public String required_php_version = \">=7.4\";\n \n     // openHAB specific values\n     public boolean isOpenHab = true;\n+    public boolean requiresAuth = true;\n     public String server_release = \"openHAB \" + OpenHAB.getVersion();\n }"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/rest/ChartResource.java",
          "status": "removed",
          "additions": 0,
          "deletions": 330,
          "patch": "@@ -1,330 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.backend.rest;\n-\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.text.DecimalFormat;\n-import java.text.NumberFormat;\n-import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.TimeZone;\n-import java.util.TreeMap;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.UriInfo;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.openhab.core.OpenHAB;\n-import org.openhab.core.io.rest.RESTConstants;\n-import org.openhab.core.io.rest.RESTResource;\n-import org.openhab.core.items.GroupItem;\n-import org.openhab.core.items.Item;\n-import org.openhab.core.items.ItemNotFoundException;\n-import org.openhab.core.items.ItemRegistry;\n-import org.openhab.core.library.types.DecimalType;\n-import org.openhab.core.persistence.FilterCriteria;\n-import org.openhab.core.persistence.FilterCriteria.Ordering;\n-import org.openhab.core.persistence.HistoricItem;\n-import org.openhab.core.persistence.PersistenceService;\n-import org.openhab.core.persistence.QueryablePersistenceService;\n-import org.openhab.ui.cometvisu.internal.Config;\n-import org.osgi.service.component.annotations.Activate;\n-import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.component.annotations.Reference;\n-import org.osgi.service.component.annotations.ReferenceCardinality;\n-import org.osgi.service.component.annotations.ReferencePolicy;\n-import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JSONRequired;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsName;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsResource;\n-import org.rrd4j.ConsolFun;\n-import org.rrd4j.core.FetchData;\n-import org.rrd4j.core.FetchRequest;\n-import org.rrd4j.core.RrdDb;\n-import org.rrd4j.core.Util;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import io.swagger.v3.oas.annotations.Operation;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-\n-/**\n- * handles requests for chart series data from the CometVisu client\n- * used by the diagram plugin\n- *\n- * @author Tobias Br\u00e4utigam - Initial contribution\n- * @author Wouter Born - Migrated to JAX-RS Whiteboard Specification\n- * @author Wouter Born - Migrated to OpenAPI annotations\n- *\n- * @deprecated CometVisu (>=0.12) is using openHAB's native REST API, a special backend implementation is obsolete now\n- */\n-@Component\n-@JaxrsResource\n-@JaxrsName(Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_CHART_ALIAS)\n-@JaxrsApplicationSelect(\"(\" + JaxrsWhiteboardConstants.JAX_RS_NAME + \"=\" + RESTConstants.JAX_RS_NAME + \")\")\n-@JSONRequired\n-@Path(Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_CHART_ALIAS)\n-@Tag(name = Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_CHART_ALIAS)\n-@NonNullByDefault\n-@Deprecated(since = \"3.4\", forRemoval = true)\n-public class ChartResource implements RESTResource {\n-    private final Logger logger = LoggerFactory.getLogger(ChartResource.class);\n-\n-    // pattern RRDTool uses to format doubles in XML files\n-    private static final String PATTERN = \"0.0000000000E00\";\n-\n-    private static final DecimalFormat DECIMAL_FORMAT;\n-\n-    protected static final String RRD_FOLDER = OpenHAB.getUserDataFolder() + File.separator + \"persistence\"\n-            + File.separator + \"rrd4j\";\n-\n-    static {\n-        DECIMAL_FORMAT = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ENGLISH);\n-        synchronized (DECIMAL_FORMAT) {\n-            DECIMAL_FORMAT.applyPattern(PATTERN);\n-        }\n-    }\n-\n-    private final Map<String, QueryablePersistenceService> persistenceServices = new HashMap<>();\n-\n-    private final ItemRegistry itemRegistry;\n-\n-    @Activate\n-    public ChartResource(final @Reference ItemRegistry itemRegistry) {\n-        this.itemRegistry = itemRegistry;\n-    }\n-\n-    private @Context @NonNullByDefault({}) UriInfo uriInfo;\n-\n-    @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC)\n-    public void addPersistenceService(PersistenceService service) {\n-        if (service instanceof QueryablePersistenceService) {\n-            persistenceServices.put(service.getId(), (QueryablePersistenceService) service);\n-        }\n-    }\n-\n-    public void removePersistenceService(PersistenceService service) {\n-        persistenceServices.remove(service.getId());\n-    }\n-\n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Operation(summary = \"returns chart data from persistence service for an item\", responses = {\n-            @ApiResponse(responseCode = \"200\", description = \"OK\"),\n-            @ApiResponse(responseCode = \"500\", description = \"Server error\") })\n-    public Response getChartSeries(@Context HttpHeaders headers, @QueryParam(\"rrd\") String itemName,\n-            @QueryParam(\"ds\") String consFunction, @QueryParam(\"start\") String start, @QueryParam(\"end\") String end,\n-            @QueryParam(\"res\") long resolution) {\n-        if (logger.isDebugEnabled()) {\n-            logger.debug(\"Received GET request at '{}' for rrd '{}'.\", uriInfo.getPath(), itemName);\n-        }\n-        String responseType = MediaType.APPLICATION_JSON;\n-\n-        // RRD specific: no equivalent in PersistenceService known\n-        ConsolFun consilidationFunction = ConsolFun.valueOf(consFunction);\n-\n-        // read the start/end time as they are provided in the RRD-way, we use\n-        // the RRD4j to read them\n-        long[] times = Util.getTimestamps(start, end);\n-        Date startTime = new Date();\n-        startTime.setTime(times[0] * 1000L);\n-        Date endTime = new Date();\n-        endTime.setTime(times[1] * 1000L);\n-\n-        if (itemName.endsWith(\".rrd\")) {\n-            itemName = itemName.substring(0, itemName.length() - 4);\n-        }\n-        String[] parts = itemName.split(\":\");\n-        String service = \"rrd4j\";\n-\n-        if (parts.length == 2) {\n-            itemName = parts[1];\n-            service = parts[0];\n-        }\n-\n-        Item item;\n-        try {\n-            item = itemRegistry.getItem(itemName);\n-            logger.debug(\"item '{}' found \", item);\n-\n-            // Prefer RRD-Service\n-            QueryablePersistenceService persistenceService = persistenceServices.get(service);\n-            // Fallback to first persistenceService from list\n-            if (persistenceService == null) {\n-                Iterator<Entry<String, QueryablePersistenceService>> pit = persistenceServices.entrySet().iterator();\n-                if (pit.hasNext()) {\n-                    persistenceService = pit.next().getValue();\n-                    logger.debug(\"required persistence service ({}) not found, using {} instead\", service,\n-                            persistenceService.getId());\n-                } else {\n-                    throw new IllegalArgumentException(\"No Persistence service found.\");\n-                }\n-            } else {\n-                logger.debug(\"using {} persistence for item {}\", persistenceService.getId(), itemName);\n-            }\n-            Object data = null;\n-            if (persistenceService.getId().equals(\"rrd4j\")) {\n-                data = getRrdSeries(persistenceService, item, consilidationFunction, startTime, endTime, resolution);\n-            } else {\n-                data = getPersistenceSeries(persistenceService, item, startTime, endTime, resolution);\n-            }\n-            return Response.ok(data, responseType).build();\n-        } catch (ItemNotFoundException e1) {\n-            logger.error(\"Item '{}' not found error while requesting series data.\", itemName);\n-        }\n-        return Response.serverError().build();\n-    }\n-\n-    public Object getPersistenceSeries(QueryablePersistenceService persistenceService, Item item, Date timeBegin,\n-            Date timeEnd, long resolution) {\n-        Map<Long, List<String>> data = new HashMap<>();\n-\n-        // Define the data filter\n-        FilterCriteria filter = new FilterCriteria();\n-        filter.setBeginDate(ZonedDateTime.ofInstant(timeBegin.toInstant(), TimeZone.getDefault().toZoneId()));\n-        filter.setEndDate(ZonedDateTime.ofInstant(timeEnd.toInstant(), TimeZone.getDefault().toZoneId()));\n-        filter.setItemName(item.getName());\n-        filter.setOrdering(Ordering.ASCENDING);\n-\n-        // Get the data from the persistence store\n-        Iterable<HistoricItem> result = persistenceService.query(filter);\n-        Iterator<HistoricItem> it = result.iterator();\n-\n-        // Iterate through the data\n-        int dataCounter = 0;\n-        while (it.hasNext()) {\n-            dataCounter++;\n-            HistoricItem historicItem = it.next();\n-            org.openhab.core.types.State state = historicItem.getState();\n-            if (state instanceof DecimalType) {\n-                List<String> vals = new ArrayList<>();\n-                vals.add(formatDouble(((DecimalType) state).doubleValue(), \"null\", true));\n-                data.put(historicItem.getTimestamp().toInstant().toEpochMilli(), vals);\n-            }\n-        }\n-        logger.debug(\"'{}' querying item '{}' from '{}' to '{}' => '{}' results\", persistenceService.getId(),\n-                filter.getItemName(), filter.getBeginDate(), filter.getEndDate(), dataCounter);\n-        return convertToRrd(data);\n-    }\n-\n-    /**\n-     * returns a rrd series data, an array of [[timestamp,data1,data2,...]]\n-     *\n-     * @param persistenceService\n-     * @param item\n-     * @param consilidationFunction\n-     * @param timeBegin\n-     * @param timeEnd\n-     * @param resolution\n-     * @return\n-     */\n-    public Object getRrdSeries(QueryablePersistenceService persistenceService, Item item,\n-            ConsolFun consilidationFunction, Date timeBegin, Date timeEnd, long resolution) {\n-        Map<Long, List<String>> data = new TreeMap<>();\n-        try {\n-            List<String> itemNames = new ArrayList<>();\n-\n-            if (item instanceof GroupItem groupItem) {\n-                for (Item member : groupItem.getMembers()) {\n-                    itemNames.add(member.getName());\n-                }\n-            } else {\n-                itemNames.add(item.getName());\n-            }\n-            for (String itemName : itemNames) {\n-                addRrdData(data, itemName, consilidationFunction, timeBegin, timeEnd, resolution);\n-            }\n-        } catch (FileNotFoundException e) {\n-            // rrd file does not exist, fallback to generic persistence service\n-            logger.debug(\"no rrd file found '{}'\", (RRD_FOLDER + File.separator + item.getName() + \".rrd\"));\n-            return getPersistenceSeries(persistenceService, item, timeBegin, timeEnd, resolution);\n-        } catch (Exception e) {\n-            logger.error(\"{}: fallback to generic persistance service\", e.getLocalizedMessage());\n-            return getPersistenceSeries(persistenceService, item, timeBegin, timeEnd, resolution);\n-        }\n-        return convertToRrd(data);\n-    }\n-\n-    private List<Object> convertToRrd(Map<Long, List<String>> data) {\n-        // sort data by key\n-        Map<Long, List<String>> treeMap = new TreeMap<>(data);\n-        List<Object> rrd = new ArrayList<>();\n-        for (Long time : treeMap.keySet()) {\n-            Object[] entry = new Object[2];\n-            entry[0] = time;\n-            entry[1] = data.get(time);\n-            rrd.add(entry);\n-        }\n-        return rrd;\n-    }\n-\n-    private Map<Long, List<String>> addRrdData(Map<Long, List<String>> data, String itemName,\n-            ConsolFun consilidationFunction, Date timeBegin, Date timeEnd, long resolution) throws IOException {\n-        RrdDb rrdDb = new RrdDb(RRD_FOLDER + File.separator + itemName + \".rrd\");\n-        FetchRequest fetchRequest = rrdDb.createFetchRequest(consilidationFunction, Util.getTimestamp(timeBegin),\n-                Util.getTimestamp(timeEnd), resolution);\n-        FetchData fetchData = fetchRequest.fetchData();\n-        long[] timestamps = fetchData.getTimestamps();\n-        double[][] values = fetchData.getValues();\n-\n-        logger.debug(\"RRD fetch returned '{}' rows and '{}' columns\", fetchData.getRowCount(),\n-                fetchData.getColumnCount());\n-\n-        for (int row = 0; row < fetchData.getRowCount(); row++) {\n-            // change to microseconds\n-            long time = timestamps[row] * 1000;\n-\n-            if (!data.containsKey(time)) {\n-                data.put(time, new ArrayList<>());\n-            }\n-            List<String> vals = data.get(time);\n-            int indexOffset = vals.size();\n-            for (int dsIndex = 0; dsIndex < fetchData.getColumnCount(); dsIndex++) {\n-                vals.add(dsIndex + indexOffset, formatDouble(values[dsIndex][row], \"null\", true));\n-            }\n-        }\n-        rrdDb.close();\n-\n-        return data;\n-    }\n-\n-    static String formatDouble(double x, String nanString, boolean forceExponents) {\n-        if (Double.isNaN(x)) {\n-            return nanString;\n-        }\n-        if (forceExponents) {\n-            synchronized (DECIMAL_FORMAT) {\n-                return DECIMAL_FORMAT.format(x);\n-            }\n-        }\n-        return \"\" + x;\n-    }\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/rest/CheckResource.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -60,7 +60,7 @@\n public class CheckResource implements RESTResource {\n \n     /**\n-     * Checks some files and folders for existance and access rights.\n+     * Checks some files and folders for existence and access rights.\n      *\n      * @return the check result that contains a bitfield with check results for each entity\n      */"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/rest/ConfigResource.java",
          "status": "modified",
          "additions": 10,
          "deletions": 42,
          "patch": "@@ -19,6 +19,7 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import javax.annotation.security.RolesAllowed;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n@@ -32,6 +33,7 @@\n import javax.ws.rs.core.Response.Status;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.auth.Role;\n import org.openhab.core.io.rest.RESTConstants;\n import org.openhab.core.io.rest.RESTResource;\n import org.openhab.ui.cometvisu.internal.Config;\n@@ -55,6 +57,7 @@\n import io.swagger.v3.oas.annotations.Operation;\n import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n /**\n@@ -69,6 +72,8 @@\n @JaxrsName(Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_CONFIG_ALIAS)\n @JaxrsApplicationSelect(\"(\" + JaxrsWhiteboardConstants.JAX_RS_NAME + \"=\" + RESTConstants.JAX_RS_NAME + \")\")\n @JSONRequired\n+@RolesAllowed({ Role.ADMIN })\n+@SecurityRequirement(name = \"oauth2\", scopes = { \"admin\" })\n @Path(Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_CONFIG_ALIAS)\n @Tag(name = Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_CONFIG_ALIAS)\n @NonNullByDefault\n@@ -263,18 +268,7 @@ public static HiddenConfig loadHiddenConfig() {\n             java.nio.file.Path hiddenConfigPath = ManagerSettings.getInstance().getConfigPath().resolve(\"hidden.php\");\n             if (hiddenConfigPath.toFile().exists()) {\n                 List<String> content = Files.readAllLines(hiddenConfigPath);\n-                boolean isPhpVersion = true;\n-                for (int i = content.size() - 1; i >= 0; i++) {\n-                    if (content.get(i).contains(\"json_decode\")) {\n-                        isPhpVersion = false;\n-                        break;\n-                    }\n-                }\n-                if (isPhpVersion) {\n-                    return loadPhpConfig(config, content);\n-                } else {\n-                    return loadJson(String.join(\"\\n\", content));\n-                }\n+                return loadJson(String.join(\"\\n\", content));\n             }\n         } catch (IOException e) {\n         }\n@@ -289,41 +283,15 @@ private static HiddenConfig loadJson(String content) {\n         return Objects.requireNonNull(gson.fromJson(rawContent, HiddenConfig.class));\n     }\n \n-    private static HiddenConfig loadPhpConfig(HiddenConfig config, List<String> content) {\n-        boolean inHidden = false;\n-\n-        for (final String line : content) {\n-            if (!inHidden) {\n-                if (\"$hidden = array(\".equalsIgnoreCase(line)) {\n-                    inHidden = true;\n-                }\n-            } else if (\");\".equalsIgnoreCase(line)) {\n-                break;\n-            } else {\n-                Matcher m = sectionPattern.matcher(line);\n-                if (m.find()) {\n-                    boolean commented = m.group(1) != null;\n-                    if (!commented) {\n-                        String options = m.group(3);\n-                        Matcher om = optionPattern.matcher(options);\n-                        ConfigSection section = new ConfigSection();\n-                        while (om.find()) {\n-                            section.put(om.group(1), om.group(2));\n-                        }\n-                        config.put(m.group(2), section);\n-                    }\n-                }\n-            }\n-        }\n-        return config;\n-    }\n-\n     private void writeHiddenConfig(HiddenConfig hidden) throws IOException {\n         java.nio.file.Path hiddenConfigPath = ManagerSettings.getInstance().getConfigPath().resolve(\"hidden.php\");\n         Gson gson = new GsonBuilder().setPrettyPrinting().create();\n         StringBuilder content = new StringBuilder().append(\"<?php\\n\")\n                 .append(\"// File for configurations that shouldn't be shared with the user\\n\").append(\"$data = '\")\n-                .append(gson.toJson(hidden)).append(\"';\\n\").append(\"$hidden = json_decode($data, true);\\n\");\n+                .append(gson.toJson(hidden)).append(\"';\\n\").append(\"try {\\n\")\n+                .append(\"  $hidden = json_decode($data, true, 512, JSON_THROW_ON_ERROR);\\n\")\n+                .append(\"} catch (JsonException $e) {\\n\")\n+                .append(\"  $hidden = [\\\"error\\\" => $e->getMessage(), \\\"data\\\" => $data];\\n\").append(\"}\\n\");\n         Files.writeString(hiddenConfigPath, content);\n     }\n }"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/rest/FsResource.java",
          "status": "modified",
          "additions": 22,
          "deletions": 14,
          "patch": "@@ -19,6 +19,7 @@\n import java.nio.file.Paths;\n import java.nio.file.StandardCopyOption;\n \n+import javax.annotation.security.RolesAllowed;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -36,6 +37,7 @@\n import javax.ws.rs.core.Response.Status;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.auth.Role;\n import org.openhab.core.io.rest.RESTConstants;\n import org.openhab.core.io.rest.RESTResource;\n import org.openhab.ui.cometvisu.internal.Config;\n@@ -79,6 +81,7 @@ public class FsResource implements RESTResource {\n     private final Logger logger = LoggerFactory.getLogger(FsResource.class);\n \n     @POST\n+    @RolesAllowed({ Role.USER, Role.ADMIN })\n     @Consumes(\"text/*\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @Operation(summary = \"Create a text file\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\"),\n@@ -153,6 +156,7 @@ public Response createBinary(@Context HttpServletRequest request,\n \n     @DELETE\n     @Produces(MediaType.APPLICATION_JSON)\n+    @RolesAllowed({ Role.USER, Role.ADMIN })\n     @Operation(summary = \"Deletes a file/folder\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\"),\n             @ApiResponse(responseCode = \"403\", description = \"not allowed\"),\n             @ApiResponse(responseCode = \"404\", description = \"File/Folder not found\"),\n@@ -242,33 +246,37 @@ public Response read(\n     }\n \n     @PUT\n+    @RolesAllowed({ Role.USER, Role.ADMIN })\n     @Produces(MediaType.APPLICATION_JSON)\n     @Consumes({ MediaType.TEXT_PLAIN, MediaType.TEXT_XML })\n     @Operation(summary = \"Update an existing file\", responses = {\n             @ApiResponse(responseCode = \"200\", description = \"OK\"),\n-            @ApiResponse(responseCode = \"403\", description = \"not allowed\"),\n+            @ApiResponse(responseCode = \"403\", description = \"forbidden\"),\n             @ApiResponse(responseCode = \"404\", description = \"File does not exist\") })\n     public Response update(\n             @Parameter(description = \"Relative path inside the config folder\", required = true) @QueryParam(\"path\") String path,\n             @Parameter(description = \"file content\") String body,\n             @Parameter(description = \"CRC32 hash value of the file content\", content = @Content(schema = @Schema(implementation = String.class, defaultValue = \"ignore\"))) @DefaultValue(\"ignore\") @QueryParam(\"hash\") String hash) {\n-        File target = new File(\n-                ManagerSettings.getInstance().getConfigFolder().getAbsolutePath() + File.separator + path);\n-        if (target.exists()) {\n-            if (target.canWrite()) {\n-                try {\n-                    FsUtil.getInstance().saveFile(target, body, hash);\n-                    return Response.ok().build();\n-                } catch (FileOperationException e) {\n-                    return FsUtil.createErrorResponse(e);\n-                } catch (Exception e) {\n+        try {\n+            MountedFile target = new MountedFile(path);\n+            if (target.exists()) {\n+                if (target.canWrite()) {\n+                    try {\n+                        FsUtil.getInstance().saveFile(target.toFile(), body, hash);\n+                        return Response.ok().build();\n+                    } catch (FileOperationException e) {\n+                        return FsUtil.createErrorResponse(e);\n+                    } catch (Exception e) {\n+                        return FsUtil.createErrorResponse(Status.FORBIDDEN, \"forbidden\");\n+                    }\n+                } else {\n                     return FsUtil.createErrorResponse(Status.FORBIDDEN, \"forbidden\");\n                 }\n             } else {\n-                return FsUtil.createErrorResponse(Status.FORBIDDEN, \"forbidden\");\n+                return FsUtil.createErrorResponse(Status.NOT_FOUND, \"not found\");\n             }\n-        } else {\n-            return FsUtil.createErrorResponse(Status.NOT_FOUND, \"not found\");\n+        } catch (FileOperationException e) {\n+            return FsUtil.createErrorResponse(e);\n         }\n     }\n }"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/rest/LoginResource.java",
          "status": "removed",
          "additions": 0,
          "deletions": 92,
          "patch": "@@ -1,92 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.backend.rest;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.UriInfo;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.openhab.core.io.rest.RESTConstants;\n-import org.openhab.core.io.rest.RESTResource;\n-import org.openhab.ui.cometvisu.internal.Config;\n-import org.openhab.ui.cometvisu.internal.backend.model.ConfigBean;\n-import org.openhab.ui.cometvisu.internal.backend.model.LoginBean;\n-import org.openhab.ui.cometvisu.internal.backend.model.ResourcesBean;\n-import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JSONRequired;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsName;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsResource;\n-\n-import io.swagger.v3.oas.annotations.Operation;\n-import io.swagger.v3.oas.annotations.media.Content;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-\n-/**\n- * handles login request from the CometVisu client\n- * currently this is just a placeholder and does no real authentification\n- *\n- * @author Tobias Br\u00e4utigam - Initial contribution\n- * @author Wouter Born - Migrated to JAX-RS Whiteboard Specification\n- * @author Wouter Born - Migrated to OpenAPI annotations\n- *\n- * @deprecated CometVisu (>=0.12) is using openHAB's native REST API, a special backend implementation is obsolete now\n- */\n-@Component\n-@JaxrsResource\n-@JaxrsName(Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_LOGIN_ALIAS)\n-@JaxrsApplicationSelect(\"(\" + JaxrsWhiteboardConstants.JAX_RS_NAME + \"=\" + RESTConstants.JAX_RS_NAME + \")\")\n-@JSONRequired\n-@Path(Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_LOGIN_ALIAS)\n-@Tag(name = Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_LOGIN_ALIAS)\n-@NonNullByDefault\n-@Deprecated(since = \"3.4\", forRemoval = true)\n-public class LoginResource implements RESTResource {\n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Operation(summary = \"returns the login response with backend configuration information\", responses = {\n-            @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(schema = @Schema(implementation = LoginBean.class))) })\n-    public Response getLogin(@Context UriInfo uriInfo, @Context HttpHeaders headers, @QueryParam(\"u\") String user,\n-            @QueryParam(\"p\") String password, @QueryParam(\"d\") String device) {\n-        LoginBean bean = new LoginBean();\n-        bean.v = \"0.0.1\";\n-        bean.s = \"0\"; // Session-ID not needed with SSE\n-        ConfigBean conf = new ConfigBean();\n-        ResourcesBean res = new ResourcesBean();\n-        String origin = headers.getHeaderString(\"Origin\");\n-        String serverHost = uriInfo.getBaseUri().getScheme() + \"://\" + uriInfo.getBaseUri().getHost();\n-        if (uriInfo.getBaseUri().getPort() != 80) {\n-            serverHost += \":\" + uriInfo.getBaseUri().getPort();\n-        }\n-        String host = origin == null || serverHost.compareToIgnoreCase(origin) == 0 ? \"\" : serverHost;\n-\n-        conf.baseURL = host + \"/rest/\" + Config.COMETVISU_BACKEND_ALIAS + \"/\";\n-        conf.resources = res;\n-        res.read = Config.COMETVISU_BACKEND_READ_ALIAS;\n-        res.rrd = Config.COMETVISU_BACKEND_CHART_ALIAS;\n-        res.write = Config.COMETVISU_BACKEND_WRITE_ALIAS;\n-        res.rest = conf.baseURL.substring(0, conf.baseURL.length() - 1); // no trailing slash\n-        bean.c = conf;\n-        return Response.ok(bean, MediaType.APPLICATION_JSON).build();\n-    }\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/rest/MoveResource.java",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -15,6 +15,7 @@\n import java.io.IOException;\n import java.nio.file.Files;\n \n+import javax.annotation.security.RolesAllowed;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n@@ -24,6 +25,7 @@\n import javax.ws.rs.core.Response.Status;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.auth.Role;\n import org.openhab.core.io.rest.RESTConstants;\n import org.openhab.core.io.rest.RESTResource;\n import org.openhab.ui.cometvisu.internal.Config;\n@@ -56,6 +58,7 @@\n @JaxrsName(Config.COMETVISU_BACKEND_ALIAS + \"/fs/move\")\n @JaxrsApplicationSelect(\"(\" + JaxrsWhiteboardConstants.JAX_RS_NAME + \"=\" + RESTConstants.JAX_RS_NAME + \")\")\n @JSONRequired\n+@RolesAllowed({ Role.USER, Role.ADMIN })\n @Path(Config.COMETVISU_BACKEND_ALIAS + \"/fs/move\")\n @Tag(name = Config.COMETVISU_BACKEND_ALIAS + \"/fs/move\")\n @NonNullByDefault"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/rest/ProxyResource.java",
          "status": "modified",
          "additions": 29,
          "deletions": 1,
          "patch": "@@ -21,6 +21,9 @@\n import java.net.http.HttpResponse.BodyHandlers;\n import java.time.Duration;\n import java.util.Base64;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n@@ -78,17 +81,19 @@ public class ProxyResource implements RESTResource {\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.MEDIA_TYPE_WILDCARD })\n     @Operation(summary = \"proxy a request\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\"),\n             @ApiResponse(responseCode = \"400\", description = \"Bad request\"),\n+            @ApiResponse(responseCode = \"403\", description = \"Forbidden\"),\n             @ApiResponse(responseCode = \"404\", description = \"Not found\"),\n+            @ApiResponse(responseCode = \"406\", description = \"Not Acceptable\"),\n             @ApiResponse(responseCode = \"500\", description = \"Internal server error\") })\n     public Response proxy(\n             @Parameter(description = \"URL this request should be sent to\", content = @Content(schema = @Schema(implementation = String.class, defaultValue = \"\"))) @QueryParam(\"url\") @Nullable String url,\n             @Parameter(description = \"optional authorization token\", content = @Content(schema = @Schema(implementation = String.class, defaultValue = \"\"))) @QueryParam(\"auth-type\") @Nullable String authType,\n             @Parameter(description = \"use information from hidden config section\", content = @Content(schema = @Schema(implementation = String.class, defaultValue = \"\"))) @QueryParam(\"config-section\") @Nullable String configSection) {\n         ConfigSection sec = null;\n         String queryUrl = url != null ? url : \"\";\n+        HiddenConfig config = ConfigResource.loadHiddenConfig();\n         if (configSection != null && !configSection.isBlank()) {\n             // read URI and further information\n-            HiddenConfig config = ConfigResource.loadHiddenConfig();\n             sec = config.get(configSection);\n             if (sec != null) {\n                 String configUrl = sec.get(\"uri\");\n@@ -101,6 +106,29 @@ public Response proxy(\n             }\n         } else if (url == null || url.isBlank()) {\n             return Response.status(Status.BAD_REQUEST).build();\n+        } else {\n+            ConfigSection whiteList = config.get(\"proxy.whitelist\");\n+            boolean allowed = false;\n+            if (whiteList != null) {\n+                for (Map.Entry<String, String> entry : whiteList.entrySet()) {\n+                    String value = entry.getValue();\n+                    if (value.startsWith(\"/\") && value.endsWith(\"/\")) {\n+                        Pattern pattern = Pattern.compile(value.substring(1, value.length() - 1),\n+                                Pattern.CASE_INSENSITIVE);\n+                        Matcher matcher = pattern.matcher(queryUrl);\n+                        if (matcher.find()) {\n+                            allowed = true;\n+                            break;\n+                        }\n+                    } else if (value.equalsIgnoreCase(queryUrl)) {\n+                        allowed = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (!allowed) {\n+                return Response.status(Status.FORBIDDEN).build();\n+            }\n         }\n         logger.info(\"proxying request to {}\", queryUrl);\n "
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/rest/ReadResource.java",
          "status": "removed",
          "additions": 0,
          "deletions": 254,
          "patch": "@@ -1,254 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.backend.rest;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.sse.Sse;\n-import javax.ws.rs.sse.SseEventSink;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.openhab.core.io.rest.RESTConstants;\n-import org.openhab.core.io.rest.RESTResource;\n-import org.openhab.core.io.rest.SseBroadcaster;\n-import org.openhab.core.items.GenericItem;\n-import org.openhab.core.items.Item;\n-import org.openhab.core.items.ItemFactory;\n-import org.openhab.core.items.ItemNotFoundException;\n-import org.openhab.core.items.ItemRegistry;\n-import org.openhab.core.types.State;\n-import org.openhab.ui.cometvisu.internal.Config;\n-import org.openhab.ui.cometvisu.internal.backend.model.StateBean;\n-import org.openhab.ui.cometvisu.internal.listeners.StateEventListener;\n-import org.openhab.ui.cometvisu.internal.util.SseUtil;\n-import org.osgi.service.component.annotations.Activate;\n-import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.component.annotations.Deactivate;\n-import org.osgi.service.component.annotations.Reference;\n-import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JSONRequired;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsName;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsResource;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import io.swagger.v3.oas.annotations.Operation;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-\n-/**\n- * handles read request from the CometVisu client every request initializes a\n- * SSE communication\n- *\n- * @author Tobias Br\u00e4utigam - Initial contribution\n- * @author Wouter Born - Migrated to JAX-RS Whiteboard Specification\n- * @author Wouter Born - Migrated to OpenAPI annotations\n- *\n- * @deprecated CometVisu (>=0.12) is using openHAB's native REST API, a special backend implementation is obsolete now\n- */\n-@Component(immediate = true)\n-@JaxrsResource\n-@JaxrsName(Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_READ_ALIAS)\n-@JaxrsApplicationSelect(\"(\" + JaxrsWhiteboardConstants.JAX_RS_NAME + \"=\" + RESTConstants.JAX_RS_NAME + \")\")\n-@JSONRequired\n-@Path(Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_READ_ALIAS)\n-@Tag(name = Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_READ_ALIAS)\n-@NonNullByDefault\n-@Deprecated(since = \"3.4\", forRemoval = true)\n-public class ReadResource implements EventBroadcaster, RESTResource {\n-    private final Logger logger = LoggerFactory.getLogger(ReadResource.class);\n-\n-    private SseBroadcaster<SseSinkInfo> broadcaster = new SseBroadcaster<>();\n-\n-    private final ExecutorService executorService = Executors.newSingleThreadExecutor();\n-\n-    private final ItemRegistry itemRegistry;\n-\n-    private final StateEventListener stateEventListener = new StateEventListener(this);\n-\n-    private List<String> itemNames = new ArrayList<>();\n-    private Map<Item, Map<String, @Nullable Class<? extends State>>> items = new HashMap<>();\n-\n-    private @NonNullByDefault({}) Sse sse;\n-\n-    private Collection<ItemFactory> itemFactories = new CopyOnWriteArrayList<>();\n-\n-    @Activate\n-    public ReadResource(@Reference ItemRegistry itemRegistry) {\n-        this.itemRegistry = itemRegistry;\n-    }\n-\n-    @Deactivate\n-    public void deactivate() {\n-        broadcaster.close();\n-    }\n-\n-    @Context\n-    public void setSse(final Sse sse) {\n-        this.sse = sse;\n-    }\n-\n-    protected void addItemFactory(ItemFactory itemFactory) {\n-        itemFactories.add(itemFactory);\n-    }\n-\n-    protected void removeItemFactory(ItemFactory itemFactory) {\n-        itemFactories.remove(itemFactory);\n-    }\n-\n-    /**\n-     * Subscribes the connecting client to the stream of events filtered by the\n-     * given eventFilter.\n-     *\n-     * @throws IOException\n-     * @throws InterruptedException\n-     */\n-    @GET\n-    @Produces(MediaType.SERVER_SENT_EVENTS)\n-    @Operation(summary = \"Creates the SSE stream for item states, sends all requested states once and then only changes states\", responses = {\n-            @ApiResponse(responseCode = \"200\", description = \"OK\") })\n-    public void getStates(@Context final SseEventSink sseEventSink, @QueryParam(\"a\") List<String> itemNames,\n-            @QueryParam(\"i\") long index, @QueryParam(\"t\") long time) throws IOException, InterruptedException {\n-        this.itemNames = itemNames;\n-\n-        broadcaster.add(sseEventSink, new SseSinkInfo(itemNames, index, time));\n-\n-        // get all requested items and send their states to the client\n-        items = new HashMap<>();\n-        // send the current states of all items to the client\n-        List<StateBean> states = new ArrayList<>();\n-        for (String cvItemName : itemNames) {\n-            try {\n-                String[] parts = cvItemName.split(\":\");\n-                String ohItemName = cvItemName;\n-                Class<? extends State> stateClass = null;\n-                if (parts.length == 2) {\n-                    String classPrefix = parts[0].toLowerCase();\n-                    if (Config.itemTypeMapper.containsKey(classPrefix)) {\n-                        stateClass = Config.itemTypeMapper.get(classPrefix);\n-                        classPrefix += \":\";\n-                    } else {\n-                        logger.debug(\"no type found for '{}'\", classPrefix);\n-                        classPrefix = \"\";\n-                    }\n-                    ohItemName = parts[1];\n-                }\n-                Item item = this.itemRegistry.getItem(ohItemName);\n-                if (!items.containsKey(item)) {\n-                    items.put(item, new HashMap<>());\n-                }\n-                items.get(item).put(cvItemName, stateClass);\n-                StateBean itemState = new StateBean();\n-                itemState.name = cvItemName;\n-\n-                if (stateClass != null) {\n-                    itemState.state = item.getStateAs(stateClass).toString();\n-                    logger.trace(\"get state of '{}' as '{}' == '{}'\", item, stateClass, itemState.state);\n-                } else {\n-                    itemState.state = item.getState().toString();\n-                }\n-                states.add(itemState);\n-            } catch (ItemNotFoundException e) {\n-                logger.error(\"{}\", e.getLocalizedMessage());\n-            }\n-        }\n-\n-        logger.debug(\"initially broadcasting {}/{} item states\", states.size(), itemNames.size());\n-        broadcaster.send(SseUtil.buildEvent(sse.newEventBuilder(), states));\n-\n-        // listen to state changes of the requested items\n-        registerItems();\n-    }\n-\n-    /**\n-     * listen for state changes from the requested items\n-     */\n-    @Override\n-    public void registerItems() {\n-        for (Item item : items.keySet()) {\n-            if (item instanceof GenericItem) {\n-                ((GenericItem) item).addStateChangeListener(stateEventListener);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * listens to state changes of the given item, if it is part of the requested items\n-     *\n-     * @param item the new item, that should be listened to\n-     */\n-    @Override\n-    public void registerItem(Item item) {\n-        if (items.containsKey(item) || !itemNames.contains(item.getName())) {\n-            return;\n-        }\n-        if (item instanceof GenericItem) {\n-            ((GenericItem) item).addStateChangeListener(stateEventListener);\n-        }\n-    }\n-\n-    /**\n-     * listens to state changes of the given item, if it is part of the\n-     * requested items\n-     *\n-     * @param item the new item, that should be listened to\n-     */\n-    @Override\n-    public void unregisterItem(Item item) {\n-        if (items.containsKey(item) || !itemNames.contains(item.getName())) {\n-            return;\n-        }\n-        if (item instanceof GenericItem) {\n-            ((GenericItem) item).removeStateChangeListener(stateEventListener);\n-            items.remove(item);\n-        }\n-    }\n-\n-    /**\n-     * Broadcasts an event described by the given parameters to all currently\n-     * listening clients.\n-     *\n-     * @param eventObject bean that can be converted to a JSON object.\n-     */\n-    @Override\n-    public void broadcastEvent(final Object eventObject) {\n-        if (sse == null) {\n-            logger.trace(\"broadcast skipped (no one listened since activation)\");\n-            return;\n-        }\n-\n-        executorService.execute(() -> broadcaster.send(SseUtil.buildEvent(sse.newEventBuilder(), eventObject)));\n-    }\n-\n-    @Override\n-    public Map<String, @Nullable Class<? extends State>> getClientItems(Item item) {\n-        return Objects.requireNonNullElse(items.get(item), Map.of());\n-    }\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/rest/WriteResource.java",
          "status": "removed",
          "additions": 0,
          "deletions": 116,
          "patch": "@@ -1,116 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.backend.rest;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.Response.Status;\n-import javax.ws.rs.core.UriInfo;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.openhab.core.events.EventPublisher;\n-import org.openhab.core.io.rest.RESTConstants;\n-import org.openhab.core.io.rest.RESTResource;\n-import org.openhab.core.items.Item;\n-import org.openhab.core.items.ItemNotFoundException;\n-import org.openhab.core.items.ItemRegistry;\n-import org.openhab.core.items.events.ItemEventFactory;\n-import org.openhab.core.types.Command;\n-import org.openhab.core.types.TypeParser;\n-import org.openhab.ui.cometvisu.internal.Config;\n-import org.openhab.ui.cometvisu.internal.backend.model.SuccessBean;\n-import org.osgi.service.component.annotations.Activate;\n-import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.component.annotations.Reference;\n-import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JSONRequired;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsName;\n-import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsResource;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import io.swagger.v3.oas.annotations.Operation;\n-import io.swagger.v3.oas.annotations.Parameter;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-\n-/**\n- * handles state updates send by the CometVisu client and forwars them to the EventPublisher\n- *\n- * @author Tobias Br\u00e4utigam - Initial contribution\n- * @author Wouter Born - Migrated to JAX-RS Whiteboard Specification\n- * @author Wouter Born - Migrated to OpenAPI annotations\n- *\n- * @deprecated CometVisu (>=0.12) is using openHAB's native REST API, a special backend implementation is obsolete now\n- */\n-@Component\n-@JaxrsResource\n-@JaxrsName(Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_WRITE_ALIAS)\n-@JaxrsApplicationSelect(\"(\" + JaxrsWhiteboardConstants.JAX_RS_NAME + \"=\" + RESTConstants.JAX_RS_NAME + \")\")\n-@JSONRequired\n-@Path(Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_WRITE_ALIAS)\n-@Tag(name = Config.COMETVISU_BACKEND_ALIAS + \"/\" + Config.COMETVISU_BACKEND_WRITE_ALIAS)\n-@NonNullByDefault\n-@Deprecated(since = \"3.4\", forRemoval = true)\n-public class WriteResource implements RESTResource {\n-    private final Logger logger = LoggerFactory.getLogger(WriteResource.class);\n-\n-    private final EventPublisher eventPublisher;\n-    private final ItemRegistry itemRegistry;\n-\n-    private @Context @NonNullByDefault({}) UriInfo uriInfo;\n-\n-    @Activate\n-    public WriteResource(final @Reference EventPublisher eventPublisher, final @Reference ItemRegistry itemRegistry) {\n-        this.eventPublisher = eventPublisher;\n-        this.itemRegistry = itemRegistry;\n-    }\n-\n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Operation(summary = \"starts defined actions e.g. downloading the CometVisu client\", responses = {\n-            @ApiResponse(responseCode = \"200\", description = \"OK\"),\n-            @ApiResponse(responseCode = \"404\", description = \"Item not found\") })\n-    public Response setState(@Context HttpHeaders headers,\n-            @Parameter(description = \"Item name\", required = true) @QueryParam(\"a\") String itemName,\n-            @Parameter(description = \"Item value\", required = true) @QueryParam(\"v\") String value,\n-            @Parameter(description = \"timestamp\") @QueryParam(\"ts\") long timestamp) {\n-        if (logger.isDebugEnabled()) {\n-            logger.debug(\"Received CV write request at '{}' for item '{}' with value '{}'.\", uriInfo.getPath(),\n-                    itemName, value);\n-        }\n-        Item item;\n-        try {\n-            item = itemRegistry.getItem(itemName);\n-            Command command = TypeParser.parseCommand(item.getAcceptedCommandTypes(), value);\n-            SuccessBean bean = new SuccessBean();\n-            if (command != null) {\n-                eventPublisher.post(ItemEventFactory.createCommandEvent(item.getName(), command));\n-                bean.success = 1;\n-            } else {\n-                bean.success = 0;\n-            }\n-            return Response.ok(bean, MediaType.APPLICATION_JSON).build();\n-        } catch (ItemNotFoundException e) {\n-            logger.error(\"{}\", e.getLocalizedMessage());\n-            return Response.status(Status.NOT_FOUND).build();\n-        }\n-    }\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/backend/sitemap/ConfigHelper.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -767,7 +767,7 @@ public String getLabel(Widget widget) {\n     public void addSeparatorToNavbar(Page page, NavbarPositionType position, boolean ifNotEmpty) {\n         Navbar navbar = getNavbar(page, position);\n         if (navbar != null) {\n-            if (!ifNotEmpty || navbar.getPageOrGroupOrLine().size() > 0) {\n+            if (!ifNotEmpty || !navbar.getPageOrGroupOrLine().isEmpty()) {\n                 Line line = new Line();\n                 line.setLayout(createLayout(0));\n                 navbar.getPageOrGroupOrLine().add(factory.createNavbarLine(line));"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/listeners/ItemRegistryEventListener.java",
          "status": "removed",
          "additions": 0,
          "deletions": 77,
          "patch": "@@ -1,77 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.listeners;\n-\n-import java.util.Collection;\n-\n-import org.openhab.core.items.Item;\n-import org.openhab.core.items.ItemRegistry;\n-import org.openhab.core.items.ItemRegistryChangeListener;\n-import org.openhab.ui.cometvisu.internal.backend.rest.EventBroadcaster;\n-import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.component.annotations.Reference;\n-\n-/**\n- * Listener responsible for notifying the CometVisu backend about changes\n- * in the ItemRegistry\n- *\n- * @author Tobias Br\u00e4utigam - Initial Contribution and API\n- */\n-@Component(immediate = true)\n-public class ItemRegistryEventListener implements ItemRegistryChangeListener {\n-    private ItemRegistry itemRegistry;\n-\n-    private EventBroadcaster eventBroadcaster;\n-\n-    @Reference\n-    protected void setEventBroadcaster(EventBroadcaster eventBroadcaster) {\n-        this.eventBroadcaster = eventBroadcaster;\n-    }\n-\n-    protected void unsetEventBroadcaster(EventBroadcaster eventBroadcaster) {\n-        this.eventBroadcaster = null;\n-    }\n-\n-    @Reference\n-    protected void setItemRegistry(ItemRegistry itemRegistry) {\n-        this.itemRegistry = itemRegistry;\n-        this.itemRegistry.addRegistryChangeListener(this);\n-    }\n-\n-    protected void unsetItemRegistry(ItemRegistry itemRegistry) {\n-        this.itemRegistry.removeRegistryChangeListener(this);\n-        this.itemRegistry = null;\n-    }\n-\n-    @Override\n-    public void added(Item element) {\n-        eventBroadcaster.registerItem(element);\n-    }\n-\n-    @Override\n-    public void removed(Item element) {\n-        eventBroadcaster.unregisterItem(element);\n-    }\n-\n-    @Override\n-    public void updated(Item oldElement, Item element) {\n-        eventBroadcaster.unregisterItem(oldElement);\n-        eventBroadcaster.registerItem(element);\n-    }\n-\n-    @Override\n-    public void allItemsChanged(Collection<String> oldItemNames) {\n-        // All items have changed, StateListener needs to be registered to the new Items\n-        eventBroadcaster.registerItems();\n-    }\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/listeners/StateEventListener.java",
          "status": "removed",
          "additions": 0,
          "deletions": 87,
          "patch": "@@ -1,87 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.listeners;\n-\n-import java.util.Map;\n-\n-import org.eclipse.jdt.annotation.Nullable;\n-import org.openhab.core.items.GroupItem;\n-import org.openhab.core.items.Item;\n-import org.openhab.core.items.StateChangeListener;\n-import org.openhab.core.types.State;\n-import org.openhab.ui.cometvisu.internal.backend.model.StateBean;\n-import org.openhab.ui.cometvisu.internal.backend.rest.EventBroadcaster;\n-\n-/**\n- * listens to state changes on items and send them to an EventBroadcaster\n- *\n- * @author Tobias Br\u00e4utigam - Initial contribution\n- */\n-public class StateEventListener implements StateChangeListener {\n-\n-    private EventBroadcaster eventBroadcaster;\n-\n-    public StateEventListener(EventBroadcaster eventBroadcaster) {\n-        this.eventBroadcaster = eventBroadcaster;\n-    }\n-\n-    public void setEventBroadcaster(EventBroadcaster eventBroadcaster) {\n-        this.eventBroadcaster = eventBroadcaster;\n-    }\n-\n-    protected void unsetEventBroadcaster(EventBroadcaster eventBroadcaster) {\n-        this.eventBroadcaster = null;\n-    }\n-\n-    @Override\n-    public void stateChanged(Item item, State oldState, State newState) {\n-        Map<String, @Nullable Class<? extends State>> clientItems = eventBroadcaster.getClientItems(item);\n-        if (!clientItems.isEmpty()) {\n-            for (String cvItemName : clientItems.keySet()) {\n-                Class<? extends State> stateClass = clientItems.get(cvItemName);\n-                StateBean stateBean = new StateBean();\n-                stateBean.name = cvItemName;\n-                if (stateClass != null) {\n-                    stateBean.state = item.getStateAs(stateClass).toString();\n-                } else {\n-                    stateBean.state = item.getState().toString();\n-                }\n-                eventBroadcaster.broadcastEvent(stateBean);\n-            }\n-        } else {\n-            StateBean stateBean = new StateBean();\n-            stateBean.name = item.getName();\n-            stateBean.state = newState.toString();\n-            eventBroadcaster.broadcastEvent(stateBean);\n-        }\n-    }\n-\n-    @Override\n-    public void stateUpdated(Item item, State state) {\n-        if (item instanceof GroupItem) {\n-            // group item update could be relevant for the client, although the state of switch group does not change\n-            // wenn more the one are on, the number-groupFunction changes\n-            Map<String, @Nullable Class<? extends State>> clientItems = eventBroadcaster.getClientItems(item);\n-            for (String cvItemName : clientItems.keySet()) {\n-                Class<? extends State> stateClass = clientItems.get(cvItemName);\n-                if (stateClass != null) {\n-                    StateBean stateBean = new StateBean();\n-                    stateBean.name = cvItemName;\n-                    stateBean.state = item.getStateAs(stateClass).toString();\n-\n-                    eventBroadcaster.broadcastEvent(stateBean);\n-                }\n-            }\n-        }\n-    }\n-}"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/servlet/CometVisuServlet.java",
          "status": "modified",
          "additions": 17,
          "deletions": 2,
          "patch": "@@ -20,7 +20,6 @@\n import java.io.OutputStream;\n import java.io.PrintWriter;\n import java.io.RandomAccessFile;\n-import java.io.UnsupportedEncodingException;\n import java.net.URLDecoder;\n import java.nio.charset.StandardCharsets;\n import java.text.DateFormat;\n@@ -45,6 +44,7 @@\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.core.MediaType;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.OpenHAB;\n import org.openhab.core.items.Item;\n@@ -72,6 +72,7 @@\n  *\n  * @author Tobias Br\u00e4utigam - Initial contribution\n  */\n+@NonNullByDefault\n public class CometVisuServlet extends HttpServlet {\n     private static final long serialVersionUID = 4448918908615003303L;\n     private final Logger logger = LoggerFactory.getLogger(CometVisuServlet.class);\n@@ -138,6 +139,10 @@ public final void init(@Nullable ServletConfig config) throws ServletException {\n     @Override\n     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n         File requestedFile = getRequestedFile(req);\n+        if (requestedFile == null) {\n+            resp.sendError(HttpServletResponse.SC_NOT_FOUND);\n+            return;\n+        }\n \n         String path = req.getPathInfo();\n         if (path == null) {\n@@ -168,6 +173,10 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws Se\n                 }\n             }\n         }\n+        if (requestedFile.getName().equalsIgnoreCase(\"version\")) {\n+            // tell client that its been served by openhab\n+            resp.setHeader(\"X-CometVisu-Backend-Name\", \"openhab\");\n+        }\n         if (requestedFile.getName().equalsIgnoreCase(\"hidden.php\")) {\n             // do not deliver the hidden php\n             resp.sendError(HttpServletResponse.SC_FORBIDDEN);\n@@ -178,7 +187,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws Se\n         }\n     }\n \n-    protected File getRequestedFile(HttpServletRequest req) throws UnsupportedEncodingException {\n+    protected @Nullable File getRequestedFile(HttpServletRequest req) throws IOException {\n         String requestedFile = req.getPathInfo();\n         File file = null;\n \n@@ -188,12 +197,18 @@ protected File getRequestedFile(HttpServletRequest req) throws UnsupportedEncodi\n                 requestedFile = requestedFile.substring(0, requestedFile.length() - 1);\n             }\n             file = new File(userFileFolder, URLDecoder.decode(requestedFile, StandardCharsets.UTF_8));\n+            if (!file.getCanonicalPath().startsWith(userFileFolder.getCanonicalPath() + File.separator)) {\n+                return null;\n+            }\n         }\n         // serve the file from the cometvisu src directory\n         if (file == null || !file.exists() || file.isDirectory()) {\n             file = requestedFile != null\n                     ? new File(rootFolder, URLDecoder.decode(requestedFile, StandardCharsets.UTF_8))\n                     : rootFolder;\n+            if (!file.getCanonicalPath().startsWith(rootFolder.getCanonicalPath() + File.separator)) {\n+                return null;\n+            }\n         }\n         if (file.isDirectory()) {\n             // search for an index file"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/util/FsUtil.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -287,7 +287,7 @@ public FsEntry getEntry(MountedFile mfile, boolean recursive) {\n     }\n \n     public static Response createErrorResponse(FileOperationException e) {\n-        return FsUtil.createErrorResponse(e.getStatus(), e.getCause().toString());\n+        return FsUtil.createErrorResponse(e.getStatus(), e.getMessage());\n     }\n \n     public static Response createErrorResponse(Status status, String message) {"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/util/MountedFile.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -82,6 +82,10 @@ public boolean exists() {\n         return toFile().exists();\n     }\n \n+    public boolean canWrite() {\n+        return toFile().canWrite();\n+    }\n+\n     public boolean isDirectory() {\n         return toFile().isDirectory();\n     }"
        },
        {
          "filename": "bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/util/SseUtil.java",
          "status": "removed",
          "additions": 0,
          "deletions": 71,
          "patch": "@@ -1,71 +0,0 @@\n-/**\n- * Copyright (c) 2010-2024 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.ui.cometvisu.internal.util;\n-\n-import java.util.Date;\n-\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.sse.OutboundSseEvent;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.openhab.ui.cometvisu.internal.StateBeanMessageBodyWriter;\n-import org.openhab.ui.cometvisu.internal.backend.model.StateBean;\n-\n-/**\n- * Utility class containing helper methods for the SSE implementation.\n- *\n- * @author Tobias Br\u00e4utigam - Initial Contribution and API\n- * @author Wouter Born - Migrated to JAX-RS Whiteboard Specification\n- */\n-@NonNullByDefault\n-public class SseUtil {\n-\n-    /**\n-     * Creates a new {@link OutboundSseEvent} object containing an\n-     * {@link StateBean} created for the given eventType, objectIdentifier,\n-     * eventObject.\n-     *\n-     * @param eventBuilder the builder used for building the event\n-     * @param eventObject the eventObject to be included\n-     * @return a new OutboundSseEvent\n-     */\n-    public static OutboundSseEvent buildEvent(OutboundSseEvent.Builder eventBuilder, Object eventObject) {\n-        StateBeanMessageBodyWriter writer = new StateBeanMessageBodyWriter();\n-        Date date = new Date();\n-        return eventBuilder.mediaType(MediaType.TEXT_PLAIN_TYPE).data(writer.serialize(eventObject))\n-                .id(String.valueOf(date.getTime())).build();\n-    }\n-\n-    /**\n-     * Used to mark our current thread(request processing) that SSE blocking\n-     * should be enabled.\n-     */\n-    private static ThreadLocal<Boolean> blockingSseEnabled = ThreadLocal.withInitial(() -> false);\n-\n-    /**\n-     * Returns true if the current thread is processing an SSE request that\n-     * should block.\n-     *\n-     * @return\n-     */\n-    public static boolean shouldAsyncBlock() {\n-        return blockingSseEnabled.get().booleanValue();\n-    }\n-\n-    /**\n-     * Marks the current thread as processing a blocking sse request.\n-     */\n-    public static void enableBlockingSse() {\n-        blockingSseEnabled.set(true);\n-    }\n-}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 4,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 8,
        "max_directory_depth": 13
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7ef5b6fe1c29aeca733d4012b5720538a07a245f",
            "date": "2025-01-13T12:13:22Z",
            "author_login": "florian-h05"
          },
          {
            "sha": "54a34981b0b49d1e7766cbd2162e6c5a6626ce4c",
            "date": "2025-01-13T12:11:39Z",
            "author_login": "florian-h05"
          },
          {
            "sha": "9a9d363fb86333a912ea373e62ad1f7c6a6161a7",
            "date": "2025-01-13T12:09:39Z",
            "author_login": "jimtng"
          },
          {
            "sha": "e7d9b65bc2e2d0bda4e9bb68bb6781f76aa2ea7a",
            "date": "2025-01-12T15:07:02Z",
            "author_login": "jimtng"
          },
          {
            "sha": "03a7fa118277dcbcb793f8091d88fafc9aca3f62",
            "date": "2025-01-12T13:41:49Z",
            "author_login": "jimtng"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "openHAB, a provider of open-source home automation software, has add-ons including the visualization add-on CometVisu. CometVisuServlet in versions prior to 4.2.1 is susceptible to an unauthenticated path traversal vulnerability. Local files on the server can be requested via HTTP GET on the CometVisuServlet. This issue may lead to information disclosure. Users should upgrade to version 4.2.1 of the CometVisu add-on of openHAB to receive a patch.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-12T13:38:34.970",
    "last_modified": "2024-09-12T16:01:42.113",
    "fix_date": "2024-07-17T20:00:00Z"
  },
  "references": [
    {
      "url": "https://github.com/openhab/openhab-webui/blob/1c03c60f84388b9d7da0231df2d4ebb1e17d3fcf/bundles/org.openhab.ui.cometvisu/src/main/java/org/openhab/ui/cometvisu/internal/servlet/CometVisuServlet.java#L75",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/openhab/openhab-webui/commit/630e8525835c698cf58856aa43782d92b18087f2",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/openhab/openhab-webui/security/advisories/GHSA-pcwp-26pw-j98w",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.548491",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openhab-webui",
    "owner": "openhab",
    "created_at": "2019-02-17T18:19:51Z",
    "updated_at": "2025-01-13T12:13:26Z",
    "pushed_at": "2025-01-13T12:13:22Z",
    "size": 44443,
    "stars": 230,
    "forks": 243,
    "open_issues": 336,
    "watchers": 230,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "2.5.x",
      "3.0.x",
      "3.1.x",
      "3.2.x",
      "3.4.x",
      "4.0.x",
      "4.1.x",
      "4.2.x",
      "4.3.x",
      "main"
    ],
    "languages": {
      "Vue": 1802795,
      "JavaScript": 1293549,
      "Java": 723183,
      "HTML": 299248,
      "SCSS": 43941,
      "Nearley": 18307,
      "CSS": 15691,
      "Stylus": 11468,
      "Shell": 5417,
      "Dockerfile": 1359
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "epl-2.0"
    },
    "collected_at": "2025-01-14T13:55:28.931992"
  }
}