{
  "cve_id": "CVE-2024-42487",
  "github_data": {
    "repository": "cilium/cilium",
    "fix_commit": "a3510fe4a92305822aa1a5e08cb6d6c873c8699a",
    "related_commits": [
      "a3510fe4a92305822aa1a5e08cb6d6c873c8699a"
    ],
    "patch_url": "https://github.com/cilium/cilium/commit/a3510fe4a92305822aa1a5e08cb6d6c873c8699a.patch",
    "fix_commit_details": {
      "sha": "a3510fe4a92305822aa1a5e08cb6d6c873c8699a",
      "commit_date": "2024-07-31T13:43:58Z",
      "author": {
        "login": "sayboras",
        "type": "User",
        "stats": {
          "total_commits": 901,
          "average_weekly_commits": 1.8968421052631579,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 177
        }
      },
      "commit_message": {
        "title": "gateway-api: Add HTTP method condition in sortable routes",
        "length": 364,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 122,
        "additions": 116,
        "deletions": 6
      },
      "files": [
        {
          "filename": "operator/pkg/model/translation/envoy_virtual_host.go",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -42,6 +42,7 @@ type VirtualHostMutator func(*envoy_config_route_v3.VirtualHost) *envoy_config_r\n //   - Exact Match length\n //   - Regex Match length\n //   - Prefix match length\n+//   - Method match\n //   - Number of header matches\n //   - Number of query parameter matches\n //\n@@ -81,6 +82,20 @@ func (s SortableRoute) Less(i, j int) bool {\n \t\treturn prefixMatch1 > prefixMatch2\n \t}\n \n+\t// Next up, sort by method based on :method header\n+\t// Give higher priority for the route having method specified\n+\tmethod1 := getMethod(s[i].Match.GetHeaders())\n+\tmethod2 := getMethod(s[j].Match.GetHeaders())\n+\tif method1 == nil && method2 != nil {\n+\t\treturn false\n+\t}\n+\tif method1 != nil && method2 == nil {\n+\t\treturn true\n+\t}\n+\tif method1 != nil && *method1 != *method2 {\n+\t\treturn *method1 < *method2\n+\t}\n+\n \t// If that's the same, then sort by header length\n \tif headerMatch1 != headerMatch2 {\n \t\treturn headerMatch1 > headerMatch2\n@@ -90,6 +105,15 @@ func (s SortableRoute) Less(i, j int) bool {\n \treturn queryMatch1 > queryMatch2\n }\n \n+func getMethod(headers []*envoy_config_route_v3.HeaderMatcher) *string {\n+\tfor _, h := range headers {\n+\t\tif h.Name == \":method\" {\n+\t\t\treturn model.AddressOf(h.GetStringMatch().GetExact())\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n func (s SortableRoute) Swap(i, j int) {\n \ts[i], s[j] = s[j], s[i]\n }"
        },
        {
          "filename": "operator/pkg/model/translation/envoy_virtual_host_test.go",
          "status": "modified",
          "additions": 88,
          "deletions": 2,
          "patch": "@@ -91,7 +91,6 @@ func TestSortableRoute(t *testing.T) {\n \t\t\t\t},\n \t\t\t},\n \t\t},\n-\n \t\t{\n \t\t\tName: \"regex match with two headers\",\n \t\t\tMatch: &envoy_config_route_v3.RouteMatch{\n@@ -124,7 +123,6 @@ func TestSortableRoute(t *testing.T) {\n \t\t\t\t},\n \t\t\t},\n \t\t},\n-\n \t\t{\n \t\t\tName: \"exact match short\",\n \t\t\tMatch: &envoy_config_route_v3.RouteMatch{\n@@ -141,6 +139,46 @@ func TestSortableRoute(t *testing.T) {\n \t\t\t\t},\n \t\t\t},\n \t\t},\n+\t\t{\n+\t\t\tName: \"exact match long with POST method\",\n+\t\t\tMatch: &envoy_config_route_v3.RouteMatch{\n+\t\t\t\tPathSpecifier: &envoy_config_route_v3.RouteMatch_Path{\n+\t\t\t\t\tPath: \"/exact/match/longest\",\n+\t\t\t\t},\n+\t\t\t\tHeaders: []*envoy_config_route_v3.HeaderMatcher{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tName: \":method\",\n+\t\t\t\t\t\tHeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{\n+\t\t\t\t\t\t\tStringMatch: &envoy_type_matcher_v3.StringMatcher{\n+\t\t\t\t\t\t\t\tMatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{\n+\t\t\t\t\t\t\t\t\tExact: \"POST\",\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tName: \"exact match long with GET method\",\n+\t\t\tMatch: &envoy_config_route_v3.RouteMatch{\n+\t\t\t\tPathSpecifier: &envoy_config_route_v3.RouteMatch_Path{\n+\t\t\t\t\tPath: \"/exact/match/longest\",\n+\t\t\t\t},\n+\t\t\t\tHeaders: []*envoy_config_route_v3.HeaderMatcher{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tName: \":method\",\n+\t\t\t\t\t\tHeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{\n+\t\t\t\t\t\t\tStringMatch: &envoy_type_matcher_v3.StringMatcher{\n+\t\t\t\t\t\t\t\tMatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{\n+\t\t\t\t\t\t\t\t\tExact: \"GET\",\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n \t\t{\n \t\t\tName: \"exact match with one header\",\n \t\t\tMatch: &envoy_config_route_v3.RouteMatch{\n@@ -227,6 +265,46 @@ func TestSortableRoute(t *testing.T) {\n \t\t\t\t},\n \t\t\t},\n \t\t},\n+\t\t{\n+\t\t\tName: \"prefix match short with HEAD method\",\n+\t\t\tMatch: &envoy_config_route_v3.RouteMatch{\n+\t\t\t\tPathSpecifier: &envoy_config_route_v3.RouteMatch_PathSeparatedPrefix{\n+\t\t\t\t\tPathSeparatedPrefix: \"/prefix/match\",\n+\t\t\t\t},\n+\t\t\t\tHeaders: []*envoy_config_route_v3.HeaderMatcher{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tName: \":method\",\n+\t\t\t\t\t\tHeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{\n+\t\t\t\t\t\t\tStringMatch: &envoy_type_matcher_v3.StringMatcher{\n+\t\t\t\t\t\t\t\tMatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{\n+\t\t\t\t\t\t\t\t\tExact: \"HEAD\",\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tName: \"prefix match short with GET method\",\n+\t\t\tMatch: &envoy_config_route_v3.RouteMatch{\n+\t\t\t\tPathSpecifier: &envoy_config_route_v3.RouteMatch_PathSeparatedPrefix{\n+\t\t\t\t\tPathSeparatedPrefix: \"/prefix/match\",\n+\t\t\t\t},\n+\t\t\t\tHeaders: []*envoy_config_route_v3.HeaderMatcher{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tName: \":method\",\n+\t\t\t\t\t\tHeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{\n+\t\t\t\t\t\t\tStringMatch: &envoy_type_matcher_v3.StringMatcher{\n+\t\t\t\t\t\t\t\tMatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{\n+\t\t\t\t\t\t\t\t\tExact: \"GET\",\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n \t\t{\n \t\t\tName: \"prefix match long\",\n \t\t\tMatch: &envoy_config_route_v3.RouteMatch{\n@@ -328,10 +406,14 @@ func TestSortableRoute(t *testing.T) {\n \t\t\"regex match with two headers\",\n \t\t\"exact match short\",\n \t\t\"exact match long\",\n+\t\t\"exact match long with POST method\",\n+\t\t\"exact match long with GET method\",\n \t\t\"exact match with one header\",\n \t\t\"exact match with one header and one query\",\n \t\t\"exact match with two headers\",\n \t\t\"prefix match short\",\n+\t\t\"prefix match short with HEAD method\",\n+\t\t\"prefix match short with GET method\",\n \t\t\"prefix match long\",\n \t\t\"prefix match with one header\",\n \t\t\"prefix match with one header and one query\",\n@@ -342,6 +424,8 @@ func TestSortableRoute(t *testing.T) {\n \n \tnamesAfterSort := buildNameSlice(arr)\n \tassert.Equal(t, []string{\n+\t\t\"exact match long with GET method\",\n+\t\t\"exact match long with POST method\",\n \t\t\"exact match long\",\n \t\t\"exact match with two headers\",\n \t\t\"exact match with one header and one query\",\n@@ -353,6 +437,8 @@ func TestSortableRoute(t *testing.T) {\n \t\t\"regex match with one header\",\n \t\t\"regex match short\",\n \t\t\"prefix match long\",\n+\t\t\"prefix match short with GET method\",\n+\t\t\"prefix match short with HEAD method\",\n \t\t\"prefix match short\",\n \t\t\"prefix match with two headers\",\n \t\t\"prefix match with one header and one query\","
        },
        {
          "filename": "operator/pkg/model/translation/gateway-api/translator_fixture_test.go",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -2498,14 +2498,14 @@ var methodMatchingHTTPListenersHTTPListenersCiliumEnvoyConfig = &ciliumv2.Cilium\n \t\t\t\t\t\t\t\t\t\t\t\tHeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{\n \t\t\t\t\t\t\t\t\t\t\t\t\tStringMatch: &envoy_type_matcher_v3.StringMatcher{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tMatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExact: \"POST\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExact: \"GET\",\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\tAction: routeActionBackendV1,\n+\t\t\t\t\t\t\t\t\tAction: routeActionBackendV2,\n \t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\t\tMatch: &envoy_config_route_v3.RouteMatch{\n@@ -2518,14 +2518,14 @@ var methodMatchingHTTPListenersHTTPListenersCiliumEnvoyConfig = &ciliumv2.Cilium\n \t\t\t\t\t\t\t\t\t\t\t\tHeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{\n \t\t\t\t\t\t\t\t\t\t\t\t\tStringMatch: &envoy_type_matcher_v3.StringMatcher{\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tMatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExact: \"GET\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExact: \"POST\",\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\tAction: routeActionBackendV2,\n+\t\t\t\t\t\t\t\t\tAction: routeActionBackendV1,\n \t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t},\n \t\t\t\t\t\t},"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b0382b5258660a2b464e46b29a3e33dca6d9ef59",
            "date": "2025-01-10T11:12:30Z",
            "author_login": "pippolo84"
          },
          {
            "sha": "6ee68135db4a2e6a6142f5e2ad438f4239b18797",
            "date": "2025-01-10T11:09:24Z",
            "author_login": "pippolo84"
          },
          {
            "sha": "5fc47e9521e085ef441c14360f305cb8cb69314e",
            "date": "2025-01-10T09:55:48Z",
            "author_login": "pippolo84"
          },
          {
            "sha": "705010764523eb7fb3e07890b63ad841ae06d46e",
            "date": "2024-06-21T12:39:33Z",
            "author_login": "aanm"
          },
          {
            "sha": "4ffb0befe8c76180011751e26bb123d0a5d822d1",
            "date": "2024-11-25T08:05:17Z",
            "author_login": "julianwiedmann"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-113",
    "description": "Cilium is a networking, observability, and security solution with an eBPF-based dataplane. In the 1.15 branch prior to 1.15.8 and the 1.16 branch prior to 1.16.1, Gateway API HTTPRoutes and GRPCRoutes do not follow the match precedence specified in the Gateway API specification. In particular, request headers are matched before request methods, when the specification describes that the request methods must be respected before headers are matched. This could result in unexpected behaviour with security This issue is fixed in Cilium v1.15.8 and v1.16.1. There is no workaround for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-08-15T21:15:16.997",
    "last_modified": "2024-09-30T18:31:04.757",
    "fix_date": "2024-07-31T13:43:58Z"
  },
  "references": [
    {
      "url": "https://github.com/cilium/cilium/commit/a3510fe4a92305822aa1a5e08cb6d6c873c8699a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/pull/34109",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/security/advisories/GHSA-qcm3-7879-xcww",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.356915",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cilium",
    "owner": "cilium",
    "created_at": "2015-12-16T12:33:31Z",
    "updated_at": "2025-01-14T13:11:02Z",
    "pushed_at": "2025-01-14T13:10:58Z",
    "size": 368013,
    "stars": 20686,
    "forks": 3031,
    "open_issues": 1031,
    "watchers": 20686,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "feature/main/svc-icmp-response",
      "feature/v1.11/beta-test",
      "feature/v1.11/k8s-ingress"
    ],
    "languages": {
      "Go": 18625849,
      "C": 1840788,
      "Shell": 217614,
      "Makefile": 77186,
      "Dockerfile": 31925,
      "Smarty": 25264,
      "Python": 12413,
      "SmPL": 12369,
      "HTML": 3439,
      "Lua": 2517,
      "Mustache": 1457,
      "TeX": 416
    },
    "commit_activity": {
      "total_commits_last_year": 5449,
      "avg_commits_per_week": 104.78846153846153,
      "days_active_last_year": 339
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:14:57.009385"
  }
}