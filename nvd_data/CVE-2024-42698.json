{
  "cve_id": "CVE-2024-42698",
  "github_data": {
    "repository": "shedaniel/RoughlyEnoughItems",
    "fix_commit": "e80ca84f1affb91d2388ddb298bfc6b141828cad",
    "related_commits": [
      "e80ca84f1affb91d2388ddb298bfc6b141828cad"
    ],
    "patch_url": "https://github.com/shedaniel/RoughlyEnoughItems/commit/e80ca84f1affb91d2388ddb298bfc6b141828cad.patch",
    "fix_commit_details": {
      "sha": "e80ca84f1affb91d2388ddb298bfc6b141828cad",
      "commit_date": "2024-07-22T12:23:30Z",
      "author": {
        "login": "shedaniel",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Check slots before modification",
        "length": 31,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 56,
        "additions": 53,
        "deletions": 3
      },
      "files": [
        {
          "filename": "api/src/main/java/me/shedaniel/rei/api/common/transfer/info/clean/InputCleanHandler.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -44,6 +44,10 @@ static void error(String translationKey) {\n     static <T extends AbstractContainerMenu> void returnSlotsToPlayerInventory(MenuInfoContext<T, ?, ?> context, DumpHandler<T, ?> dumpHandler, SlotAccessor slotAccessor) {\n         ItemStack stackToReturn = slotAccessor.getItemStack();\n         if (!stackToReturn.isEmpty()) {\n+            if (!slotAccessor.allowModification(context.getPlayerEntity())) {\n+                error(\"rei.rei.no.slot.in.inv\");\n+            }\n+            \n             for (; !(stackToReturn = slotAccessor.getItemStack()).isEmpty(); slotAccessor.takeStack(1)) {\n                 ItemStack stackToInsert = stackToReturn.copy();\n                 stackToInsert.setCount(1);"
        },
        {
          "filename": "api/src/main/java/me/shedaniel/rei/api/common/transfer/info/simple/DumpHandler.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -36,7 +36,7 @@ public interface DumpHandler<T extends AbstractContainerMenu, D extends Display>\n     \n     static SlotAccessor getOccupiedSlotWithRoomForStack(ItemStack stack, Iterable<SlotAccessor> inventoryStacks) {\n         for (SlotAccessor inventoryStack : inventoryStacks) {\n-            if (canStackAddMore(inventoryStack.getItemStack(), stack)) {\n+            if (canStackAddMore(inventoryStack.getItemStack(), stack) && inventoryStack.canPlace(stack)) {\n                 return inventoryStack;\n             }\n         }"
        },
        {
          "filename": "api/src/main/java/me/shedaniel/rei/api/common/transfer/info/stack/ContainerSlotAccessor.java",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -24,6 +24,7 @@\n package me.shedaniel.rei.api.common.transfer.info.stack;\n \n import net.minecraft.world.Container;\n+import net.minecraft.world.entity.player.Player;\n import net.minecraft.world.item.ItemStack;\n \n /**\n@@ -53,4 +54,14 @@ public void setItemStack(ItemStack stack) {\n     public ItemStack takeStack(int amount) {\n         return this.container.removeItem(index, amount);\n     }\n+    \n+    @Override\n+    public boolean allowModification(Player player) {\n+        return canPlace(getItemStack());\n+    }\n+    \n+    @Override\n+    public boolean canPlace(ItemStack stack) {\n+        return this.container.canPlaceItem(index, stack);\n+    }\n }"
        },
        {
          "filename": "api/src/main/java/me/shedaniel/rei/api/common/transfer/info/stack/SlotAccessor.java",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -41,6 +41,14 @@ public interface SlotAccessor {\n     \n     ItemStack takeStack(int amount);\n     \n+    default boolean allowModification(Player player) {\n+        return true;\n+    }\n+    \n+    default boolean canPlace(ItemStack stack) {\n+        return true;\n+    }\n+    \n     static SlotAccessor fromSlot(Slot slot) {\n         return new VanillaSlotAccessor(slot);\n     }"
        },
        {
          "filename": "api/src/main/java/me/shedaniel/rei/api/common/transfer/info/stack/VanillaSlotAccessor.java",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@\n \n package me.shedaniel.rei.api.common.transfer.info.stack;\n \n+import net.minecraft.world.entity.player.Player;\n import net.minecraft.world.inventory.Slot;\n import net.minecraft.world.item.ItemStack;\n \n@@ -54,4 +55,14 @@ public ItemStack takeStack(int amount) {\n     public Slot getSlot() {\n         return slot;\n     }\n+    \n+    @Override\n+    public boolean allowModification(Player player) {\n+        return slot.allowModification(player);\n+    }\n+    \n+    @Override\n+    public boolean canPlace(ItemStack stack) {\n+        return slot.mayPlace(stack);\n+    }\n }"
        },
        {
          "filename": "runtime/src/main/java/me/shedaniel/rei/impl/common/transfer/InputSlotCrafter.java",
          "status": "modified",
          "additions": 14,
          "deletions": 1,
          "patch": "@@ -117,6 +117,10 @@ protected void fillInputSlot(SlotAccessor slot, ItemStack toBeTakenStack) {\n                 }\n                 \n                 takenStack.setCount(1);\n+                if (!slot.canPlace(takenStack)) {\n+                    return;\n+                }\n+                \n                 if (slot.getItemStack().isEmpty()) {\n                     slot.setItemStack(takenStack);\n                 } else {\n@@ -148,13 +152,22 @@ protected void fillInputSlots(RecipeFinder recipeFinder, NonNullList<Ingredient>\n     \n     @Nullable\n     public SlotAccessor takeInventoryStack(ItemStack itemStack) {\n+        boolean rejectedModification = false;\n         for (SlotAccessor inventoryStack : inventoryStacks) {\n             ItemStack itemStack1 = inventoryStack.getItemStack();\n             if (!itemStack1.isEmpty() && areItemsEqual(itemStack, itemStack1) && !itemStack1.isDamaged() && !itemStack1.isEnchanted() && !itemStack1.hasCustomHoverName()) {\n-                return inventoryStack;\n+                if (!inventoryStack.allowModification(player)) {\n+                    rejectedModification = true;\n+                } else {\n+                    return inventoryStack;\n+                }\n             }\n         }\n         \n+        if (rejectedModification) {\n+            throw new IllegalStateException(\"Unable to take item from inventory due to slot not allowing modification! Item requested: \" + itemStack);\n+        }\n+        \n         return null;\n     }\n     "
        },
        {
          "filename": "runtime/src/main/java/me/shedaniel/rei/impl/common/transfer/NewInputSlotCrafter.java",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -77,6 +77,9 @@ protected void markDirty() {\n     protected void cleanInputs() {\n         for (SlotAccessor slot : getInputSlots()) {\n             ItemStack stackToReturn = slot.getItemStack();\n+            if (!slot.allowModification(player)) {\n+                throw new IllegalStateException(\"Slot \" + slot + \" is not modifiable!\");\n+            }\n             if (!stackToReturn.isEmpty()) {\n                 for (; !(stackToReturn = slot.getItemStack()).isEmpty(); slot.takeStack(1)) {\n                     ItemStack stackToInsert = stackToReturn.copy();"
        },
        {
          "filename": "settings.gradle",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2,8 +2,8 @@ pluginManagement {\n     repositories {\n         maven { url \"https://maven.shedaniel.me/\" }\n         maven { url \"https://maven.fabricmc.net/\" }\n-        maven { url \"https://files.minecraftforge.net/maven/\" }\n         gradlePluginPortal()\n+        maven { url \"https://files.minecraftforge.net/maven/\" }\n     }\n }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 12
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7dd36277569596092010a9a5148e34cec5b94d3b",
            "date": "2024-10-26T09:05:30Z",
            "author_login": "shedaniel"
          },
          {
            "sha": "f8bd895afcf87805c258ee543795391b1e361054",
            "date": "2024-10-26T09:05:08Z",
            "author_login": "shedaniel"
          },
          {
            "sha": "a8b69f3c95ebbf615c75b09871f09e976836a948",
            "date": "2024-10-26T09:03:44Z",
            "author_login": "shedaniel"
          },
          {
            "sha": "d0acdeaf8e855627086ed1257c6c98a0dfd7f670",
            "date": "2024-10-26T09:03:13Z",
            "author_login": "shedaniel"
          },
          {
            "sha": "659f87a0a131f080acc94a106b8f7d81a056982b",
            "date": "2024-10-26T09:02:24Z",
            "author_login": "shedaniel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-129",
    "description": "Roughly Enough Items (REI) v.16.0.729 and before contains an Improper Validation of Specified Index, Position, or Offset in Input vulnerability. The specific issue is a failure to validate slot index and decrement stack count in the Roughly Enough Items (REI) mod for Minecraft, which allows in-game item duplication.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-28T16:15:09.210",
    "last_modified": "2024-09-19T16:29:51.217",
    "fix_date": "2024-07-22T12:23:30Z"
  },
  "references": [
    {
      "url": "https://gist.github.com/apple502j/7b1af0082449c9bfbf910e9a25ef3595",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shedaniel/RoughlyEnoughItems/commit/e80ca84f1affb91d2388ddb298bfc6b141828cad",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.407654",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "RoughlyEnoughItems",
    "owner": "shedaniel",
    "created_at": "2018-12-21T11:21:36Z",
    "updated_at": "2025-01-10T18:54:27Z",
    "pushed_at": "2024-12-13T12:43:06Z",
    "size": 15005,
    "stars": 346,
    "forks": 71,
    "open_issues": 366,
    "watchers": 346,
    "has_security_policy": false,
    "default_branch": "16.x-1.21",
    "protected_branches": [],
    "languages": {
      "Java": 3520200
    },
    "commit_activity": {
      "total_commits_last_year": 49,
      "avg_commits_per_week": 0.9423076923076923,
      "days_active_last_year": 18
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T18:10:30.768578"
  }
}