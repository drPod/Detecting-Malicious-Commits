{
  "cve_id": "CVE-2024-4284",
  "github_data": {
    "repository": "mintplex-labs/anything-llm",
    "fix_commit": "1b35bcbeab10b77e6dbd263cceecf1b965a40789",
    "related_commits": [
      "1b35bcbeab10b77e6dbd263cceecf1b965a40789",
      "1b35bcbeab10b77e6dbd263cceecf1b965a40789"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "1b35bcbeab10b77e6dbd263cceecf1b965a40789",
      "commit_date": "2024-04-26T23:46:04Z",
      "author": {
        "login": "timothycarambat",
        "type": "User",
        "stats": {
          "total_commits": 928,
          "average_weekly_commits": 10.545454545454545,
          "total_additions": 195202,
          "total_deletions": 87044,
          "weeks_active": 82
        }
      },
      "commit_message": {
        "title": "Strengthen field validations on user Updates (#1201)",
        "length": 122,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 63,
        "additions": 58,
        "deletions": 5
      },
      "files": [
        {
          "filename": "server/models/user.js",
          "status": "modified",
          "additions": 51,
          "deletions": 3,
          "patch": "@@ -2,6 +2,23 @@ const prisma = require(\"../utils/prisma\");\n const { EventLogs } = require(\"./eventLogs\");\n \n const User = {\n+  writable: [\n+    // Used for generic updates so we can validate keys in request body\n+    \"username\",\n+    \"password\",\n+    \"pfpFilename\",\n+    \"role\",\n+    \"suspended\",\n+  ],\n+  // validations for the above writable fields.\n+  castColumnValue: function (key, value) {\n+    switch (key) {\n+      case \"suspended\":\n+        return Number(Boolean(value));\n+      default:\n+        return String(value);\n+    }\n+  },\n   create: async function ({ username, password, role = \"default\" }) {\n     const passwordCheck = this.checkPasswordComplexity(password);\n     if (!passwordCheck.checkedOK) {\n@@ -42,13 +59,26 @@ const User = {\n \n   update: async function (userId, updates = {}) {\n     try {\n+      if (!userId) throw new Error(\"No user id provided for update\");\n       const currentUser = await prisma.users.findUnique({\n         where: { id: parseInt(userId) },\n       });\n-      if (!currentUser) {\n-        return { success: false, error: \"User not found\" };\n-      }\n+      if (!currentUser) return { success: false, error: \"User not found\" };\n+\n+      // Removes non-writable fields for generic updates\n+      // and force-casts to the proper type;\n+      Object.entries(updates).forEach(([key, value]) => {\n+        if (this.writable.includes(key)) {\n+          updates[key] = this.castColumnValue(key, value);\n+          return;\n+        }\n+        delete updates[key];\n+      });\n+\n+      if (Object.keys(updates).length === 0)\n+        return { success: false, error: \"No valid updates applied.\" };\n \n+      // Handle password specific updates\n       if (updates.hasOwnProperty(\"password\")) {\n         const passwordCheck = this.checkPasswordComplexity(updates.password);\n         if (!passwordCheck.checkedOK) {\n@@ -78,6 +108,24 @@ const User = {\n     }\n   },\n \n+  // Explicit direct update of user object.\n+  // Only use this method when directly setting a key value\n+  // that takes no user input for the keys being modified.\n+  _update: async function (id = null, data = {}) {\n+    if (!id) throw new Error(\"No user id provided for update\");\n+\n+    try {\n+      const user = await prisma.users.update({\n+        where: { id },\n+        data,\n+      });\n+      return { user, message: null };\n+    } catch (error) {\n+      console.error(error.message);\n+      return { user: null, message: error.message };\n+    }\n+  },\n+\n   get: async function (clause = {}) {\n     try {\n       const user = await prisma.users.findFirst({ where: clause });"
        },
        {
          "filename": "server/utils/AiProviders/openRouter/index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -296,7 +296,7 @@ class OpenRouterLLM {\n           try {\n             JSON.parse(message);\n             validJSON = true;\n-          } catch { }\n+          } catch {}\n \n           if (!validJSON) {\n             // It can be possible that the chunk decoding is running away"
        },
        {
          "filename": "server/utils/PasswordRecovery/index.js",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -22,7 +22,7 @@ async function generateRecoveryCodes(userId) {\n   const { error } = await RecoveryCode.createMany(newRecoveryCodes);\n   if (!!error) throw new Error(error);\n \n-  const { success } = await User.update(userId, {\n+  const { user: success } = await User._update(userId, {\n     seen_recovery_codes: true,\n   });\n   if (!success) throw new Error(\"Failed to generate user recovery codes!\");\n@@ -80,6 +80,11 @@ async function resetPassword(token, _newPassword = \"\", confirmPassword = \"\") {\n   // JOI password rules will be enforced inside .update.\n   const { error } = await User.update(resetToken.user_id, {\n     password: newPassword,\n+  });\n+\n+  // seen_recovery_codes is not publicly writable\n+  // so we have to do direct update here\n+  await User._update(resetToken.user_id, {\n     seen_recovery_codes: false,\n   });\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "22d5891cccfc85c0e8fe6a3bc053445d1bce4cd6",
            "date": "2025-01-24T22:17:52Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "2ca22abc9cb1736794d91989b408d95328ea2f79",
            "date": "2025-01-24T21:41:37Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "48dcb22b25612191aba79209fa3d5f08f2454f98",
            "date": "2025-01-24T19:06:59Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "273d116586693d36366022da143c1159d3cd4ffc",
            "date": "2025-01-24T00:43:18Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "57f4f46a39b737f850ab5cf5ac5c24af2344a3b4",
            "date": "2025-01-24T00:35:38Z",
            "author_login": "shatfield4"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-400",
    "description": "A vulnerability in mintplex-labs/anything-llm allows for a denial of service (DoS) condition through the modification of a user's `id` attribute to a value of 0. This issue affects the current version of the software, with the latest commit id `57984fa85c31988b2eff429adfc654c46e0c342a`. By exploiting this vulnerability, an attacker, with manager or admin privileges, can render a chosen account completely inaccessible. The application's mechanism for suspending accounts does not provide a means to reverse this condition through the UI, leading to uncontrolled resource consumption. The vulnerability is introduced due to the lack of input validation and sanitization in the user modification endpoint and the middleware's token validation logic. This issue has been addressed in version 1.0.0 of the software.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-05-19T23:15:06.960",
    "last_modified": "2024-11-21T09:42:32.463",
    "fix_date": "2024-04-26T23:46:04Z"
  },
  "references": [
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/1b35bcbeab10b77e6dbd263cceecf1b965a40789",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/a5f45596-0aef-49e0-9f7d-63f1955a1552",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/1b35bcbeab10b77e6dbd263cceecf1b965a40789",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/a5f45596-0aef-49e0-9f7d-63f1955a1552",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:24.259983",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "anything-llm",
    "owner": "mintplex-labs",
    "created_at": "2023-06-04T02:29:14Z",
    "updated_at": "2025-01-26T07:34:32Z",
    "pushed_at": "2025-01-25T00:53:07Z",
    "size": 43115,
    "stars": 30921,
    "forks": 3104,
    "open_issues": 214,
    "watchers": 30921,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 3082811,
      "CSS": 73785,
      "Dockerfile": 9030,
      "HTML": 3904,
      "Shell": 1382,
      "HCL": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:35:14.537302"
  }
}