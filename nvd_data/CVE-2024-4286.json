{
  "cve_id": "CVE-2024-4286",
  "github_data": {
    "repository": "mintplex-labs/anything-llm",
    "fix_commit": "1b35bcbeab10b77e6dbd263cceecf1b965a40789",
    "related_commits": [
      "1b35bcbeab10b77e6dbd263cceecf1b965a40789",
      "1b35bcbeab10b77e6dbd263cceecf1b965a40789"
    ],
    "patch_url": "https://github.com/mintplex-labs/anything-llm/commit/1b35bcbeab10b77e6dbd263cceecf1b965a40789.patch",
    "fix_commit_details": {
      "sha": "1b35bcbeab10b77e6dbd263cceecf1b965a40789",
      "commit_date": "2024-04-26T23:46:04Z",
      "author": {
        "login": "timothycarambat",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Strengthen field validations on user Updates (#1201)",
        "length": 122,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 63,
        "additions": 58,
        "deletions": 5
      },
      "files": [
        {
          "filename": "server/models/user.js",
          "status": "modified",
          "additions": 51,
          "deletions": 3,
          "patch": "@@ -2,6 +2,23 @@ const prisma = require(\"../utils/prisma\");\n const { EventLogs } = require(\"./eventLogs\");\n \n const User = {\n+  writable: [\n+    // Used for generic updates so we can validate keys in request body\n+    \"username\",\n+    \"password\",\n+    \"pfpFilename\",\n+    \"role\",\n+    \"suspended\",\n+  ],\n+  // validations for the above writable fields.\n+  castColumnValue: function (key, value) {\n+    switch (key) {\n+      case \"suspended\":\n+        return Number(Boolean(value));\n+      default:\n+        return String(value);\n+    }\n+  },\n   create: async function ({ username, password, role = \"default\" }) {\n     const passwordCheck = this.checkPasswordComplexity(password);\n     if (!passwordCheck.checkedOK) {\n@@ -42,13 +59,26 @@ const User = {\n \n   update: async function (userId, updates = {}) {\n     try {\n+      if (!userId) throw new Error(\"No user id provided for update\");\n       const currentUser = await prisma.users.findUnique({\n         where: { id: parseInt(userId) },\n       });\n-      if (!currentUser) {\n-        return { success: false, error: \"User not found\" };\n-      }\n+      if (!currentUser) return { success: false, error: \"User not found\" };\n+\n+      // Removes non-writable fields for generic updates\n+      // and force-casts to the proper type;\n+      Object.entries(updates).forEach(([key, value]) => {\n+        if (this.writable.includes(key)) {\n+          updates[key] = this.castColumnValue(key, value);\n+          return;\n+        }\n+        delete updates[key];\n+      });\n+\n+      if (Object.keys(updates).length === 0)\n+        return { success: false, error: \"No valid updates applied.\" };\n \n+      // Handle password specific updates\n       if (updates.hasOwnProperty(\"password\")) {\n         const passwordCheck = this.checkPasswordComplexity(updates.password);\n         if (!passwordCheck.checkedOK) {\n@@ -78,6 +108,24 @@ const User = {\n     }\n   },\n \n+  // Explicit direct update of user object.\n+  // Only use this method when directly setting a key value\n+  // that takes no user input for the keys being modified.\n+  _update: async function (id = null, data = {}) {\n+    if (!id) throw new Error(\"No user id provided for update\");\n+\n+    try {\n+      const user = await prisma.users.update({\n+        where: { id },\n+        data,\n+      });\n+      return { user, message: null };\n+    } catch (error) {\n+      console.error(error.message);\n+      return { user: null, message: error.message };\n+    }\n+  },\n+\n   get: async function (clause = {}) {\n     try {\n       const user = await prisma.users.findFirst({ where: clause });"
        },
        {
          "filename": "server/utils/AiProviders/openRouter/index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -296,7 +296,7 @@ class OpenRouterLLM {\n           try {\n             JSON.parse(message);\n             validJSON = true;\n-          } catch { }\n+          } catch {}\n \n           if (!validJSON) {\n             // It can be possible that the chunk decoding is running away"
        },
        {
          "filename": "server/utils/PasswordRecovery/index.js",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -22,7 +22,7 @@ async function generateRecoveryCodes(userId) {\n   const { error } = await RecoveryCode.createMany(newRecoveryCodes);\n   if (!!error) throw new Error(error);\n \n-  const { success } = await User.update(userId, {\n+  const { user: success } = await User._update(userId, {\n     seen_recovery_codes: true,\n   });\n   if (!success) throw new Error(\"Failed to generate user recovery codes!\");\n@@ -80,6 +80,11 @@ async function resetPassword(token, _newPassword = \"\", confirmPassword = \"\") {\n   // JOI password rules will be enforced inside .update.\n   const { error } = await User.update(resetToken.user_id, {\n     password: newPassword,\n+  });\n+\n+  // seen_recovery_codes is not publicly writable\n+  // so we have to do direct update here\n+  await User._update(resetToken.user_id, {\n     seen_recovery_codes: false,\n   });\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4d5d8d4dec0e62662c8ec46537038353f45e0e66",
            "date": "2025-01-14T16:20:57Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "21af81085aeb049750942ac5f3b84775cb461693",
            "date": "2025-01-13T21:12:03Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "665e8e5bfe431ad93bed6736d0b450592617d042",
            "date": "2025-01-09T23:39:56Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "865f7eea296e544b2eb1ab8c1f322208eaf5eb05",
            "date": "2025-01-09T21:32:54Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "be886f7d61296a30d5b8a095ca8329f58a0c5a0a",
            "date": "2025-01-09T01:21:30Z",
            "author_login": "root-reindeer-flotilla"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-917",
    "description": "Mintplex-Labs' anything-llm application is vulnerable to improper neutralization of special elements used in an expression language statement, identified in the commit id `57984fa85c31988b2eff429adfc654c46e0c342a`. The vulnerability arises from the application's handling of user modifications by managers or admins, allowing for the modification of all existing attributes of the `user` database entity without proper checks or sanitization. This flaw can be exploited to delete user threads, denying users access to their previously submitted data, or to inject fake threads and/or chat history for social engineering attacks.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-05-26T23:15:21.600",
    "last_modified": "2024-11-21T09:42:32.600",
    "fix_date": "2024-04-26T23:46:04Z"
  },
  "references": [
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/1b35bcbeab10b77e6dbd263cceecf1b965a40789",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/a72d2923-297c-455f-af90-715e83b3da2b",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/1b35bcbeab10b77e6dbd263cceecf1b965a40789",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/a72d2923-297c-455f-af90-715e83b3da2b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:24.292345",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "anything-llm",
    "owner": "mintplex-labs",
    "created_at": "2023-06-04T02:29:14Z",
    "updated_at": "2025-01-14T13:49:57Z",
    "pushed_at": "2025-01-13T21:12:06Z",
    "size": 42916,
    "stars": 30237,
    "forks": 3030,
    "open_issues": 206,
    "watchers": 30237,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 3056909,
      "CSS": 73785,
      "Dockerfile": 9030,
      "HTML": 3904,
      "Shell": 1382,
      "HCL": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:04:33.088245"
  }
}