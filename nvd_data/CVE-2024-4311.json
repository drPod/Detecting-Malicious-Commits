{
  "cve_id": "CVE-2024-4311",
  "github_data": {
    "repository": "zenml-io/zenml",
    "fix_commit": "87a6c2c8f45b49ea83fbb5fe8fff7ab5365a60c9",
    "related_commits": [
      "87a6c2c8f45b49ea83fbb5fe8fff7ab5365a60c9"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "87a6c2c8f45b49ea83fbb5fe8fff7ab5365a60c9",
      "commit_date": "2024-04-30T09:24:42Z",
      "author": {
        "login": "stefannica",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add rate limiting to user password reset operations (#2643)",
        "length": 229,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 69,
        "additions": 50,
        "deletions": 19
      },
      "files": [
        {
          "filename": "src/zenml/zen_server/rate_limit.py",
          "status": "modified",
          "additions": 23,
          "deletions": 7,
          "patch": "@@ -16,11 +16,13 @@\n import inspect\n import time\n from collections import defaultdict\n+from contextlib import contextmanager\n from functools import wraps\n from typing import (\n     Any,\n     Callable,\n     Dict,\n+    Generator,\n     List,\n     Optional,\n     TypeVar,\n@@ -133,6 +135,25 @@ def _get_ipaddr(self, request: Request) -> str:\n \n             return request.client.host\n \n+    @contextmanager\n+    def limit_failed_requests(\n+        self, request: Request\n+    ) -> Generator[None, Any, Any]:\n+        \"\"\"Limits the number of failed requests.\n+\n+        Args:\n+            request: Request object.\n+\n+        Yields:\n+            None\n+        \"\"\"\n+        self.hit_limiter(request)\n+\n+        yield\n+\n+        # if request was successful - reset limiter\n+        self.reset_limiter(request)\n+\n \n def rate_limit_requests(\n     day_limit: Optional[int] = None,\n@@ -171,13 +192,8 @@ def decorated(\n                 request = kwargs[request_kwarg]\n             else:\n                 request = args[request_arg]\n-            limiter.hit_limiter(request)\n-\n-            ret = func(*args, **kwargs)\n-\n-            # if request was successful - reset limiter\n-            limiter.reset_limiter(request)\n-            return ret\n+            with limiter.limit_failed_requests(request):\n+                return func(*args, **kwargs)\n \n         return cast(F, decorated)\n "
        },
        {
          "filename": "src/zenml/zen_server/routers/users_endpoints.py",
          "status": "modified",
          "additions": 27,
          "deletions": 12,
          "patch": "@@ -17,6 +17,7 @@\n from uuid import UUID\n \n from fastapi import APIRouter, Depends, Security\n+from starlette.requests import Request\n \n from zenml.analytics.utils import email_opt_int\n from zenml.constants import (\n@@ -44,6 +45,7 @@\n     authorize,\n )\n from zenml.zen_server.exceptions import error_response\n+from zenml.zen_server.rate_limit import RequestLimiter\n from zenml.zen_server.rbac.endpoint_utils import (\n     verify_permissions_and_create_entity,\n )\n@@ -226,6 +228,10 @@ def get_user(\n # When the auth scheme is set to EXTERNAL, users cannot be updated via the\n # API.\n if server_config().auth_scheme != AuthScheme.EXTERNAL:\n+    pass_change_limiter = RequestLimiter(\n+        day_limit=server_config().login_rate_limit_day,\n+        minute_limit=server_config().login_rate_limit_minute,\n+    )\n \n     @router.put(\n         \"/{user_name_or_id}\",\n@@ -240,13 +246,15 @@ def get_user(\n     def update_user(\n         user_name_or_id: Union[str, UUID],\n         user_update: UserUpdate,\n+        request: Request,\n         auth_context: AuthContext = Security(authorize),\n     ) -> UserResponse:\n         \"\"\"Updates a specific user.\n \n         Args:\n             user_name_or_id: Name or ID of the user.\n             user_update: the user to use for the update.\n+            request: The request object.\n             auth_context: Authentication context.\n \n         Returns:\n@@ -283,13 +291,15 @@ def update_user(\n                     \"The current password must be supplied when changing the \"\n                     \"password.\"\n                 )\n-            auth_user = zen_store().get_auth_user(user_name_or_id)\n-            if not UserAuthModel.verify_password(\n-                user_update.old_password, auth_user\n-            ):\n-                raise IllegalOperationError(\n-                    \"The current password is incorrect.\"\n-                )\n+\n+            with pass_change_limiter.limit_failed_requests(request):\n+                auth_user = zen_store().get_auth_user(user_name_or_id)\n+                if not UserAuthModel.verify_password(\n+                    user_update.old_password, auth_user\n+                ):\n+                    raise IllegalOperationError(\n+                        \"The current password is incorrect.\"\n+                    )\n \n         if (\n             user_update.is_admin is not None\n@@ -529,12 +539,14 @@ def get_current_user(\n     @handle_exceptions\n     def update_myself(\n         user: UserUpdate,\n+        request: Request,\n         auth_context: AuthContext = Security(authorize),\n     ) -> UserResponse:\n         \"\"\"Updates a specific user.\n \n         Args:\n             user: the user to use for the update.\n+            request: The request object.\n             auth_context: The authentication context.\n \n         Returns:\n@@ -554,11 +566,14 @@ def update_myself(\n                     \"The current password must be supplied when changing the \"\n                     \"password.\"\n                 )\n-            auth_user = zen_store().get_auth_user(auth_context.user.id)\n-            if not UserAuthModel.verify_password(user.old_password, auth_user):\n-                raise IllegalOperationError(\n-                    \"The current password is incorrect.\"\n-                )\n+            with pass_change_limiter.limit_failed_requests(request):\n+                auth_user = zen_store().get_auth_user(auth_context.user.id)\n+                if not UserAuthModel.verify_password(\n+                    user.old_password, auth_user\n+                ):\n+                    raise IllegalOperationError(\n+                        \"The current password is incorrect.\"\n+                    )\n \n         user.activation_token = current_user.activation_token\n         user.active = current_user.active"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9a66334a60f51b79706e49b336c1d2c2d5873195",
            "date": "2025-01-23T09:36:11Z",
            "author_login": "bcdurak"
          },
          {
            "sha": "eb2ee3a5ad5ebd4ff61c267a8e49573fb440e91a",
            "date": "2025-01-21T20:44:30Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "dd91059487726ca3be42ab1bc879d92bd9fba2d4",
            "date": "2025-01-21T13:51:18Z",
            "author_login": "wjayesh"
          },
          {
            "sha": "fec095633b2750575b7a043ca761ed4bb497e73b",
            "date": "2025-01-21T13:29:47Z",
            "author_login": "wjayesh"
          },
          {
            "sha": "ffa4ec32929d5e008f4bba3116f1bbc8134326e5",
            "date": "2025-01-21T13:20:33Z",
            "author_login": "stefannica"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "zenml-io/zenml version 0.56.4 is vulnerable to an account takeover due to the lack of rate-limiting in the password change function. An attacker can brute-force the current password in the 'Update Password' function, allowing them to take over the user's account. This vulnerability is due to the absence of rate-limiting on the '/api/v1/current-user' endpoint, which does not restrict the number of attempts an attacker can make to guess the current password. Successful exploitation results in the attacker being able to change the password and take control of the account.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-11-14T18:15:19.473",
    "last_modified": "2024-11-18T16:35:13.737",
    "fix_date": "2024-04-30T09:24:42Z"
  },
  "references": [
    {
      "url": "https://github.com/zenml-io/zenml/commit/87a6c2c8f45b49ea83fbb5fe8fff7ab5365a60c9",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/d5517e1a-6b94-4e38-aad6-3aa65f98bec2",
      "source": "security@huntr.dev",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.298809",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "zenml",
    "owner": "zenml-io",
    "created_at": "2020-11-19T09:25:46Z",
    "updated_at": "2025-01-25T16:35:19Z",
    "pushed_at": "2025-01-26T06:20:26Z",
    "size": 570246,
    "stars": 4352,
    "forks": 467,
    "open_issues": 36,
    "watchers": 4352,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 9352583,
      "Shell": 44542,
      "Smarty": 21416,
      "Dockerfile": 19050,
      "Jinja": 4977,
      "HTML": 2568,
      "Mako": 695
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:36:10.634921"
  }
}