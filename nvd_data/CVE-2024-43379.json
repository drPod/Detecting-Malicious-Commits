{
  "cve_id": "CVE-2024-43379",
  "github_data": {
    "repository": "trufflesecurity/trufflehog",
    "fix_commit": "fe5624c70923355128868cffd647b6e2cfe11443",
    "related_commits": [
      "fe5624c70923355128868cffd647b6e2cfe11443"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "fe5624c70923355128868cffd647b6e2cfe11443",
      "commit_date": "2024-08-15T18:34:28Z",
      "author": {
        "login": "dustin-decker",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Improve domain / url handling in detectors (#3221)",
        "length": 164,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 509,
        "additions": 385,
        "deletions": 124
      },
      "files": [
        {
          "filename": "pkg/detectors/aha/aha.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -8,7 +8,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -22,7 +21,7 @@ var (\n \t// Ensure the Scanner satisfies the interface at compile time.\n \t_ detectors.Detector = (*Scanner)(nil)\n \n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"aha\"}) + `\\b([0-9a-f]{64})\\b`)"
        },
        {
          "filename": "pkg/detectors/apiflash/apiflash.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package apiflash\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -20,7 +20,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"apiflash\"}) + `\\b([a-z0-9]{32})\\b`)"
        },
        {
          "filename": "pkg/detectors/artifactory/artifactory.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -8,7 +8,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -22,7 +21,7 @@ var (\n \t// Ensure the Scanner satisfies the interface at compile time.\n \t_ detectors.Detector = (*Scanner)(nil)\n \n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(`\\b([a-zA-Z0-9]{73}|\\b[a-zA-Z0-9]{64})`)"
        },
        {
          "filename": "pkg/detectors/auth0managementapitoken/auth0managementapitoken.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -8,7 +8,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -22,7 +21,7 @@ var _ detectors.Detector = (*Scanner)(nil)\n var _ detectors.MaxSecretSizeProvider = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithLocalAddresses\n \n \t// long jwt token but note this is default 8640000 seconds = 24 hours but could be set to maximum 2592000 seconds = 720 hours = 30 days\n \t// at https://manage.auth0.com/dashboard/us/dev-63memjo3/apis/management/explorer"
        },
        {
          "filename": "pkg/detectors/auth0oauth/auth0oauth.go",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -2,13 +2,13 @@ package auth0oauth\n \n import (\n \t\"context\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"io\"\n \t\"net/http\"\n \t\"net/url\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,7 +21,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithLocalAddresses\n \n \tclientIdPat     = regexp.MustCompile(detectors.PrefixRegex([]string{\"auth0\"}) + `\\b([a-zA-Z0-9_-]{32,60})\\b`)\n \tclientSecretPat = regexp.MustCompile(`\\b([a-zA-Z0-9_-]{64,})\\b`)\n@@ -102,7 +102,7 @@ func (s Scanner) FromData(ctx context.Context, verify bool, data []byte) (result\n \n \t\t\t\t\t\tif !strings.Contains(body, \"access_denied\") {\n \t\t\t\t\t\t\ts1.Verified = true\n-\t\t\t\t\t\t} \n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n "
        },
        {
          "filename": "pkg/detectors/azurebatch/azurebatch.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -12,7 +12,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -27,7 +26,7 @@ var _ detectors.Detector = (*Scanner)(nil)\n var _ detectors.CustomFalsePositiveChecker = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \turlPat    = regexp.MustCompile(`https://(.{1,50})\\.(.{1,50})\\.batch\\.azure\\.com`)\n \tsecretPat = regexp.MustCompile(`[A-Za-z0-9+/=]{88}`)"
        },
        {
          "filename": "pkg/detectors/azurefunctionkey/azurefunctionkey.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -8,7 +8,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -22,7 +21,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat      = regexp.MustCompile(detectors.PrefixRegex([]string{\"azure\"}) + `\\b([a-zA-Z0-9_-]{20,56})\\b={0,2}`)\n \tazureUrlPat = regexp.MustCompile(`\\bhttps:\\/\\/([a-zA-Z0-9-]{2,30})\\.azurewebsites\\.net\\/api\\/([a-zA-Z0-9-]{2,30})\\b`)"
        },
        {
          "filename": "pkg/detectors/azuresearchquerykey/azuresearchquerykey.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -8,7 +8,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -22,7 +21,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"azure\"}) + `\\b([0-9a-zA-Z]{52})\\b`)\n \turlPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"azure\"}) + `https:\\/\\/([0-9a-z]{5,40})\\.search\\.windows\\.net\\/indexes\\/([0-9a-z]{5,40})\\b`)"
        },
        {
          "filename": "pkg/detectors/azurestorage/azurestorage.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -25,7 +25,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = http.DefaultClient\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \tkeyPat        = regexp.MustCompile(`DefaultEndpointsProtocol=https;AccountName=(?P<account_name>[^;]+);AccountKey=(?P<account_key>[^;]+);EndpointSuffix=core\\.windows\\.net`)\n )\n "
        },
        {
          "filename": "pkg/detectors/caspio/caspio.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package caspio\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -20,7 +20,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"caspio\"}) + `\\b([a-z0-9]{50})\\b`)"
        },
        {
          "filename": "pkg/detectors/databrickstoken/databrickstoken.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package databrickstoken\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,7 +21,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tdomain = regexp.MustCompile(`\\b([a-z0-9-]+(?:\\.[a-z0-9-]+)*\\.(cloud\\.databricks\\.com|gcp\\.databricks\\.com|azurewebsites\\.net))\\b`)"
        },
        {
          "filename": "pkg/detectors/deputy/deputy.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package deputy\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -20,7 +20,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"deputy\"}) + `\\b([0-9a-z]{32})\\b`)"
        },
        {
          "filename": "pkg/detectors/detectors.go",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -241,3 +241,13 @@ func RedactURL(u url.URL) string {\n \tu.User = url.UserPassword(u.User.Username(), \"********\")\n \treturn strings.TrimSpace(strings.Replace(u.String(), \"%2A\", \"*\", -1))\n }\n+\n+func ParseURLAndStripPathAndParams(u string) (*url.URL, error) {\n+\tparsedURL, err := url.Parse(u)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tparsedURL.Path = \"\"\n+\tparsedURL.RawQuery = \"\"\n+\treturn parsedURL, nil\n+}"
        },
        {
          "filename": "pkg/detectors/discordwebhook/discordwebhook.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -7,7 +7,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -18,7 +17,7 @@ type Scanner struct{}\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(`(https:\\/\\/discord\\.com\\/api\\/webhooks\\/[0-9]{18}\\/[0-9a-zA-Z-]{68})`)"
        },
        {
          "filename": "pkg/detectors/fibery/fibery.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,12 +3,12 @@ package fibery\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \t\"time\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,7 +21,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"fibery\"}) + `\\b([0-9a-f]{8}.[0-9a-f]{35})\\b`)"
        },
        {
          "filename": "pkg/detectors/freshbooks/freshbooks.go",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -3,12 +3,12 @@ package freshbooks\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"io\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,10 +21,10 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n-\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"freshbooks\"}) + `\\b([0-9a-z]{64})\\b`)\n+\t// TODO: this domain pattern is too restrictive\n \turiPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"freshbooks\"}) + `\\b(https://www.[0-9A-Za-z_-]{1,}.com)\\b`)\n )\n "
        },
        {
          "filename": "pkg/detectors/grafanaserviceaccount/grafanaserviceaccount.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package grafanaserviceaccount\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,7 +21,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat    = regexp.MustCompile(`\\b(glsa_[0-9a-zA-Z_]{41})\\b`)\n \tdomainPat = regexp.MustCompile(`\\b([a-zA-Z0-9-]+\\.grafana\\.net)\\b`)"
        },
        {
          "filename": "pkg/detectors/http.go",
          "status": "added",
          "additions": 154,
          "deletions": 0,
          "patch": "@@ -0,0 +1,154 @@\n+package detectors\n+\n+import (\n+\t\"context\"\n+\t\"errors\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"time\"\n+)\n+\n+var DetectorHttpClientWithNoLocalAddresses *http.Client\n+var DetectorHttpClientWithLocalAddresses *http.Client\n+\n+const DefaultResponseTimeout = 5 * time.Second\n+const DefaultUserAgent = \"TruffleHog\"\n+\n+func init() {\n+\tDetectorHttpClientWithLocalAddresses = NewDetectorHttpClient(\n+\t\tWithTransport(NewDetectorTransport(DefaultUserAgent, nil)),\n+\t\tWithTimeout(DefaultResponseTimeout),\n+\t\tWithNoFollowRedirects(),\n+\t)\n+\tDetectorHttpClientWithNoLocalAddresses = NewDetectorHttpClient(\n+\t\tWithTransport(NewDetectorTransport(DefaultUserAgent, nil)),\n+\t\tWithTimeout(DefaultResponseTimeout),\n+\t\tWithNoFollowRedirects(),\n+\t\tWithNoLocalIP(),\n+\t)\n+}\n+\n+// ClientOption defines a function type that modifies an http.Client.\n+type ClientOption func(*http.Client)\n+\n+// WithNoFollowRedirects allows disabling automatic following of redirects.\n+func WithNoFollowRedirects() ClientOption {\n+\treturn func(c *http.Client) {\n+\t\tc.CheckRedirect = func(req *http.Request, via []*http.Request) error {\n+\t\t\treturn http.ErrUseLastResponse\n+\t\t}\n+\t}\n+}\n+\n+type detectorTransport struct {\n+\tT         http.RoundTripper\n+\tuserAgent string\n+}\n+\n+func (t *detectorTransport) RoundTrip(req *http.Request) (*http.Response, error) {\n+\treq.Header.Add(\"User-Agent\", t.userAgent)\n+\treturn t.T.RoundTrip(req)\n+}\n+\n+var defaultDialer = &net.Dialer{\n+\tTimeout:   2 * time.Second,\n+\tKeepAlive: 5 * time.Second,\n+}\n+\n+func NewDetectorTransport(userAgent string, T http.RoundTripper) http.RoundTripper {\n+\tif T == nil {\n+\t\tT = &http.Transport{\n+\t\t\tProxy:                 http.ProxyFromEnvironment,\n+\t\t\tDialContext:           defaultDialer.DialContext,\n+\t\t\tMaxIdleConns:          100,\n+\t\t\tMaxIdleConnsPerHost:   5,\n+\t\t\tIdleConnTimeout:       90 * time.Second,\n+\t\t\tTLSHandshakeTimeout:   3 * time.Second,\n+\t\t\tExpectContinueTimeout: 1 * time.Second,\n+\t\t}\n+\t}\n+\treturn &detectorTransport{T: T, userAgent: userAgent}\n+}\n+\n+func isLocalIP(ip net.IP) bool {\n+\tif ip.IsLoopback() || ip.IsLinkLocalUnicast() || ip.IsLinkLocalMulticast() || ip.IsPrivate() {\n+\t\treturn true\n+\t}\n+\n+\treturn false\n+}\n+\n+var ErrNoLocalIP = errors.New(\"dialing local IP addresses is not allowed\")\n+\n+func WithNoLocalIP() ClientOption {\n+\treturn func(c *http.Client) {\n+\t\tif c.Transport == nil {\n+\t\t\tc.Transport = &http.Transport{}\n+\t\t}\n+\n+\t\t// Type assertion to get the underlying *http.Transport\n+\t\ttransport, ok := c.Transport.(*http.Transport)\n+\t\tif !ok {\n+\t\t\t// If c.Transport is not *http.Transport, check if it is wrapped in a detectorTransport\n+\t\t\tdt, ok := c.Transport.(*detectorTransport)\n+\t\t\tif !ok {\n+\t\t\t\tpanic(\"unsupported transport type\")\n+\t\t\t}\n+\t\t\ttransport, ok = dt.T.(*http.Transport)\n+\t\t\tif !ok {\n+\t\t\t\tpanic(\"underlying transport is not *http.Transport\")\n+\t\t\t}\n+\t\t}\n+\n+\t\t// If the original DialContext is nil, set it to the default dialer\n+\t\tif transport.DialContext == nil {\n+\t\t\ttransport.DialContext = defaultDialer.DialContext\n+\t\t}\n+\t\toriginalDialContext := transport.DialContext\n+\t\ttransport.DialContext = func(ctx context.Context, network, addr string) (net.Conn, error) {\n+\t\t\thost, port, err := net.SplitHostPort(addr)\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\n+\t\t\tips, err := net.LookupIP(host)\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\n+\t\t\tfor _, ip := range ips {\n+\t\t\t\tif isLocalIP(ip) {\n+\t\t\t\t\treturn nil, ErrNoLocalIP\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\treturn originalDialContext(ctx, network, net.JoinHostPort(host, port))\n+\t\t}\n+\t}\n+}\n+\n+// WithTransport sets a custom transport for the http.Client.\n+func WithTransport(transport http.RoundTripper) ClientOption {\n+\treturn func(c *http.Client) {\n+\t\tc.Transport = transport\n+\t}\n+}\n+\n+// WithTimeout sets a timeout for the http.Client.\n+func WithTimeout(timeout time.Duration) ClientOption {\n+\treturn func(c *http.Client) {\n+\t\tc.Timeout = timeout\n+\t}\n+}\n+\n+func NewDetectorHttpClient(opts ...ClientOption) *http.Client {\n+\thttpClient := &http.Client{\n+\t\tTransport: NewDetectorTransport(DefaultUserAgent, nil),\n+\t\tTimeout:   DefaultResponseTimeout,\n+\t}\n+\n+\tfor _, opt := range opts {\n+\t\topt(httpClient)\n+\t}\n+\treturn httpClient\n+}"
        },
        {
          "filename": "pkg/detectors/http_test.go",
          "status": "added",
          "additions": 94,
          "deletions": 0,
          "patch": "@@ -0,0 +1,94 @@\n+package detectors\n+\n+import (\n+\t\"context\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"testing\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+func TestWithNoLocalIP(t *testing.T) {\n+\tt.Run(\"Prevents dialing local IP\", func(t *testing.T) {\n+\t\tclient := &http.Client{}\n+\t\tWithNoLocalIP()(client)\n+\n+\t\ttransport, ok := client.Transport.(*http.Transport)\n+\t\tassert.True(t, ok, \"Expected transport to be *http.Transport\")\n+\n+\t\t_, err := transport.DialContext(context.Background(), \"tcp\", \"127.0.0.1:8080\")\n+\t\tassert.Error(t, err)\n+\t\tassert.ErrorIs(t, err, ErrNoLocalIP)\n+\t})\n+\n+\tt.Run(\"Allows dialing non-local host\", func(t *testing.T) {\n+\t\tclient := &http.Client{}\n+\t\tWithNoLocalIP()(client)\n+\n+\t\ttransport, ok := client.Transport.(*http.Transport)\n+\t\tassert.True(t, ok, \"Expected transport to be *http.Transport\")\n+\n+\t\tconn, err := transport.DialContext(context.Background(), \"tcp\", \"google.com:80\")\n+\t\tassert.NoError(t, err)\n+\t\tassert.NotNil(t, conn)\n+\t\tconn.Close()\n+\t})\n+\n+\tt.Run(\"Allows dialing non-local IP\", func(t *testing.T) {\n+\t\tclient := &http.Client{}\n+\t\tWithNoLocalIP()(client)\n+\n+\t\ttransport, ok := client.Transport.(*http.Transport)\n+\t\tassert.True(t, ok, \"Expected transport to be *http.Transport\")\n+\n+\t\tconn, err := transport.DialContext(context.Background(), \"tcp\", \"1.1.1.1:80\")\n+\t\tassert.NoError(t, err)\n+\t\tassert.NotNil(t, conn)\n+\t\tconn.Close()\n+\t})\n+\n+\tt.Run(\"Handles invalid address\", func(t *testing.T) {\n+\t\tclient := &http.Client{}\n+\t\tWithNoLocalIP()(client)\n+\n+\t\ttransport, ok := client.Transport.(*http.Transport)\n+\t\tassert.True(t, ok, \"Expected transport to be *http.Transport\")\n+\n+\t\t_, err := transport.DialContext(context.Background(), \"tcp\", \"invalid-address\")\n+\t\tassert.Error(t, err)\n+\t})\n+\n+\tt.Run(\"Handles non-existent hostname\", func(t *testing.T) {\n+\t\tclient := &http.Client{}\n+\t\tWithNoLocalIP()(client)\n+\n+\t\ttransport, ok := client.Transport.(*http.Transport)\n+\t\tassert.True(t, ok, \"Expected transport to be *http.Transport\")\n+\n+\t\t_, err := transport.DialContext(context.Background(), \"tcp\", \"non-existent-host.local:80\")\n+\t\tassert.Error(t, err)\n+\t})\n+}\n+\n+func TestIsLocalIP(t *testing.T) {\n+\ttestCases := []struct {\n+\t\tname     string\n+\t\tip       net.IP\n+\t\texpected bool\n+\t}{\n+\t\t{\"Loopback IPv4\", net.ParseIP(\"127.0.0.1\"), true},\n+\t\t{\"Loopback IPv6\", net.ParseIP(\"::1\"), true},\n+\t\t{\"Private IPv4\", net.ParseIP(\"192.168.1.1\"), true},\n+\t\t{\"Private IPv6\", net.ParseIP(\"fd00::1\"), true},\n+\t\t{\"Public IPv4\", net.ParseIP(\"8.8.8.8\"), false},\n+\t\t{\"Public IPv6\", net.ParseIP(\"2001:4860:4860::8888\"), false},\n+\t}\n+\n+\tfor _, tc := range testCases {\n+\t\tt.Run(tc.name, func(t *testing.T) {\n+\t\t\tresult := isLocalIP(tc.ip)\n+\t\t\tassert.Equal(t, tc.expected, result)\n+\t\t})\n+\t}\n+}"
        },
        {
          "filename": "pkg/detectors/invoiceocean/invoiceocean.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package invoiceocean\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -20,7 +20,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"invoiceocean\"}) + `\\b([0-9A-Za-z]{20})\\b`)"
        },
        {
          "filename": "pkg/detectors/jiratoken/v1/jiratoken.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -9,7 +9,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -26,7 +25,7 @@ var _ detectors.Versioner = (*Scanner)(nil)\n func (Scanner) Version() int { return 1 }\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \ttokenPat  = regexp.MustCompile(detectors.PrefixRegex([]string{\"jira\"}) + `\\b([a-zA-Z-0-9]{24})\\b`)"
        },
        {
          "filename": "pkg/detectors/jiratoken/v2/jiratoken_v2.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -9,7 +9,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -26,7 +25,7 @@ var _ detectors.Versioner = (*Scanner)(nil)\n func (Scanner) Version() int { return 2 }\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithLocalAddresses\n \n \t// https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/\n \t// Tokens created after Jan 18 2023 use a variable length"
        },
        {
          "filename": "pkg/detectors/kanban/kanban.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package kanban\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -20,7 +20,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"kanban\"}) + `\\b([0-9A-Z]{12})\\b`)"
        },
        {
          "filename": "pkg/detectors/kanbantool/kanbantool.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package kanbantool\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -20,7 +20,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives\n \tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"kanbantool\"}) + `\\b([0-9A-Z]{12})\\b`)"
        },
        {
          "filename": "pkg/detectors/liveagent/liveagent.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package liveagent\n import (\n \t\"context\"\n \t\"encoding/json\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -20,7 +20,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tdomainPat = regexp.MustCompile(`\\b(https?://[A-Za-z0-9-]+\\.ladesk\\.com)\\b`)"
        },
        {
          "filename": "pkg/detectors/loggly/loggly.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package loggly\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,7 +21,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tdomainPat = regexp.MustCompile(`\\b([a-zA-Z0-9-]+\\.loggly\\.com)\\b`)\n \tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"loggly\"}) + `\\b([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)"
        },
        {
          "filename": "pkg/detectors/metabase/metabase.go",
          "status": "modified",
          "additions": 11,
          "deletions": 4,
          "patch": "@@ -3,12 +3,12 @@ package metabase\n import (\n \t\"context\"\n \t\"encoding/json\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"io\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,7 +21,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"metabase\"}) + `\\b([a-zA-Z0-9-]{36})\\b`)\n@@ -54,14 +54,21 @@ func (s Scanner) FromData(ctx context.Context, verify bool, data []byte) (result\n \t\t\t}\n \t\t\tresURLMatch := strings.TrimSpace(urlMatch[1])\n \n+\t\t\tu, err := detectors.ParseURLAndStripPathAndParams(resURLMatch)\n+\t\t\tif err != nil {\n+\t\t\t\t// if the URL is invalid just move onto the next one\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n \t\t\ts1 := detectors.Result{\n \t\t\t\tDetectorType: detectorspb.DetectorType_Metabase,\n \t\t\t\tRaw:          []byte(resMatch),\n \t\t\t\tRawV2:        []byte(resMatch + resURLMatch),\n \t\t\t}\n \n \t\t\tif verify {\n-\t\t\t\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, resURLMatch+\"/api/user/current\", nil)\n+\t\t\t\tu.Path = \"/api/user/current\"\n+\t\t\t\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, u.String(), nil)\n \t\t\t\tif err != nil {\n \t\t\t\t\tcontinue\n \t\t\t\t}"
        },
        {
          "filename": "pkg/detectors/microsoftteamswebhook/microsoftteamswebhook.go",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -6,11 +6,9 @@ import (\n \t\"io\"\n \t\"net/http\"\n \t\"strings\"\n-\t\"time\"\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -24,7 +22,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClientTimeOut(5 * time.Second)\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(`(https:\\/\\/[a-zA-Z-0-9]+\\.webhook\\.office\\.com\\/webhookb2\\/[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12}\\@[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12}\\/IncomingWebhook\\/[a-zA-Z-0-9]{32}\\/[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12})`)"
        },
        {
          "filename": "pkg/detectors/mite/mite.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package mite\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -20,7 +20,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"mite\"}) + `\\b([0-9a-z]{16})\\b`)"
        },
        {
          "filename": "pkg/detectors/okta/okta.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -9,7 +9,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -64,7 +63,7 @@ func (s Scanner) FromData(ctx context.Context, verify bool, data []byte) (result\n \t\t\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n \t\t\t\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"SSWS %s\", token))\n \n-\t\t\t\tresp, err := common.SaneHttpClient().Do(req)\n+\t\t\t\tresp, err := detectors.DetectorHttpClientWithNoLocalAddresses.Do(req)\n \t\t\t\tif err != nil {\n \t\t\t\t\tcontinue\n \t\t\t\t}"
        },
        {
          "filename": "pkg/detectors/openvpn/openvpn.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -9,7 +9,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -23,7 +22,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \tclientIDPat     = regexp.MustCompile(detectors.PrefixRegex([]string{\"openvpn\"}) + `\\b([A-Za-z0-9-]{3,40}\\.[A-Za-z0-9-]{3,40})\\b`)\n \tclientSecretPat = regexp.MustCompile(`\\b([a-zA-Z0-9_-]{64,})\\b`)"
        },
        {
          "filename": "pkg/detectors/planviewleankit/planviewleankit.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package planviewleankit\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -20,7 +20,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat       = regexp.MustCompile(detectors.PrefixRegex([]string{\"planviewleankit\", \"planview\"}) + `\\b([0-9a-f]{128})\\b`)"
        },
        {
          "filename": "pkg/detectors/portainer/portainer.go",
          "status": "modified",
          "additions": 11,
          "deletions": 6,
          "patch": "@@ -3,11 +3,11 @@ package portainer\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,7 +21,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithLocalAddresses\n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tendpointPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"portainer\"}) + `\\b(https?:\\/\\/\\S+(:[0-9]{4,5})?)\\b`)\n \ttokenPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"portainer\"}) + `\\b(eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\\.[0-9A-Za-z]{50,310}\\.[0-9A-Z-a-z\\-_]{43})\\b`)\n@@ -49,6 +49,13 @@ func (s Scanner) FromData(ctx context.Context, verify bool, data []byte) (result\n \t\tfor _, endpointMatch := range endpointMatches {\n \t\t\tresEndpointMatch := strings.TrimSpace(endpointMatch[1])\n \n+\t\t\tu, err := detectors.ParseURLAndStripPathAndParams(resEndpointMatch)\n+\t\t\tif err != nil {\n+\t\t\t\t// if the URL is invalid just move onto the next one\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tu.Path = \"/api/endpoints\"\n+\n \t\t\ts1 := detectors.Result{\n \t\t\t\tDetectorType: detectorspb.DetectorType_Portainer,\n \t\t\t\tRaw:          []byte(resMatch),\n@@ -60,7 +67,7 @@ func (s Scanner) FromData(ctx context.Context, verify bool, data []byte) (result\n \t\t\t\tif client == nil {\n \t\t\t\t\tclient = defaultClient\n \t\t\t\t}\n-\t\t\t\treq, err := http.NewRequestWithContext(ctx, \"GET\", resEndpointMatch+\"/api/endpoints\", nil)\n+\t\t\t\treq, err := http.NewRequestWithContext(ctx, \"GET\", u.String(), nil)\n \t\t\t\tif err != nil {\n \t\t\t\t\tcontinue\n \t\t\t\t}\n@@ -81,8 +88,6 @@ func (s Scanner) FromData(ctx context.Context, verify bool, data []byte) (result\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\t\n-\n \t\t\tif len(endpointMatches) > 0 {\n \t\t\t\tresults = append(results, s1)\n \t\t\t}"
        },
        {
          "filename": "pkg/detectors/portainertoken/portainertoken.go",
          "status": "modified",
          "additions": 11,
          "deletions": 4,
          "patch": "@@ -3,11 +3,11 @@ package portainertoken\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,7 +21,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithLocalAddresses\n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat      = regexp.MustCompile(detectors.PrefixRegex([]string{\"portainertoken\"}) + `\\b(ptr_[A-Za-z0-9\\/_\\-+=]{20,60})`)\n \tendpointPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"portainer\"}) + `\\b(https?:\\/\\/\\S+(:[0-9]{4,5})?)\\b`)\n@@ -49,6 +49,13 @@ func (s Scanner) FromData(ctx context.Context, verify bool, data []byte) (result\n \t\tfor _, endpointMatch := range endpointMatches {\n \t\t\tresEndpointMatch := strings.TrimSpace(endpointMatch[1])\n \n+\t\t\tu, err := detectors.ParseURLAndStripPathAndParams(resEndpointMatch)\n+\t\t\tif err != nil {\n+\t\t\t\t// if the URL is invalid just move onto the next one\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tu.Path = \"/api/stacks\"\n+\n \t\t\ts1 := detectors.Result{\n \t\t\t\tDetectorType: detectorspb.DetectorType_PortainerToken,\n \t\t\t\tRaw:          []byte(resMatch),\n@@ -60,7 +67,7 @@ func (s Scanner) FromData(ctx context.Context, verify bool, data []byte) (result\n \t\t\t\tif client == nil {\n \t\t\t\t\tclient = defaultClient\n \t\t\t\t}\n-\t\t\t\treq, err := http.NewRequestWithContext(ctx, \"GET\", resEndpointMatch+\"/api/stacks\", nil)\n+\t\t\t\treq, err := http.NewRequestWithContext(ctx, \"GET\", u.String(), nil)\n \t\t\t\tif err != nil {\n \t\t\t\t\tcontinue\n \t\t\t\t}"
        },
        {
          "filename": "pkg/detectors/repairshopr/repairshopr.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package repairshopr\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -20,7 +20,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"repairshopr\"}) + `\\b([a-zA-Z0-9-]{51})\\b`)"
        },
        {
          "filename": "pkg/detectors/ringcentral/ringcentral.go",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -3,10 +3,11 @@ package ringcentral\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n@@ -24,6 +25,7 @@ var (\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"ringcentral\"}) + `\\b([0-9A-Za-z_-]{22})\\b`)\n+\t// TODO: this domain pattern is too restrictive\n \turiPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"ringcentral\"}) + `\\b(https://www.[0-9A-Za-z_-]{1,}.com)\\b`)\n )\n "
        },
        {
          "filename": "pkg/detectors/salesforce/salesforce.go",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -3,10 +3,11 @@ package salesforce\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n@@ -25,7 +26,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \taccessTokenPat = regexp.MustCompile(`\\b00[a-zA-Z0-9]{13}![a-zA-Z0-9_.]{96}\\b`)\n \tinstancePat    = regexp.MustCompile(`\\bhttps://[0-9a-zA-Z-\\.]{1,100}\\.my\\.salesforce\\.com\\b`)"
        },
        {
          "filename": "pkg/detectors/salesmate/salesmate.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,11 +3,11 @@ package salesmate\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -20,7 +20,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives\n \tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"salesmate\"}) + `\\b([0-9Aa-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\\b`)"
        },
        {
          "filename": "pkg/detectors/shopify/shopify.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -8,7 +8,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -22,7 +21,7 @@ var _ detectors.Detector = (*Scanner)(nil)\n var _ detectors.CustomFalsePositiveChecker = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat    = regexp.MustCompile(`\\b(shppa_|shpat_)([0-9A-Fa-f]{32})\\b`)"
        },
        {
          "filename": "pkg/detectors/signalwire/signalwire.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -4,11 +4,11 @@ import (\n \t\"context\"\n \tb64 \"encoding/base64\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,7 +21,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"signalwire\"}) + `\\b([0-9A-Za-z]{50})\\b`)"
        },
        {
          "filename": "pkg/detectors/signalwire/signalwire_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -23,7 +23,7 @@ func TestSignalwire_FromChunk(t *testing.T) {\n \tif err != nil {\n \t\tt.Fatalf(\"could not get test secrets from GCP: %s\", err)\n \t}\n-\tid := testSecrets.MustGetField(\"SGINALWIRE_ID\")\n+\tid := testSecrets.MustGetField(\"SIGNALWIRE_ID\")\n \tsecret := testSecrets.MustGetField(\"SIGNALWIRE_TOKEN\")\n \turl := testSecrets.MustGetField(\"SIGNALWIRE_URL\")\n \tinactiveSecret := testSecrets.MustGetField(\"SIGNALWIRE_INACTIVE\")"
        },
        {
          "filename": "pkg/detectors/slackwebhook/slackwebhook.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -8,7 +8,6 @@ import (\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n \tregexp \"github.com/wasilibs/go-re2\"\n@@ -23,7 +22,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPats = map[string]*regexp.Regexp{\n \t\t\"Slack Service Web Hook\":   regexp.MustCompile(`(https://hooks\\.slack\\.com/services/T[A-Z0-9]+/B[A-Z0-9]+/[A-Za-z0-9]{23,25})`),"
        },
        {
          "filename": "pkg/detectors/sugester/sugester.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -2,11 +2,11 @@ package sugester\n \n import (\n \t\"context\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -19,7 +19,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"sugester\"}) + `\\b([a-zA-Z0-9]{32})\\b`)"
        },
        {
          "filename": "pkg/detectors/thinkific/thinkific.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,12 +3,12 @@ package thinkific\n import (\n \t\"context\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"io\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,7 +21,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"thinkific\"}) + `\\b([0-9a-f]{32})\\b`)"
        },
        {
          "filename": "pkg/detectors/tineswebhook/tineswebhook.go",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "patch": "@@ -7,7 +7,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -18,7 +17,7 @@ type Scanner struct{}\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(`(https://[\\w-]+\\.tines\\.com/webhook/[a-z0-9]{32}/[a-z0-9]{32})`)\n@@ -56,9 +55,6 @@ func (s Scanner) FromData(ctx context.Context, verify bool, data []byte) (result\n \t\t\tres, err := client.Do(req)\n \t\t\tif err == nil {\n \t\t\t\tdefer res.Body.Close()\n-\t\t\t\tif err != nil {\n-\t\t\t\t\tcontinue\n-\t\t\t\t}\n \t\t\t\tif res.StatusCode >= 200 && res.StatusCode < 300 {\n \t\t\t\t\ts1.Verified = true\n \t\t\t\t}"
        },
        {
          "filename": "pkg/detectors/uri/uri.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -9,7 +9,6 @@ import (\n \n \tregexp \"github.com/wasilibs/go-re2\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -26,7 +25,8 @@ var _ detectors.CustomFalsePositiveChecker = (*Scanner)(nil)\n var (\n \tkeyPat = regexp.MustCompile(`\\b(?:https?:)?\\/\\/[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b`)\n \n-\tdefaultClient = common.SaneHttpClient()\n+\t// TODO: make local addr opt-out\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n )\n \n // Keywords are used for efficiently pre-filtering chunks."
        },
        {
          "filename": "pkg/detectors/zapierwebhook/zapierwebhook.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -2,11 +2,11 @@ package zapierwebhook\n \n import (\n \t\"context\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -17,7 +17,7 @@ type Scanner struct{}\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat = regexp.MustCompile(`(https:\\/\\/hooks\\.zapier\\.com\\/hooks\\/catch\\/[A-Za-z0-9\\/]{16})`)"
        },
        {
          "filename": "pkg/detectors/zendeskapi/zendeskapi.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -4,11 +4,11 @@ import (\n \t\"context\"\n \tb64 \"encoding/base64\"\n \t\"fmt\"\n-\tregexp \"github.com/wasilibs/go-re2\"\n \t\"net/http\"\n \t\"strings\"\n \n-\t\"github.com/trufflesecurity/trufflehog/v3/pkg/common\"\n+\tregexp \"github.com/wasilibs/go-re2\"\n+\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/detectors\"\n \t\"github.com/trufflesecurity/trufflehog/v3/pkg/pb/detectorspb\"\n )\n@@ -21,7 +21,7 @@ type Scanner struct{\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tclient = common.SaneHttpClient()\n+\tclient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \ttoken  = regexp.MustCompile(detectors.PrefixRegex([]string{\"zendesk\"}) + `([A-Za-z0-9_-]{40})`)\n \temail  = regexp.MustCompile(`\\b([a-zA-Z-0-9-]{5,16}\\@[a-zA-Z-0-9]{4,16}\\.[a-zA-Z-0-9]{3,6})\\b`)"
        },
        {
          "filename": "pkg/detectors/zulipchat/zulipchat.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -23,7 +23,7 @@ type Scanner struct {\n var _ detectors.Detector = (*Scanner)(nil)\n \n var (\n-\tdefaultClient = common.SaneHttpClient()\n+\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n \n \t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n \tkeyPat    = regexp.MustCompile(common.BuildRegex(common.AlphaNumPattern, \"\", 32))"
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 46,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "755005733ccd3a43892d71ad606f6dc082a371b7",
            "date": "2025-01-24T21:47:18Z",
            "author_login": "zricethezav"
          },
          {
            "sha": "20a3840917da9c9fb213d95cdaf9bd3566a4a8b3",
            "date": "2025-01-21T06:46:53Z",
            "author_login": "hxnyk"
          },
          {
            "sha": "39d24534f239563888e7c0d58be0f39112e94b27",
            "date": "2025-01-20T10:31:08Z",
            "author_login": "kashifkhan0771"
          },
          {
            "sha": "1fc8961d172f39ffb671766e472aa76f8d713e87",
            "date": "2025-01-16T15:45:29Z",
            "author_login": "casey-tran"
          },
          {
            "sha": "eea7e0658ff5cf1d560e192232c0b688fa39b96c",
            "date": "2025-01-15T17:31:21Z",
            "author_login": "zricethezav"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:N/I:L/A:N",
    "cwe_id": "CWE-918",
    "description": "TruffleHog is a secrets scanning tool. Prior to v3.81.9, this vulnerability allows a malicious actor to craft data in a way that, when scanned by specific detectors, could trigger the detector to make an unauthorized request to an endpoint chosen by the attacker. For an exploit to be effective, the target endpoint must be an unauthenticated GET endpoint that produces side effects. The victim must scan the maliciously crafted data and have such an endpoint targeted for the exploit to succeed. The vulnerability has been resolved in TruffleHog v3.81.9 and later versions.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-08-19T15:15:08.683",
    "last_modified": "2024-08-21T12:37:22.800",
    "fix_date": "2024-08-15T18:34:28Z"
  },
  "references": [
    {
      "url": "https://github.com/trufflesecurity/trufflehog/commit/fe5624c70923355128868cffd647b6e2cfe11443",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/trufflesecurity/trufflehog/security/advisories/GHSA-3r74-v83p-f4f4",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.364916",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "trufflehog",
    "owner": "trufflesecurity",
    "created_at": "2016-12-31T05:08:12Z",
    "updated_at": "2025-01-26T05:49:32Z",
    "pushed_at": "2025-01-25T05:05:46Z",
    "size": 42982,
    "stars": 17865,
    "forks": 1752,
    "open_issues": 287,
    "watchers": 17865,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 9114399,
      "Shell": 15060,
      "Makefile": 1956,
      "Dockerfile": 621,
      "Gnuplot": 264
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-26T08:28:21.636120"
  }
}