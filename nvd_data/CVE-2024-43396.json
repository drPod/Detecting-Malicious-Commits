{
  "cve_id": "CVE-2024-43396",
  "github_data": {
    "repository": "khoj-ai/khoj",
    "fix_commit": "1c7a562880eeb7354325545d2cf6c5d1d1134812",
    "related_commits": [
      "1c7a562880eeb7354325545d2cf6c5d1d1134812",
      "55be90cdd2f9d6a09c8bf9ceea52fc36b9201626"
    ],
    "patch_url": "https://github.com/khoj-ai/khoj/commit/1c7a562880eeb7354325545d2cf6c5d1d1134812.patch",
    "fix_commit_details": {
      "sha": "1c7a562880eeb7354325545d2cf6c5d1d1134812",
      "commit_date": "2024-06-22T15:51:22Z",
      "author": {
        "login": "debanjum",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Generate automation cards via DOM scripting",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 345,
        "additions": 218,
        "deletions": 127
      },
      "files": [
        {
          "filename": "src/khoj/interface/web/config_automation.html",
          "status": "modified",
          "additions": 218,
          "deletions": 127,
          "patch": "@@ -388,86 +388,132 @@ <h2 class=\"section-title\">\n     function generateAutomationRow(automation, isSuggested=false) {\n         let automationId = automation.id;\n         let automationNextRun = `Next run at ${automation.next}\\nCron: ${automation.crontime}`;\n+\n+        // Create card top elements\n         let automationEl = document.createElement(\"div\");\n-        automationEl.innerHTML = `\n-            <div class=\"card automation\" id=\"automation-card-${automationId}\">\n-                <div class=\"card-header\" onclick=\"onClickEditAutomationCard('${automationId}')\">\n-                    <div class=\"subject-wrapper\">\n-                        <input type=\"text\"\n-                            id=\"automation-subject-${automationId}\"\n-                            class=\"${automationId} fake-input\"\n-                            name=\"subject\"\n-                            data-original=\"${automation.subject}\"\n-                            value=\"${automation.subject}\">\n-                        <img class=automation-share-icon id=\"share-link-${automationId}\" src=\"/static/assets/icons/share.svg\" alt=\"Share\" onclick=\"copyShareLink(event, '${automationId}', '${automation.subject}', '${automation.crontime}', '${automation.query_to_run}')\">\n-                        <img class=\"automation-edit-icon ${automationId}\" src=\"/static/assets/icons/pencil-edit.svg\" onclick=\"onClickEditAutomationCard('${automationId}')\" alt=\"Automations\">\n-                    </div>\n-                    <input type=\"text\"\n-                       id=\"automation-schedule-${automationId}\"\n-                       name=\"schedule\"\n-                       class=\"schedule ${automationId} fake-input\"\n-                       data-cron=\"${automation.crontime}\"\n-                       data-original=\"${automation.schedule}\"\n-                       title=\"${automationNextRun}\"\n-                       value=\"${automation.schedule}\">\n-                    <textarea id=\"automation-queryToRun-${automationId}\"\n-                        class=\"automation-instructions ${automationId} fake-input\"\n-                        data-original=\"${automation.query_to_run}\"\n-                        name=\"query-to-run\">${automation.query_to_run}</textarea>\n-                    ${isSuggested ?\n-                        `<img class=promo-image src=\"${automation.promoImage}\" alt=\"Promo Image\">`:\n-                        \"\"\n-                    }\n-                </div>\n-                <div id=\"automation-buttons-wrapper\">\n-                    <div class=\"automation-buttons\">\n-                        ${isSuggested ?\n-                            `<div id=\"empty-div\"></div>\n-                            <div id=\"empty-div\"></div>`:\n-                            `\n-                            <button type=\"button\"\n-                                    class=\"delete-automation-button negative-button\"\n-                                    id=\"delete-automation-button-${automationId}\">Delete</button>\n-                            <button type=\"button\"\n-                                    class=\"send-preview-automation-button positive-button\"\n-                                    title=\"Immediately get a preview of this automation\"\n-                                    onclick=\"sendAPreviewAutomation('${automationId}')\">Preview</button>\n-                            `\n-                        }\n-                        <button type=\"button\"\n-                                class=\"save-automation-button positive-button\"\n-                                id=\"save-automation-button-${automationId}\">\n-                                    ${isSuggested ? \"Add\" : \"Save\"}\n-                                </button>\n-                    </div>\n-                </div>\n-                <div id=\"automation-success-${automationId}\" style=\"display: none;\"></div>\n-            </div>\n-        `;\n+        let automationCardEl = document.createElement(\"div\");\n+        automationCardEl.id = `automation-card-${automationId}`;\n+        automationCardEl.classList.add(\"card\", \"automation\");\n+\n+        // Create card header elements\n+        let automationCardFormEl = document.createElement(\"div\");\n+        automationCardFormEl.className = \"card-header\";\n+\n+        let automationButtonsWrapperEl = document.createElement(\"div\");\n+        automationButtonsWrapperEl.id = \"automation-buttons-wrapper\";\n+\n+        let automationSuccessEl = document.createElement(\"div\");\n+        automationSuccessEl.id = `automation-success-${automationId}`;\n+        automationSuccessEl.style.display = \"none\";\n+\n+        // Create automation card form section\n+        automationCardFormEl.onclick = function() { onClickEditAutomationCard(automationId); };\n+\n+        // automation subject input\n+        let subjectWrapperEl = document.createElement(\"div\");\n+        subjectWrapperEl.className = \"subject-wrapper\";\n+        let subjectEl = document.createElement(\"input\");\n+        subjectEl.type = \"text\";\n+        subjectEl.id = `automation-subject-${automationId}`;\n+        subjectEl.classList.add(automationId, \"fake-input\");\n+        subjectEl.name = \"subject\";\n+        subjectEl.setAttribute(\"data-original\", automation.subject);\n+        subjectEl.value = automation.subject;\n \n-        let automationButtonsSection = automationEl.querySelector(\".automation-buttons\");\n+        // automation share link\n+        let shareLinkEl = document.createElement(\"img\");\n+        shareLinkEl.id = `share-link-${automationId}`,\n+        shareLinkEl.className = \"automation-share-icon\";\n+        shareLinkEl.src = \"/static/assets/icons/share.svg\";\n+        shareLinkEl.alt = \"Share\";\n+        shareLinkEl.onclick = function(event) { copyShareLink(event, automationId, automation.subject, automation.crontime, automation.query_to_run); };\n+\n+        // automation edit action\n+        let editIconEl = document.createElement(\"img\");\n+        editIconEl.classList.add(\"automation-edit-icon\", automationId);\n+        editIconEl.src = \"/static/assets/icons/pencil-edit.svg\";\n+        editIconEl.alt = \"Automations\";\n+        editIconEl.onclick = function() { onClickEditAutomationCard(automationId); };\n+\n+        // automation schedule input\n+        let scheduleEl = document.createElement(\"input\");\n+        scheduleEl.type = \"text\";\n+        scheduleEl.id = `automation-schedule-${automationId}`;\n+        scheduleEl.name = \"schedule\";\n+        scheduleEl.classList.add(\"schedule\", automationId, \"fake-input\");\n+        scheduleEl.setAttribute(\"data-cron\", automation.crontime);\n+        scheduleEl.setAttribute(\"data-original\", automation.schedule);\n+        scheduleEl.title = automationNextRun;\n+        scheduleEl.value = automation.schedule;\n+\n+        // automation query to run input\n+        let queryToRunEl = document.createElement(\"textarea\");\n+        queryToRunEl.id = `automation-queryToRun-${automationId}`;\n+        queryToRunEl.classList.add(\"automation-instructions\", automationId, \"fake-input\");\n+        queryToRunEl.setAttribute(\"data-original\", automation.query_to_run);\n+        queryToRunEl.name = \"query-to-run\";\n+        queryToRunEl.textContent = automation.query_to_run;\n+\n+        // Create automation actions section\n+        let automationButtonsEl = document.createElement(\"div\");\n+        automationButtonsEl.className = \"automation-buttons\";\n         if (!isSuggested) {\n-            automationButtonsSection.classList.add(\"hide-details\");\n-            automationButtonsSection.classList.add(automationId);\n+            automationButtonsEl.classList.add(\"hide-details\", automationId);\n         }\n \n-        let saveAutomationButtonEl = automationEl.querySelector(`#save-automation-button-${automation.id}`);\n-        saveAutomationButtonEl.addEventListener(\"click\", async () => { await saveAutomation(automation.id, isSuggested); });\n-        let deleteAutomationButtonEl = automationEl.querySelector(`#delete-automation-button-${automation.id}`);\n-        if (deleteAutomationButtonEl) {\n-            deleteAutomationButtonEl.addEventListener(\"click\", () => {\n-                deleteAutomation(automation.id);\n-                document.getElementById('overlay').style.display = 'none';\n-            });\n+        // save automation button\n+        let saveAutomationButtonEl = document.createElement(\"button\");\n+        saveAutomationButtonEl.type = \"button\";\n+        saveAutomationButtonEl.className = \"save-automation-button positive-button\";\n+        saveAutomationButtonEl.id = `save-automation-button-${automationId}`;\n+        saveAutomationButtonEl.textContent = isSuggested ? \"Add\" : \"Save\";\n+        saveAutomationButtonEl.onclick = async () => { await saveAutomation(automation.id, isSuggested); };\n+\n+        // promo image for suggested automations\n+        let promoImageEl = isSuggested ? document.createElement(\"img\") : null;\n+        if (isSuggested) {\n+            promoImageEl.className = \"promo-image\";\n+            promoImageEl.src = automation.promoImage;\n+            promoImageEl.alt = \"Promo Image\";\n         }\n-        let cancelEditAutomationButtonEl = automationEl.querySelector(`#cancel-edit-automation-button-${automation.id}`);\n-        if (cancelEditAutomationButtonEl) {\n-            cancelEditAutomationButtonEl.addEventListener(\"click\", (event) => {\n-                clickCancelEdit(event, automation.id);\n-                document.getElementById('overlay').style.display = 'none';\n-            });\n+\n+        // delete automation button\n+        let emptyDivEl = document.createElement(\"div\");\n+        emptyDivEl.className = \"empty-div\";\n+        let deleteAutomationButtonEl = !isSuggested ? document.createElement(\"button\") : emptyDivEl;\n+        if (!isSuggested) {\n+            deleteAutomationButtonEl.type = \"button\";\n+            deleteAutomationButtonEl.className = \"delete-automation-button negative-button\";\n+            deleteAutomationButtonEl.id = `delete-automation-button-${automationId}`;\n+            deleteAutomationButtonEl.textContent = \"Delete\";\n+            deleteAutomationButtonEl.onclick = function() { deleteAutomation(automationId); document.getElementById('overlay').style.display = 'none'; };\n+        }\n+\n+        // send preview automation button\n+        emptyDivEl = document.createElement(\"div\");\n+        emptyDivEl.className = \"empty-div\";\n+        let sendPreviewAutomationButtonEl = !isSuggested ? document.createElement(\"button\") : emptyDivEl;\n+        if (!isSuggested) {\n+            sendPreviewAutomationButtonEl.type = \"button\";\n+            sendPreviewAutomationButtonEl.className = \"send-preview-automation-button positive-button\";\n+            sendPreviewAutomationButtonEl.title = \"Immediately get a preview of this automation\";\n+            sendPreviewAutomationButtonEl.textContent = \"Preview\";\n+            sendPreviewAutomationButtonEl.onclick = function() { sendAPreviewAutomation(automationId); };\n         }\n \n+        // Construct automation card from elements\n+        subjectWrapperEl.append(subjectEl, shareLinkEl, editIconEl);\n+        automationButtonsEl.append(deleteAutomationButtonEl, sendPreviewAutomationButtonEl, saveAutomationButtonEl);\n+\n+        automationCardFormEl.append(subjectWrapperEl, scheduleEl, queryToRunEl);\n+        if (isSuggested) {\n+            automationCardFormEl.append(promoImageEl);\n+        }\n+        automationButtonsWrapperEl.append(automationButtonsEl);\n+\n+        automationCardEl.append(automationCardFormEl, automationButtonsWrapperEl, automationSuccessEl);\n+        automationEl.append(automationCardEl);\n+\n         return automationEl.firstElementChild;\n     }\n \n@@ -560,9 +606,6 @@ <h2 class=\"section-title\">\n         });\n     }\n \n-\n-\n-\n     function listSuggestedAutomations() {\n         const SuggestedAutomationsList = document.getElementById(\"suggested-automations-list\");\n         SuggestedAutomationsList.innerHTML = ''; // Clear existing content\n@@ -830,7 +873,6 @@ <h2 class=\"section-title\">\n \n                 return;\n             }\n-\n         }\n \n         // Get client location information from IP\n@@ -887,6 +929,8 @@ <h2 class=\"section-title\">\n         })\n         .then(response => response.ok ? response.json() : Promise.reject(data))\n         .then(automation => {\n+            // Remove modal overlay\n+            document.getElementById('overlay').style.display = 'none';\n             if (create) {\n                 const automationEl = document.getElementById(`automation-card-${automationId}`);\n                 // Create a more interesting confirmation animation.\n@@ -936,66 +980,113 @@ <h2 class=\"section-title\">\n         });\n     }\n \n-    const create_automation_button = document.getElementById(\"create-automation-button\");\n-    create_automation_button.addEventListener(\"click\", function(event) {\n-        event.preventDefault();\n-        var automationEl = document.createElement(\"div\");\n-        automationEl.classList.add(\"card\");\n-        automationEl.classList.add(\"automation\");\n-        automationEl.classList.add(\"new-automation\")\n-        const placeholderId = Date.now();\n+    function createAutomationEl(placeholderId = null) {\n+        let automationEl = document.createElement(\"div\");\n+        automationEl.classList.add(\"card\", \"automation\", \"new-automation\");\n+        placeholderId = placeholderId ?? `automation_${Date.now()}`;\n         automationEl.id = \"automation-card-\" + placeholderId;\n-        var scheduleSelector = createScheduleSelector(placeholderId);\n-        automationEl.innerHTML = `\n-            <label for=\"schedule\">New Automation</label>\n-            ${scheduleSelector.outerHTML}\n-            <label for=\"query-to-run\">What would you like to receive in your automation?</label>\n-            <textarea id=\"automation-queryToRun-${placeholderId}\" placeholder=\"Provide me with a mindful moment, reminding me to be centered.\"></textarea>\n-            <div class=\"automation-buttons\">\n-                <button type=\"button\"\n-                        class=\"delete-automation-button negative-button\"\n-                        onclick=\"deleteAutomation(${placeholderId}, true)\"\n-                        id=\"delete-automation-button-${placeholderId}\">Cancel</button>\n-                <button type=\"button\"\n-                        class=\"save-automation-button\"\n-                        onclick=\"saveAutomation(${placeholderId}, true)\"\n-                        id=\"save-automation-button-${placeholderId}\">Create</button>\n-            </div>\n-            <div id=\"automation-success-${placeholderId}\" style=\"display: none;\"></div>\n-        `;\n+\n+        // Create label for schedule\n+        let scheduleLabel = document.createElement(\"label\");\n+        scheduleLabel.setAttribute(\"for\", \"schedule\");\n+        scheduleLabel.textContent = \"New Automation\";\n+\n+        // Create schedule selector\n+        let scheduleSelector = createScheduleSelector(placeholderId);\n+\n+        // Create label for query-to-run\n+        let queryLabel = document.createElement(\"label\");\n+        queryLabel.setAttribute(\"for\", \"query-to-run\");\n+        queryLabel.textContent = \"What would you like to receive in your automation?\";\n+\n+        // Create textarea for query-to-run\n+        let queryTextarea = document.createElement(\"textarea\");\n+        queryTextarea.id = `automation-queryToRun-${placeholderId}`;\n+        queryTextarea.classList.add(`automation-queryToRun-${placeholderId}`);\n+        queryTextarea.placeholder = \"Provide me with a mindful moment, reminding me to be centered.\";\n+\n+        // Create buttons container\n+        let buttonsContainer = document.createElement(\"div\");\n+        buttonsContainer.classList.add(\"automation-buttons\");\n+\n+        // Create cancel button\n+        let deleteButton = document.createElement(\"button\");\n+        deleteButton.type = \"button\";\n+        deleteButton.classList.add(\"delete-automation-button\", \"negative-button\");\n+        deleteButton.textContent = \"Cancel\";\n+        deleteButton.id = `delete-automation-button-${placeholderId}`;\n+        deleteButton.onclick = () => deleteAutomation(placeholderId, true);\n+\n+        // Create save button\n+        let saveButton = document.createElement(\"button\");\n+        saveButton.type = \"button\";\n+        saveButton.classList.add(\"save-automation-button\");\n+        saveButton.textContent = \"Create\";\n+        saveButton.id = `save-automation-button-${placeholderId}`;\n+        saveButton.onclick = () => saveAutomation(placeholderId, true);\n+\n+        // Create success message container\n+        let successMessage = document.createElement(\"div\");\n+        successMessage.id = `automation-success-${placeholderId}`;\n+        successMessage.style.display = \"none\";\n+\n+        // Append schedule label and selector\n+        automationEl.appendChild(scheduleLabel);\n+        automationEl.appendChild(scheduleSelector);\n+\n+        // Append query label and textarea\n+        automationEl.appendChild(queryLabel);\n+        automationEl.appendChild(queryTextarea);\n+\n+        // Append buttons to their container\n+        buttonsContainer.appendChild(deleteButton);\n+        buttonsContainer.appendChild(saveButton);\n+\n+        // Append buttons container to automationEl\n+        automationEl.appendChild(buttonsContainer);\n+\n+        // Append success message to automationEl\n+        automationEl.appendChild(successMessage);\n+\n+        return automationEl;\n+    }\n+\n+    const createAutomationButtonEl = document.getElementById(\"create-automation-button\");\n+    createAutomationButtonEl.addEventListener(\"click\", function(event) {\n+        event.preventDefault();\n+\n+        // Insert automationEl into the DOM\n+        let placeholderId = `automation_${Date.now()}`;\n+        let automationEl = createAutomationEl(placeholderId);\n         document.getElementById(\"automations\").insertBefore(automationEl, document.getElementById(\"automations\").firstChild);\n+\n         setupScheduleViewListener(\"* * * * *\", placeholderId);\n     })\n \n     function createPreFilledAutomation(subject, crontime, query) {\n         document.getElementById('overlay').style.display = 'block';\n-        var automationEl = document.createElement(\"div\");\n-        automationEl.classList.add(\"card\");\n-        automationEl.classList.add(\"automation\");\n-        automationEl.classList.add(\"new-automation\")\n-        const placeholderId = Date.now();\n+\n+        let placeholderId = `automation_${Date.now()}`;\n+        let automationEl = createAutomationEl(placeholderId);\n+\n+        // Configure automationEl with pre-filled values\n         automationEl.classList.add(`${placeholderId}`);\n-        automationEl.id = \"automation-card-\" + placeholderId;\n-        var scheduleSelector = createScheduleSelector(placeholderId);\n-        automationEl.innerHTML = `\n-            <label for=\"subject\">New Automation</label>\n-            <input type=\"text\" id=\"automation-subject-${placeholderId}\" value=\"${subject}\">\n-            ${scheduleSelector.outerHTML}\n-            <label for=\"query-to-run\">What would you like to receive in your automation?</label>\n-            <textarea id=\"automation-queryToRun-${placeholderId}\">${query}</textarea>\n-            <div class=\"automation-buttons\">\n-                <button type=\"button\"\n-                        class=\"delete-automation-button negative-button\"\n-                        onclick=\"deleteAutomation(${placeholderId}, true)\"\n-                        id=\"delete-automation-button-${placeholderId}\">Cancel</button>\n-                <button type=\"button\"\n-                        class=\"save-automation-button\"\n-                        onclick=\"saveAutomation(${placeholderId}, true)\"\n-                        id=\"save-automation-button-${placeholderId}\">Create</button>\n-            </div>\n-            <div id=\"automation-success-${placeholderId}\" style=\"display: none;\"></div>\n-        `;\n+        automationEl.getElementsByClassName(`automation-queryToRun-${placeholderId}`)[0].value = query;\n+\n+        // Create input for subject\n+        let subjectEl = document.createElement(\"input\");\n+        subjectEl.type = \"text\";\n+        subjectEl.id = `automation-subject-${placeholderId}`;\n+        subjectEl.value = subject;\n+\n+        // Insert subjectEl after label for subject\n+        let subjectLabel = automationEl.querySelector(`label[for=\"automation-subject-${placeholderId}\"]`);\n+        automationEl.firstChild.insertAdjacentElement('afterend', subjectEl);\n+        automationEl.firstChild.label = \"subject\";\n+\n+        // Insert automationEl into the DOM\n         document.getElementById(\"automations\").insertBefore(automationEl, document.getElementById(\"automations\").firstChild);\n+\n         setupScheduleViewListener(crontime, placeholderId);\n     }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7f329e7e9d379d9957c6d299db06a90ee6f59da8",
            "date": "2025-01-13T06:37:08Z",
            "author_login": "sabaimran"
          },
          {
            "sha": "96e3d0a7b901edd9b76bfbf4592ec63a0627f3f0",
            "date": "2025-01-12T11:06:01Z",
            "author_login": "osama-ata"
          },
          {
            "sha": "6bd9f6bb6196adb48b18be1fe7b48033cc882dc6",
            "date": "2025-01-12T03:52:34Z",
            "author_login": "debanjum"
          },
          {
            "sha": "51a774c99302e007e2a2f2a2615d63276b45c6e5",
            "date": "2025-01-11T07:39:02Z",
            "author_login": "debanjum"
          },
          {
            "sha": "9e8b8dc5a2575f8347d17b8709de69df3878bf66",
            "date": "2025-01-11T06:38:39Z",
            "author_login": "debanjum"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Khoj is an application that creates personal AI agents. The Automation feature allows a user to insert arbitrary HTML inside the task instructions, resulting in a Stored XSS. The q parameter for the /api/automation endpoint does not get correctly sanitized when rendered on the page, resulting in the ability of users to inject arbitrary HTML/JS. This vulnerability is fixed in 1.15.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-20T21:15:14.897",
    "last_modified": "2024-09-03T18:19:33.167",
    "fix_date": "2024-06-22T15:51:22Z"
  },
  "references": [
    {
      "url": "https://github.com/khoj-ai/khoj/commit/1c7a562880eeb7354325545d2cf6c5d1d1134812",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/khoj-ai/khoj/commit/55be90cdd2f9d6a09c8bf9ceea52fc36b9201626",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/khoj-ai/khoj/security/advisories/GHSA-cf72-vg59-4j4h",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.379355",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "khoj",
    "owner": "khoj-ai",
    "created_at": "2021-08-16T01:48:44Z",
    "updated_at": "2025-01-14T12:42:09Z",
    "pushed_at": "2025-01-13T23:08:16Z",
    "size": 113533,
    "stars": 24453,
    "forks": 1306,
    "open_issues": 70,
    "watchers": 24453,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 1179275,
      "TypeScript": 854791,
      "Emacs Lisp": 76450,
      "HTML": 73291,
      "JavaScript": 71035,
      "CSS": 62011,
      "Shell": 9782,
      "Dockerfile": 4928,
      "Java": 2888
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T12:54:39.567713"
  }
}