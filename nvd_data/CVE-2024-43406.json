{
  "cve_id": "CVE-2024-43406",
  "github_data": {
    "repository": "lf-edge/ekuiper",
    "fix_commit": "1a9c745649438feaac357d282959687012b65503",
    "related_commits": [
      "1a9c745649438feaac357d282959687012b65503"
    ],
    "patch_url": "https://github.com/lf-edge/ekuiper/commit/1a9c745649438feaac357d282959687012b65503.patch",
    "fix_commit_details": {
      "sha": "1a9c745649438feaac357d282959687012b65503",
      "commit_date": "2024-08-16T01:33:29Z",
      "author": {
        "login": "Yisaer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: use prepared stmt in sql (#3100)",
        "length": 83,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 55,
        "additions": 40,
        "deletions": 15
      },
      "files": [
        {
          "filename": "internal/pkg/store/sql/sqlKv.go",
          "status": "modified",
          "additions": 22,
          "deletions": 9,
          "patch": "@@ -89,10 +89,15 @@ func (kv *sqlKvStore) Set(key string, value interface{}) error {\n func (kv *sqlKvStore) Get(key string, value interface{}) (bool, error) {\n \tresult := false\n \terr := kv.database.Apply(func(db *sql.DB) error {\n-\t\tquery := fmt.Sprintf(\"SELECT val FROM '%s' WHERE key='%s';\", kv.table, key)\n-\t\trow := db.QueryRow(query)\n+\t\tquery := fmt.Sprintf(\"SELECT val FROM '%s' WHERE key=?;\", kv.table)\n+\t\tstmt, err := db.Prepare(query)\n+\t\tif err != nil {\n+\t\t\tresult = false\n+\t\t\treturn nil\n+\t\t}\n+\t\trow := stmt.QueryRow(key)\n \t\tvar tmp []byte\n-\t\terr := row.Scan(&tmp)\n+\t\terr = row.Scan(&tmp)\n \t\tif err != nil {\n \t\t\tresult = false\n \t\t\treturn nil\n@@ -110,9 +115,13 @@ func (kv *sqlKvStore) Get(key string, value interface{}) (bool, error) {\n func (kv *sqlKvStore) GetKeyedState(key string) (interface{}, error) {\n \tvar value interface{}\n \terr := kv.database.Apply(func(db *sql.DB) error {\n-\t\tquery := fmt.Sprintf(\"SELECT val FROM '%s' WHERE key='%s';\", kv.table, key)\n-\t\trow := db.QueryRow(query)\n-\t\terr := row.Scan(&value)\n+\t\tquery := fmt.Sprintf(\"SELECT val FROM '%s' WHERE key=?;\", kv.table)\n+\t\tstmt, err := db.Prepare(query)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\trow := stmt.QueryRow(key)\n+\t\terr = row.Scan(&value)\n \t\tif err != nil {\n \t\t\treturn err\n \t\t}\n@@ -137,10 +146,14 @@ func (kv *sqlKvStore) SetKeyedState(key string, value interface{}) error {\n \n func (kv *sqlKvStore) Delete(key string) error {\n \treturn kv.database.Apply(func(db *sql.DB) error {\n-\t\tquery := fmt.Sprintf(\"SELECT key FROM '%s' WHERE key='%s';\", kv.table, key)\n-\t\trow := db.QueryRow(query)\n+\t\tquery := fmt.Sprintf(\"SELECT key FROM '%s' WHERE key=?;\", kv.table)\n+\t\tstmt, err := db.Prepare(query)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\trow := stmt.QueryRow(key)\n \t\tvar tmp []byte\n-\t\terr := row.Scan(&tmp)\n+\t\terr = row.Scan(&tmp)\n \t\tif nil != err || 0 == len(tmp) {\n \t\t\treturn errorx.NewWithCode(errorx.NOT_FOUND, fmt.Sprintf(\"%s is not found\", key))\n \t\t}"
        },
        {
          "filename": "internal/pkg/store/sql/sqlTs.go",
          "status": "modified",
          "additions": 18,
          "deletions": 6,
          "patch": "@@ -77,8 +77,12 @@ func (t *ts) Set(key int64, value interface{}) (bool, error) {\n func (t ts) Get(key int64, value interface{}) (bool, error) {\n \tresult := false\n \terr := t.database.Apply(func(db *sql.DB) error {\n-\t\tquery := fmt.Sprintf(\"SELECT val FROM %s WHERE key=%d;\", t.table, key)\n-\t\trow := db.QueryRow(query)\n+\t\tquery := fmt.Sprintf(\"SELECT val FROM %s WHERE key=?;\", t.table)\n+\t\tstmt, err := db.Prepare(query)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\trow := stmt.QueryRow(key)\n \t\tvar tmp []byte\n \t\tswitch err := row.Scan(&tmp); err {\n \t\tcase sql.ErrNoRows:\n@@ -111,16 +115,24 @@ func (t ts) Last(value interface{}) (int64, error) {\n \n func (t ts) Delete(key int64) error {\n \treturn t.database.Apply(func(db *sql.DB) error {\n-\t\tquery := fmt.Sprintf(\"DELETE FROM %s WHERE key=%d;\", t.table, key)\n-\t\t_, err := db.Exec(query)\n+\t\tquery := fmt.Sprintf(\"DELETE FROM %s WHERE key=?;\", t.table)\n+\t\tstmt, err := db.Prepare(query)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\t_, err = stmt.Exec(key)\n \t\treturn err\n \t})\n }\n \n func (t ts) DeleteBefore(key int64) error {\n \treturn t.database.Apply(func(db *sql.DB) error {\n-\t\tquery := fmt.Sprintf(\"DELETE FROM %s WHERE key<%d;\", t.table, key)\n-\t\t_, err := db.Exec(query)\n+\t\tquery := fmt.Sprintf(\"DELETE FROM %s WHERE key<?;\", t.table)\n+\t\tstmt, err := db.Prepare(query)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\t_, err = stmt.Exec(key)\n \t\treturn err\n \t})\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "41ec07fa01fb7048c3609f484a98ba2e36a60a26",
            "date": "2025-01-13T08:08:40Z",
            "author_login": "Yisaer"
          },
          {
            "sha": "0c6f4a0ef2e6298f6bce5f3a156f69edacc28d1f",
            "date": "2025-01-07T06:22:17Z",
            "author_login": "Yisaer"
          },
          {
            "sha": "91fe83da70103efb20e529cfbe7b57a13c895e61",
            "date": "2025-01-06T05:46:06Z",
            "author_login": "Yisaer"
          },
          {
            "sha": "d41a893bbf104935b64c5080994fddb004c74fb6",
            "date": "2024-12-27T03:23:46Z",
            "author_login": "Yisaer"
          },
          {
            "sha": "f5534b6e3168ee2767eab7a5bae489c66e7dd06f",
            "date": "2024-12-27T03:21:59Z",
            "author_login": "ngjaying"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-89",
    "description": "LF Edge eKuiper is a lightweight IoT data analytics and stream processing engine running on resource-constraint edge devices. A user could utilize and exploit SQL Injection to allow the execution of malicious SQL query via Get method in sqlKvStore. This vulnerability is fixed in 1.14.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-20T15:15:24.070",
    "last_modified": "2024-08-26T18:30:13.230",
    "fix_date": "2024-08-16T01:33:29Z"
  },
  "references": [
    {
      "url": "https://github.com/lf-edge/ekuiper/commit/1a9c745649438feaac357d282959687012b65503",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/lf-edge/ekuiper/security/advisories/GHSA-r5ph-4jxm-6j9p",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.377063",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ekuiper",
    "owner": "lf-edge",
    "created_at": "2019-07-03T07:37:12Z",
    "updated_at": "2025-01-14T06:44:17Z",
    "pushed_at": "2025-01-13T08:08:41Z",
    "size": 120852,
    "stars": 1517,
    "forks": 418,
    "open_issues": 64,
    "watchers": 1517,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "master-1.8",
      "master-1.9",
      "master-1.10",
      "master-1.11",
      "master-1.12",
      "master-1.13",
      "master-1.14",
      "master-2.0"
    ],
    "languages": {
      "Go": 4531232,
      "C": 51097,
      "Shell": 38816,
      "Python": 33741,
      "Makefile": 14386,
      "Mustache": 2129,
      "Dockerfile": 1784
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T21:17:11.567858"
  }
}