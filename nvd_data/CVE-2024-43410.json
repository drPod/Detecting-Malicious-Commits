{
  "cve_id": "CVE-2024-43410",
  "github_data": {
    "repository": "Eugeny/russh",
    "fix_commit": "f660ea3f64b86d11d19e33076012069f02431e55",
    "related_commits": [
      "f660ea3f64b86d11d19e33076012069f02431e55"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f660ea3f64b86d11d19e33076012069f02431e55",
      "commit_date": "2024-08-14T07:08:59Z",
      "author": {
        "login": "Eugeny",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fixed GHSA-vgvv-x7xg-6cqg - OOM Denial of Service due to allocation of untrusted packet size",
        "length": 92,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 13,
        "additions": 12,
        "deletions": 1
      },
      "files": [
        {
          "filename": "russh/src/cipher/mod.rs",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -240,7 +240,13 @@ pub(crate) async fn read<'a, R: AsyncRead + Unpin>(\n             buffer.buffer.extend(&len);\n             debug!(\"reading, seqn = {:?}\", seqn);\n             let len = cipher.decrypt_packet_length(seqn, &len);\n-            buffer.len = BigEndian::read_u32(&len) as usize + cipher.tag_len();\n+            let len = BigEndian::read_u32(&len) as usize;\n+\n+            if len > MAXIMUM_PACKET_LEN {\n+                return Err(Error::PacketSize(len));\n+            }\n+\n+            buffer.len = len + cipher.tag_len();\n             debug!(\"reading, clear len = {:?}\", buffer.len);\n         }\n     }\n@@ -278,5 +284,6 @@ pub(crate) async fn read<'a, R: AsyncRead + Unpin>(\n pub(crate) const PACKET_LENGTH_LEN: usize = 4;\n \n const MINIMUM_PACKET_LEN: usize = 16;\n+const MAXIMUM_PACKET_LEN: usize = 256 * 1024;\n \n const PADDING_LENGTH_LEN: usize = 1;"
        },
        {
          "filename": "russh/src/lib.rs",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -221,6 +221,10 @@ pub enum Error {\n     #[error(\"Wrong server signature\")]\n     WrongServerSig,\n \n+    /// Excessive packet size.\n+    #[error(\"Bad packet size: {0}\")]\n+    PacketSize(usize),\n+\n     /// Message received/sent on unopened channel.\n     #[error(\"Channel not open\")]\n     WrongChannel,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "71099170756875f405d04dfc385c367c8a976cb4",
            "date": "2025-01-25T11:43:18Z",
            "author_login": "Eugeny"
          },
          {
            "sha": "d4d3605934767cc31b95d8ca82e5cd372591c048",
            "date": "2025-01-25T11:37:19Z",
            "author_login": "Eugeny"
          },
          {
            "sha": "72847a7c631b948a7658c8e33907535f1386cb95",
            "date": "2025-01-24T21:25:03Z",
            "author_login": "Eugeny"
          },
          {
            "sha": "4fe938ed7aec8feb08e9a512a2bd020d9952de4b",
            "date": "2025-01-23T21:06:14Z",
            "author_login": "jeromegn"
          },
          {
            "sha": "7ca359e632505637284f170fec674babfcdcf9a0",
            "date": "2025-01-16T21:47:21Z",
            "author_login": "Eugeny"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "Russh is a Rust SSH client & server library. Allocating an untrusted amount of memory allows any unauthenticated user to OOM a russh server. An SSH packet consists of a 4-byte big-endian length, followed by a byte stream of this length.\nAfter parsing and potentially decrypting the 4-byte length, russh allocates enough memory for this bytestream, as a performance optimization to avoid reallocations later. But this length is entirely untrusted and can be set to any value by the client, causing this much memory to be allocated, which will cause the process to OOM within a few such requests. This vulnerability is fixed in 0.44.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-21T16:15:08.373",
    "last_modified": "2024-08-21T17:25:08.560",
    "fix_date": "2024-08-14T07:08:59Z"
  },
  "references": [
    {
      "url": "https://github.com/Eugeny/russh/commit/f660ea3f64b86d11d19e33076012069f02431e55",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Eugeny/russh/security/advisories/GHSA-vgvv-x7xg-6cqg",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.381096",
    "processing_status": "enhanced"
  }
}