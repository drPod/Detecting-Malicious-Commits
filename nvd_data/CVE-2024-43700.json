{
  "cve_id": "CVE-2024-43700",
  "github_data": {
    "repository": "PhilipHazel/xfpt",
    "fix_commit": "a690304bbd3fd19e9dfdad50dcc87ad829f744e4",
    "related_commits": [
      "a690304bbd3fd19e9dfdad50dcc87ad829f744e4"
    ],
    "patch_url": "https://github.com/PhilipHazel/xfpt/commit/a690304bbd3fd19e9dfdad50dcc87ad829f744e4.patch",
    "fix_commit_details": {
      "sha": "a690304bbd3fd19e9dfdad50dcc87ad829f744e4",
      "commit_date": "2024-08-11T16:43:41Z",
      "author": {
        "login": "PhilipHazel",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Diagnose error if macro expansion makes a line too long for its buffer",
        "length": 70,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 78,
        "additions": 59,
        "deletions": 19
      },
      "files": [
        {
          "filename": "ChangeLog",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -1,6 +1,13 @@\n ChangeLog file for xfpt\n -----------------------\n \n+Release 1.01 XX-XXX-2024\n+------------------------\n+\n+1. Diagnose an error when inserting an inline macro would overflow a line \n+   buffer.\n+\n+\n Release 1.00 08-March-2023\n --------------------------\n "
        },
        {
          "filename": "src/dot.c",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -2,7 +2,7 @@\n *     xfpt - Simple ASCII->Docbook processor     *\n *************************************************/\n \n-/* Copyright (c) University of Cambridge, 2023 */\n+/* Copyright (c) University of Cambridge, 2024 */\n /* Written by Philip Hazel, started in 2006 */\n \n /* This module contains code for processing a line that starts with a dot. */\n@@ -482,6 +482,7 @@ while (*p != 0)\n   *pp = as;\n   pp = &(as->next);\n   as->string = misc_readitem(p, NULL, &length, NULL, 0);\n+  as->length = length;\n   p += length;\n   }\n \n@@ -503,7 +504,9 @@ for (;;)\n   as->next = NULL;\n   *pp = as;\n   pp = &(as->next);\n-  as->string = misc_copystring(line, Ustrlen(line));\n+  length = Ustrlen(line);\n+  as->string = misc_copystring(line, length);\n+  as->length = length;\n   }\n \n /* If there aren't any replacement lines, fake up a comment so that there's\n@@ -514,6 +517,7 @@ if (md->lines == NULL)\n   md->lines = misc_malloc(sizeof(argstr));\n   md->lines->next = NULL;\n   md->lines->string = misc_copystring(US\". Dummy line\\n\", 13);\n+  md->lines->length = 13;\n   }\n }\n \n@@ -913,6 +917,7 @@ while (*p != 0)\n   *pp = as;\n   pp = &(as->next);\n   as->string = misc_readitem(p, NULL, &length, NULL, 0);\n+  as->length = length;\n   p += length;\n   }\n }"
        },
        {
          "filename": "src/error.c",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -2,7 +2,7 @@\n *     xfpt - Simple ASCII->Docbook processor     *\n *************************************************/\n \n-/* Copyright (c) University of Cambridge, 2023 */\n+/* Copyright (c) University of Cambridge, 2024 */\n /* Written by Philip Hazel, started in 2006 */\n \n /* Error handling routines */\n@@ -81,7 +81,8 @@ static error_struct error_data[] = {\n /* 30-34 */\n { ec_serious,  \"bad macro argument substitution: %s follows \\\"%s\\\"\" },\n { ec_serious,  \"binary zero in input ignored\" },\n-{ ec_disaster, \"input sources too deeply nested\" }\n+{ ec_disaster, \"input sources too deeply nested\" },\n+{ ec_disaster, \"maximum line length exceeded during macro substitution\" }\n };\n \n #define error_maxerror (int)(sizeof(error_data)/sizeof(error_struct))\n@@ -151,7 +152,7 @@ else for (int i = from_type_ptr; i >= 0; i--)\n     {\n     if (fe != NULL)\n       {\n-      if (fe->linenumber > 0) \n+      if (fe->linenumber > 0)\n         (void)fprintf(stderr, \"   Detected near line %d of %s\\n\",\n           fe->linenumber, fe->filename);\n       fe = fe->prev;"
        },
        {
          "filename": "src/functions.h",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -2,7 +2,7 @@\n *     xfpt - Simple ASCII->Docbook processor     *\n *************************************************/\n \n-/* Copyright (c) University of Cambridge, 2023 */\n+/* Copyright (c) University of Cambridge, 2024 */\n /* Written by Philip Hazel, started in 2006 */\n \n /* This header defines all the global functions. */\n@@ -23,7 +23,7 @@ extern void        para_process(uschar *);\n \n extern uschar     *read_nextline(void);\n extern uschar     *read_paragraph(uschar *, int *);\n-extern void        read_process_macroline(uschar *, uschar *);\n+extern void        read_process_macroline(uschar *, uschar *, int);\n \n extern int         tree_insertnode(tree_node **, tree_node *);\n extern tree_node  *tree_search(tree_node *, uschar *);"
        },
        {
          "filename": "src/globals.c",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -2,7 +2,7 @@\n *     xfpt - Simple ASCII->Docbook processor     *\n *************************************************/\n \n-/* Copyright (c) University of Cambridge, 2023 */\n+/* Copyright (c) University of Cambridge, 2024 */\n /* Written by Philip Hazel, started in 2006 */\n \n /* Allocate storage and initialize global variables */\n@@ -11,7 +11,7 @@\n \n \n uschar    *xfpt_share                = US DATADIR;\n-uschar    *xfpt_version              = US \"1.00 01-March-2023\";\n+uschar    *xfpt_version              = US \"1.01-DEV 10-August-2024\";\n \n tree_node *entities                  = NULL;\n "
        },
        {
          "filename": "src/para.c",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -2,7 +2,7 @@\n *     xfpt - Simple ASCII->Docbook processor     *\n *************************************************/\n \n-/* Copyright (c) University of Cambridge, 2023 */\n+/* Copyright (c) University of Cambridge, 2024 */\n /* Written by Philip Hazel, started in 2006 */\n \n /* This module contains code for processing a paragraph by looking for flag\n@@ -69,6 +69,7 @@ while (*q != 0 && *q != ')')\n   *pp = as;\n   pp = &(as->next);\n   as->string = misc_readitem(q, US\",)\", &length, NULL, 0);\n+  as->length = length; \n   q += length;\n   if (*q == ',') while (isspace(*(++q)));\n   }\n@@ -91,7 +92,7 @@ for (;;)\n   {\n   uschar buffer[INBUFFSIZE];\n \n-  read_process_macroline(macrocurrent->nextline->string, buffer);\n+  read_process_macroline(macrocurrent->nextline->string, buffer, INBUFFSIZE);\n \n   /* A directive such as .eacharg can skip to the end of the macro if there\n   is no .endeach. Detect this by looking for a change of macrocurrent value,"
        },
        {
          "filename": "src/read.c",
          "status": "modified",
          "additions": 21,
          "deletions": 6,
          "patch": "@@ -2,7 +2,7 @@\n *     xfpt - Simple ASCII->Docbook processor     *\n *************************************************/\n \n-/* Copyright (c) University of Cambridge, 2023 */\n+/* Copyright (c) University of Cambridge, 2024 */\n /* Written by Philip Hazel, started in 2006 */\n \n /* This module contains code for reading the input. */\n@@ -30,7 +30,7 @@ Returns:    nothing\n */\n \n void\n-read_process_macroline(uschar *p, uschar *b)\n+read_process_macroline(uschar *p, uschar *b, int blen)\n {\n int optend = 0;\n \n@@ -49,17 +49,23 @@ while (*p != 0)\n     continue;\n     }\n \n+  /* Ensure at least 3 bytes left in the buffer because all cases except an\n+  argument substitution (which does its own test) add no more than two bytes,\n+  and the third is for the terminating zero. */\n+\n+  if (blen < 3) error(33);   /* Hard error; does not return. */\n+\n   /* Until we hit a dollar, just copy verbatim */\n \n-  if (*p != '$') { *b++ = *p++; continue; }\n+  if (*p != '$') { *b++ = *p++; blen--; continue; }\n \n   /* If dollar is at the end of the string, treat as literal. */\n \n   if (p[1] == 0) { *b++ = '$'; break; }\n \n   /* If the character after $ is another $, insert a literal $. */\n \n-  if (p[1] == '$') { p++; *b++ = *p++; continue; }\n+  if (p[1] == '$') { p++; *b++ = *p++; blen--; continue; }\n \n   /* If the character after $ is +, we are dealing with arguments\n   relative to macro_arg0 in a \".eacharg\" section. Otherwise, we are dealing\n@@ -73,6 +79,7 @@ while (*p != 0)\n       error(18);\n       *b++ = '$';\n       *b++ = *p++;\n+      blen -= 2;\n       continue;\n       }\n     argbase = macro_argbase;\n@@ -90,6 +97,7 @@ while (*p != 0)\n         else error(17, p[1], \"$=\");\n       *b++ = '$';\n       *b++ = *p++;\n+      blen -= 2;\n       continue;\n       }\n     while (isdigit(*(++p))) argn = argn * 10 + *p - '0';\n@@ -126,6 +134,7 @@ while (*p != 0)\n     if (*p == 0 || *p == '\\n') error(30, \"end of line\", \"$\");\n       else error(17, p[1], \"$\");\n     *b++ = *p++;\n+    blen--;\n     continue;\n     }\n   while (isdigit(*(++p))) argn = argn * 10 + *p - '0';\n@@ -161,7 +170,12 @@ while (*p != 0)\n \n   /* If we have found an argument, substitute it. */\n \n-  if (arg != NULL) b += sprintf(CS b, \"%s\", arg->string);\n+  if (arg != NULL)\n+    {\n+    blen -= arg->length;\n+    if (blen < 1) error(33);  /* Hard; does not return */\n+    b += sprintf(CS b, \"%s\", arg->string);\n+    }\n   }\n \n *b = 0;\n@@ -294,7 +308,8 @@ for (;;)\n       }\n     else\n       {\n-      read_process_macroline(macrocurrent->nextline->string, inbuffer);\n+      read_process_macroline(macrocurrent->nextline->string, inbuffer,\n+        INBUFFSIZE);\n       macrocurrent->nextline = macrocurrent->nextline->next;\n       break;\n       }"
        },
        {
          "filename": "src/structs.h",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -2,7 +2,7 @@\n *     xfpt - Simple ASCII->Docbook processor     *\n *************************************************/\n \n-/* Copyright (c) University of Cambridge, 2012 */\n+/* Copyright (c) University of Cambridge, 2024 */\n /* Written by Philip Hazel, started in 2006 */\n \n /* This module contains definitions of structures that are used throughout the\n@@ -44,6 +44,7 @@ typedef struct pushstr {\n typedef struct argstr {\n   struct argstr *next;\n   uschar *string;\n+  int length; \n } argstr;\n \n /* Macro definition item */"
        },
        {
          "filename": "testing/infiles/07",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+.macro m1 one\n+$1\n+.endmacro\n+&mn+"
        },
        {
          "filename": "testing/outfiles/07",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+<para>"
        },
        {
          "filename": "testing/outfiles/07.err",
          "status": "added",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -0,0 +1,4 @@\n+** Error: maximum line length exceeded during macro substitution\n+   Processing macro m1\n+   Detected near line 6 of infiles/07\n+** xfpt abandoned"
        },
        {
          "filename": "testing/outfiles/cmd.err",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -9,7 +9,7 @@ Usage: xfpt [[-]-help]\n             [-S <share-directory>]\n             [-v or --version]\n             [input-file]\n-xpft version 1.00 01-March-2023\n+xpft version 1.01-DEV 10-August-2024\n Usage: xfpt [[-]-help]\n             [-o <output-file>]\n             [-S <share-directory>]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a690304bbd3fd19e9dfdad50dcc87ad829f744e4",
            "date": "2024-08-11T16:43:41Z",
            "author_login": "PhilipHazel"
          },
          {
            "sha": "84cc67251d1794ed7db4e3399d6b857c913ad4e5",
            "date": "2023-10-11T16:19:05Z",
            "author_login": "PhilipHazel"
          },
          {
            "sha": "9d93e484cfeeb101f7b7c766149903910d9521ac",
            "date": "2023-03-19T17:40:11Z",
            "author_login": "PhilipHazel"
          },
          {
            "sha": "135b2e26ccf55b8e20840b253ea4cee5fb791f19",
            "date": "2023-03-08T17:35:23Z",
            "author_login": "PhilipHazel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-787",
    "description": "xfpt versions prior to 1.01 fails to handle appropriately some parameters inside the input data, resulting in a stack-based buffer overflow vulnerability. When a user of the affected product is tricked to process a specially crafted file, arbitrary code may be executed on the user's environment.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-29T11:15:26.757",
    "last_modified": "2024-11-30T12:15:17.720",
    "fix_date": "2024-08-11T16:43:41Z"
  },
  "references": [
    {
      "url": "https://github.com/PhilipHazel/xfpt",
      "source": "vultures@jpcert.or.jp",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/PhilipHazel/xfpt/commit/a690304bbd3fd19e9dfdad50dcc87ad829f744e4",
      "source": "vultures@jpcert.or.jp",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://jvn.jp/en/vu/JVNVU96498690/",
      "source": "vultures@jpcert.or.jp",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2024/11/msg00034.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.410562",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xfpt",
    "owner": "PhilipHazel",
    "created_at": "2023-03-08T17:37:42Z",
    "updated_at": "2024-08-11T16:43:45Z",
    "pushed_at": "2024-08-11T16:43:42Z",
    "size": 213,
    "stars": 0,
    "forks": 1,
    "open_issues": 0,
    "watchers": 0,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C": 77673,
      "Shell": 6417,
      "Perl": 5384,
      "Makefile": 2943,
      "BitBake": 1195,
      "M4": 888,
      "C++": 27,
      "Assembly": 11
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T21:43:18.367246"
  }
}