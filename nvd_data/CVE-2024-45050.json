{
  "cve_id": "CVE-2024-45050",
  "github_data": {
    "repository": "Lif-Platforms/New-Ringer-Server",
    "fix_commit": "ae795ff47b2ac2656ac6a099a0e7954ca7d9ba53",
    "related_commits": [
      "ae795ff47b2ac2656ac6a099a0e7954ca7d9ba53"
    ],
    "patch_url": "https://github.com/Lif-Platforms/New-Ringer-Server/commit/ae795ff47b2ac2656ac6a099a0e7954ca7d9ba53.patch",
    "fix_commit_details": {
      "sha": "ae795ff47b2ac2656ac6a099a0e7954ca7d9ba53",
      "commit_date": "2024-08-27T23:57:09Z",
      "author": {
        "login": "Superior126",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix message loading security issue",
        "length": 34,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 41,
        "additions": 30,
        "deletions": 11
      },
      "files": [
        {
          "filename": "src/main.py",
          "status": "modified",
          "additions": 22,
          "deletions": 10,
          "patch": "@@ -2,6 +2,7 @@\n from fastapi.middleware.cors import CORSMiddleware\n import utils.auth_server_interface as auth_server\n import utils.db_interface as database\n+from utils.db_interface import ConversationNotFound\n import json\n import uvicorn\n import os\n@@ -366,20 +367,31 @@ async def load_messages_v2(request: Request, conversation_id: str):\n \n     if status == \"GOOD!\":\n         try:\n-            # Get all messages from database\n-            messages = await database.get_messages(conversation_id)\n-\n-            # Remove all but the last 20 messages\n-            if len(messages) > 20:\n-                messages = messages[-20:]\n-\n-            return messages\n-        except:\n+            # Get all members of conversation\n+            members = await database.get_members(conversation_id)\n+        except ConversationNotFound:\n             raise HTTPException(status_code=404, detail=\"Conversation Not Found\")\n+        except:\n+            raise HTTPException(status_code=500, detail=\"Internal Server Error\")\n         \n+        # Check to ensure that the user is a member of the conversation they are trying to load\n+        if username in members:\n+            try:\n+                # Get all messages from database\n+                messages = await database.get_messages(conversation_id)\n+\n+                # Remove all but the last 20 messages\n+                if len(messages) > 20:\n+                    messages = messages[-20:]\n+\n+                return messages\n+            except:\n+                raise HTTPException(status_code=500, detail=\"Internal Server Error\")\n+        else:\n+            raise HTTPException(status_code=403, detail=\"You are not a member of this conversation\")\n+                        \n     elif status == \"INVALID_TOKEN\":\n         raise HTTPException(status_code=401, detail=\"Invalid Token\")\n-    \n     else:\n         raise HTTPException(status_code=500, detail=\"Internal Server Error\")\n     "
        },
        {
          "filename": "src/utils/db_interface.py",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -12,6 +12,11 @@ def set_config(config):\n # Global database connection\n conn = None\n \n+# Define database errors\n+class ConversationNotFound(Exception):\n+    \"\"\"Error for when the conversation supplied could not be found in the database.\"\"\"\n+    pass\n+\n # Function to establish a database connection\n async def connect_to_database():\n     # Handle connecting to the database\n@@ -262,7 +267,9 @@ async def get_members(conversation_id: str):\n     if conversation:\n         members = json.loads(conversation[2])\n \n-    return members\n+        return members\n+    else:\n+        raise ConversationNotFound()\n \n async def remove_conversation(conversation_id: str, username: str):\n     await connect_to_database()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b95230a2b9d7650a3551c67fc3fb3d6cda0638f2",
            "date": "2025-01-08T03:39:34Z",
            "author_login": "Superior126"
          },
          {
            "sha": "bac186d2480ee249bfac5bff1ca9f0d34ccf41c2",
            "date": "2025-01-08T03:32:07Z",
            "author_login": "Superior126"
          },
          {
            "sha": "60c742b62d267d540267ce52a5b10945a237deea",
            "date": "2025-01-03T20:12:10Z",
            "author_login": "Superior126"
          },
          {
            "sha": "2c3ae84bbc2597d52bcd7d5b062b541e2dd8d77f",
            "date": "2025-01-03T20:10:14Z",
            "author_login": "Superior126"
          },
          {
            "sha": "f1847ac650c9fb45265a728095ff48909940df53",
            "date": "2025-01-03T05:14:30Z",
            "author_login": "Superior126"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N",
    "cwe_id": "CWE-862",
    "description": "Ringer server is the server code for the Ringer messaging app. Prior to version 1.3.1, there is an issue with the messages loading route where Ringer Server does not check to ensure that the user loading the conversation is actually a member of that conversation. This allows any user with a Lif Account to load any conversation between two users without permission. This issue had been patched in version 1.3.1. There is no action required for users. Lif Platforms will update their servers with the patch.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-09-04T16:15:07.480",
    "last_modified": "2024-09-05T12:53:21.110",
    "fix_date": "2024-08-27T23:57:09Z"
  },
  "references": [
    {
      "url": "https://github.com/Lif-Platforms/New-Ringer-Server/commit/ae795ff47b2ac2656ac6a099a0e7954ca7d9ba53",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Lif-Platforms/New-Ringer-Server/security/advisories/GHSA-cpc7-79cg-qv65",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.463224",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "New-Ringer-Server",
    "owner": "Lif-Platforms",
    "created_at": "2023-02-24T17:09:43Z",
    "updated_at": "2025-01-08T03:39:38Z",
    "pushed_at": "2025-01-08T05:14:10Z",
    "size": 210,
    "stars": 1,
    "forks": 0,
    "open_issues": 9,
    "watchers": 1,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 59073,
      "Dockerfile": 530,
      "HTML": 15
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T22:46:51.169331"
  }
}