{
  "cve_id": "CVE-2024-45258",
  "github_data": {
    "repository": "imroc/req",
    "fix_commit": "04e3ece5b380ecad9da3551c449f1b8a9aa76d3d",
    "related_commits": [
      "04e3ece5b380ecad9da3551c449f1b8a9aa76d3d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "04e3ece5b380ecad9da3551c449f1b8a9aa76d3d",
      "commit_date": "2024-05-08T06:16:57Z",
      "author": {
        "login": "imroc",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "prevent successful requests from invalid host",
        "length": 45,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 73,
        "additions": 35,
        "deletions": 38
      },
      "files": [
        {
          "filename": "http.go",
          "status": "modified",
          "additions": 4,
          "deletions": 36,
          "patch": "@@ -3,14 +3,14 @@ package req\n import (\n \t\"encoding/base64\"\n \t\"fmt\"\n-\t\"github.com/imroc/req/v3/internal/ascii\"\n-\t\"golang.org/x/net/http/httpguts\"\n-\t\"golang.org/x/net/idna\"\n \t\"io\"\n-\t\"net\"\n \t\"net/http\"\n \t\"net/textproto\"\n \t\"strings\"\n+\n+\t\"github.com/imroc/req/v3/internal/ascii\"\n+\t\"golang.org/x/net/http/httpguts\"\n+\t\"golang.org/x/net/idna\"\n )\n \n // maxInt64 is the effective \"infinite\" value for the Server and\n@@ -165,38 +165,6 @@ func idnaASCII(v string) (string, error) {\n \treturn idna.Lookup.ToASCII(v)\n }\n \n-// cleanHost cleans up the host sent in request's Host header.\n-//\n-// It both strips anything after '/' or ' ', and puts the value\n-// into Punycode form, if necessary.\n-//\n-// Ideally we'd clean the Host header according to the spec:\n-//   https://tools.ietf.org/html/rfc7230#section-5.4 (Host = uri-host [ \":\" port ]\")\n-//   https://tools.ietf.org/html/rfc7230#section-2.7 (uri-host -> rfc3986's host)\n-//   https://tools.ietf.org/html/rfc3986#section-3.2.2 (definition of host)\n-// But practically, what we are trying to avoid is the situation in\n-// issue 11206, where a malformed Host header used in the proxy context\n-// would create a bad request. So it is enough to just truncate at the\n-// first offending character.\n-func cleanHost(in string) string {\n-\tif i := strings.IndexAny(in, \" /\"); i != -1 {\n-\t\tin = in[:i]\n-\t}\n-\thost, port, err := net.SplitHostPort(in)\n-\tif err != nil { // input was just a host\n-\t\ta, err := idnaASCII(in)\n-\t\tif err != nil {\n-\t\t\treturn in // garbage in, garbage out\n-\t\t}\n-\t\treturn a\n-\t}\n-\ta, err := idnaASCII(host)\n-\tif err != nil {\n-\t\treturn in // garbage in, garbage out\n-\t}\n-\treturn net.JoinHostPort(a, port)\n-}\n-\n // removeZone removes IPv6 zone identifier from host.\n // E.g., \"[fe80::1%en0]:8080\" to \"[fe80::1]:8080\"\n func removeZone(host string) string {"
        },
        {
          "filename": "transport.go",
          "status": "modified",
          "additions": 31,
          "deletions": 2,
          "patch": "@@ -2986,12 +2986,41 @@ func (pc *persistConn) writeRequest(r *http.Request, w io.Writer, usingProxy boo\n \t// is not given, use the host from the request URL.\n \t//\n \t// Clean the host, in case it arrives with unexpected stuff in it.\n-\thost := cleanHost(r.Host)\n+\thost := r.Host\n \tif host == \"\" {\n \t\tif r.URL == nil {\n \t\t\treturn errMissingHost\n \t\t}\n-\t\thost = cleanHost(r.URL.Host)\n+\t\thost = r.URL.Host\n+\t}\n+\thost, err = httpguts.PunycodeHostPort(host)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\t// Validate that the Host header is a valid header in general,\n+\t// but don't validate the host itself. This is sufficient to avoid\n+\t// header or request smuggling via the Host field.\n+\t// The server can (and will, if it's a net/http server) reject\n+\t// the request if it doesn't consider the host valid.\n+\tif !httpguts.ValidHostHeader(host) {\n+\t\t// Historically, we would truncate the Host header after '/' or ' '.\n+\t\t// Some users have relied on this truncation to convert a network\n+\t\t// address such as Unix domain socket path into a valid, ignored\n+\t\t// Host header (see https://go.dev/issue/61431).\n+\t\t//\n+\t\t// We don't preserve the truncation, because sending an altered\n+\t\t// header field opens a smuggling vector. Instead, zero out the\n+\t\t// Host header entirely if it isn't valid. (An empty Host is valid;\n+\t\t// see RFC 9112 Section 3.2.)\n+\t\t//\n+\t\t// Return an error if we're sending to a proxy, since the proxy\n+\t\t// probably can't do anything useful with an empty Host header.\n+\t\tif !usingProxy {\n+\t\t\thost = \"\"\n+\t\t} else {\n+\t\t\treturn errors.New(\"http: invalid Host header\")\n+\t\t}\n \t}\n \n \t// According to RFC 6874, an HTTP client, proxy, or other"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "03fab1a258bf63f1a682b82d6bb1fde10ded4694",
            "date": "2024-12-25T06:52:20Z",
            "author_login": "imroc"
          },
          {
            "sha": "9d714701053dc0e1490b763bcc1ffcd4dd9b5a46",
            "date": "2024-12-17T02:48:49Z",
            "author_login": "imroc"
          },
          {
            "sha": "551efe5944695d710f2413a5699d9d1bd059f520",
            "date": "2024-12-17T02:23:04Z",
            "author_login": "imroc"
          },
          {
            "sha": "b639f8d9129e42ad2eb0f32d72996bc3169c464e",
            "date": "2024-12-17T02:22:14Z",
            "author_login": "imroc"
          },
          {
            "sha": "bc7cb8e32d2655f830783c475a8ae3355516aafa",
            "date": "2024-12-17T02:16:31Z",
            "author_login": "imroc"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-20",
    "description": "The req package before 3.43.4 for Go may send an unintended request when a malformed URL is provided, because cleanHost in http.go intentionally uses a \"garbage in, garbage out\" design.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-25T22:15:05.233",
    "last_modified": "2024-08-26T14:35:08.627",
    "fix_date": "2024-05-08T06:16:57Z"
  },
  "references": [
    {
      "url": "https://github.com/imroc/req/commit/04e3ece5b380ecad9da3551c449f1b8a9aa76d3d",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/imroc/req/compare/v3.43.3...v3.43.4",
      "source": "cve@mitre.org",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.395210",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "req",
    "owner": "imroc",
    "created_at": "2017-02-25T16:32:26Z",
    "updated_at": "2025-01-26T06:42:30Z",
    "pushed_at": "2024-12-25T06:52:44Z",
    "size": 2272,
    "stars": 4366,
    "forks": 356,
    "open_issues": 57,
    "watchers": 4366,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 822732,
      "HTML": 26302
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:24:53.303055"
  }
}