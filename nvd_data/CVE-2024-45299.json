{
  "cve_id": "CVE-2024-45299",
  "github_data": {
    "repository": "alfio-event/alf.io",
    "fix_commit": "e7131c588f4ac31067a41d0e31e6a6a721b2ff4b",
    "related_commits": [
      "e7131c588f4ac31067a41d0e31e6a6a721b2ff4b"
    ],
    "patch_url": "https://github.com/alfio-event/alf.io/commit/e7131c588f4ac31067a41d0e31e6a6a721b2ff4b.patch",
    "fix_commit_details": {
      "sha": "e7131c588f4ac31067a41d0e31e6a6a721b2ff4b",
      "commit_date": "2024-08-29T09:47:14Z",
      "author": {
        "login": "syjer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 22,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 29,
        "additions": 22,
        "deletions": 7
      },
      "files": [
        {
          "filename": "frontend/projects/public/src/app/shared/event.service.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -10,6 +10,7 @@ import {shareReplay} from 'rxjs/operators';\n import {EventCode} from '../model/event-code';\n import {DateValidity} from '../model/date-validity';\n import {SearchParams} from '../model/search-params';\n+import { loadPreloaded } from './util';\n \n @Injectable({\n   providedIn: 'root'\n@@ -33,7 +34,7 @@ export class EventService {\n     if (!this.eventCache[eventShortName]) {\n       const preloadEvent = document.getElementById('preload-event');\n       if (preloadEvent && preloadEvent.getAttribute('data-param') === eventShortName) {\n-        this.eventCache[eventShortName] = of(JSON.parse(preloadEvent.textContent)).pipe(shareReplay(1));\n+        this.eventCache[eventShortName] = of(loadPreloaded('preload-event')).pipe(shareReplay(1));\n       } else {\n         this.eventCache[eventShortName] = this.http.get<Event>(`/api/v2/public/event/${eventShortName}`).pipe(shareReplay(1));\n       }"
        },
        {
          "filename": "frontend/projects/public/src/app/shared/i18n.service.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -10,7 +10,7 @@ import {catchError, map, mergeMap, shareReplay, tap} from 'rxjs/operators';\n import {EventService} from './event.service';\n import {PurchaseContextType} from './purchase-context.service';\n import {PurchaseContext} from '../model/purchase-context';\n-import {getFromSessionStorage, writeToSessionStorage} from './util';\n+import {getFromSessionStorage, loadPreloaded, writeToSessionStorage} from './util';\n \n @Injectable({\n   providedIn: 'root'\n@@ -41,11 +41,11 @@ export class I18nService {\n       if (this.countriesCache.empty) {\n           const vatCountries = document.getElementById('preload-vat-countries');\n           if (vatCountries != null && vatCountries.getAttribute('data-param') != null) {\n-              this.countriesCache.countriesForVat[vatCountries.getAttribute('data-param')] = JSON.parse(vatCountries.textContent);\n+              this.countriesCache.countriesForVat[vatCountries.getAttribute('data-param')] = loadPreloaded('preload-vat-countries');\n           }\n           const allCountries = document.getElementById('preload-countries');\n           if (allCountries != null && allCountries.getAttribute('data-param') != null) {\n-              this.countriesCache.allCountries[allCountries.getAttribute('data-param')] = JSON.parse(allCountries.textContent);\n+              this.countriesCache.allCountries[allCountries.getAttribute('data-param')] = loadPreloaded('preload-countries');\n           }\n           this.countriesCache.markAsInitialized();\n       }\n@@ -153,7 +153,7 @@ export class CustomLoader implements TranslateLoader {\n     if (!translationCache[lang]) {\n       const preloadBundle = document.getElementById('preload-bundle');\n       if (preloadBundle && preloadBundle.getAttribute('data-param') === lang) {\n-        translationCache[lang] = of(JSON.parse(preloadBundle.textContent)).pipe(shareReplay(1));\n+        translationCache[lang] = of(loadPreloaded('preload-bundle')).pipe(shareReplay(1));\n       } else {\n         translationCache[lang] = this.http.get(`/api/v2/public/i18n/bundle/${lang}`).pipe(shareReplay(1));\n       }"
        },
        {
          "filename": "frontend/projects/public/src/app/shared/info.service.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -3,6 +3,7 @@ import {HttpClient} from '@angular/common/http';\n import {Observable, of} from 'rxjs';\n import {Info} from '../model/info';\n import {shareReplay} from 'rxjs/operators';\n+import { loadPreloaded } from './util';\n \n @Injectable({\n   providedIn: 'root'\n@@ -17,7 +18,7 @@ export class InfoService {\n     if (!this.infoCache) {\n       const preloadInfo = document.getElementById('preload-info');\n       if (preloadInfo) {\n-        this.infoCache = of(JSON.parse(preloadInfo.textContent)).pipe(shareReplay(1));\n+        this.infoCache = of(loadPreloaded('preload-info')).pipe(shareReplay(1));\n       } else {\n         this.infoCache = this.http.get<Info>('/api/v2/info').pipe(shareReplay(1));\n       }"
        },
        {
          "filename": "frontend/projects/public/src/app/shared/util.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -96,3 +96,14 @@ export function groupAdditionalData(data: AdditionalServiceWithData[]): GroupedA\n export interface GroupedAdditionalServiceWithData extends AdditionalServiceWithData {\n   count: number;\n }\n+\n+// load preloaded data which are json and url encoded\n+export function loadPreloaded(id: string) {\n+  const preload = document.getElementById(id);\n+  if (preload && preload.textContent) {\n+    return JSON.parse(decodeURIComponent(preload.textContent));\n+  } else {\n+    return undefined;\n+  }\n+  \n+}"
        },
        {
          "filename": "src/main/java/alfio/controller/IndexController.java",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -49,6 +49,7 @@\n import org.springframework.web.bind.annotation.*;\n import org.springframework.web.context.request.ServletWebRequest;\n import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.UriUtils;\n \n import java.io.IOException;\n import java.io.InputStreamReader;\n@@ -333,8 +334,9 @@ private static String countriesAsJson(Json json, String preloadLang) {\n     }\n \n     private static Element buildScripTag(String content, String type, String id, String param) {\n+        var encodedContent = UriUtils.encodeFragment(content, StandardCharsets.UTF_8);\n         var e = new Element(\"script\");\n-        e.appendChild(new Text(content));\n+        e.appendChild(new Text(encodedContent));\n         e.setAttribute(\"type\", type);\n         e.setAttribute(\"id\", id);\n         if (param != null) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b4a52f45765a6054bf6a2dd89a528660e9959532",
            "date": "2025-01-08T14:28:08Z",
            "author_login": "cbellone"
          },
          {
            "sha": "4e6977dd094e59361e52dd57c5d4322e100f4cdf",
            "date": "2024-12-31T19:17:59Z",
            "author_login": "cbellone"
          },
          {
            "sha": "48e77f87ad5bc73b6a6a87834bdc9cf59ad75610",
            "date": "2024-12-31T18:59:47Z",
            "author_login": "cbellone"
          },
          {
            "sha": "8acd38834864b854b371bf16a539023c6802d4c4",
            "date": "2024-12-31T18:56:17Z",
            "author_login": "cbellone"
          },
          {
            "sha": "c08abfe37f97885e191ec22750a1732b64ebed35",
            "date": "2024-12-31T13:55:07Z",
            "author_login": "syjer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:H",
    "cwe_id": "CWE-116",
    "description": "alf.io is an open source ticket reservation system for conferences, trade shows, workshops, and meetups. Prior to version 2.0-M5, the preloaded data as json is not escaped correctly, the administrator / event admin could break their own install by inserting non correctly escaped text. The Content-Security-Policy directive blocks any potential script execution. The administrator or event administrator can override the texts for customization purpose. The texts are not properly escaped. Version 2.0-M5 fixes this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-09-06T13:15:05.253",
    "last_modified": "2024-09-30T12:48:22.930",
    "fix_date": "2024-08-29T09:47:14Z"
  },
  "references": [
    {
      "url": "https://github.com/alfio-event/alf.io/commit/e7131c588f4ac31067a41d0e31e6a6a721b2ff4b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/alfio-event/alf.io/security/advisories/GHSA-mcx6-25f8-8rqw",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:00.100365",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "alf.io",
    "owner": "alfio-event",
    "created_at": "2014-07-26T10:12:57Z",
    "updated_at": "2025-01-10T18:01:09Z",
    "pushed_at": "2025-01-08T14:28:22Z",
    "size": 47674,
    "stars": 1448,
    "forks": 354,
    "open_issues": 180,
    "watchers": 1448,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Java": 5083128,
      "HTML": 700691,
      "JavaScript": 601739,
      "TypeScript": 366686,
      "PLpgSQL": 78190,
      "MAXScript": 77119,
      "CSS": 41234,
      "SCSS": 16853,
      "Shell": 1723,
      "Procfile": 62
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:09:08.045599"
  }
}