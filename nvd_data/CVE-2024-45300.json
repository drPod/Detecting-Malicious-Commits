{
  "cve_id": "CVE-2024-45300",
  "github_data": {
    "repository": "alfio-event/alf.io",
    "fix_commit": "53b3309e26e8acec6860d1e045df3046153a3245",
    "related_commits": [
      "53b3309e26e8acec6860d1e045df3046153a3245"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "53b3309e26e8acec6860d1e045df3046153a3245",
      "commit_date": "2024-08-29T09:58:47Z",
      "author": {
        "login": "syjer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 418,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 297,
        "additions": 285,
        "deletions": 12
      },
      "files": [
        {
          "filename": "src/main/java/alfio/controller/api/v2/user/EventApiV2Controller.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -163,7 +163,7 @@ public ResponseEntity<ItemsByCategory> getTicketCategories(@PathVariable String\n                     if (specialCode.isPresent()) {\n                         maxTickets = Math.min(1, maxTickets);\n                     } else if (filteredPromoCode != null && filteredPromoCode.getMaxUsage() != null) {\n-                        maxTickets = filteredPromoCode.getMaxUsage() - promoCodeRepository.countConfirmedPromoCode(filteredPromoCode.getId(), categoriesOrNull(filteredPromoCode), null, categoriesOrNull(filteredPromoCode) != null ? \"X\" : null);\n+                        maxTickets = filteredPromoCode.getMaxUsage() - promoCodeRepository.countConfirmedPromoCode(filteredPromoCode.getId());\n                     }\n                     return new SaleableTicketCategory(category,\n                         now, event, ticketReservationManager.countAvailableTickets(event, category), maxTickets,"
        },
        {
          "filename": "src/main/java/alfio/manager/NotificationManager.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -346,6 +346,11 @@ public void sendSimpleEmail(PurchaseContext purchaseContext, String reservationI\n \n     public void sendSimpleEmail(PurchaseContext purchaseContext, String reservationId, String recipient, List<String> cc, String subject, TemplateGenerator textBuilder, List<Mailer.Attachment> attachments) {\n \n+        if (recipient == null) {\n+            log.warn(\"No recipient provided, mail for reservation id {} with subject {} will be ignored\", reservationId, subject);\n+            return;\n+        }\n+\n         String encodedAttachments = attachments.isEmpty() ? null : encodeAttachments(attachments.toArray(new Mailer.Attachment[0]));\n         String encodedCC = Json.toJson(cc);\n "
        },
        {
          "filename": "src/main/java/alfio/manager/PromoCodeRequestManager.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -184,7 +184,7 @@ private PromoCodeType checkPromoCodeType(int eventId, String trimmedCode) {\n     }\n \n     private boolean isDiscountCodeUsageExceeded(PromoCodeDiscount discount) {\n-        return discount.getMaxUsage() != null && discount.getMaxUsage() <= promoCodeRepository.countConfirmedPromoCode(discount.getId(), categoriesOrNull(discount), null, categoriesOrNull(discount) != null ? \"X\" : null);\n+        return discount.getMaxUsage() != null && discount.getMaxUsage() <= promoCodeRepository.countConfirmedPromoCode(discount.getId());\n     }\n \n     private Pair<Optional<String>, BindingResult> makeSimpleReservation(Event event,\n@@ -228,7 +228,7 @@ public int countUsage(int promoCodeId) {\n         if(code.isEmpty()) {\n             return 0;\n         }\n-        return promoCodeRepository.countConfirmedPromoCode(promoCodeId, categoriesOrNull(code.get()), null, categoriesOrNull(code.get()) != null ? \"X\" : null);\n+        return promoCodeRepository.countConfirmedPromoCode(promoCodeId);\n     }\n \n     public List<PromoCodeUsageResult> retrieveDetailedUsage(int promoCodeId, Integer eventId) {"
        },
        {
          "filename": "src/main/java/alfio/manager/TicketReservationManager.java",
          "status": "modified",
          "additions": 14,
          "deletions": 2,
          "patch": "@@ -85,6 +85,7 @@\n import org.springframework.transaction.support.TransactionSynchronizationManager;\n import org.springframework.transaction.support.TransactionTemplate;\n import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.validation.BindingResult;\n \n import java.math.BigDecimal;\n@@ -326,6 +327,17 @@ public String createTicketReservation(Event event,\n \n         Optional<PromoCodeDiscount> dynamicDiscount = createDynamicPromoCode(discount, event, list, reservationId);\n \n+        discount.ifPresent(d -> {\n+            if (d.getMaxUsage() != null) {\n+                promoCodeDiscountRepository.lockForCount(d.getId());\n+                var discountedCategories = d.getCategories();\n+                var appliedDiscountCount = CollectionUtils.isEmpty(discountedCategories) ? list.size() : list.stream().filter(t -> discountedCategories.contains(t.getTicketCategoryId())).count();\n+                if (d.getMaxUsage() < promoCodeDiscountRepository.countUsedPromoCode(d.getId()) + appliedDiscountCount) {\n+                    throw new TooManyTicketsForDiscountCodeException();\n+                }\n+            }\n+        });\n+\n         ticketReservationRepository.createNewReservation(reservationId,\n             event.now(clockProvider),\n             reservationExpiration, dynamicDiscount.or(() -> discount).map(PromoCodeDiscount::getId).orElse(null),\n@@ -707,12 +719,12 @@ private boolean isDiscountCodeUsageExceeded(String reservationId) {\n         TicketReservation reservation = ticketReservationRepository.findReservationById(reservationId);\n         if(reservation.getPromoCodeDiscountId() != null) {\n             final PromoCodeDiscount promoCode = promoCodeDiscountRepository.findById(reservation.getPromoCodeDiscountId());\n-            if(promoCode.getMaxUsage() == null) {\n+            if (promoCode.getMaxUsage() == null) {\n                 return false;\n             }\n             int currentTickets = ticketReservationRepository.countTicketsInReservationForCategories(reservationId, categoriesOrNull(promoCode));\n             return Boolean.TRUE.equals(serializedTransactionTemplate.execute(status -> {\n-                Integer confirmedPromoCode = promoCodeDiscountRepository.countConfirmedPromoCode(promoCode.getId(), categoriesOrNull(promoCode), reservationId, categoriesOrNull(promoCode) != null ? \"X\" : null);\n+                Integer confirmedPromoCode = promoCodeDiscountRepository.countConfirmedPromoCode(promoCode.getId());\n                 return promoCode.getMaxUsage() < currentTickets + confirmedPromoCode;\n             }));\n         }"
        },
        {
          "filename": "src/main/java/alfio/repository/PromoCodeDiscountRepository.java",
          "status": "modified",
          "additions": 9,
          "deletions": 7,
          "patch": "@@ -23,7 +23,6 @@\n import ch.digitalfondue.npjt.QueryRepository;\n \n import java.time.ZonedDateTime;\n-import java.util.Collection;\n import java.util.List;\n import java.util.Optional;\n \n@@ -106,12 +105,12 @@ int addPromoCodeIfNotExists(@Bind(\"promoCode\") String promoCode,\n     @Query(\"select count(*) from promo_code where event_id_fk = :eventId or (event_id_fk is null and organization_id_fk = :organizationId)\")\n     Integer countByEventAndOrganizationId(@Bind(\"eventId\") int eventId, @Bind(\"organizationId\") int organizationId);\n \n-    @Query(\"\"\"\n-        select count(b.id) from tickets_reservation a, ticket b\\\n-         where (:currentId is null or a.id <> :currentId) and a.status in ('OFFLINE_PAYMENT', 'DEFERRED_OFFLINE_PAYMENT', 'COMPLETE', 'STUCK') and a.promo_code_id_fk = :id\\\n-         and b.tickets_reservation_id = a.id and (:categoriesJson is null or b.category_id in (:categories))\\\n-        \"\"\")\n-    Integer countConfirmedPromoCode(@Bind(\"id\") int id, @Bind(\"categories\") Collection<Integer> categories, @Bind(\"currentId\") String currentReservationId, @Bind(\"categoriesJson\") String categoriesJson);\n+\n+    @Query(\"select promo_code_use from promocode_count where promo_code_id = :id\")\n+    Integer countConfirmedPromoCode(@Bind(\"id\") int id);\n+\n+    @Query(\"select promo_code_use from promocode_count_all where promo_code_id = :id\")\n+    Integer countUsedPromoCode(@Bind(\"id\") int id);\n \n     @Query(\"update promo_code set valid_to = :end where id = :id\")\n     int updateEventPromoCodeEnd(@Bind(\"id\") int id, @Bind(\"end\") ZonedDateTime end);\n@@ -135,4 +134,7 @@ int updateEventPromoCode(@Bind(\"id\") int id,\n         \"\"\")\n     List<PromoCodeUsageResult> findDetailedUsage(@Bind(\"promoCode\") String promoCode,\n                                                  @Bind(\"eventId\") Integer eventId);\n+\n+    @Query(\"select id from promo_code where id = :id for update\")\n+    Integer lockForCount(@Bind(\"id\") int id);\n }"
        },
        {
          "filename": "src/main/resources/alfio/db/PGSQL/afterMigrate__018_VIEW_promocode_count.sql",
          "status": "added",
          "additions": 64,
          "deletions": 0,
          "patch": "@@ -0,0 +1,64 @@\n+--\n+-- This file is part of alf.io.\n+--\n+-- alf.io is free software: you can redistribute it and/or modify\n+-- it under the terms of the GNU General Public License as published by\n+-- the Free Software Foundation, either version 3 of the License, or\n+-- (at your option) any later version.\n+--\n+-- alf.io is distributed in the hope that it will be useful,\n+-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+-- GNU General Public License for more details.\n+--\n+-- You should have received a copy of the GNU General Public License\n+-- along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n+--\n+\n+drop view if exists promocode_count;\n+\n+create view promocode_count as (\n+select id as promo_code_id, promo_code, coalesce(promo_code_use,0) as promo_code_use\n+from (\n+    select id, promo_code from promo_code pc\n+) as pc_data\n+left join (\n+    select pc.id promo_code_id, count(*) as promo_code_use from tickets_reservation tr\n+    inner join promo_code pc on tr.promo_code_id_fk = pc.id\n+    left join ticket on ticket.tickets_reservation_id = tr.id\n+    where tr.status in ('OFFLINE_PAYMENT', 'DEFERRED_OFFLINE_PAYMENT', 'COMPLETE', 'STUCK')\n+    and (\n+        -- is not assigned to category?\n+        pc.categories is null or json_array_length(pc.categories::json) = 0 or\n+        -- v category_id is inside pc.categories?\n+        ((pc.categories::jsonb) @> ((ticket.category_id::text)::jsonb))\n+    ) group by pc.id\n+) as count_data on pc_data.id = count_data.promo_code_id\n+);\n+\n+\n+\n+drop view if exists promocode_count_all;\n+\n+create view promocode_count_all as (\n+select id as promo_code_id, promo_code, coalesce(promo_code_use,0) as promo_code_use\n+from (\n+    select id, promo_code from promo_code pc\n+) as pc_data\n+left join (\n+    select pc.id promo_code_id, count(*) as promo_code_use\n+    from tickets_reservation tr\n+    inner join promo_code pc on tr.promo_code_id_fk = pc.id\n+    left join ticket on ticket.tickets_reservation_id = tr.id\n+    where tr.status <> 'CANCELLED'\n+    and (\n+        -- is not assigned to category?\n+        pc.categories is null or json_array_length(pc.categories::json) = 0 or\n+        -- v category_id is inside pc.categories?\n+        ((pc.categories::jsonb) @> ((ticket.category_id::text)::jsonb))\n+    )\n+    group by pc.id\n+) as count_data on pc_data.id = count_data.promo_code_id\n+);\n+\n+"
        },
        {
          "filename": "src/test/java/alfio/manager/DiscountIntegrationTest.java",
          "status": "added",
          "additions": 190,
          "deletions": 0,
          "patch": "@@ -0,0 +1,190 @@\n+package alfio.manager;\n+\n+import alfio.TestConfiguration;\n+import alfio.config.DataSourceConfiguration;\n+import alfio.config.Initializer;\n+import alfio.controller.form.ReservationForm;\n+import alfio.manager.payment.PaymentSpecification;\n+import alfio.manager.user.UserManager;\n+import alfio.model.*;\n+import alfio.model.metadata.AlfioMetadata;\n+import alfio.model.modification.DateTimeModification;\n+import alfio.model.modification.TicketCategoryModification;\n+import alfio.model.modification.TicketReservationModification;\n+import alfio.model.modification.TicketReservationWithOptionalCodeModification;\n+import alfio.model.transaction.PaymentMethod;\n+import alfio.model.transaction.PaymentProxy;\n+import alfio.repository.EventRepository;\n+import alfio.repository.PromoCodeDiscountRepository;\n+import alfio.repository.TicketCategoryRepository;\n+import alfio.repository.system.ConfigurationRepository;\n+import alfio.repository.user.OrganizationRepository;\n+import alfio.test.util.AlfioIntegrationTest;\n+import alfio.test.util.IntegrationTestUtil;\n+import alfio.util.BaseIntegrationTest;\n+import alfio.util.ClockProvider;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static alfio.model.PromoCodeDiscount.categoriesOrNull;\n+import static alfio.test.util.IntegrationTestUtil.*;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@AlfioIntegrationTest\n+@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class})\n+@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\n+class DiscountIntegrationTest extends BaseIntegrationTest {\n+\n+\n+    @Autowired\n+    private ConfigurationRepository configurationRepository;\n+    @Autowired\n+    private UserManager userManager;\n+    @Autowired\n+    private OrganizationRepository organizationRepository;\n+    @Autowired\n+    private EventManager eventManager;\n+\n+    @Autowired\n+    private EventRepository eventRepository;\n+\n+    @Autowired\n+    private TicketCategoryRepository ticketCategoryRepository;\n+\n+    @Autowired\n+    private TicketReservationManager ticketReservationManager;\n+\n+    @Autowired\n+    private ClockProvider clockProvider;\n+\n+    @Autowired\n+    private PromoCodeDiscountRepository promoCodeDiscountRepository;\n+\n+    private static final Logger log = LoggerFactory.getLogger(DiscountIntegrationTest.class);\n+\n+    @Test\n+    void checkConcurrency() throws InterruptedException {\n+\n+        int concurrencyCount = 4;\n+\n+        var startSignal = new CountDownLatch(concurrencyCount);\n+        var countdownLatchBeforePerformPayment = new CountDownLatch(concurrencyCount);\n+        var countdownLatchBeforeComplete = new CountDownLatch(concurrencyCount);\n+        var doneSignal = new CountDownLatch(concurrencyCount);\n+\n+\n+        IntegrationTestUtil.ensureMinimalConfiguration(configurationRepository);\n+        List<TicketCategoryModification> categories = List.of(\n+            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n+                new DateTimeModification(LocalDate.now(ClockProvider.clock()).minusDays(1), LocalTime.now(ClockProvider.clock())),\n+                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(1), LocalTime.now(ClockProvider.clock())),\n+                DESCRIPTION, BigDecimal.TEN, false,\n+                \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty())\n+        );\n+        Pair<Event, String> eventAndUser = initEvent(categories, organizationRepository, userManager, eventManager, eventRepository);\n+\n+        var event = eventAndUser.getLeft();\n+\n+        TicketCategory category = ticketCategoryRepository.findAllTicketCategories(event.getId()).get(0);\n+\n+        String promoCode = \"100_PROMO\";\n+\n+        eventManager.addPromoCode(promoCode,\n+            event.getId(), null,\n+            ZonedDateTime.now(clockProvider.getClock()).minusDays(2),\n+            event.getEnd().plusDays(2),\n+            50, PromoCodeDiscount.DiscountType.PERCENTAGE, List.of(category.getId()),\n+            1, \"100% discount\",\n+            \"test@test.ch\",\n+            PromoCodeDiscount.CodeType.DISCOUNT,\n+            null,\n+            null);\n+\n+        var promoCodeDiscount = promoCodeDiscountRepository.findAllInEvent(event.getId()).get(0);\n+\n+\n+        for (int i = 0; i < concurrencyCount; i++) {\n+            Runnable runnable = () -> {\n+                try {\n+                    var form = new ReservationForm();\n+                    var ticketReservation = new TicketReservationModification();\n+                    ticketReservation.setQuantity(2);\n+                    ticketReservation.setTicketCategoryId(category.getId());\n+                    form.setReservation(Collections.singletonList(ticketReservation));\n+                    form.setPromoCode(promoCode);\n+\n+                    TicketReservationModification tr = new TicketReservationModification();\n+                    tr.setQuantity(1);\n+                    tr.setTicketCategoryId(category.getId());\n+                    TicketReservationWithOptionalCodeModification mod = new TicketReservationWithOptionalCodeModification(tr, Optional.empty());\n+                    startSignal.countDown();\n+                    startSignal.await();\n+\n+                    String reservationId = null;\n+                    try {\n+                        reservationId = ticketReservationManager.createTicketReservation(event, Collections.singletonList(mod), Collections.emptyList(),\n+                            DateUtils.addDays(new Date(), 1),\n+                            Optional.of(promoCode),\n+                            Locale.ENGLISH,\n+                            false,\n+                            null);\n+\n+\n+                    } catch (Throwable t) {\n+\n+                    } finally {\n+                        countdownLatchBeforePerformPayment.countDown();\n+                    }\n+                    countdownLatchBeforePerformPayment.await();\n+\n+                    try {\n+                        if (reservationId != null) {\n+                            Pair<TotalPrice, Optional<PromoCodeDiscount>> priceAndDiscount = ticketReservationManager.totalReservationCostWithVAT(reservationId);\n+                            TotalPrice totalPrice = priceAndDiscount.getLeft();\n+                            PaymentSpecification specification = new PaymentSpecification(reservationId, null, totalPrice.getPriceWithVAT(),\n+                                event, \"email@example.com\", new CustomerName(\"full name\", \"full\", \"name\", event.mustUseFirstAndLastName()),\n+                                \"billing address\", null, Locale.ENGLISH, true, false, null, \"IT\", \"123456\", PriceContainer.VatStatus.INCLUDED, true, false);\n+                            var paymentResult = ticketReservationManager.performPayment(specification, totalPrice, PaymentProxy.OFFLINE, PaymentMethod.BANK_TRANSFER, null);\n+                            assertTrue(paymentResult.isSuccessful());\n+                        }\n+                    } catch (Throwable t) {\n+                    } finally {\n+                        countdownLatchBeforeComplete.countDown();\n+                    }\n+\n+\n+                    countdownLatchBeforeComplete.await();\n+                    if (reservationId != null) {\n+                        ticketReservationManager.confirmOfflinePayment(event, reservationId, null, eventAndUser.getRight());\n+                    }\n+                } catch (InterruptedException e) {\n+                    throw new IllegalStateException(e);\n+                } catch (Throwable t) {\n+                } finally {\n+                    doneSignal.countDown();\n+                }\n+            };\n+            new Thread(runnable).start();\n+        }\n+\n+        doneSignal.await();\n+\n+        Assertions.assertEquals(1, promoCodeDiscountRepository.countConfirmedPromoCode(promoCodeDiscount.getId()));\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "40c3152ecbfcf64e1280e54c5d4625903cf1e226",
            "date": "2025-01-21T21:41:28Z",
            "author_login": "cbellone"
          },
          {
            "sha": "8740f35cd9969ed912b43dc7e3f295684e292d5a",
            "date": "2025-01-21T21:29:00Z",
            "author_login": "cbellone"
          },
          {
            "sha": "dfa2858189bb2e297090d46ec8771b9567baac67",
            "date": "2025-01-20T17:09:10Z",
            "author_login": "syjer"
          },
          {
            "sha": "b4a52f45765a6054bf6a2dd89a528660e9959532",
            "date": "2025-01-08T14:28:08Z",
            "author_login": "cbellone"
          },
          {
            "sha": "4e6977dd094e59361e52dd57c5d4322e100f4cdf",
            "date": "2024-12-31T19:17:59Z",
            "author_login": "cbellone"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-362",
    "description": "alf.io is an open source ticket reservation system for conferences, trade shows, workshops, and meetups. Prior to version 2.0-M5, a race condition allows the user to bypass the limit on the number of promo codes and use the discount coupon multiple times. In \"alf.io\", an event organizer can apply price discounts by using promo codes to your events. The organizer can limit the number of promo codes that will be used for this, but the time-gap between checking the number of codes and restricting the use of the codes allows a threat actor to bypass the promo code limit. Version 2.0-M5 fixes this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-09-06T13:15:05.537",
    "last_modified": "2024-09-29T00:08:14.363",
    "fix_date": "2024-08-29T09:58:47Z"
  },
  "references": [
    {
      "url": "https://github.com/alfio-event/alf.io/commit/53b3309e26e8acec6860d1e045df3046153a3245",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/alfio-event/alf.io/security/advisories/GHSA-67jg-m6f3-473g",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:00.100490",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "alf.io",
    "owner": "alfio-event",
    "created_at": "2014-07-26T10:12:57Z",
    "updated_at": "2025-01-22T19:20:53Z",
    "pushed_at": "2025-01-21T21:41:32Z",
    "size": 47688,
    "stars": 1451,
    "forks": 355,
    "open_issues": 181,
    "watchers": 1451,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Java": 5083429,
      "HTML": 700691,
      "JavaScript": 601739,
      "TypeScript": 366693,
      "PLpgSQL": 78190,
      "MAXScript": 77140,
      "CSS": 41234,
      "SCSS": 16853,
      "Shell": 1723,
      "Procfile": 62
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-26T07:46:16.971145"
  }
}