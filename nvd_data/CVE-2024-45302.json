{
  "cve_id": "CVE-2024-45302",
  "github_data": {
    "repository": "restsharp/RestSharp",
    "fix_commit": "0fba5e727d241b1867bd71efc912594075c2934b",
    "related_commits": [
      "0fba5e727d241b1867bd71efc912594075c2934b"
    ],
    "patch_url": "https://github.com/restsharp/RestSharp/commit/0fba5e727d241b1867bd71efc912594075c2934b.patch",
    "fix_commit_details": {
      "sha": "0fba5e727d241b1867bd71efc912594075c2934b",
      "commit_date": "2024-08-29T19:04:54Z",
      "author": {
        "login": "alexeyzimarev",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Don't allow CRLF in headers (#2258)",
        "length": 35,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 99,
        "additions": 65,
        "deletions": 34
      },
      "files": [
        {
          "filename": "src/RestSharp/Parameters/HeaderParameter.cs",
          "status": "modified",
          "additions": 55,
          "deletions": 6,
          "patch": "@@ -13,22 +13,71 @@\n // limitations under the License.\n // \n \n+using System.Text;\n+using System.Text.RegularExpressions;\n+\n namespace RestSharp;\n \n-public record HeaderParameter : Parameter {\n+public partial record HeaderParameter : Parameter {\n     /// <summary>\n     /// Instantiates a header parameter\n     /// </summary>\n-    /// <param name=\"name\">Parameter name</param>\n-    /// <param name=\"value\">Parameter value</param>\n-    public HeaderParameter(string name, string value)\n+    /// <param name=\"name\">Header name</param>\n+    /// <param name=\"value\">Header value</param>\n+    /// <param name=\"encode\">Set to true to encode header value according to RFC 2047. Default is false.</param>\n+    public HeaderParameter(string name, string value, bool encode = false)\n         : base(\n-            Ensure.NotEmptyString(name, nameof(name)),\n-            Ensure.NotNull(value, nameof(value)),\n+            EnsureValidHeaderString(Ensure.NotEmptyString(name, nameof(name)), \"name\"),\n+            EnsureValidHeaderValue(name, value, encode),\n             ParameterType.HttpHeader,\n             false\n         ) { }\n \n     public new string Name  => base.Name!;\n     public new string Value => (string)base.Value!;\n+\n+    static string EnsureValidHeaderValue(string name, string value, bool encode) {\n+        CheckAndThrowsForInvalidHost(name, value);\n+\n+        return EnsureValidHeaderString(GetValue(Ensure.NotNull(value, nameof(value)), encode), \"value\");\n+    }\n+\n+    static string EnsureValidHeaderString(string value, string type)\n+        => !IsInvalidHeaderString(value) ? value : throw new ArgumentException($\"Invalid character found in header {type}: {value}\");\n+\n+    static string GetValue(string value, bool encode) => encode ? GetBase64EncodedHeaderValue(value) : value;\n+\n+    static string GetBase64EncodedHeaderValue(string value) => $\"=?UTF-8?B?{Convert.ToBase64String(Encoding.UTF8.GetBytes(value))}?=\";\n+\n+    static bool IsInvalidHeaderString(string stringValue) {\n+        // ReSharper disable once ForCanBeConvertedToForeach\n+        for (var i = 0; i < stringValue.Length; i++) {\n+            switch (stringValue[i]) {\n+                case '\\t':\n+                case '\\r':\n+                case '\\n':\n+                    return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    static readonly Regex PortSplitRegex = PartSplit();\n+\n+    static void CheckAndThrowsForInvalidHost(string name, string value) {\n+        if (name == KnownHeaders.Host && InvalidHost(value))\n+            throw new ArgumentException(\"The specified value is not a valid Host header string.\", nameof(value));\n+\n+        return;\n+\n+        static bool InvalidHost(string host) => Uri.CheckHostName(PortSplitRegex.Split(host)[0]) == UriHostNameType.Unknown;\n+    }\n+\n+#if NET7_0_OR_GREATER\n+    [GeneratedRegex(@\":\\d+\")]\n+    private static partial Regex PartSplit();\n+#else\n+    static Regex PartSplit() => new(@\":\\d+\");\n+#endif\n }\n\\ No newline at end of file"
        },
        {
          "filename": "src/RestSharp/Request/RestRequestExtensions.Headers.cs",
          "status": "modified",
          "additions": 4,
          "deletions": 28,
          "patch": "@@ -12,8 +12,6 @@\n // See the License for the specific language governing permissions and\n // limitations under the License.\n \n-using System.Text.RegularExpressions;\n-\n namespace RestSharp;\n \n public static partial class RestRequestExtensions {\n@@ -39,10 +37,8 @@ public static RestRequest AddHeader(this RestRequest request, string name, strin\n     /// <param name=\"name\">Header name</param>\n     /// <param name=\"value\">Header value</param>\n     /// <returns></returns>\n-    public static RestRequest AddHeader(this RestRequest request, string name, string value) {\n-        CheckAndThrowsForInvalidHost(name, value);\n-        return request.AddParameter(new HeaderParameter(name, value));\n-    }\n+    public static RestRequest AddHeader(this RestRequest request, string name, string value)\n+        => request.AddParameter(new HeaderParameter(name, value));\n \n     /// <summary>\n     /// Adds a header to the request. RestSharp will try to separate request and content headers when calling the resource.\n@@ -62,10 +58,8 @@ public static RestRequest AddHeader<T>(this RestRequest request, string name, T\n     /// <param name=\"name\">Header name</param>\n     /// <param name=\"value\">Header value</param>\n     /// <returns></returns>\n-    public static RestRequest AddOrUpdateHeader(this RestRequest request, string name, string value) {\n-        CheckAndThrowsForInvalidHost(name, value);\n-        return request.AddOrUpdateParameter(new HeaderParameter(name, value));\n-    }\n+    public static RestRequest AddOrUpdateHeader(this RestRequest request, string name, string value)\n+        => request.AddOrUpdateParameter(new HeaderParameter(name, value));\n \n     /// <summary>\n     /// Adds or updates the request header. RestSharp will try to separate request and content headers when calling the resource.\n@@ -121,22 +115,4 @@ static void CheckAndThrowsDuplicateKeys(ICollection<KeyValuePair<string, string>\n             throw new ArgumentException($\"Duplicate header names exist: {string.Join(\", \", duplicateKeys)}\");\n         }\n     }\n-\n-    static readonly Regex PortSplitRegex = PartSplit();\n-\n-    static void CheckAndThrowsForInvalidHost(string name, string value) {\n-        if (name == KnownHeaders.Host && InvalidHost(value))\n-            throw new ArgumentException(\"The specified value is not a valid Host header string.\", nameof(value));\n-\n-        return;\n-\n-        static bool InvalidHost(string host) => Uri.CheckHostName(PortSplitRegex.Split(host)[0]) == UriHostNameType.Unknown;\n-    }\n-\n-#if NET7_0_OR_GREATER\n-    [GeneratedRegex(@\":\\d+\")]\n-    private static partial Regex PartSplit();\n-#else\n-    static Regex PartSplit() => new(@\":\\d+\");\n-#endif\n }\n\\ No newline at end of file"
        },
        {
          "filename": "test/RestSharp.Tests/RequestHeaderTests.cs",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -174,6 +174,12 @@ public void Should_not_allow_empty_header_name() {\n         var request = new RestRequest();\n         Assert.Throws<ArgumentException>(\"name\", () => request.AddHeader(\"\", \"value\"));\n     }\n+    \n+    [Fact]\n+    public void Should_not_allow_CRLF_in_header_value() {\n+        var request = new RestRequest();\n+        Assert.Throws<ArgumentException>(() => request.AddHeader(\"name\", \"test\\r\\nUser-Agent: injected header!\\r\\n\\r\\nGET /smuggled HTTP/1.1\\r\\nHost: insert.some.site.here\"));\n+    }\n \n     static Parameter[] GetHeaders(RestRequest request) => request.Parameters.Where(x => x.Type == ParameterType.HttpHeader).ToArray();\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "58180e8ce15fb7b1ba9ac6f1ffd92aa5f3e96723",
            "date": "2024-12-17T10:15:50Z",
            "author_login": "alexeyzimarev"
          },
          {
            "sha": "d5739bb753909a85c010d08a7ed3f5625ed9de50",
            "date": "2024-12-17T10:14:14Z",
            "author_login": "alexeyzimarev"
          },
          {
            "sha": "40b9416d2ce43af007fb75e91d034263feaa1974",
            "date": "2024-12-17T10:14:07Z",
            "author_login": "alexeyzimarev"
          },
          {
            "sha": "ba2ebac5d880277d9c379ef66a50d2ee9d42783b",
            "date": "2024-12-17T10:00:35Z",
            "author_login": "alexeyzimarev"
          },
          {
            "sha": "25922ce38b87bb734606061f3f1d796ae0714d84",
            "date": "2024-12-16T21:52:21Z",
            "author_login": "alexeyzimarev"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:H",
    "cwe_id": "CWE-93",
    "description": "RestSharp is a Simple REST and HTTP API Client for .NET. The second argument to `RestRequest.AddHeader` (the header value) is vulnerable to CRLF injection. The same applies to `RestRequest.AddOrUpdateHeader` and `RestClient.AddDefaultHeader`. The way HTTP headers are added to a request is via the `HttpHeaders.TryAddWithoutValidation` method which does not check for CRLF characters in the header value. This means that any headers from a `RestSharp.RequestHeaders` object are added to the request in such a way that they are vulnerable to CRLF-injection. In general, CRLF-injection into a HTTP header (when using HTTP/1.1) means that one can inject additional HTTP headers or smuggle whole HTTP requests. If an application using the RestSharp library passes a user-controllable value through to a header, then that application becomes vulnerable to CRLF-injection. This is not necessarily a security issue for a command line application like the one above, but if such code were present in a web application then it becomes vulnerable to request splitting (as shown in the PoC) and thus Server Side Request Forgery. Strictly speaking this is a potential vulnerability in applications using RestSharp, not in RestSharp itself, but I would argue that at the very least there needs to be a warning about this behaviour in the RestSharp documentation. RestSharp has addressed this issue in version 112.0.0. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-29T22:15:05.377",
    "last_modified": "2024-10-01T20:05:07.857",
    "fix_date": "2024-08-29T19:04:54Z"
  },
  "references": [
    {
      "url": "https://github.com/restsharp/RestSharp/blob/777bf194ec2d14271e7807cc704e73ec18fcaf7e/src/RestSharp/Request/HttpRequestMessageExtensions.cs#L32",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/restsharp/RestSharp/commit/0fba5e727d241b1867bd71efc912594075c2934b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/restsharp/RestSharp/security/advisories/GHSA-4rr6-2v9v-wcpc",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.414740",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "RestSharp",
    "owner": "restsharp",
    "created_at": "2009-11-16T02:01:45Z",
    "updated_at": "2025-01-14T11:48:17Z",
    "pushed_at": "2024-12-17T10:15:53Z",
    "size": 41563,
    "stars": 9660,
    "forks": 2336,
    "open_issues": 38,
    "watchers": 9660,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [
      "dev"
    ],
    "languages": {
      "C#": 762711,
      "Dockerfile": 923
    },
    "commit_activity": {
      "total_commits_last_year": 55,
      "avg_commits_per_week": 1.0576923076923077,
      "days_active_last_year": 24
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:12:30.370282"
  }
}