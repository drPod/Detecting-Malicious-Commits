{
  "cve_id": "CVE-2024-45393",
  "github_data": {
    "repository": "cvat-ai/cvat",
    "fix_commit": "0fafb797fdf022fb83ce81c6405ba19b583a236f",
    "related_commits": [
      "0fafb797fdf022fb83ce81c6405ba19b583a236f"
    ],
    "patch_url": "https://github.com/cvat-ai/cvat/commit/0fafb797fdf022fb83ce81c6405ba19b583a236f.patch",
    "fix_commit_details": {
      "sha": "0fafb797fdf022fb83ce81c6405ba19b583a236f",
      "commit_date": "2024-09-10T09:39:17Z",
      "author": {
        "login": "SpecLad",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 283,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 72,
        "additions": 72,
        "deletions": 0
      },
      "files": [
        {
          "filename": "changelog.d/20240902_144949_roman_sec_webhooks_access_control.md",
          "status": "added",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -0,0 +1,4 @@\n+### Security\n+\n+- Fixed a missing authorization vulnerability in webhook delivery endpoints\n+  (<https://github.com/cvat-ai/cvat/security/advisories/GHSA-p3c9-m7jr-jxxj>)"
        },
        {
          "filename": "cvat/apps/webhooks/permissions.py",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -58,6 +58,10 @@ def get_scopes(request, view, obj):\n             ('update', 'PUT'): Scopes.UPDATE,\n             ('list', 'GET'): Scopes.LIST,\n             ('retrieve', 'GET'): Scopes.VIEW,\n+            ('ping', 'POST'): Scopes.UPDATE,\n+            ('deliveries', 'GET'): Scopes.VIEW,\n+            ('retrieve_delivery', 'GET'): Scopes.VIEW,\n+            ('redelivery', 'POST'): Scopes.UPDATE,\n         }.get((view.action, request.method))\n \n         scopes = []"
        },
        {
          "filename": "tests/python/rest_api/test_webhooks_sender.py",
          "status": "modified",
          "additions": 64,
          "deletions": 0,
          "patch": "@@ -656,6 +656,34 @@ def test_webhook_create_and_delete_comment(self, issues, jobs, tasks):\n         )\n \n \n+@pytest.mark.usefixtures(\"restore_db_per_class\")\n+class TestGetWebhookDeliveries:\n+    def test_not_project_staff_cannot_get_webhook(self, projects, users):\n+        user, project = next(\n+            (user, project)\n+            for user in users\n+            if \"user\" in user[\"groups\"]\n+            for project in projects\n+            if project[\"owner\"][\"id\"] != user[\"id\"]\n+        )\n+\n+        webhook = create_webhook([\"create:task\"], \"project\", project_id=project[\"id\"])\n+        owner = next(user for user in users if user[\"id\"] == project[\"owner\"][\"id\"])\n+\n+        response = post_method(owner[\"username\"], f\"webhooks/{webhook['id']}/ping\", {})\n+        assert response.status_code == HTTPStatus.OK\n+\n+        delivery_id = response.json()[\"id\"]\n+\n+        response = get_method(user[\"username\"], f\"webhooks/{webhook['id']}/deliveries\")\n+        assert response.status_code == HTTPStatus.FORBIDDEN\n+\n+        response = get_method(\n+            user[\"username\"], f\"webhooks/{webhook['id']}/deliveries/{delivery_id}\"\n+        )\n+        assert response.status_code == HTTPStatus.FORBIDDEN\n+\n+\n @pytest.mark.usefixtures(\"restore_db_per_function\")\n class TestWebhookPing:\n     def test_ping_webhook(self, projects):\n@@ -680,6 +708,20 @@ def test_ping_webhook(self, projects):\n             == {}\n         )\n \n+    def test_not_project_staff_cannot_ping(self, projects, users):\n+        user, project = next(\n+            (user, project)\n+            for user in users\n+            if \"user\" in user[\"groups\"]\n+            for project in projects\n+            if project[\"owner\"][\"id\"] != user[\"id\"]\n+        )\n+\n+        webhook = create_webhook([\"create:task\"], \"project\", project_id=project[\"id\"])\n+\n+        response = post_method(user[\"username\"], f\"webhooks/{webhook['id']}/ping\", {})\n+        assert response.status_code == HTTPStatus.FORBIDDEN\n+\n \n @pytest.mark.usefixtures(\"restore_db_per_function\")\n class TestWebhookRedelivery:\n@@ -727,3 +769,25 @@ def test_webhook_redelivery(self, projects):\n             )\n             == {}\n         )\n+\n+    def test_not_project_staff_cannot_redeliver(self, projects, users):\n+        user, project = next(\n+            (user, project)\n+            for user in users\n+            if \"user\" in user[\"groups\"]\n+            for project in projects\n+            if project[\"owner\"][\"id\"] != user[\"id\"]\n+        )\n+\n+        webhook = create_webhook([\"create:task\"], \"project\", project_id=project[\"id\"])\n+        owner = next(user for user in users if user[\"id\"] == project[\"owner\"][\"id\"])\n+\n+        response = post_method(owner[\"username\"], f\"webhooks/{webhook['id']}/ping\", {})\n+        assert response.status_code == HTTPStatus.OK\n+\n+        delivery_id = response.json()[\"id\"]\n+\n+        response = post_method(\n+            user[\"username\"], f\"webhooks/{webhook['id']}/deliveries/{delivery_id}/redelivery\", {}\n+        )\n+        assert response.status_code == HTTPStatus.FORBIDDEN"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b63f68a88647963b3be460f14c196e901ea1c13e",
            "date": "2025-01-14T13:32:05Z",
            "author_login": "Eldies"
          },
          {
            "sha": "13fd5a7c590dfac1bf7b0e5c3ec291940ebc6380",
            "date": "2025-01-13T18:23:02Z",
            "author_login": "klakhov"
          },
          {
            "sha": "42bc3452bb6b77008f49d306efd8d32cfa2b5b2a",
            "date": "2025-01-13T15:55:58Z",
            "author_login": "SpecLad"
          },
          {
            "sha": "af8bfe3ce7bcfd8fdae4de34cde903cc22909f71",
            "date": "2025-01-13T13:35:03Z",
            "author_login": "SpecLad"
          },
          {
            "sha": "8880e1191f5f25954fefc25891058aa8bf539c83",
            "date": "2025-01-13T11:02:54Z",
            "author_login": "Eldies"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-862",
    "description": "Computer Vision Annotation Tool (CVAT) is an interactive video and image annotation tool for computer vision. An attacker with a CVAT account can access webhook delivery information for any webhook registered on the CVAT instance, including that of other users. For each delivery, this contains information about the event that caused the delivery, typically including full details about the object on which an action was performed (such as the task for an \"update:task\" event), and the user who performed the action. In addition, the attacker can redeliver any past delivery of any webhook, and trigger a ping event for any webhook. Upgrade to CVAT 2.18.0 or any later version.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-09-10T15:15:18.657",
    "last_modified": "2024-09-10T15:50:47.237",
    "fix_date": "2024-09-10T09:39:17Z"
  },
  "references": [
    {
      "url": "https://github.com/cvat-ai/cvat/commit/0fafb797fdf022fb83ce81c6405ba19b583a236f",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/cvat-ai/cvat/security/advisories/GHSA-p3c9-m7jr-jxxj",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:00.110311",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cvat",
    "owner": "cvat-ai",
    "created_at": "2018-06-29T14:02:45Z",
    "updated_at": "2025-01-14T13:32:13Z",
    "pushed_at": "2025-01-14T15:11:25Z",
    "size": 328727,
    "stars": 12953,
    "forks": 3081,
    "open_issues": 570,
    "watchers": 12953,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "hotfix-2.4.1",
      "hotfix-2.4.7"
    ],
    "languages": {
      "Python": 3863013,
      "TypeScript": 3665803,
      "JavaScript": 1195931,
      "Mustache": 205368,
      "SCSS": 144217,
      "Open Policy Agent": 75701,
      "HTML": 39212,
      "Dockerfile": 11104,
      "Shell": 8504,
      "Smarty": 4858,
      "Jinja": 138
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:26:05.726176"
  }
}