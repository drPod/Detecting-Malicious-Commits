{
  "cve_id": "CVE-2024-45800",
  "github_data": {
    "repository": "the-djmaze/snappymail",
    "fix_commit": "cfbc47488a6b2e2ae4be484f501ee1a3485f542e",
    "related_commits": [
      "cfbc47488a6b2e2ae4be484f501ee1a3485f542e"
    ],
    "patch_url": "https://github.com/the-djmaze/snappymail/commit/cfbc47488a6b2e2ae4be484f501ee1a3485f542e.patch",
    "fix_commit_details": {
      "sha": "cfbc47488a6b2e2ae4be484f501ee1a3485f542e",
      "commit_date": "2024-09-16T12:37:26Z",
      "author": {
        "login": null,
        "type": null,
        "stats": null
      },
      "commit_message": {
        "title": "cleanHtml use allowedTags instead of disallowedTags and improved CSS handling",
        "length": 77,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 85,
        "additions": 60,
        "deletions": 25
      },
      "files": [
        {
          "filename": "dev/Common/Html.js",
          "status": "modified",
          "additions": 60,
          "deletions": 25,
          "patch": "@@ -17,14 +17,34 @@ const\n \t\t\"'\": '&#x27;'\n \t},\n \n-\tdisallowedTags = [\n-\t\t'svg','script','title','link','base','meta',\n-\t\t'input','output','select','button','textarea',\n-\t\t'bgsound','keygen','source','object','embed','applet','iframe','frame','frameset','video','audio','area','map'\n-\t\t// not supported by <template> element\n-//\t\t,'html','head','body'\n+\tkeepTagContent = 'form,button,data', // font\n+\n+\tallowedTags = [\n+\t\t// Structural Elements:\n+\t\t'blockquote','br','div','figcaption','figure','h1','h2','h3','h4','h5','h6','hgroup','hr','p','wbr',\n+\t\t'article','aside','header','footer','main','section',\n+\t\t'details','summary',\n+\t\t// List Elements\n+\t\t'dd','dl','dt','li','ol','ul',\n+\t\t// Text Formatting Elements\n+\t\t'a','abbr','address','b','bdi','bdo','cite','code','del','dfn',\n+\t\t'em','i','ins','kbd','mark','pre','q','rp','rt','ruby','s','samp','small',\n+\t\t'span','strong','sub','sup','time','u','var',\n+\t\t// Deprecated by HTML Standard\n+\t\t'acronym','big','center','dir','font','marquee',\n+\t\t'nobr','noembed','noframes','plaintext','rb','rtc','strike','tt',\n+\t\t// Media Elements\n+\t\t'img',//'picture','source',\n+\t\t// Table Elements\n+\t\t'caption','col','colgroup','table','tbody','td','tfoot','th','thead','tr',\n+\t\t// Disallowed but converted later\n+\t\t'style','xmp'\n \t].join(','),\n \n+\tnonEmptyTags = [\n+\t\t'A','B','EM','I','SPAN','STRONG'\n+\t],\n+\n \tblockquoteSwitcher = () => {\n \t\tSettingsUserStore.collapseBlockquotes() &&\n //\t\ttmpl.content.querySelectorAll('blockquote').forEach(node => {\n@@ -102,8 +122,10 @@ const\n \t},\n \n \tcleanCSS = source =>\n-\t\tsource.trim().replace(/(^|;)\\s*-(ms|webkit)-[^;]+(;|$)/g, '')\n-\t\t\t.replace(/white-space[^;]+(;|$)/g, '')\n+\t\tsource.trim()\n+\t\t\t.replace(/;\\s*-[^;]+/g, '')\n+\t\t\t.replace(/^\\s*-[^;]+(;|$)/g, '')\n+\t\t\t.replace(/white-space[^;]+/g, '')\n \t\t\t// Drop Microsoft Office style properties\n //\t\t\t.replace(/mso-[^:;]+:[^;]+/gi, '')\n \t,\n@@ -145,14 +167,14 @@ const\n \t\tif (source) {\n \t\t\tsource = source\n \t\t\t\t// strip comments\n-\t\t\t\t.replace(/\\/\\*[\\s\\S]*?\\*\\/|<!--|-->/gi, '')\n-\t\t\t\t// strip import statements\n-\t\t\t\t.replace(/@import .*?;/gi , '')\n-\t\t\t\t// strip keyframe statements\n-\t\t\t\t.replace(/((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})/gi, '');\n+\t\t\t\t.replace(/\\/\\*[\\s\\S]*?\\*\\//gi, '')\n+\t\t\t\t// strip MS Word comments\n+\t\t\t\t.replace(/<!--[\\s\\S]*?-->/gi, '');\n+\t\t\t\t// strip HTML\n+//\t\t\t\t.replace(/<\\/?[a-z][\\s\\S]*?>/gi, '');\n \n \t\t\t// unified regex to match css & media queries together\n-\t\t\tlet unified = /((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)})/gi,\n+\t\t\tlet unified = /(?:(\\s*?@(?:media)[\\s\\S]*?){([\\s\\S]*?)}\\s*?})|(?:([\\s\\S]*?){([\\s\\S]*?)})/gi,\n \t\t\t\tarr;\n \n \t\t\twhile (true) {\n@@ -161,7 +183,7 @@ const\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \n-\t\t\t\tlet selector = arr[arr[2] === undefined ? 5 : 2].split('\\r\\n').join('\\n').trim()\n+\t\t\t\tlet selector = arr[arr[2] === undefined ? 3 : 1].split('\\r\\n').join('\\n').trim()\n \t\t\t\t\t// Never have more than a single line break in a row\n \t\t\t\t\t.replace(/\\n+/, \"\\n\")\n \t\t\t\t\t// Remove :root and html\n@@ -173,13 +195,14 @@ const\n \t\t\t\t\tcss.push({\n \t\t\t\t\t\tselector: selector,\n \t\t\t\t\t\ttype: 'media',\n-\t\t\t\t\t\tsubStyles: parseCSS(arr[3] + '\\n}') //recursively parse media query inner css\n+\t\t\t\t\t\tsubStyles: parseCSS(arr[2] + '\\n}') //recursively parse media query inner css\n \t\t\t\t\t});\n \t\t\t\t} else if (selector && !selector.includes('@')) {\n \t\t\t\t\t// we have standard css\n+\t\t\t\t\t// ignores @import, @keyframe, @font-face statements\n \t\t\t\t\tcss.push({\n \t\t\t\t\t\tselector: selector,\n-\t\t\t\t\t\trules: cleanCSS(arr[6])\n+\t\t\t\t\t\trules: cleanCSS(arr[4])\n \t\t\t\t\t});\n \t\t\t\t}\n \t\t\t}\n@@ -258,9 +281,6 @@ export const\n \t\t\t\t'abbr', 'scope',\n \t\t\t\t// td\n \t\t\t\t'colspan', 'rowspan', 'headers'\n-\t\t\t],\n-\t\t\tnonEmptyTags = [\n-\t\t\t\t'A','B','EM','I','SPAN','STRONG'\n \t\t\t];\n \n \t\tif (SettingsUserStore.allowStyles()) {\n@@ -307,13 +327,21 @@ export const\n \t\t\t}\n \t\t});\n \n+\t\t// https://github.com/the-djmaze/snappymail/issues/1125\n+\t\ttmpl.content.querySelectorAll(keepTagContent).forEach(oElement => replaceWithChildren(oElement));\n+\n \t\ttmpl.content.querySelectorAll(\n-\t\t\tdisallowedTags\n+\t\t\t':not('+allowedTags+')'\n \t\t\t+ (0 < bqLevel ? ',' + (new Array(1 + bqLevel).fill('blockquote').join(' ')) : '')\n \t\t).forEach(oElement => oElement.remove());\n-\n-\t\t// https://github.com/the-djmaze/snappymail/issues/1125\n-\t\ttmpl.content.querySelectorAll('form,button').forEach(oElement => replaceWithChildren(oElement));\n+/*\t\t// Is this slower or faster?\n+\t\t).forEach(oElement => {\n+\t\t\tif (!node || !node.contains(oElement)) {\n+\t\t\t\toElement.remove();\n+\t\t\t\tnode = oElement;\n+\t\t\t}\n+\t\t});\n+*/\n \n \t\t// https://github.com/the-djmaze/snappymail/issues/1641\n \t\tlet body = tmpl.content.querySelector('.mail-body');\n@@ -346,6 +374,13 @@ export const\n \t\t\t\treturn;\n \t\t\t}\n \n+\t\t\tif ('XMP' === name) {\n+\t\t\t\tconst pre = createElement('pre');\n+\t\t\t\tpre.innerHTML = encodeHtml(oElement.innerHTML);\n+\t\t\t\toElement.replaceWith(pre);\n+\t\t\t\treturn;\n+\t\t\t}\n+\n \t\t\t// \\MailSo\\Base\\HtmlUtils::ClearTags()\n \t\t\tif ('none' == oStyle.display\n \t\t\t || 'hidden' == oStyle.visibility\n@@ -432,7 +467,7 @@ export const\n \t\t\t}\n \n //\t\t\tif (['CENTER','FORM'].includes(name)) {\n-\t\t\tif ('O:P' === name || (nonEmptyTags.includes(name) && ('' == oElement.textContent.trim()))) {\n+\t\t\tif (nonEmptyTags.includes(name) && ('' == oElement.textContent.trim())) {\n \t\t\t\t('A' !== name || !oElement.querySelector('IMG')) && replaceWithChildren(oElement);\n \t\t\t\treturn;\n \t\t\t}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8bf472755528b322e5dea4f116c6075a6bc2a5cf",
            "date": "2024-12-10T13:51:55Z",
            "author_login": null
          },
          {
            "sha": "208b1fab6213af82be88d1cf8c159ebc0307ad1c",
            "date": "2024-12-10T13:33:02Z",
            "author_login": "the-djmaze"
          },
          {
            "sha": "149cf5a120c154f66b777420e5da9084b5ea4eae",
            "date": "2024-12-10T13:13:27Z",
            "author_login": "the-djmaze"
          },
          {
            "sha": "e16d0b52ae083475732b69c6a91a479a50df8044",
            "date": "2024-12-07T00:37:33Z",
            "author_login": "hungyao"
          },
          {
            "sha": "0ffd97a183049da3204299e943cf453dcfd8eb69",
            "date": "2024-12-04T16:14:00Z",
            "author_login": "lenny87"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-79",
    "description": "Snappymail is an open source web-based email client. SnappyMail uses the `cleanHtml()` function to cleanup HTML and CSS in emails. Research discovered that the function has a few bugs which cause an mXSS exploit. Because the function allowed too many (invalid) HTML elements, it was possible (with incorrect markup) to trick the browser to \"fix\" the broken markup into valid markup. As a result a motivated attacker may be able to inject javascript. However, due to the default Content Security Policy the impact of the exploit is minimal. It could be possible to create an attack which leaks some data when loading images through the proxy.\nThis way it might be possible to use the proxy to attack the local system, like with `http://localhost:5000/leak`. Another attack could be to load a JavaScript attachment of the email. This is very tricky as the email must link to every possible UID as each email has a unique UID which has a value between 1 and 18446744073709551615 **v2.38.0** and up now remove unsupported HTML elements which mitigates the issue. Users are advised to upgrade. Older versions can install an extension named \"Security mXSS\" as a mitigation. This will be available at the administration area at `/?admin#/packages`. **NOTE:** this extension can not \"fix\" malicious code in encrypted messages or (html) attachments as it can't manipulate the JavaScript code for this. It only protects normal message HTML.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-09-16T20:15:47.097",
    "last_modified": "2024-09-20T12:31:20.110",
    "fix_date": "2024-09-16T12:37:26Z"
  },
  "references": [
    {
      "url": "https://github.com/the-djmaze/snappymail/blob/master/dev/Common/Html.js",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/the-djmaze/snappymail/commit/cfbc47488a6b2e2ae4be484f501ee1a3485f542e",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/the-djmaze/snappymail/security/advisories/GHSA-2rq7-79vp-ffxm",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:00.124526",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "snappymail",
    "owner": "the-djmaze",
    "created_at": "2020-03-09T07:55:32Z",
    "updated_at": "2025-01-10T10:19:17Z",
    "pushed_at": "2024-12-10T13:51:59Z",
    "size": 76801,
    "stars": 1086,
    "forks": 133,
    "open_issues": 87,
    "watchers": 1086,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 4239984,
      "JavaScript": 1346973,
      "HTML": 196422,
      "CSS": 132151,
      "Less": 68632,
      "Shell": 19311,
      "Perl": 12649,
      "Dockerfile": 9282,
      "Makefile": 1701
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T22:19:13.250133"
  }
}