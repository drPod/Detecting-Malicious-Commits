{
  "cve_id": "CVE-2024-45811",
  "github_data": {
    "repository": "vitejs/vite",
    "fix_commit": "6820bb3b9a54334f3268fc5ee1e967d2e1c0db34",
    "related_commits": [
      "6820bb3b9a54334f3268fc5ee1e967d2e1c0db34"
    ],
    "patch_url": "https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34.patch",
    "fix_commit_details": {
      "sha": "6820bb3b9a54334f3268fc5ee1e967d2e1c0db34",
      "commit_date": "2024-09-16T15:38:29Z",
      "author": {
        "login": "patak-dev",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: fs raw query (#18112)",
        "length": 26,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 36,
        "additions": 35,
        "deletions": 1
      },
      "files": [
        {
          "filename": "packages/vite/src/node/server/middlewares/static.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -232,7 +232,7 @@ export function isFileServingAllowed(\n   return false\n }\n \n-function ensureServingAccess(\n+export function ensureServingAccess(\n   url: string,\n   server: ViteDevServer,\n   res: ServerResponse,"
        },
        {
          "filename": "packages/vite/src/node/server/middlewares/transform.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -12,6 +12,7 @@ import {\n   isJSRequest,\n   normalizePath,\n   prettifyUrl,\n+  rawRE,\n   removeImportQuery,\n   removeTimestampQuery,\n   urlRE,\n@@ -35,6 +36,7 @@ import { ERR_CLOSED_SERVER } from '../pluginContainer'\n import { getDepsOptimizer } from '../../optimizer'\n import { cleanUrl, unwrapId, withTrailingSlash } from '../../../shared/utils'\n import { NULL_BYTE_PLACEHOLDER } from '../../../shared/constants'\n+import { ensureServingAccess } from './static'\n \n const debugCache = createDebugger('vite:cache')\n \n@@ -161,6 +163,13 @@ export function transformMiddleware(\n         warnAboutExplicitPublicPathInUrl(url)\n       }\n \n+      if (\n+        (rawRE.test(url) || urlRE.test(url)) &&\n+        !ensureServingAccess(url, server, res, next)\n+      ) {\n+        return\n+      }\n+\n       if (\n         isJSRequest(url) ||\n         isImportRequest(url) ||"
        },
        {
          "filename": "playground/fs-serve/__tests__/fs-serve.spec.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -77,6 +77,11 @@ describe.runIf(isServe)('main', () => {\n     expect(await page.textContent('.unsafe-fs-fetch-status')).toBe('403')\n   })\n \n+  test('unsafe fs fetch', async () => {\n+    expect(await page.textContent('.unsafe-fs-fetch-raw')).toBe('')\n+    expect(await page.textContent('.unsafe-fs-fetch-raw-status')).toBe('403')\n+  })\n+\n   test('unsafe fs fetch with special characters (#8498)', async () => {\n     expect(await page.textContent('.unsafe-fs-fetch-8498')).toBe('')\n     expect(await page.textContent('.unsafe-fs-fetch-8498-status')).toBe('404')"
        },
        {
          "filename": "playground/fs-serve/root/src/index.html",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -35,6 +35,8 @@ <h2>Safe /@fs/ Fetch</h2>\n <h2>Unsafe /@fs/ Fetch</h2>\n <pre class=\"unsafe-fs-fetch-status\"></pre>\n <pre class=\"unsafe-fs-fetch\"></pre>\n+<pre class=\"unsafe-fs-fetch-raw-status\"></pre>\n+<pre class=\"unsafe-fs-fetch-raw\"></pre>\n <pre class=\"unsafe-fs-fetch-8498-status\"></pre>\n <pre class=\"unsafe-fs-fetch-8498\"></pre>\n <pre class=\"unsafe-fs-fetch-8498-2-status\"></pre>\n@@ -188,6 +190,24 @@ <h2>Denied</h2>\n       console.error(e)\n     })\n \n+  // not imported before, outside of root, treated as unsafe\n+  fetch(\n+    joinUrlSegments(\n+      base,\n+      joinUrlSegments('/@fs/', ROOT) + '/unsafe.json?import&raw',\n+    ),\n+  )\n+    .then((r) => {\n+      text('.unsafe-fs-fetch-raw-status', r.status)\n+      return r.json()\n+    })\n+    .then((data) => {\n+      text('.unsafe-fs-fetch-raw', JSON.stringify(data))\n+    })\n+    .catch((e) => {\n+      console.error(e)\n+    })\n+\n   // outside root with special characters #8498\n   fetch(\n     joinUrlSegments("
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "080266213288ea2bb2c8061865ec47dc287081b0",
            "date": "2025-01-14T10:21:01Z",
            "author_login": "jahredhope"
          },
          {
            "sha": "db81c2dada961f40c0882b5182adf2f34bb5c178",
            "date": "2025-01-14T09:59:08Z",
            "author_login": "bluwy"
          },
          {
            "sha": "47039f4643179be31a8d7c7fbff83c5c13deb787",
            "date": "2025-01-14T09:38:57Z",
            "author_login": "bluwy"
          },
          {
            "sha": "3bd55bcb7e831d2c4f66c90d7bbb3e1fbf7a02b6",
            "date": "2025-01-14T06:34:21Z",
            "author_login": "patak-dev"
          },
          {
            "sha": "76082e3d3033b09b02b6db64de6e36942593c753",
            "date": "2025-01-13T07:03:33Z",
            "author_login": "pacexy"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:A/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Vite a frontend build tooling framework for javascript. In affected versions the contents of arbitrary files can be returned to the browser. `@fs` denies access to files outside of Vite serving allow list. Adding `?import&raw` to the URL bypasses this limitation and returns the file content if it exists. This issue has been patched in versions 5.4.6, 5.3.6, 5.2.14, 4.5.5, and 3.2.11. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-09-17T20:15:05.800",
    "last_modified": "2024-09-20T12:30:51.220",
    "fix_date": "2024-09-16T15:38:29Z"
  },
  "references": [
    {
      "url": "https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:00.127838",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vite",
    "owner": "vitejs",
    "created_at": "2020-04-21T05:03:57Z",
    "updated_at": "2025-01-14T12:10:58Z",
    "pushed_at": "2025-01-14T10:21:01Z",
    "size": 43459,
    "stars": 69971,
    "forks": 6348,
    "open_issues": 638,
    "watchers": 69971,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "TypeScript": 1910071,
      "JavaScript": 229467,
      "HTML": 118058,
      "CSS": 30179,
      "Vue": 3535,
      "AppleScript": 2691,
      "Svelte": 2510,
      "SCSS": 1894,
      "Less": 970,
      "Stylus": 531,
      "SugarSS": 274,
      "Shell": 244,
      "Pug": 165,
      "Sass": 140,
      "Astro": 114
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:03:39.007676"
  }
}