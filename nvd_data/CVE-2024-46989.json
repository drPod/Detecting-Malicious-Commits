{
  "cve_id": "CVE-2024-46989",
  "github_data": {
    "repository": "authzed/spicedb",
    "fix_commit": "d4ef8e1dbce1eafaf25847f4c0f09738820f5bf2",
    "related_commits": [
      "d4ef8e1dbce1eafaf25847f4c0f09738820f5bf2"
    ],
    "patch_url": "https://github.com/authzed/spicedb/commit/d4ef8e1dbce1eafaf25847f4c0f09738820f5bf2.patch",
    "fix_commit_details": {
      "sha": "d4ef8e1dbce1eafaf25847f4c0f09738820f5bf2",
      "commit_date": "2024-08-15T22:50:26Z",
      "author": {
        "login": "josephschorr",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #2027 from josephschorr/caveat-check-fix",
        "length": 140,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 172,
        "additions": 161,
        "deletions": 11
      },
      "files": [
        {
          "filename": "internal/dispatch/graph/check_test.go",
          "status": "modified",
          "additions": 124,
          "deletions": 9,
          "patch": "@@ -288,13 +288,14 @@ func TestCheckMetadata(t *testing.T) {\n \n func TestCheckPermissionOverSchema(t *testing.T) {\n \ttestCases := []struct {\n-\t\tname                   string\n-\t\tschema                 string\n-\t\trelationships          []*core.RelationTuple\n-\t\tresource               *core.ObjectAndRelation\n-\t\tsubject                *core.ObjectAndRelation\n-\t\texpectedPermissionship v1.ResourceCheckResult_Membership\n-\t\texpectedCaveat         *core.CaveatExpression\n+\t\tname                      string\n+\t\tschema                    string\n+\t\trelationships             []*core.RelationTuple\n+\t\tresource                  *core.ObjectAndRelation\n+\t\tsubject                   *core.ObjectAndRelation\n+\t\texpectedPermissionship    v1.ResourceCheckResult_Membership\n+\t\texpectedCaveat            *core.CaveatExpression\n+\t\talternativeExpectedCaveat *core.CaveatExpression\n \t}{\n \t\t{\n \t\t\t\"basic union\",\n@@ -312,6 +313,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic intersection\",\n@@ -330,6 +332,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic exclusion\",\n@@ -347,6 +350,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic union, multiple branches\",\n@@ -365,6 +369,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic union no permission\",\n@@ -380,6 +385,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_NOT_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic intersection no permission\",\n@@ -397,6 +403,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_NOT_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic exclusion no permission\",\n@@ -415,6 +422,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_NOT_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"exclusion with multiple branches\",\n@@ -441,6 +449,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"intersection with multiple branches\",\n@@ -467,6 +476,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"exclusion with multiple branches no permission\",\n@@ -494,6 +504,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_NOT_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"intersection with multiple branches no permission\",\n@@ -519,6 +530,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_NOT_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic arrow\",\n@@ -541,6 +553,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic any arrow\",\n@@ -563,6 +576,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic all arrow negative\",\n@@ -585,6 +599,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_NOT_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic all arrow positive\",\n@@ -608,6 +623,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic all arrow positive with different types\",\n@@ -635,6 +651,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic all arrow negative over different types\",\n@@ -663,6 +680,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_NOT_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"basic all arrow positive over different types\",\n@@ -692,6 +710,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"all arrow for single org\",\n@@ -713,6 +732,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"all arrow for no orgs\",\n@@ -733,6 +753,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_NOT_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"view_by_all negative\",\n@@ -766,6 +787,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"fred\", \"...\"),\n \t\t\tv1.ResourceCheckResult_NOT_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"view_by_any positive\",\n@@ -801,6 +823,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"fred\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"view_by_any positive directly\",\n@@ -836,6 +859,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"rachel\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"caveated intersection arrow\",\n@@ -862,6 +886,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_CAVEATED_MEMBER,\n \t\t\tcaveatAndCtx(\"somecaveat\", nil),\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"intersection arrow with caveated member\",\n@@ -888,6 +913,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_CAVEATED_MEMBER,\n \t\t\tcaveatAndCtx(\"somecaveat\", nil),\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"caveated intersection arrow with caveated member\",\n@@ -914,6 +940,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_CAVEATED_MEMBER,\n \t\t\tcaveatAndCtx(\"somecaveat\", nil),\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"caveated intersection arrow with caveated member, different context\",\n@@ -947,6 +974,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\t\tcaveatAndCtx(\"anothercaveat\", map[string]any{\"someparam\": int64(43)}),\n \t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"someparam\": int64(42)}),\n \t\t\t),\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"caveated intersection arrow with multiple caveated branches\",\n@@ -978,8 +1006,8 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"someparam\": int64(41)}),\n \t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"someparam\": int64(42)}),\n \t\t\t),\n+\t\t\tnil,\n \t\t},\n-\n \t\t{\n \t\t\t\"caveated intersection arrow with multiple caveated members\",\n \t\t\t`definition user {}\n@@ -1010,6 +1038,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"someparam\": int64(41)}),\n \t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"someparam\": int64(42)}),\n \t\t\t),\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"caveated intersection arrow with one caveated branch\",\n@@ -1038,6 +1067,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_CAVEATED_MEMBER,\n \t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"someparam\": int64(42)}),\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"caveated intersection arrow with one caveated member\",\n@@ -1066,6 +1096,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_CAVEATED_MEMBER,\n \t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"someparam\": int64(42)}),\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"caveated intersection arrow multiple paths to the same subject\",\n@@ -1093,6 +1124,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_CAVEATED_MEMBER,\n \t\t\tcaveatAndCtx(\"somecaveat\", nil),\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"recursive all arrow positive result\",\n@@ -1129,6 +1161,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"fred\", \"...\"),\n \t\t\tv1.ResourceCheckResult_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"recursive all arrow negative result\",\n@@ -1165,6 +1198,7 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"tom\", \"...\"),\n \t\t\tv1.ResourceCheckResult_NOT_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n \t\t},\n \t\t{\n \t\t\t\"recursive all arrow negative result due to recursion missing a folder\",\n@@ -1202,6 +1236,79 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \t\t\tONR(\"user\", \"fred\", \"...\"),\n \t\t\tv1.ResourceCheckResult_NOT_MEMBER,\n \t\t\tnil,\n+\t\t\tnil,\n+\t\t},\n+\t\t{\n+\t\t\t\"caveated over multiple branches\",\n+\t\t\t`\n+\t\t\t caveat somecaveat(somevalue int) {\n+\t\t\t    somevalue == 42\n+\t\t\t }\n+\n+  definition user {}\n+\n+  definition role {\n+    relation member: user\n+  }\n+\n+  definition resource {\n+      relation viewer: role#member with somecaveat\n+      permission view = viewer\n+  }\n+\t\t\t`,\n+\t\t\t[]*core.RelationTuple{\n+\t\t\t\ttuple.MustParse(`role:firstrole#member@user:tom[somecaveat:{\"somevalue\":40}]`),\n+\t\t\t\ttuple.MustParse(`role:secondrole#member@user:tom[somecaveat:{\"somevalue\":42}]`),\n+\t\t\t\ttuple.MustParse(`resource:doc1#viewer@role:firstrole#member`),\n+\t\t\t\ttuple.MustParse(`resource:doc1#viewer@role:secondrole#member`),\n+\t\t\t},\n+\t\t\tONR(\"resource\", \"doc1\", \"view\"),\n+\t\t\tONR(\"user\", \"tom\", \"...\"),\n+\t\t\tv1.ResourceCheckResult_CAVEATED_MEMBER,\n+\t\t\tcaveatOr(\n+\t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"somevalue\": int64(40)}),\n+\t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"somevalue\": int64(42)}),\n+\t\t\t),\n+\t\t\tcaveatOr(\n+\t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"somevalue\": int64(42)}),\n+\t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"somevalue\": int64(40)}),\n+\t\t\t),\n+\t\t},\n+\t\t{\n+\t\t\t\"caveated over multiple branches reversed\",\n+\t\t\t`\n+\t\t\t caveat somecaveat(somevalue int) {\n+\t\t\t    somevalue == 42\n+\t\t\t }\n+\n+  definition user {}\n+  \n+  definition role {\n+    relation member: user\n+  }\n+\n+  definition resource {\n+      relation viewer: role#member with somecaveat\n+      permission view = viewer\n+  }\n+\t\t\t`,\n+\t\t\t[]*core.RelationTuple{\n+\t\t\t\ttuple.MustParse(`role:secondrole#member@user:tom[somecaveat:{\"somevalue\":42}]`),\n+\t\t\t\ttuple.MustParse(`role:firstrole#member@user:tom[somecaveat:{\"somevalue\":40}]`),\n+\t\t\t\ttuple.MustParse(`resource:doc1#viewer@role:secondrole#member`),\n+\t\t\t\ttuple.MustParse(`resource:doc1#viewer@role:firstrole#member`),\n+\t\t\t},\n+\t\t\tONR(\"resource\", \"doc1\", \"view\"),\n+\t\t\tONR(\"user\", \"tom\", \"...\"),\n+\t\t\tv1.ResourceCheckResult_CAVEATED_MEMBER,\n+\t\t\tcaveatOr(\n+\t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"somevalue\": int64(40)}),\n+\t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"somevalue\": int64(42)}),\n+\t\t\t),\n+\t\t\tcaveatOr(\n+\t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"somevalue\": int64(42)}),\n+\t\t\t\tcaveatAndCtx(\"somecaveat\", map[string]any{\"somevalue\": int64(40)}),\n+\t\t\t),\n \t\t},\n \t}\n \n@@ -1239,10 +1346,18 @@ func TestCheckPermissionOverSchema(t *testing.T) {\n \n \t\t\trequire.Equal(tc.expectedPermissionship, membership)\n \n-\t\t\tif tc.expectedCaveat != nil {\n+\t\t\tif tc.expectedCaveat != nil && tc.alternativeExpectedCaveat == nil {\n \t\t\t\trequire.NotEmpty(resp.ResultsByResourceId[tc.resource.ObjectId].Expression)\n \t\t\t\ttestutil.RequireProtoEqual(t, tc.expectedCaveat, resp.ResultsByResourceId[tc.resource.ObjectId].Expression, \"mismatch in caveat\")\n \t\t\t}\n+\n+\t\t\tif tc.expectedCaveat != nil && tc.alternativeExpectedCaveat != nil {\n+\t\t\t\trequire.NotEmpty(resp.ResultsByResourceId[tc.resource.ObjectId].Expression)\n+\n+\t\t\t\tif testutil.AreProtoEqual(tc.expectedCaveat, resp.ResultsByResourceId[tc.resource.ObjectId].Expression, \"mismatch in caveat\") != nil {\n+\t\t\t\t\ttestutil.RequireProtoEqual(t, tc.alternativeExpectedCaveat, resp.ResultsByResourceId[tc.resource.ObjectId].Expression, \"mismatch in caveat\")\n+\t\t\t\t}\n+\t\t\t}\n \t\t})\n \t}\n }"
        },
        {
          "filename": "internal/dispatch/graph/lookupsubjects_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@ var (\n \tcaveatAndCtx = caveats.MustCaveatExprForTestingWithContext\n \tcaveatAnd    = caveats.And\n \tcaveatInvert = caveats.Invert\n+\tcaveatOr     = caveats.Or\n )\n \n func TestSimpleLookupSubjects(t *testing.T) {"
        },
        {
          "filename": "internal/graph/check.go",
          "status": "modified",
          "additions": 12,
          "deletions": 1,
          "patch": "@@ -466,6 +466,7 @@ func (cc *ConcurrentChecker) checkDirect(ctx context.Context, crc currentRequest\n \t// Find the subjects over which to dispatch.\n \tsubjectsToDispatch := tuple.NewONRByTypeSet()\n \trelationshipsBySubjectONR := mapz.NewMultiMap[string, *core.RelationTuple]()\n+\thasCaveats := false\n \n \tfor tpl := it.Next(); tpl != nil; tpl = it.Next() {\n \t\tif it.Err() != nil {\n@@ -479,6 +480,9 @@ func (cc *ConcurrentChecker) checkDirect(ctx context.Context, crc currentRequest\n \n \t\tsubjectsToDispatch.Add(tpl.Subject)\n \t\trelationshipsBySubjectONR.Add(tuple.StringONR(tpl.Subject), tpl)\n+\t\tif tpl.Caveat != nil && tpl.Caveat.CaveatName != \"\" {\n+\t\t\thasCaveats = true\n+\t\t}\n \t}\n \tit.Close()\n \n@@ -499,14 +503,21 @@ func (cc *ConcurrentChecker) checkDirect(ctx context.Context, crc currentRequest\n \t\tdispatchChunkCountHistogram.Observe(chunkCount)\n \t})\n \n+\t// If there are caveats on the incoming relationships, then we must require all results to be\n+\t// found, as we need to ensure that all caveats are used for building the final expression.\n+\tresultsSetting := crc.resultsSetting\n+\tif hasCaveats {\n+\t\tresultsSetting = v1.DispatchCheckRequest_REQUIRE_ALL_RESULTS\n+\t}\n+\n \t// Dispatch and map to the associated resource ID(s).\n \tresult := union(ctx, crc, toDispatch, func(ctx context.Context, crc currentRequestContext, dd directDispatch) CheckResult {\n \t\tchildResult := cc.dispatch(ctx, crc, ValidatedCheckRequest{\n \t\t\t&v1.DispatchCheckRequest{\n \t\t\t\tResourceRelation: dd.resourceType,\n \t\t\t\tResourceIds:      dd.resourceIds,\n \t\t\t\tSubject:          crc.parentReq.Subject,\n-\t\t\t\tResultsSetting:   crc.resultsSetting,\n+\t\t\t\tResultsSetting:   resultsSetting,\n \n \t\t\t\tMetadata:   decrementDepth(crc.parentReq.Metadata),\n \t\t\t\tDebug:      crc.parentReq.Debug,"
        },
        {
          "filename": "internal/services/integrationtesting/testconfigs/caveatmultiplebranchessamerel.yaml",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+schema: >-\n+  definition user {}\n+\n+  caveat write_limit(limit uint, count uint) {\n+    count < limit\n+  }\n+\n+  definition role {\n+    relation member: user\n+  }\n+\n+  definition database {\n+      relation writer: role#member with write_limit\n+      permission write = writer\n+  }\n+relationships: |-\n+  database:listings#writer@role:default#member[write_limit:{\"limit\":2}]\n+  database:listings#writer@role:premium#member[write_limit:{\"limit\":4}]\n+  role:default#member@user:bob\n+  role:premium#member@user:bob\n+assertions:\n+  assertTrue:\n+    - 'database:listings#write@user:bob with {\"count\":3}'"
        },
        {
          "filename": "pkg/tuple/tuple.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -175,7 +175,7 @@ func MustParse(tpl string) *core.RelationTuple {\n \tif parsed := Parse(tpl); parsed != nil {\n \t\treturn parsed\n \t}\n-\tpanic(\"failed to parse tuple\")\n+\tpanic(\"failed to parse tuple: \" + tpl)\n }\n \n // Parse unmarshals the string form of a Tuple and returns nil if there is a"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "db2cf0146d7b2a1bf7c8b838acf91cde019b9445",
            "date": "2025-01-14T18:25:51Z",
            "author_login": "josephschorr"
          },
          {
            "sha": "75390a9b4c3492bbd14c1df2e50209e285be5831",
            "date": "2025-01-08T23:45:38Z",
            "author_login": "josephschorr"
          },
          {
            "sha": "3bbf45766ed519c53ff802619a032e58e2af57a7",
            "date": "2025-01-13T22:44:38Z",
            "author_login": "josephschorr"
          },
          {
            "sha": "3e257e6c4207721f8ae421ec1424f96c0c60279b",
            "date": "2025-01-11T22:06:12Z",
            "author_login": "josephschorr"
          },
          {
            "sha": "fabeff191dec15fae327c896a9f40e095fde5e49",
            "date": "2025-01-10T22:22:57Z",
            "author_login": "josephschorr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-269",
    "description": "spicedb is an Open Source, Google Zanzibar-inspired permissions database to enable fine-grained authorization for customer applications. Multiple caveats over the same indirect subject type on the same relation can result in no permission being returned when permission is expected. If the resource has multiple groups, and each group is caveated, it is possible for the returned permission to be \"no permission\" when permission is expected. Permission is returned as NO_PERMISSION when PERMISSION is expected on the CheckPermission API. This issue has been addressed in release version 1.35.3. Users are advised to upgrade. Users unable to upgrade should not use caveats or avoid the use of caveats on an indirect subject type with multiple entries.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-09-18T18:15:07.650",
    "last_modified": "2024-09-20T12:30:17.483",
    "fix_date": "2024-08-15T22:50:26Z"
  },
  "references": [
    {
      "url": "https://github.com/authzed/spicedb/commit/d4ef8e1dbce1eafaf25847f4c0f09738820f5bf2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/authzed/spicedb/security/advisories/GHSA-jhg6-6qrx-38mr",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:00.133535",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "spicedb",
    "owner": "authzed",
    "created_at": "2021-08-16T15:32:09Z",
    "updated_at": "2025-01-14T00:07:27Z",
    "pushed_at": "2025-01-13T22:53:04Z",
    "size": 19045,
    "stars": 5286,
    "forks": 286,
    "open_issues": 107,
    "watchers": 5286,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 4522371,
      "JavaScript": 16612,
      "HTML": 3663,
      "Dockerfile": 1564
    },
    "commit_activity": {
      "total_commits_last_year": 625,
      "avg_commits_per_week": 12.01923076923077,
      "days_active_last_year": 208
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:56:47.808291"
  }
}