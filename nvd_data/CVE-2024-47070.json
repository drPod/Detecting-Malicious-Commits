{
  "cve_id": "CVE-2024-47070",
  "github_data": {
    "repository": "goauthentik/authentik",
    "fix_commit": "78f7b04d5a62b2a9d4316282a713c2c7857dbe29",
    "related_commits": [
      "78f7b04d5a62b2a9d4316282a713c2c7857dbe29",
      "dd8f809161e738b25765797eb2a5c77a7d3fc2cf"
    ],
    "patch_url": "https://github.com/goauthentik/authentik/commit/78f7b04d5a62b2a9d4316282a713c2c7857dbe29.patch",
    "fix_commit_details": {
      "sha": "78f7b04d5a62b2a9d4316282a713c2c7857dbe29",
      "commit_date": "2024-09-27T14:20:38Z",
      "author": {
        "login": "gcp-cherry-pick-bot[bot]",
        "type": "Bot",
        "stats": {
          "total_commits": 22,
          "average_weekly_commits": 0.06811145510835913,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 4
        }
      },
      "commit_message": {
        "title": "security: fix CVE-2024-47070 (cherry-pick #11536) (#11540)",
        "length": 408,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 79,
        "additions": 72,
        "deletions": 7
      },
      "files": [
        {
          "filename": "authentik/lib/tests/test_http.py",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -30,6 +30,11 @@ def test_forward_for(self):\n         request = self.factory.get(\"/\", HTTP_X_FORWARDED_FOR=\"127.0.0.2\")\n         self.assertEqual(ClientIPMiddleware.get_client_ip(request), \"127.0.0.2\")\n \n+    def test_forward_for_invalid(self):\n+        \"\"\"Test invalid forward for\"\"\"\n+        request = self.factory.get(\"/\", HTTP_X_FORWARDED_FOR=\"foobar\")\n+        self.assertEqual(ClientIPMiddleware.get_client_ip(request), ClientIPMiddleware.default_ip)\n+\n     def test_fake_outpost(self):\n         \"\"\"Test faked IP which is overridden by an outpost\"\"\"\n         token = Token.objects.create(\n@@ -53,6 +58,17 @@ def test_fake_outpost(self):\n             },\n         )\n         self.assertEqual(ClientIPMiddleware.get_client_ip(request), \"127.0.0.1\")\n+        # Invalid, not a real IP\n+        self.user.type = UserTypes.INTERNAL_SERVICE_ACCOUNT\n+        self.user.save()\n+        request = self.factory.get(\n+            \"/\",\n+            **{\n+                ClientIPMiddleware.outpost_remote_ip_header: \"foobar\",\n+                ClientIPMiddleware.outpost_token_header: token.key,\n+            },\n+        )\n+        self.assertEqual(ClientIPMiddleware.get_client_ip(request), \"127.0.0.1\")\n         # Valid\n         self.user.type = UserTypes.INTERNAL_SERVICE_ACCOUNT\n         self.user.save()"
        },
        {
          "filename": "authentik/root/middleware.py",
          "status": "modified",
          "additions": 17,
          "deletions": 6,
          "patch": "@@ -2,6 +2,7 @@\n \n from collections.abc import Callable\n from hashlib import sha512\n+from ipaddress import ip_address\n from time import perf_counter, time\n from typing import Any\n \n@@ -174,6 +175,7 @@ class ClientIPMiddleware:\n \n     def __init__(self, get_response: Callable[[HttpRequest], HttpResponse]):\n         self.get_response = get_response\n+        self.logger = get_logger().bind()\n \n     def _get_client_ip_from_meta(self, meta: dict[str, Any]) -> str:\n         \"\"\"Attempt to get the client's IP by checking common HTTP Headers.\n@@ -185,11 +187,16 @@ def _get_client_ip_from_meta(self, meta: dict[str, Any]) -> str:\n             \"HTTP_X_FORWARDED_FOR\",\n             \"REMOTE_ADDR\",\n         )\n-        for _header in headers:\n-            if _header in meta:\n-                ips: list[str] = meta.get(_header).split(\",\")\n-                return ips[0].strip()\n-        return self.default_ip\n+        try:\n+            for _header in headers:\n+                if _header in meta:\n+                    ips: list[str] = meta.get(_header).split(\",\")\n+                    # Ensure the IP parses as a valid IP\n+                    return str(ip_address(ips[0].strip()))\n+            return self.default_ip\n+        except ValueError as exc:\n+            self.logger.debug(\"Invalid remote IP\", exc=exc)\n+            return self.default_ip\n \n     # FIXME: this should probably not be in `root` but rather in a middleware in `outposts`\n     # but for now it's fine\n@@ -228,7 +235,11 @@ def _get_outpost_override_ip(self, request: HttpRequest) -> str | None:\n         Hub.current.scope.set_user(user)\n         # Set the outpost service account on the request\n         setattr(request, self.request_attr_outpost_user, user)\n-        return delegated_ip\n+        try:\n+            return str(ip_address(delegated_ip))\n+        except ValueError as exc:\n+            self.logger.debug(\"Invalid remote IP from Outpost\", exc=exc)\n+            return None\n \n     def _get_client_ip(self, request: HttpRequest | None) -> str:\n         \"\"\"Attempt to get the client's IP by checking common HTTP Headers."
        },
        {
          "filename": "blueprints/default/flow-default-authentication-flow.yaml",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -82,3 +82,5 @@ entries:\n     order: 10\n     target: !KeyOf default-authentication-flow-password-binding\n     policy: !KeyOf default-authentication-flow-password-optional\n+  attrs:\n+    failure_result: true"
        },
        {
          "filename": "website/docs/security/CVE-2024-42490.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2,7 +2,7 @@\n \n _Reported by [@m2a2](https://github.com/m2a2)_\n \n-## Improper Authorization for Token modification\n+## Insufficient Authorization for several API endpoints\n \n ### Summary\n "
        },
        {
          "filename": "website/docs/security/CVE-2024-47070.md",
          "status": "added",
          "additions": 35,
          "deletions": 0,
          "patch": "@@ -0,0 +1,35 @@\n+# CVE-2024-47070\n+\n+_Reported by [@efpi-bot](https://github.com/efpi-bot) from [LogicalTrust](https://logicaltrust.net/en/)_\n+\n+## Password authentication bypass via X-Forwarded-For HTTP header\n+\n+### Summary\n+\n+The vulnerability allows bypassing policies by adding X-Forwarded-For header with unparsable IP address, e.g. \"a\". This results in a possibility to authenticate/authorize to any account with known login or email address.\n+\n+Since the default authentication flow uses a policy to enable the password stage only when there is no password stage selected on the Identification stage, this vulnerability can be used to skip this policy and continue without the password stage.\n+\n+### Am I affected\n+\n+This can be exploited for the following configurations:\n+\n+-   An attacker can access authentik without a reverse proxy (and `AUTHENTIK_LISTEN__TRUSTED_PROXY_CIDRS` is not configured properly)\n+-   The reverse proxy configuration does not correctly overwrite X-Forwarded-For\n+-   Policies (User and group bindings do _not_ apply) are bound to authentication/authorization flows\n+\n+### Patches\n+\n+authentik 2024.6.5 and 2024.8.3 fix this issue.\n+\n+### Workarounds\n+\n+Ensure the X-Forwarded-For header is always set by the reverse proxy, and is always set to a correct IP.\n+\n+In addition you can manually change the _Failure result_ option on policy bindings to _Pass_, which will prevent any stages from being skipped if a malicious request is received.\n+\n+### For more information\n+\n+If you have any questions or comments about this advisory:\n+\n+-   Email us at [security@goauthentik.io](mailto:security@goauthentik.io)"
        },
        {
          "filename": "website/sidebars.js",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -512,6 +512,7 @@ const docsSidebar = {\n                 \"security/security-hardening\",\n                 \"security/policy\",\n                 \"security/CVE-2024-47077\",\n+                \"security/CVE-2024-47070\",\n                 \"security/CVE-2024-42490\",\n                 \"security/CVE-2024-38371\",\n                 \"security/CVE-2024-37905\","
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c19a8873563a5d337bde6865a7a69d4bd1a6d83f",
            "date": "2025-01-14T19:15:02Z",
            "author_login": "BeryJu"
          },
          {
            "sha": "09931bcbc20f4527acfcd9046fe1caeeda446c50",
            "date": "2025-01-14T14:56:03Z",
            "author_login": "BeryJu"
          },
          {
            "sha": "7a4293bf178ac7c6a2222593feef560053e16cbc",
            "date": "2025-01-14T12:40:25Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6e569acd845bbcc79c50f40542bd729dd2243840",
            "date": "2025-01-14T12:40:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "02c69d767f02a9d887a9892128aa8e2e30011c38",
            "date": "2025-01-14T12:39:54Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-287",
    "description": "authentik is an open-source identity provider. A vulnerability that exists in versions prior to 2024.8.3 and 2024.6.5 allows bypassing password login by adding X-Forwarded-For header with an unparsable IP address, e.g. `a`. This results in a possibility of logging into any account with a known login or email address. The vulnerability requires the authentik instance to trust X-Forwarded-For header provided by the attacker, thus it is not reproducible from external hosts on a properly configured environment.  The issue occurs due to the password stage having a policy bound to it, which skips the password stage if the Identification stage is setup to also contain a password stage. Due to the invalid X-Forwarded-For header, which does not get validated to be an IP Address early enough, the exception happens later and the policy fails. The default blueprint doesn't correctly set `failure_result` to `True` on the policy binding meaning that due to this exception the policy returns false and the password stage is skipped. Versions 2024.8.3 and 2024.6.5 fix this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-09-27T16:15:05.413",
    "last_modified": "2024-09-30T12:45:57.823",
    "fix_date": "2024-09-27T14:20:38Z"
  },
  "references": [
    {
      "url": "https://github.com/goauthentik/authentik/commit/78f7b04d5a62b2a9d4316282a713c2c7857dbe29",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/goauthentik/authentik/commit/dd8f809161e738b25765797eb2a5c77a7d3fc2cf",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/goauthentik/authentik/security/advisories/GHSA-7jxf-mmg9-9hg7",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.089653",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "authentik",
    "owner": "goauthentik",
    "created_at": "2019-12-30T09:19:48Z",
    "updated_at": "2025-01-14T12:40:29Z",
    "pushed_at": "2025-01-14T13:17:29Z",
    "size": 348330,
    "stars": 14458,
    "forks": 984,
    "open_issues": 728,
    "watchers": 14458,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 3995415,
      "TypeScript": 2892221,
      "Go": 308962,
      "MDX": 124483,
      "JavaScript": 69953,
      "HTML": 24617,
      "Rust": 22748,
      "CSS": 19762,
      "Dockerfile": 15501,
      "Makefile": 9222,
      "Shell": 7042,
      "PHP": 1149
    },
    "commit_activity": {
      "total_commits_last_year": 3169,
      "avg_commits_per_week": 60.94230769230769,
      "days_active_last_year": 295
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:32:32.687051"
  }
}