{
  "cve_id": "CVE-2024-47082",
  "github_data": {
    "repository": "strawberry-graphql/strawberry",
    "fix_commit": "37265b230e511480a9ceace492f9f6a484be1387",
    "related_commits": [
      "37265b230e511480a9ceace492f9f6a484be1387"
    ],
    "patch_url": "https://github.com/strawberry-graphql/strawberry/commit/37265b230e511480a9ceace492f9f6a484be1387.patch",
    "fix_commit_details": {
      "sha": "37265b230e511480a9ceace492f9f6a484be1387",
      "commit_date": "2024-09-25T16:08:23Z",
      "author": {
        "login": "DoctorJohn",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Disable multipart uploads by default (#3645)",
        "length": 562,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 251,
        "additions": 207,
        "deletions": 44
      },
      "files": [
        {
          "filename": ".github/workflows/test.yml",
          "status": "modified",
          "additions": 0,
          "deletions": 14,
          "patch": "@@ -59,20 +59,6 @@ jobs:\n             3.12\n             3.13-dev\n \n-      - name: Pip and nox cache\n-        id: cache\n-        uses: actions/cache@v4\n-        with:\n-          path: |\n-            ~/.cache\n-            ~/.nox\n-            .nox\n-          key:\n-            ${{ runner.os }}-nox-${{ matrix.session.session }}-${{ env.pythonLocation }}-${{\n-            hashFiles('**/poetry.lock') }}-${{ hashFiles('**/noxfile.py') }}\n-          restore-keys: |\n-            ${{ runner.os }}-nox-${{ matrix.session.session }}-${{ env.pythonLocation }}\n-\n       - run: pip install poetry nox nox-poetry uv\n       - run: nox -r -t tests -s \"${{ matrix.session.session }}\"\n       - uses: actions/upload-artifact@v4"
        },
        {
          "filename": "RELEASE.md",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+Release type: minor\n+\n+Starting with this release, multipart uploads are disabled by default and Strawberry Django view is no longer implicitly exempted from Django's CSRF protection.\n+Both changes relieve users from implicit security implications inherited from the GraphQL multipart request specification which was enabled in Strawberry by default.\n+\n+These are breaking changes if you are using multipart uploads OR the Strawberry Django view.\n+Migrations guides including further information are available on the Strawberry website."
        },
        {
          "filename": "TWEET.md",
          "status": "added",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -0,0 +1,8 @@\n+\ud83c\udd95 Release $version is out! Thanks to $contributor \ud83d\udc4f\n+\n+We've made some important security changes regarding file uploads and CSRF in\n+Django.\n+\n+Check out our migration guides if you're using multipart or Django view.\n+\n+\ud83d\udc47 $release_url"
        },
        {
          "filename": "docs/breaking-changes.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@ title: List of breaking changes and deprecations\n \n # List of breaking changes and deprecations\n \n+- [Version 0.243.0 - 25 September 2024](./breaking-changes/0.243.0.md)\n - [Version 0.240.0 - 10 September 2024](./breaking-changes/0.240.0.md)\n - [Version 0.236.0 - 17 July 2024](./breaking-changes/0.236.0.md)\n - [Version 0.233.0 - 29 May 2024](./breaking-changes/0.233.0.md)"
        },
        {
          "filename": "docs/breaking-changes/0.243.0.md",
          "status": "added",
          "additions": 53,
          "deletions": 0,
          "patch": "@@ -0,0 +1,53 @@\n+---\n+title: 0.243.0 Breaking Changes\n+slug: breaking-changes/0.243.0\n+---\n+\n+# v0.240.0 Breaking Changes\n+\n+Release v0.240.0 comes with two breaking changes regarding multipart file\n+uploads and Django CSRF protection.\n+\n+## Multipart uploads disabled by default\n+\n+Previously, support for uploads via the\n+[GraphQL multipart request specification](https://github.com/jaydenseric/graphql-multipart-request-spec)\n+was enabled by default. This implicitly required Strawberry users to consider\n+the\n+[security implications outlined in the GraphQL Multipart Request Specification](https://github.com/jaydenseric/graphql-multipart-request-spec/blob/master/readme.md#security).\n+Given that most Strawberry users were likely not aware of this, we're making\n+multipart file upload support stictly opt-in via a new\n+`multipart_uploads_enabled` view settings.\n+\n+To enable multipart upload support for your Strawberry view integration, please\n+follow the updated integration guides and enable appropriate security\n+measurements for your server.\n+\n+## Django CSRF protection enabled\n+\n+Previously, the Strawberry Django view integration was internally exempted from\n+Django's built-in CSRF protection (i.e, the `CsrfViewMiddleware` middleware).\n+While this is how many GraphQL APIs operate, implicitly addded exemptions can\n+lead to security vulnerabilities. Instead, we delegate the decision of adding an\n+CSRF exemption to users now.\n+\n+Note that having the CSRF protection enabled on your Strawberry Django view\n+potentially requires all your clients to send an CSRF token with every request.\n+You can learn more about this in the official Django\n+[Cross Site Request Forgery protection documentation](https://docs.djangoproject.com/en/dev/ref/csrf/).\n+\n+To restore the behaviour of the integration before this release, you can add the\n+`csrf_exempt` decorator provided by Django yourself:\n+\n+```python\n+from django.urls import path\n+from django.views.decorators.csrf import csrf_exempt\n+\n+from strawberry.django.views import GraphQLView\n+\n+from api.schema import schema\n+\n+urlpatterns = [\n+    path(\"graphql/\", csrf_exempt(GraphQLView.as_view(schema=schema))),\n+]\n+```"
        },
        {
          "filename": "docs/integrations/aiohttp.md",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -29,14 +29,18 @@ app.router.add_route(\"*\", \"/graphql\", GraphQLView(schema=schema))\n \n ## Options\n \n-The `GraphQLView` accepts two options at the moment:\n+The `GraphQLView` accepts the following options at the moment:\n \n - `schema`: mandatory, the schema created by `strawberry.Schema`.\n - `graphql_ide`: optional, defaults to `\"graphiql\"`, allows to choose the\n   GraphQL IDE interface (one of `graphiql`, `apollo-sandbox` or `pathfinder`) or\n   to disable it by passing `None`.\n - `allow_queries_via_get`: optional, defaults to `True`, whether to enable\n   queries via `GET` requests\n+- `multipart_uploads_enabled`: optional, defaults to `False`, controls whether\n+  to enable multipart uploads. Please make sure to consider the\n+  [security implications mentioned in the GraphQL Multipart Request Specification](https://github.com/jaydenseric/graphql-multipart-request-spec/blob/master/readme.md#security)\n+  when enabling this feature.\n \n ## Extending the view\n "
        },
        {
          "filename": "docs/integrations/asgi.md",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -29,14 +29,18 @@ app with `uvicorn server:app`\n \n ## Options\n \n-The `GraphQL` app accepts two options at the moment:\n+The `GraphQL` app accepts the following options at the moment:\n \n - `schema`: mandatory, the schema created by `strawberry.Schema`.\n - `graphql_ide`: optional, defaults to `\"graphiql\"`, allows to choose the\n   GraphQL IDE interface (one of `graphiql`, `apollo-sandbox` or `pathfinder`) or\n   to disable it by passing `None`.\n - `allow_queries_via_get`: optional, defaults to `True`, whether to enable\n   queries via `GET` requests\n+- `multipart_uploads_enabled`: optional, defaults to `False`, controls whether\n+  to enable multipart uploads. Please make sure to consider the\n+  [security implications mentioned in the GraphQL Multipart Request Specification](https://github.com/jaydenseric/graphql-multipart-request-spec/blob/master/readme.md#security)\n+  when enabling this feature.\n \n ## Extending the view\n "
        },
        {
          "filename": "docs/integrations/channels.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -524,6 +524,10 @@ GraphQLWebsocketCommunicator(\n   queries via `GET` requests\n - `subscriptions_enabled`: optional boolean paramenter enabling subscriptions in\n   the GraphiQL interface, defaults to `True`\n+- `multipart_uploads_enabled`: optional, defaults to `False`, controls whether\n+  to enable multipart uploads. Please make sure to consider the\n+  [security implications mentioned in the GraphQL Multipart Request Specification](https://github.com/jaydenseric/graphql-multipart-request-spec/blob/master/readme.md#security)\n+  when enabling this feature.\n \n ### Extending the consumer\n "
        },
        {
          "filename": "docs/integrations/django.md",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -10,13 +10,14 @@ It provides a view that you can use to serve your GraphQL schema:\n \n ```python\n from django.urls import path\n+from django.views.decorators.csrf import csrf_exempt\n \n from strawberry.django.views import GraphQLView\n \n from api.schema import schema\n \n urlpatterns = [\n-    path(\"graphql/\", GraphQLView.as_view(schema=schema)),\n+    path(\"graphql/\", csrf_exempt(GraphQLView.as_view(schema=schema))),\n ]\n ```\n \n@@ -40,6 +41,10 @@ The `GraphQLView` accepts the following arguments:\n   queries via `GET` requests\n - `subscriptions_enabled`: optional boolean paramenter enabling subscriptions in\n   the GraphiQL interface, defaults to `False`.\n+- `multipart_uploads_enabled`: optional, defaults to `False`, controls whether\n+  to enable multipart uploads. Please make sure to consider the\n+  [security implications mentioned in the GraphQL Multipart Request Specification](https://github.com/jaydenseric/graphql-multipart-request-spec/blob/master/readme.md#security)\n+  when enabling this feature.\n \n ## Deprecated options\n "
        },
        {
          "filename": "docs/integrations/fastapi.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -54,6 +54,10 @@ The `GraphQLRouter` accepts the following options:\n   value.\n - `root_value_getter`: optional FastAPI dependency for providing custom root\n   value.\n+- `multipart_uploads_enabled`: optional, defaults to `False`, controls whether\n+  to enable multipart uploads. Please make sure to consider the\n+  [security implications mentioned in the GraphQL Multipart Request Specification](https://github.com/jaydenseric/graphql-multipart-request-spec/blob/master/readme.md#security)\n+  when enabling this feature.\n \n ## context_getter\n "
        },
        {
          "filename": "docs/integrations/flask.md",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -34,13 +34,17 @@ from strawberry.flask.views import AsyncGraphQLView\n \n ## Options\n \n-The `GraphQLView` accepts two options at the moment:\n+The `GraphQLView` accepts the following options at the moment:\n \n - `schema`: mandatory, the schema created by `strawberry.Schema`.\n - `graphiql:` optional, defaults to `True`, whether to enable the GraphiQL\n   interface.\n - `allow_queries_via_get`: optional, defaults to `True`, whether to enable\n   queries via `GET` requests\n+- `multipart_uploads_enabled`: optional, defaults to `False`, controls whether\n+  to enable multipart uploads. Please make sure to consider the\n+  [security implications mentioned in the GraphQL Multipart Request Specification](https://github.com/jaydenseric/graphql-multipart-request-spec/blob/master/readme.md#security)\n+  when enabling this feature.\n \n ## Extending the view\n "
        },
        {
          "filename": "docs/integrations/litestar.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -61,6 +61,10 @@ The `make_graphql_controller` function accepts the following options:\n   the maximum time to wait for the connection initialization message when using\n   `graphql-transport-ws`\n   [protocol](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md#connectioninit)\n+- `multipart_uploads_enabled`: optional, defaults to `False`, controls whether\n+  to enable multipart uploads. Please make sure to consider the\n+  [security implications mentioned in the GraphQL Multipart Request Specification](https://github.com/jaydenseric/graphql-multipart-request-spec/blob/master/readme.md#security)\n+  when enabling this feature.\n \n ## context_getter\n "
        },
        {
          "filename": "docs/integrations/quart.md",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -26,13 +26,17 @@ if __name__ == \"__main__\":\n \n ## Options\n \n-The `GraphQLView` accepts two options at the moment:\n+The `GraphQLView` accepts the following options at the moment:\n \n - `schema`: mandatory, the schema created by `strawberry.Schema`.\n - `graphiql:` optional, defaults to `True`, whether to enable the GraphiQL\n   interface.\n - `allow_queries_via_get`: optional, defaults to `True`, whether to enable\n   queries via `GET` requests\n+- `multipart_uploads_enabled`: optional, defaults to `False`, controls whether\n+  to enable multipart uploads. Please make sure to consider the\n+  [security implications mentioned in the GraphQL Multipart Request Specification](https://github.com/jaydenseric/graphql-multipart-request-spec/blob/master/readme.md#security)\n+  when enabling this feature.\n \n ## Extending the view\n "
        },
        {
          "filename": "docs/integrations/sanic.md",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -22,15 +22,18 @@ app.add_route(\n \n ## Options\n \n-The `GraphQLView` accepts two options at the moment:\n+The `GraphQLView` accepts the following options at the moment:\n \n - `schema`: mandatory, the schema created by `strawberry.Schema`.\n - `graphql_ide`: optional, defaults to `\"graphiql\"`, allows to choose the\n   GraphQL IDE interface (one of `graphiql`, `apollo-sandbox` or `pathfinder`) or\n   to disable it by passing `None`.\n - `allow_queries_via_get`: optional, defaults to `True`, whether to enable\n   queries via `GET` requests\n-- `def encode_json(self, data: GraphQLHTTPResponse) -> str`\n+- `multipart_uploads_enabled`: optional, defaults to `False`, controls whether\n+  to enable multipart uploads. Please make sure to consider the\n+  [security implications mentioned in the GraphQL Multipart Request Specification](https://github.com/jaydenseric/graphql-multipart-request-spec/blob/master/readme.md#security)\n+  when enabling this feature.\n \n ## Extending the view\n "
        },
        {
          "filename": "strawberry/aiohttp/views.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -111,6 +111,7 @@ def __init__(\n             GRAPHQL_WS_PROTOCOL,\n         ),\n         connection_init_wait_timeout: timedelta = timedelta(minutes=1),\n+        multipart_uploads_enabled: bool = False,\n     ) -> None:\n         self.schema = schema\n         self.allow_queries_via_get = allow_queries_via_get\n@@ -119,6 +120,7 @@ def __init__(\n         self.debug = debug\n         self.subscription_protocols = subscription_protocols\n         self.connection_init_wait_timeout = connection_init_wait_timeout\n+        self.multipart_uploads_enabled = multipart_uploads_enabled\n \n         if graphiql is not None:\n             warnings.warn("
        },
        {
          "filename": "strawberry/asgi/__init__.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -106,6 +106,7 @@ def __init__(\n             GRAPHQL_WS_PROTOCOL,\n         ),\n         connection_init_wait_timeout: timedelta = timedelta(minutes=1),\n+        multipart_uploads_enabled: bool = False,\n     ) -> None:\n         self.schema = schema\n         self.allow_queries_via_get = allow_queries_via_get\n@@ -114,6 +115,7 @@ def __init__(\n         self.debug = debug\n         self.protocols = subscription_protocols\n         self.connection_init_wait_timeout = connection_init_wait_timeout\n+        self.multipart_uploads_enabled = multipart_uploads_enabled\n \n         if graphiql is not None:\n             warnings.warn("
        },
        {
          "filename": "strawberry/channels/handlers/http_handler.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -168,12 +168,14 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         subscriptions_enabled: bool = True,\n+        multipart_uploads_enabled: bool = False,\n         **kwargs: Any,\n     ) -> None:\n         self.schema = schema\n         self.allow_queries_via_get = allow_queries_via_get\n         self.subscriptions_enabled = subscriptions_enabled\n         self._ide_subscriptions_enabled = subscriptions_enabled\n+        self.multipart_uploads_enabled = multipart_uploads_enabled\n \n         if graphiql is not None:\n             warnings.warn("
        },
        {
          "filename": "strawberry/django/views.py",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -28,8 +28,7 @@\n from django.template.exceptions import TemplateDoesNotExist\n from django.template.loader import render_to_string\n from django.template.response import TemplateResponse\n-from django.utils.decorators import classonlymethod, method_decorator\n-from django.views.decorators.csrf import csrf_exempt\n+from django.utils.decorators import classonlymethod\n from django.views.generic import View\n \n from strawberry.http.async_base_view import AsyncBaseHTTPView, AsyncHTTPRequestAdapter\n@@ -147,11 +146,13 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         subscriptions_enabled: bool = False,\n+        multipart_uploads_enabled: bool = False,\n         **kwargs: Any,\n     ) -> None:\n         self.schema = schema\n         self.allow_queries_via_get = allow_queries_via_get\n         self.subscriptions_enabled = subscriptions_enabled\n+        self.multipart_uploads_enabled = multipart_uploads_enabled\n \n         if graphiql is not None:\n             warnings.warn(\n@@ -229,7 +230,6 @@ def get_context(self, request: HttpRequest, response: HttpResponse) -> Any:\n     def get_sub_response(self, request: HttpRequest) -> TemporalHttpResponse:\n         return TemporalHttpResponse()\n \n-    @method_decorator(csrf_exempt)\n     def dispatch(\n         self, request: HttpRequest, *args: Any, **kwargs: Any\n     ) -> Union[HttpResponseNotAllowed, TemplateResponse, HttpResponseBase]:\n@@ -288,7 +288,6 @@ async def get_context(self, request: HttpRequest, response: HttpResponse) -> Any\n     async def get_sub_response(self, request: HttpRequest) -> TemporalHttpResponse:\n         return TemporalHttpResponse()\n \n-    @method_decorator(csrf_exempt)\n     async def dispatch(  # pyright: ignore\n         self, request: HttpRequest, *args: Any, **kwargs: Any\n     ) -> Union[HttpResponseNotAllowed, TemplateResponse, HttpResponseBase]:"
        },
        {
          "filename": "strawberry/fastapi/router.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -156,6 +156,7 @@ def __init__(\n         generate_unique_id_function: Callable[[APIRoute], str] = Default(\n             generate_unique_id\n         ),\n+        multipart_uploads_enabled: bool = False,\n         **kwargs: Any,\n     ) -> None:\n         super().__init__(\n@@ -190,6 +191,7 @@ def __init__(\n         )\n         self.protocols = subscription_protocols\n         self.connection_init_wait_timeout = connection_init_wait_timeout\n+        self.multipart_uploads_enabled = multipart_uploads_enabled\n \n         if graphiql is not None:\n             warnings.warn("
        },
        {
          "filename": "strawberry/flask/views.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -71,10 +71,12 @@ def __init__(\n         graphiql: Optional[bool] = None,\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n+        multipart_uploads_enabled: bool = False,\n     ) -> None:\n         self.schema = schema\n         self.graphiql = graphiql\n         self.allow_queries_via_get = allow_queries_via_get\n+        self.multipart_uploads_enabled = multipart_uploads_enabled\n \n         if graphiql is not None:\n             warnings.warn("
        },
        {
          "filename": "strawberry/http/async_base_view.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -333,7 +333,7 @@ async def parse_http_body(\n             data = self.parse_query_params(request.query_params)\n         elif \"application/json\" in content_type:\n             data = self.parse_json(await request.get_body())\n-        elif content_type == \"multipart/form-data\":\n+        elif self.multipart_uploads_enabled and content_type == \"multipart/form-data\":\n             data = await self.parse_multipart(request)\n         else:\n             raise HTTPException(400, \"Unsupported content type\")"
        },
        {
          "filename": "strawberry/http/base.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@ def headers(self) -> Mapping[str, str]: ...\n \n class BaseView(Generic[Request]):\n     graphql_ide: Optional[GraphQL_IDE]\n+    multipart_uploads_enabled: bool = False\n \n     # TODO: we might remove this in future :)\n     _ide_replace_variables: bool = True"
        },
        {
          "filename": "strawberry/http/sync_base_view.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -143,7 +143,7 @@ def parse_http_body(self, request: SyncHTTPRequestAdapter) -> GraphQLRequestData\n         elif \"application/json\" in content_type:\n             data = self.parse_json(request.body)\n         # TODO: multipart via get?\n-        elif content_type == \"multipart/form-data\":\n+        elif self.multipart_uploads_enabled and content_type == \"multipart/form-data\":\n             data = self.parse_multipart(request)\n         elif self._is_multipart_subscriptions(content_type, params):\n             raise HTTPException("
        },
        {
          "filename": "strawberry/litestar/controller.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -410,6 +410,7 @@ def make_graphql_controller(\n         GRAPHQL_WS_PROTOCOL,\n     ),\n     connection_init_wait_timeout: timedelta = timedelta(minutes=1),\n+    multipart_uploads_enabled: bool = False,\n ) -> Type[GraphQLController]:  # sourcery skip: move-assign\n     if context_getter is None:\n         custom_context_getter_ = _none_custom_context_getter\n@@ -456,6 +457,7 @@ class _GraphQLController(GraphQLController):\n     _GraphQLController.schema = schema_\n     _GraphQLController.allow_queries_via_get = allow_queries_via_get_\n     _GraphQLController.graphql_ide = graphql_ide_\n+    _GraphQLController.multipart_uploads_enabled = multipart_uploads_enabled\n \n     return _GraphQLController\n "
        },
        {
          "filename": "strawberry/quart/views.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -61,9 +61,11 @@ def __init__(\n         graphiql: Optional[bool] = None,\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n+        multipart_uploads_enabled: bool = False,\n     ) -> None:\n         self.schema = schema\n         self.allow_queries_via_get = allow_queries_via_get\n+        self.multipart_uploads_enabled = multipart_uploads_enabled\n \n         if graphiql is not None:\n             warnings.warn("
        },
        {
          "filename": "strawberry/sanic/views.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -102,11 +102,13 @@ def __init__(\n         allow_queries_via_get: bool = True,\n         json_encoder: Optional[Type[json.JSONEncoder]] = None,\n         json_dumps_params: Optional[Dict[str, Any]] = None,\n+        multipart_uploads_enabled: bool = False,\n     ) -> None:\n         self.schema = schema\n         self.allow_queries_via_get = allow_queries_via_get\n         self.json_encoder = json_encoder\n         self.json_dumps_params = json_dumps_params\n+        self.multipart_uploads_enabled = multipart_uploads_enabled\n \n         if self.json_encoder is not None:  # pragma: no cover\n             warnings.warn("
        },
        {
          "filename": "tests/http/clients/aiohttp.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -72,13 +72,15 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         view = GraphQLView(\n             schema=schema,\n             graphiql=graphiql,\n             graphql_ide=graphql_ide,\n             allow_queries_via_get=allow_queries_via_get,\n             keep_alive=False,\n+            multipart_uploads_enabled=multipart_uploads_enabled,\n         )\n         view.result_override = result_override\n "
        },
        {
          "filename": "tests/http/clients/asgi.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -74,13 +74,15 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         view = GraphQLView(\n             schema,\n             graphiql=graphiql,\n             graphql_ide=graphql_ide,\n             allow_queries_via_get=allow_queries_via_get,\n             keep_alive=False,\n+            multipart_uploads_enabled=multipart_uploads_enabled,\n         )\n         view.result_override = result_override\n "
        },
        {
          "filename": "tests/http/clients/async_django.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -43,6 +43,7 @@ async def _do_request(self, request: RequestFactory) -> Response:\n             graphql_ide=self.graphql_ide,\n             allow_queries_via_get=self.allow_queries_via_get,\n             result_override=self.result_override,\n+            multipart_uploads_enabled=self.multipart_uploads_enabled,\n         )\n \n         try:"
        },
        {
          "filename": "tests/http/clients/async_flask.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -52,6 +52,7 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         self.app = Flask(__name__)\n         self.app.debug = True\n@@ -63,6 +64,7 @@ def __init__(\n             graphql_ide=graphql_ide,\n             allow_queries_via_get=allow_queries_via_get,\n             result_override=result_override,\n+            multipart_uploads_enabled=multipart_uploads_enabled,\n         )\n \n         self.app.add_url_rule("
        },
        {
          "filename": "tests/http/clients/base.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -103,6 +103,7 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ): ...\n \n     @abc.abstractmethod"
        },
        {
          "filename": "tests/http/clients/chalice.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -50,6 +50,7 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         self.app = Chalice(app_name=\"TheStackBadger\")\n "
        },
        {
          "filename": "tests/http/clients/channels.py",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -139,6 +139,7 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         self.ws_app = DebuggableGraphQLTransportWSConsumer.as_asgi(\n             schema=schema,\n@@ -151,6 +152,7 @@ def __init__(\n             graphql_ide=graphql_ide,\n             allow_queries_via_get=allow_queries_via_get,\n             result_override=result_override,\n+            multipart_uploads_enabled=multipart_uploads_enabled,\n         )\n \n     def create_app(self, **kwargs: Any) -> None:\n@@ -260,13 +262,15 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         self.http_app = DebuggableSyncGraphQLHTTPConsumer.as_asgi(\n             schema=schema,\n             graphiql=graphiql,\n             graphql_ide=graphql_ide,\n             allow_queries_via_get=allow_queries_via_get,\n             result_override=result_override,\n+            multipart_uploads_enabled=multipart_uploads_enabled,\n         )\n \n "
        },
        {
          "filename": "tests/http/clients/django.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -48,11 +48,13 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         self.graphiql = graphiql\n         self.graphql_ide = graphql_ide\n         self.allow_queries_via_get = allow_queries_via_get\n         self.result_override = result_override\n+        self.multipart_uploads_enabled = multipart_uploads_enabled\n \n     def _get_header_name(self, key: str) -> str:\n         return f\"HTTP_{key.upper().replace('-', '_')}\"\n@@ -75,6 +77,7 @@ async def _do_request(self, request: RequestFactory) -> Response:\n             graphql_ide=self.graphql_ide,\n             allow_queries_via_get=self.allow_queries_via_get,\n             result_override=self.result_override,\n+            multipart_uploads_enabled=self.multipart_uploads_enabled,\n         )\n \n         try:"
        },
        {
          "filename": "tests/http/clients/fastapi.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -86,6 +86,7 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         self.app = FastAPI()\n \n@@ -97,6 +98,7 @@ def __init__(\n             root_value_getter=get_root_value,\n             allow_queries_via_get=allow_queries_via_get,\n             keep_alive=False,\n+            multipart_uploads_enabled=multipart_uploads_enabled,\n         )\n         graphql_app.result_override = result_override\n         self.app.include_router(graphql_app, prefix=\"/graphql\")"
        },
        {
          "filename": "tests/http/clients/flask.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -61,6 +61,7 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         self.app = Flask(__name__)\n         self.app.debug = True\n@@ -72,6 +73,7 @@ def __init__(\n             graphql_ide=graphql_ide,\n             allow_queries_via_get=allow_queries_via_get,\n             result_override=result_override,\n+            multipart_uploads_enabled=multipart_uploads_enabled,\n         )\n \n         self.app.add_url_rule("
        },
        {
          "filename": "tests/http/clients/litestar.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -59,12 +59,14 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         self.create_app(\n             graphiql=graphiql,\n             graphql_ide=graphql_ide,\n             allow_queries_via_get=allow_queries_via_get,\n             result_override=result_override,\n+            multipart_uploads_enabled=multipart_uploads_enabled,\n         )\n \n     def create_app(self, result_override: ResultOverrideFunction = None, **kwargs: Any):"
        },
        {
          "filename": "tests/http/clients/quart.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -54,6 +54,7 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         self.app = Quart(__name__)\n         self.app.debug = True\n@@ -65,6 +66,7 @@ def __init__(\n             graphql_ide=graphql_ide,\n             allow_queries_via_get=allow_queries_via_get,\n             result_override=result_override,\n+            multipart_uploads_enabled=multipart_uploads_enabled,\n         )\n \n         self.app.add_url_rule("
        },
        {
          "filename": "tests/http/clients/sanic.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -53,6 +53,7 @@ def __init__(\n         graphql_ide: Optional[GraphQL_IDE] = \"graphiql\",\n         allow_queries_via_get: bool = True,\n         result_override: ResultOverrideFunction = None,\n+        multipart_uploads_enabled: bool = False,\n     ):\n         self.app = Sanic(\n             f\"test_{int(randint(0, 1000))}\",  # noqa: S311\n@@ -63,6 +64,7 @@ def __init__(\n             graphql_ide=graphql_ide,\n             allow_queries_via_get=allow_queries_via_get,\n             result_override=result_override,\n+            multipart_uploads_enabled=multipart_uploads_enabled,\n         )\n         self.app.add_route(\n             view,"
        },
        {
          "filename": "tests/http/test_upload.py",
          "status": "modified",
          "additions": 47,
          "deletions": 17,
          "patch": "@@ -20,7 +20,18 @@ def http_client(http_client_class: Type[HttpClient]) -> HttpClient:\n     return http_client_class()\n \n \n-async def test_upload(http_client: HttpClient):\n+@pytest.fixture()\n+def enabled_http_client(http_client_class: Type[HttpClient]) -> HttpClient:\n+    with contextlib.suppress(ImportError):\n+        from .clients.chalice import ChaliceHttpClient\n+\n+        if http_client_class is ChaliceHttpClient:\n+            pytest.xfail(reason=\"Chalice does not support uploads\")\n+\n+    return http_client_class(multipart_uploads_enabled=True)\n+\n+\n+async def test_multipart_uploads_are_disabled_by_default(http_client: HttpClient):\n     f = BytesIO(b\"strawberry\")\n \n     query = \"\"\"\n@@ -35,16 +46,35 @@ async def test_upload(http_client: HttpClient):\n         files={\"textFile\": f},\n     )\n \n+    assert response.status_code == 400\n+    assert response.data == b\"Unsupported content type\"\n+\n+\n+async def test_upload(enabled_http_client: HttpClient):\n+    f = BytesIO(b\"strawberry\")\n+\n+    query = \"\"\"\n+    mutation($textFile: Upload!) {\n+        readText(textFile: $textFile)\n+    }\n+    \"\"\"\n+\n+    response = await enabled_http_client.query(\n+        query,\n+        variables={\"textFile\": None},\n+        files={\"textFile\": f},\n+    )\n+\n     assert response.json.get(\"errors\") is None\n     assert response.json[\"data\"] == {\"readText\": \"strawberry\"}\n \n \n-async def test_file_list_upload(http_client: HttpClient):\n+async def test_file_list_upload(enabled_http_client: HttpClient):\n     query = \"mutation($files: [Upload!]!) { readFiles(files: $files) }\"\n     file1 = BytesIO(b\"strawberry1\")\n     file2 = BytesIO(b\"strawberry2\")\n \n-    response = await http_client.query(\n+    response = await enabled_http_client.query(\n         query=query,\n         variables={\"files\": [None, None]},\n         files={\"file1\": file1, \"file2\": file2},\n@@ -57,12 +87,12 @@ async def test_file_list_upload(http_client: HttpClient):\n     assert data[\"readFiles\"][1] == \"strawberry2\"\n \n \n-async def test_nested_file_list(http_client: HttpClient):\n+async def test_nested_file_list(enabled_http_client: HttpClient):\n     query = \"mutation($folder: FolderInput!) { readFolder(folder: $folder) }\"\n     file1 = BytesIO(b\"strawberry1\")\n     file2 = BytesIO(b\"strawberry2\")\n \n-    response = await http_client.query(\n+    response = await enabled_http_client.query(\n         query=query,\n         variables={\"folder\": {\"files\": [None, None]}},\n         files={\"file1\": file1, \"file2\": file2},\n@@ -74,7 +104,7 @@ async def test_nested_file_list(http_client: HttpClient):\n     assert data[\"readFolder\"][1] == \"strawberry2\"\n \n \n-async def test_upload_single_and_list_file_together(http_client: HttpClient):\n+async def test_upload_single_and_list_file_together(enabled_http_client: HttpClient):\n     query = \"\"\"\n         mutation($files: [Upload!]!, $textFile: Upload!) {\n             readFiles(files: $files)\n@@ -85,7 +115,7 @@ async def test_upload_single_and_list_file_together(http_client: HttpClient):\n     file2 = BytesIO(b\"strawberry2\")\n     file3 = BytesIO(b\"strawberry3\")\n \n-    response = await http_client.query(\n+    response = await enabled_http_client.query(\n         query=query,\n         variables={\"files\": [None, None], \"textFile\": None},\n         files={\"file1\": file1, \"file2\": file2, \"textFile\": file3},\n@@ -98,15 +128,15 @@ async def test_upload_single_and_list_file_together(http_client: HttpClient):\n     assert data[\"readText\"] == \"strawberry3\"\n \n \n-async def test_upload_invalid_query(http_client: HttpClient):\n+async def test_upload_invalid_query(enabled_http_client: HttpClient):\n     f = BytesIO(b\"strawberry\")\n \n     query = \"\"\"\n     mutation($textFile: Upload!) {\n         readT\n     \"\"\"\n \n-    response = await http_client.query(\n+    response = await enabled_http_client.query(\n         query,\n         variables={\"textFile\": None},\n         files={\"textFile\": f},\n@@ -122,7 +152,7 @@ async def test_upload_invalid_query(http_client: HttpClient):\n     ]\n \n \n-async def test_upload_missing_file(http_client: HttpClient):\n+async def test_upload_missing_file(enabled_http_client: HttpClient):\n     f = BytesIO(b\"strawberry\")\n \n     query = \"\"\"\n@@ -131,7 +161,7 @@ async def test_upload_missing_file(http_client: HttpClient):\n     }\n     \"\"\"\n \n-    response = await http_client.query(\n+    response = await enabled_http_client.query(\n         query,\n         variables={\"textFile\": None},\n         # using the wrong name to simulate a missing file\n@@ -155,7 +185,7 @@ def value(self) -> bytes:\n         return self.buffer.getvalue()\n \n \n-async def test_extra_form_data_fields_are_ignored(http_client: HttpClient):\n+async def test_extra_form_data_fields_are_ignored(enabled_http_client: HttpClient):\n     query = \"\"\"mutation($textFile: Upload!) {\n         readText(textFile: $textFile)\n     }\"\"\"\n@@ -175,7 +205,7 @@ async def test_extra_form_data_fields_are_ignored(http_client: HttpClient):\n \n     data, header = encode_multipart_formdata(fields)\n \n-    response = await http_client.post(\n+    response = await enabled_http_client.post(\n         url=\"/graphql\",\n         data=data,\n         headers={\n@@ -188,9 +218,9 @@ async def test_extra_form_data_fields_are_ignored(http_client: HttpClient):\n     assert response.json[\"data\"] == {\"readText\": \"strawberry\"}\n \n \n-async def test_sending_invalid_form_data(http_client: HttpClient):\n+async def test_sending_invalid_form_data(enabled_http_client: HttpClient):\n     headers = {\"content-type\": \"multipart/form-data; boundary=----fake\"}\n-    response = await http_client.post(\"/graphql\", headers=headers)\n+    response = await enabled_http_client.post(\"/graphql\", headers=headers)\n \n     assert response.status_code == 400\n     # TODO: consolidate this, it seems only AIOHTTP returns the second error\n@@ -202,7 +232,7 @@ async def test_sending_invalid_form_data(http_client: HttpClient):\n \n \n @pytest.mark.aiohttp\n-async def test_sending_invalid_json_body(http_client: HttpClient):\n+async def test_sending_invalid_json_body(enabled_http_client: HttpClient):\n     f = BytesIO(b\"strawberry\")\n     operations = \"}\"\n     file_map = json.dumps({\"textFile\": [\"variables.textFile\"]})\n@@ -215,7 +245,7 @@ async def test_sending_invalid_json_body(http_client: HttpClient):\n \n     data, header = encode_multipart_formdata(fields)\n \n-    response = await http_client.post(\n+    response = await enabled_http_client.post(\n         \"/graphql\",\n         data=data,\n         headers={"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 17,
        "unique_directories": 17,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fa5c2d076ae8eea75dba83059bc1b9b41acecbb1",
            "date": "2025-01-12T10:05:35Z",
            "author_login": "botberry"
          },
          {
            "sha": "ef2787430fd0683e42fd316aff79eaa49163de9d",
            "date": "2025-01-12T10:04:04Z",
            "author_login": "bellini666"
          },
          {
            "sha": "1e0e1efe4b103f933fccc81961ec65db490d0058",
            "date": "2025-01-09T18:30:53Z",
            "author_login": "botberry"
          },
          {
            "sha": "526eb82b70451c0e59d5a71ae9b7396f59974bd8",
            "date": "2025-01-09T18:29:13Z",
            "author_login": "bellini666"
          },
          {
            "sha": "fc854f1d944a2ec31ca1df2cddef475073a2c61d",
            "date": "2025-01-08T18:17:05Z",
            "author_login": "pre-commit-ci[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:L",
    "cwe_id": "CWE-352",
    "description": "Strawberry GraphQL is a library for creating GraphQL APIs. Prior to version 0.243.0, multipart file upload support as defined in the GraphQL multipart request specification was enabled by default in all Strawberry HTTP view integrations. This made all Strawberry HTTP view integrations vulnerable to cross-site request forgery (CSRF) attacks if users did not explicitly enable CSRF preventing security mechanism for their servers. Additionally, the Django HTTP view integration, in particular, had an exemption for Django's built-in CSRF protection (i.e., the `CsrfViewMiddleware` middleware) by default. In affect, all Strawberry integrations were vulnerable to CSRF attacks by default. Version `v0.243.0` is the first `strawberry-graphql` including a patch.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-09-25T18:15:05.417",
    "last_modified": "2024-10-01T20:01:13.367",
    "fix_date": "2024-09-25T16:08:23Z"
  },
  "references": [
    {
      "url": "https://github.com/strawberry-graphql/strawberry/commit/37265b230e511480a9ceace492f9f6a484be1387",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/strawberry-graphql/strawberry/security/advisories/GHSA-79gp-q4wv-33fr",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://strawberry.rocks/docs/breaking-changes/0.243.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:00.154799",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "strawberry",
    "owner": "strawberry-graphql",
    "created_at": "2018-12-21T08:56:55Z",
    "updated_at": "2025-01-14T12:24:18Z",
    "pushed_at": "2025-01-14T18:45:37Z",
    "size": 14048,
    "stars": 4100,
    "forks": 541,
    "open_issues": 475,
    "watchers": 4100,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 2288173,
      "HTML": 6777,
      "TypeScript": 6577,
      "Dockerfile": 523,
      "Shell": 50
    },
    "commit_activity": {
      "total_commits_last_year": 313,
      "avg_commits_per_week": 6.019230769230769,
      "days_active_last_year": 114
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:20:46.606426"
  }
}