{
  "cve_id": "CVE-2024-47172",
  "github_data": {
    "repository": "cvat-ai/cvat",
    "fix_commit": "59ce6ca784a0d426b2cfb8cf2850ba1d520c03f5",
    "related_commits": [
      "59ce6ca784a0d426b2cfb8cf2850ba1d520c03f5"
    ],
    "patch_url": "https://github.com/cvat-ai/cvat/commit/59ce6ca784a0d426b2cfb8cf2850ba1d520c03f5.patch",
    "fix_commit_details": {
      "sha": "59ce6ca784a0d426b2cfb8cf2850ba1d520c03f5",
      "commit_date": "2024-09-26T06:11:47Z",
      "author": {
        "login": "Marishka17",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 194,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 125,
        "additions": 99,
        "deletions": 26
      },
      "files": [
        {
          "filename": "changelog.d/20240920_124259_maria_fix_patch_security_issue.md",
          "status": "added",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -0,0 +1,4 @@\n+### Security\n+\n+- Fixed a security issue that occurred in PATCH requests to projects|tasks|jobs|memberships\n+  (<https://github.com/cvat-ai/cvat/security/advisories/GHSA-gxhm-hg65-5gh2>)"
        },
        {
          "filename": "cvat/apps/engine/permissions.py",
          "status": "modified",
          "additions": 17,
          "deletions": 13,
          "patch": "@@ -210,6 +210,7 @@ class Scopes(StrEnum):\n         UPDATE_ASSIGNEE = 'update:assignee'\n         UPDATE_DESC = 'update:desc'\n         UPDATE_ORG = 'update:organization'\n+        UPDATE_ASSOCIATED_STORAGE = 'update:associated_storage'\n         VIEW = 'view'\n         IMPORT_DATASET = 'import:dataset'\n         EXPORT_ANNOTATIONS = 'export:annotations'\n@@ -285,6 +286,9 @@ def get_scopes(request, view, obj):\n \n         scopes = []\n         if scope == Scopes.UPDATE:\n+            # user should have permissions to view a project\n+            scopes.append(Scopes.VIEW)\n+\n             if any(k in request.data for k in ('owner_id', 'owner')):\n                 owner_id = request.data.get('owner_id') or request.data.get('owner')\n                 if owner_id != getattr(obj.owner, 'id', None):\n@@ -299,6 +303,9 @@ def get_scopes(request, view, obj):\n                     break\n             if 'organization' in request.data:\n                 scopes.append(Scopes.UPDATE_ORG)\n+\n+            if {'source_storage', 'target_storage'} & request.data.keys():\n+                scopes.append(Scopes.UPDATE_ASSOCIATED_STORAGE)\n         else:\n             scopes.append(scope)\n \n@@ -376,6 +383,7 @@ class Scopes(StrEnum):\n         UPDATE_ASSIGNEE = 'update:assignee'\n         UPDATE_PROJECT = 'update:project'\n         UPDATE_OWNER = 'update:owner'\n+        UPDATE_ASSOCIATED_STORAGE = 'update:associated_storage'\n         DELETE = 'delete'\n         VIEW_ANNOTATIONS = 'view:annotations'\n         UPDATE_ANNOTATIONS = 'update:annotations'\n@@ -509,6 +517,8 @@ def get_scopes(request, view, obj) -> List[Scopes]:\n             scopes.append(scope)\n \n         elif scope == Scopes.UPDATE:\n+            # user should have permissions to view a task\n+            scopes.append(Scopes.VIEW)\n             if any(k in request.data for k in ('owner_id', 'owner')):\n                 owner_id = request.data.get('owner_id') or request.data.get('owner')\n                 if owner_id != getattr(obj.owner, 'id', None):\n@@ -530,6 +540,9 @@ def get_scopes(request, view, obj) -> List[Scopes]:\n             if request.data.get('organization'):\n                 scopes.append(Scopes.UPDATE_ORGANIZATION)\n \n+            if {'source_storage', 'target_storage'} & request.data.keys():\n+                scopes.append(Scopes.UPDATE_ASSOCIATED_STORAGE)\n+\n         elif scope == Scopes.VIEW_ANNOTATIONS:\n             if 'format' in request.query_params:\n                 scope = Scopes.EXPORT_ANNOTATIONS\n@@ -614,11 +627,8 @@ class Scopes(StrEnum):\n         VIEW = 'view'\n         UPDATE = 'update'\n         UPDATE_ASSIGNEE = 'update:assignee'\n-        UPDATE_OWNER = 'update:owner'\n-        UPDATE_PROJECT = 'update:project'\n         UPDATE_STAGE = 'update:stage'\n         UPDATE_STATE = 'update:state'\n-        UPDATE_DESC = 'update:desc'\n         DELETE = 'delete'\n         VIEW_ANNOTATIONS = 'view:annotations'\n         UPDATE_ANNOTATIONS = 'update:annotations'\n@@ -728,25 +738,19 @@ def get_scopes(request, view, obj):\n \n         scopes = []\n         if scope == Scopes.UPDATE:\n-            if any(k in request.data for k in ('owner_id', 'owner')):\n-                owner_id = request.data.get('owner_id') or request.data.get('owner')\n-                if owner_id != getattr(obj.owner, 'id', None):\n-                    scopes.append(Scopes.UPDATE_OWNER)\n+            # user should have permissions to view a job\n+            scopes.append(Scopes.VIEW)\n+\n             if any(k in request.data for k in ('assignee_id', 'assignee')):\n                 assignee_id = request.data.get('assignee_id') or request.data.get('assignee')\n                 if assignee_id != getattr(obj.assignee, 'id', None):\n                     scopes.append(Scopes.UPDATE_ASSIGNEE)\n-            if any(k in request.data for k in ('project_id', 'project')):\n-                project_id = request.data.get('project_id') or request.data.get('project')\n-                if project_id != getattr(obj.project, 'id', None):\n-                    scopes.append(Scopes.UPDATE_PROJECT)\n+\n             if 'stage' in request.data:\n                 scopes.append(Scopes.UPDATE_STAGE)\n             if 'state' in request.data:\n                 scopes.append(Scopes.UPDATE_STATE)\n \n-            if any(k in request.data for k in ('name', 'labels', 'bug_tracker', 'subset')):\n-                scopes.append(Scopes.UPDATE_DESC)\n         elif scope == Scopes.VIEW_ANNOTATIONS:\n             if 'format' in request.query_params:\n                 scope = Scopes.EXPORT_ANNOTATIONS"
        },
        {
          "filename": "cvat/apps/engine/rules/projects.rego",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -7,7 +7,7 @@ import data.organizations\n \n # input: {\n #     \"scope\": <\"create\"|\"list\"|\"update:desc\"|\"update:owner\"|\"update:assignee\"|\n-#               \"view\"|\"delete\"|\"export:dataset\"|\"export:annotations\"|\n+#               \"update:associated_storage\"|\"view\"|\"delete\"|\"export:dataset\"|\"export:annotations\"|\n #               \"import:dataset\"> or null,\n #     \"auth\": {\n #         \"user\": {\n@@ -127,22 +127,22 @@ allow if {\n \n \n allow if {\n-    input.scope in {utils.DELETE, utils.UPDATE_ORG}\n+    input.scope in {utils.DELETE, utils.UPDATE_ORG, utils.UPDATE_ASSOCIATED_STORAGE}\n     utils.is_sandbox\n     utils.has_perm(utils.WORKER)\n     utils.is_resource_owner\n }\n \n allow if {\n-    input.scope in {utils.DELETE, utils.UPDATE_ORG}\n+    input.scope in {utils.DELETE, utils.UPDATE_ORG, utils.UPDATE_ASSOCIATED_STORAGE}\n     input.auth.organization.id == input.resource.organization.id\n     utils.has_perm(utils.WORKER)\n     organizations.is_member\n     utils.is_resource_owner\n }\n \n allow if {\n-    input.scope in {utils.DELETE, utils.UPDATE_ORG}\n+    input.scope in {utils.DELETE, utils.UPDATE_ORG, utils.UPDATE_ASSOCIATED_STORAGE}\n     input.auth.organization.id == input.resource.organization.id\n     utils.has_perm(utils.USER)\n     organizations.is_staff"
        },
        {
          "filename": "cvat/apps/engine/rules/tasks.rego",
          "status": "modified",
          "additions": 19,
          "deletions": 5,
          "patch": "@@ -7,8 +7,8 @@ import data.organizations\n \n # input: {\n #     \"scope\": <\"create\"|\"create@project\"|\"view\"|\"list\"|\"update:desc\"|\n-#         \"update:owner\"|\"update:assignee\"|\"update:project\"|\"delete\"|\n-#         \"view:annotations\"|\"update:annotations\"|\"delete:annotations\"|\n+#         \"update:owner\"|\"update:assignee\"|\"update:project\"|\"update:associated_storage\"|\n+#         \"delete\"|\"view:annotations\"|\"update:annotations\"|\"delete:annotations\"|\n #         \"export:dataset\"|\"view:data\"|\"upload:data\"|\"export:annotations\"> or null,\n #     \"auth\": {\n #         \"user\": {\n@@ -250,10 +250,17 @@ allow if {\n     utils.has_perm(utils.WORKER)\n }\n \n+allow if {\n+    input.scope == utils.UPDATE_ASSOCIATED_STORAGE\n+    utils.is_sandbox\n+    is_project_owner\n+    utils.has_perm(utils.WORKER)\n+}\n+\n allow if {\n     input.scope in {\n         utils.UPDATE_OWNER, utils.UPDATE_ASSIGNEE, utils.UPDATE_PROJECT,\n-        utils.DELETE, utils.UPDATE_ORG\n+        utils.DELETE, utils.UPDATE_ORG, utils.UPDATE_ASSOCIATED_STORAGE\n     }\n     utils.is_sandbox\n     is_task_owner\n@@ -263,7 +270,7 @@ allow if {\n allow if {\n     input.scope in {\n         utils.UPDATE_OWNER, utils.UPDATE_ASSIGNEE, utils.UPDATE_PROJECT,\n-        utils.DELETE, utils.UPDATE_ORG\n+        utils.DELETE, utils.UPDATE_ORG, utils.UPDATE_ASSOCIATED_STORAGE\n     }\n     input.auth.organization.id == input.resource.organization.id\n     utils.has_perm(utils.USER)\n@@ -273,13 +280,20 @@ allow if {\n allow if {\n     input.scope in {\n         utils.UPDATE_OWNER, utils.UPDATE_ASSIGNEE, utils.UPDATE_PROJECT,\n-        utils.DELETE, utils.UPDATE_ORG\n+        utils.DELETE, utils.UPDATE_ORG, utils.UPDATE_ASSOCIATED_STORAGE\n     }\n     input.auth.organization.id == input.resource.organization.id\n     utils.has_perm(utils.WORKER)\n     organizations.has_perm(organizations.WORKER)\n     is_task_owner\n }\n+allow if {\n+    input.scope == utils.UPDATE_ASSOCIATED_STORAGE\n+    input.auth.organization.id == input.resource.organization.id\n+    utils.has_perm(utils.WORKER)\n+    organizations.has_perm(organizations.WORKER)\n+    is_project_owner\n+}\n \n allow if {\n     input.scope in {"
        },
        {
          "filename": "cvat/apps/engine/rules/tests/configs/projects.csv",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -43,4 +43,9 @@ export:backup,Project,Organization,None,,GET,/projects/{id}/backup,User,Maintain\n update:organization,\"Project, Organization\",Sandbox,\"None, Assignee\",,PATCH,/projects/{id},Admin,N/A\n update:organization,\"Project, Organization\",Sandbox,Owner,,PATCH,/projects/{id},Worker,N/A\n update:organization,\"Project, Organization\",Organization,\"None, Assignee\",,PATCH,/projects/{id},User,Maintainer\n-update:organization,\"Project, Organization\",Organization,Owner,,PATCH,/projects/{id},Worker,Worker\n\\ No newline at end of file\n+update:organization,\"Project, Organization\",Organization,Owner,,PATCH,/projects/{id},Worker,Worker\n+update:associated_storage,Project,Sandbox,None,,PATCH,/projects/{id},Admin,N/A\n+update:associated_storage,Project,Sandbox,Owner,,PATCH,/projects/{id},Worker,N/A\n+update:associated_storage,Project,Organization,None,,PATCH,/projects/{id},Admin,N/A\n+update:associated_storage,Project,Organization,\"None, Assignee\",,PATCH,/projects/{id},User,Maintainer\n+update:associated_storage,Project,Organization,Owner,,PATCH,/projects/{id},Worker,Worker"
        },
        {
          "filename": "cvat/apps/engine/rules/tests/configs/tasks.csv",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -29,6 +29,11 @@ update:project,\"Task, Project\",Sandbox,\"None, Assignee\",,PATCH,/tasks/{id},Admin\n update:project,\"Task, Project\",Sandbox,\"Owner, Project:owner, Project:assignee\",,PATCH,/tasks/{id},Worker,N/A\n update:project,\"Task, Project\",Organization,\"None, Assignee\",,PATCH,/tasks/{id},User,Maintainer\n update:project,\"Task, Project\",Organization,\"Owner, Project:owner, Project:assignee\",,PATCH,/tasks/{id},Worker,Worker\n+update:associated_storage,Task,Sandbox,None,,PATCH,/tasks/{id},Admin,N/A\n+update:associated_storage,Task,Sandbox,\"Owner, Project:owner\",,PATCH,/tasks/{id},Worker,N/A\n+update:associated_storage,Task,Organization,None,,PATCH,/tasks/{id},Admin,N/A\n+update:associated_storage,Task,Organization,\"None, Assignee, Project:assignee\",,PATCH,/tasks/{id},User,Maintainer\n+update:associated_storage,Task,Organization,\"Owner, Project:owner\",,PATCH,/tasks/{id},Worker,Worker\n delete,Task,Sandbox,\"None, Assignee\",,DELETE,/tasks/{id},Admin,N/A\n delete,Task,Sandbox,\"Owner, Project:owner, Project:assignee\",,DELETE,/tasks/{id},Worker,N/A\n delete,Task,Organization,\"None, Assignee\",,DELETE,/tasks/{id},User,Maintainer"
        },
        {
          "filename": "cvat/apps/iam/rules/utils.rego",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -36,6 +36,7 @@ RESEND := \"resend\"\n UPDATE_DESC := \"update:desc\"\n UPDATE_ASSIGNEE := \"update:assignee\"\n UPDATE_OWNER := \"update:owner\"\n+UPDATE_ASSOCIATED_STORAGE := \"update:associated_storage\"\n EXPORT_ANNOTATIONS := \"export:annotations\"\n EXPORT_DATASET := \"export:dataset\"\n CREATE_IN_PROJECT := \"create@project\""
        },
        {
          "filename": "cvat/apps/organizations/permissions.py",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -3,8 +3,6 @@\n #\n # SPDX-License-Identifier: MIT\n \n-from typing import cast\n-\n from django.conf import settings\n \n from cvat.apps.iam.permissions import OpenPolicyAgentPermission, StrEnum\n@@ -175,7 +173,10 @@ def get_scopes(request, view, obj):\n         }[view.action]\n \n         if scope == Scopes.UPDATE:\n-            if request.data.get('role') != cast(Membership, obj).role:\n+            # user should have permissions to view a membership\n+            scopes.append(Scopes.VIEW)\n+\n+            if 'role' in request.data.keys():\n                 scopes.append(Scopes.UPDATE_ROLE)\n         else:\n             scopes.append(scope)"
        },
        {
          "filename": "tests/python/rest_api/test_jobs.py",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -18,6 +18,7 @@\n import pytest\n from cvat_sdk import models\n from cvat_sdk.api_client.api_client import ApiClient, Endpoint\n+from cvat_sdk.api_client.exceptions import ForbiddenException\n from cvat_sdk.core.helpers import get_paginated_collection\n from deepdiff import DeepDiff\n from PIL import Image\n@@ -1275,6 +1276,15 @@ def test_can_update_assignee_updated_date_on_assignee_updates(\n             else:\n                 assert updated_job.assignee is None\n \n+    def test_malefactor_cannot_obtain_job_details_via_empty_partial_update_request(\n+        self, regular_lonely_user, jobs\n+    ):\n+        job = next(iter(jobs))\n+\n+        with make_api_client(regular_lonely_user) as api_client:\n+            with pytest.raises(ForbiddenException):\n+                api_client.jobs_api.partial_update(job[\"id\"])\n+\n \n def _check_coco_job_annotations(content, values_to_be_checked):\n     exported_annotations = json.loads(content)"
        },
        {
          "filename": "tests/python/rest_api/test_memberships.py",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -8,6 +8,7 @@\n \n import pytest\n from cvat_sdk.api_client.api_client import ApiClient, Endpoint\n+from cvat_sdk.api_client.exceptions import ForbiddenException\n from deepdiff import DeepDiff\n \n from shared.utils.config import get_method, make_api_client, patch_method\n@@ -137,6 +138,15 @@ def test_user_cannot_change_self_role(self, who: str, find_users):\n             user[\"username\"], user[\"membership_id\"], self.ROLES[abs(self.ROLES.index(who) - 1)]\n         )\n \n+    def test_malefactor_cannot_obtain_membership_details_via_empty_partial_update_request(\n+        self, regular_lonely_user, memberships\n+    ):\n+        membership = next(iter(memberships))\n+\n+        with make_api_client(regular_lonely_user) as api_client:\n+            with pytest.raises(ForbiddenException):\n+                api_client.memberships_api.partial_update(membership[\"id\"])\n+\n \n @pytest.mark.usefixtures(\"restore_db_per_function\")\n class TestDeleteMemberships:"
        },
        {
          "filename": "tests/python/rest_api/test_projects.py",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -1398,3 +1398,12 @@ def test_can_update_assignee_updated_date_on_assignee_updates(\n                 assert updated_project.assignee.id == new_assignee_id\n             else:\n                 assert updated_project.assignee is None\n+\n+    def test_malefactor_cannot_obtain_project_details_via_empty_partial_update_request(\n+        self, regular_lonely_user, projects\n+    ):\n+        project = next(iter(projects))\n+\n+        with make_api_client(regular_lonely_user) as api_client:\n+            with pytest.raises(ForbiddenException):\n+                api_client.projects_api.partial_update(project[\"id\"])"
        },
        {
          "filename": "tests/python/rest_api/test_tasks.py",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -24,6 +24,7 @@\n from cvat_sdk import Client, Config, exceptions\n from cvat_sdk.api_client import models\n from cvat_sdk.api_client.api_client import ApiClient, ApiException, Endpoint\n+from cvat_sdk.api_client.exceptions import ForbiddenException\n from cvat_sdk.core.helpers import get_paginated_collection\n from cvat_sdk.core.progress import NullProgressReporter\n from cvat_sdk.core.proxies.tasks import ResourceType, Task\n@@ -2778,6 +2779,15 @@ def test_user_cannot_update_task_with_cloud_storage_without_access(\n             )\n         assert response.status == HTTPStatus.FORBIDDEN\n \n+    def test_malefactor_cannot_obtain_task_details_via_empty_partial_update_request(\n+        self, regular_lonely_user, tasks\n+    ):\n+        task = next(iter(tasks))\n+\n+        with make_api_client(regular_lonely_user) as api_client:\n+            with pytest.raises(ForbiddenException):\n+                api_client.tasks_api.partial_update(task[\"id\"])\n+\n     @pytest.mark.parametrize(\"has_old_assignee\", [False, True])\n     @pytest.mark.parametrize(\"new_assignee\", [None, \"same\", \"different\"])\n     def test_can_update_assignee_updated_date_on_assignee_updates("
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 6,
        "unique_directories": 7,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e276295dec449ad965e34808e4bad9ce5ba249d9",
            "date": "2025-01-14T16:47:01Z",
            "author_login": "Marishka17"
          },
          {
            "sha": "a7018633fff9468c2e1823d41c02f3f37053023f",
            "date": "2025-01-14T16:12:08Z",
            "author_login": "SpecLad"
          },
          {
            "sha": "b63f68a88647963b3be460f14c196e901ea1c13e",
            "date": "2025-01-14T13:32:05Z",
            "author_login": "Eldies"
          },
          {
            "sha": "13fd5a7c590dfac1bf7b0e5c3ec291940ebc6380",
            "date": "2025-01-13T18:23:02Z",
            "author_login": "klakhov"
          },
          {
            "sha": "42bc3452bb6b77008f49d306efd8d32cfa2b5b2a",
            "date": "2025-01-13T15:55:58Z",
            "author_login": "SpecLad"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-863",
    "description": "Computer Vision Annotation Tool (CVAT) is an interactive video and image annotation tool for computer vision. An attacker with a CVAT account may retrieve certain information about any project, task, job or membership resource on the CVAT instance. The information exposed in this way is the same as the information returned on a GET request to the resource. In addition, the attacker can also alter the default source and target storage associated with any project or task. Upgrade to CVAT 2.19.1 or any later version to fix the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-09-30T15:15:06.523",
    "last_modified": "2024-10-30T18:20:58.270",
    "fix_date": "2024-09-26T06:11:47Z"
  },
  "references": [
    {
      "url": "https://github.com/cvat-ai/cvat/commit/59ce6ca784a0d426b2cfb8cf2850ba1d520c03f5",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cvat-ai/cvat/security/advisories/GHSA-gxhm-hg65-5gh2",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.096397",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cvat",
    "owner": "cvat-ai",
    "created_at": "2018-06-29T14:02:45Z",
    "updated_at": "2025-01-14T13:32:13Z",
    "pushed_at": "2025-01-14T15:11:25Z",
    "size": 328727,
    "stars": 12953,
    "forks": 3081,
    "open_issues": 570,
    "watchers": 12953,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "hotfix-2.4.1",
      "hotfix-2.4.7"
    ],
    "languages": {
      "Python": 3863013,
      "TypeScript": 3665803,
      "JavaScript": 1195931,
      "Mustache": 205368,
      "SCSS": 144217,
      "Open Policy Agent": 75701,
      "HTML": 39212,
      "Dockerfile": 11104,
      "Shell": 8504,
      "Smarty": 4858,
      "Jinja": 138
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:26:05.726176"
  }
}