{
  "cve_id": "CVE-2024-47610",
  "github_data": {
    "repository": "inventree/InvenTree",
    "fix_commit": "6e37f0cd8ba5fc527412f18f66cd6a37015fa690",
    "related_commits": [
      "6e37f0cd8ba5fc527412f18f66cd6a37015fa690"
    ],
    "patch_url": "https://github.com/inventree/InvenTree/commit/6e37f0cd8ba5fc527412f18f66cd6a37015fa690.patch",
    "fix_commit_details": {
      "sha": "6e37f0cd8ba5fc527412f18f66cd6a37015fa690",
      "commit_date": "2024-10-07T09:03:39Z",
      "author": {
        "login": "SchrodingersGat",
        "type": "User",
        "stats": {
          "total_commits": 11996,
          "average_weekly_commits": 29.330073349633253,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 301
        }
      },
      "commit_message": {
        "title": "Markdown xss backport (#8244)",
        "length": 469,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 98,
        "additions": 94,
        "deletions": 4
      },
      "files": [
        {
          "filename": "src/backend/InvenTree/InvenTree/helpers.py",
          "status": "modified",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -810,6 +810,40 @@ def remove_non_printable_characters(\n     return cleaned\n \n \n+def clean_markdown(value: str):\n+    \"\"\"Clean a markdown string.\n+\n+    This function will remove javascript and other potentially harmful content from the markdown string.\n+    \"\"\"\n+    import markdown\n+    from markdownify.templatetags.markdownify import markdownify\n+\n+    try:\n+        markdownify_settings = settings.MARKDOWNIFY['default']\n+    except (AttributeError, KeyError):\n+        markdownify_settings = {}\n+\n+    extensions = markdownify_settings.get('MARKDOWN_EXTENSIONS', [])\n+    extension_configs = markdownify_settings.get('MARKDOWN_EXTENSION_CONFIGS', {})\n+\n+    # Generate raw HTML from provided markdown (without sanitizing)\n+    # Note: The 'html' output_format is required to generate self closing tags, e.g. <tag> instead of <tag />\n+    html = markdown.markdown(\n+        value or '',\n+        extensions=extensions,\n+        extension_configs=extension_configs,\n+        output_format='html',\n+    )\n+\n+    # Clean the HTML content (for comparison). Ideally, this should be the same as the original content\n+    clean_html = markdownify(value)\n+\n+    if html != clean_html:\n+        raise ValidationError(_('Data contains prohibited markdown content'))\n+\n+    return value\n+\n+\n def hash_barcode(barcode_data):\n     \"\"\"Calculate a 'unique' hash for a barcode string.\n "
        },
        {
          "filename": "src/backend/InvenTree/InvenTree/mixins.py",
          "status": "modified",
          "additions": 12,
          "deletions": 3,
          "patch": "@@ -6,7 +6,11 @@\n from rest_framework.response import Response\n \n from InvenTree.fields import InvenTreeNotesField\n-from InvenTree.helpers import remove_non_printable_characters, strip_html_tags\n+from InvenTree.helpers import (\n+    clean_markdown,\n+    remove_non_printable_characters,\n+    strip_html_tags,\n+)\n \n \n class CleanMixin:\n@@ -57,18 +61,20 @@ def clean_string(self, field: str, data: str) -> str:\n \n         # By default, newline characters are removed\n         remove_newline = True\n+        is_markdown = False\n \n         try:\n             if hasattr(self, 'serializer_class'):\n                 model = self.serializer_class.Meta.model\n                 field = model._meta.get_field(field)\n \n                 # The following field types allow newline characters\n-                allow_newline = [InvenTreeNotesField]\n+                allow_newline = [(InvenTreeNotesField, True)]\n \n                 for field_type in allow_newline:\n-                    if issubclass(type(field), field_type):\n+                    if issubclass(type(field), field_type[0]):\n                         remove_newline = False\n+                        is_markdown = field_type[1]\n                         break\n \n         except AttributeError:\n@@ -80,6 +86,9 @@ def clean_string(self, field: str, data: str) -> str:\n             cleaned, remove_newline=remove_newline\n         )\n \n+        if is_markdown:\n+            cleaned = clean_markdown(cleaned)\n+\n         return cleaned\n \n     def clean_data(self, data: dict) -> dict:"
        },
        {
          "filename": "src/backend/InvenTree/InvenTree/settings.py",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -1231,23 +1231,29 @@\n             'abbr',\n             'b',\n             'blockquote',\n+            'code',\n             'em',\n             'h1',\n             'h2',\n             'h3',\n+            'h4',\n+            'h5',\n+            'hr',\n             'i',\n             'img',\n             'li',\n             'ol',\n             'p',\n+            'pre',\n+            's',\n             'strong',\n-            'ul',\n             'table',\n             'thead',\n             'tbody',\n             'th',\n             'tr',\n             'td',\n+            'ul',\n         ],\n     }\n }"
        },
        {
          "filename": "src/backend/InvenTree/company/test_api.py",
          "status": "modified",
          "additions": 41,
          "deletions": 0,
          "patch": "@@ -156,6 +156,47 @@ def test_company_active(self):\n             len(self.get(url, data={'active': False}, expected_code=200).data), 1\n         )\n \n+    def test_company_notes(self):\n+        \"\"\"Test the markdown 'notes' field for the Company model.\"\"\"\n+        pk = Company.objects.first().pk\n+\n+        # Attempt to inject malicious markdown into the \"notes\" field\n+        xss = [\n+            '[Click me](javascript:alert(123))',\n+            '![x](javascript:alert(123))',\n+            '![Uh oh...](\"onerror=\"alert(\\'XSS\\'))',\n+        ]\n+\n+        for note in xss:\n+            response = self.patch(\n+                reverse('api-company-detail', kwargs={'pk': pk}),\n+                {'notes': note},\n+                expected_code=400,\n+            )\n+\n+            self.assertIn(\n+                'Data contains prohibited markdown content', str(response.data)\n+            )\n+\n+        # The following markdown is safe, and should be accepted\n+        good = [\n+            'This is a **bold** statement',\n+            'This is a *italic* statement',\n+            'This is a [link](https://www.google.com)',\n+            'This is an ![image](https://www.google.com/test.jpg)',\n+            'This is a `code` block',\n+            'This text has ~~strikethrough~~ formatting',\n+        ]\n+\n+        for note in good:\n+            response = self.patch(\n+                reverse('api-company-detail', kwargs={'pk': pk}),\n+                {'notes': note},\n+                expected_code=200,\n+            )\n+\n+            self.assertEqual(response.data['notes'], note)\n+\n \n class ContactTest(InvenTreeAPITestCase):\n     \"\"\"Tests for the Contact models.\"\"\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "412bba50babdf20ac4008e1896f5e7a438ef8505",
            "date": "2025-01-14T02:42:03Z",
            "author_login": "SchrodingersGat"
          },
          {
            "sha": "46f6450ee156b0c14e5d14d3772a83f084f41e2b",
            "date": "2025-01-13T23:38:48Z",
            "author_login": "SchrodingersGat"
          },
          {
            "sha": "ea1b2e3079dc0545fcd9ade15d1636c396398580",
            "date": "2025-01-13T20:05:21Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "dd5aa5f4e43c8890526328fe3f09b54c17ae154f",
            "date": "2025-01-13T03:31:03Z",
            "author_login": "SchrodingersGat"
          },
          {
            "sha": "b06b762895d976cdb634f7ddfa6b0411248601cf",
            "date": "2025-01-12T03:58:52Z",
            "author_login": "SchrodingersGat"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-79",
    "description": "InvenTree is an Open Source Inventory Management System. In affected versions of InvenTree it is possible for a registered user to store javascript in markdown notes fields, which are then displayed to other logged in users who visit the same page and executed. The vulnerability has been addressed as follows: 1. HTML sanitization has been enabled in the front-end markdown rendering library - `easymde`. 2. Stored markdown is also validated on the backend, to ensure that malicious markdown is not stored in the database. These changes are available in release versions 0.16.5 and later. All users are advised to upgrade. There are no workarounds, an update is required to get the new validation functions.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-07T21:15:18.163",
    "last_modified": "2024-10-10T12:57:21.987",
    "fix_date": "2024-10-07T09:03:39Z"
  },
  "references": [
    {
      "url": "https://github.com/inventree/InvenTree/commit/6e37f0cd8ba5fc527412f18f66cd6a37015fa690",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/inventree/InvenTree/security/advisories/GHSA-wp3m-jhgv-rhqr",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.118379",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "InvenTree",
    "owner": "inventree",
    "created_at": "2017-03-23T01:44:10Z",
    "updated_at": "2025-01-14T11:58:48Z",
    "pushed_at": "2025-01-14T02:46:44Z",
    "size": 196475,
    "stars": 4595,
    "forks": 822,
    "open_issues": 228,
    "watchers": 4595,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 4038541,
      "TypeScript": 1595359,
      "HTML": 51404,
      "Shell": 37446,
      "CSS": 17146,
      "Dockerfile": 6143,
      "JavaScript": 5474,
      "Procfile": 426
    },
    "commit_activity": {
      "total_commits_last_year": 1500,
      "avg_commits_per_week": 28.846153846153847,
      "days_active_last_year": 308
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T21:41:07.648816"
  }
}