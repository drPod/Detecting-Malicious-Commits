{
  "cve_id": "CVE-2024-47617",
  "github_data": {
    "repository": "sulu/sulu",
    "fix_commit": "a5a5ae555d282e88ff8559d38cfb46dea7939bda",
    "related_commits": [
      "a5a5ae555d282e88ff8559d38cfb46dea7939bda",
      "eeacd14b6cf55f710084788140d40ebb00314b29"
    ],
    "patch_url": "https://github.com/sulu/sulu/commit/a5a5ae555d282e88ff8559d38cfb46dea7939bda.patch",
    "fix_commit_details": {
      "sha": "a5a5ae555d282e88ff8559d38cfb46dea7939bda",
      "commit_date": "2024-07-22T11:28:46Z",
      "author": {
        "login": "alexander-schranz",
        "type": "User",
        "stats": {
          "total_commits": 1822,
          "average_weekly_commits": 3.031613976705491,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 342
        }
      },
      "commit_message": {
        "title": "Add forcing direct matching for media download urls (#7535)",
        "length": 59,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 53,
        "additions": 34,
        "deletions": 19
      },
      "files": [
        {
          "filename": "src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -81,10 +81,11 @@ public function getImageAction(Request $request)\n \n     /**\n      * @param int $id\n+     * @param string $slug\n      *\n      * @return Response\n      */\n-    public function downloadAction(Request $request, $id)\n+    public function downloadAction(Request $request, $id, $slug)\n     {\n         try {\n             if (\\ob_get_length()) {\n@@ -98,7 +99,11 @@ public function downloadAction(Request $request, $id)\n             $fileVersion = $this->getFileVersion($id, $version);\n \n             if (!$fileVersion) {\n-                return new Response(null, 404);\n+                return new Response('Invalid version \"' . $version . '\" for media with ID \"' . $id . '\".', 404);\n+            }\n+\n+            if ($fileVersion->getName() !== $slug) {\n+                return new Response('Invalid file name \"' . $slug . '\" for media with ID \"' . $id . '\".', 404);\n             }\n \n             if ($this->securityChecker) {"
        },
        {
          "filename": "src/Sulu/Bundle/MediaBundle/Tests/Functional/Controller/MediaControllerTest.php",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -381,7 +381,7 @@ protected function setUpCollection(): void\n      */\n     public function test404ResponseHeader(): void\n     {\n-        $this->client->jsonRequest(\n+        $this->client->request(\n             'GET',\n             '/uploads/media/50x50/1/0-photo.jpg'\n         );\n@@ -399,9 +399,9 @@ public function testDownloadHeaderAttachment(): void\n         $media = $this->createMedia('photo');\n \n         \\ob_start();\n-        $this->client->jsonRequest(\n+        $this->client->request(\n             'GET',\n-            '/media/' . $media->getId() . '/download/photo.jpg'\n+            '/media/' . $media->getId() . '/download/photo.jpeg'\n         );\n         \\ob_end_clean();\n         $this->assertEquals(\n@@ -418,9 +418,9 @@ public function testDownloadHeaderInline(): void\n         $media = $this->createMedia('photo');\n \n         \\ob_start();\n-        $this->client->jsonRequest(\n+        $this->client->request(\n             'GET',\n-            '/media/' . $media->getId() . '/download/photo.jpg?inline=1'\n+            '/media/' . $media->getId() . '/download/photo.jpeg?inline=1'\n         );\n         \\ob_end_clean();\n         $this->assertEquals(\n@@ -437,7 +437,7 @@ public function testDownloadHeaderUmlauts(): void\n         $media = $this->createMedia('w\u00f6chentlich');\n \n         \\ob_start();\n-        $this->client->jsonRequest(\n+        $this->client->request(\n             'GET',\n             '/media/' . $media->getId() . '/download/w\u00f6chentlich.jpeg?inline=1'\n         );"
        },
        {
          "filename": "src/Sulu/Bundle/MediaBundle/Tests/Functional/Controller/MediaStreamControllerTest.php",
          "status": "modified",
          "additions": 21,
          "deletions": 11,
          "patch": "@@ -43,17 +43,27 @@ public function testDownloadAction(): void\n         $filePath = $this->createMediaFile('test.jpg');\n         $media = $this->createMedia($filePath, 'file-without-extension');\n \n-        $this->client->jsonRequest('GET', $media->getUrl());\n+        $this->client->request('GET', $media->getUrl());\n         $response = $this->client->getResponse();\n         $this->assertHttpStatusCode(200, $response);\n     }\n \n+    public function testDownloadActionNotMatchingFileName(): void\n+    {\n+        $filePath = $this->createMediaFile('test.jpg');\n+        $media = $this->createMedia($filePath, 'test.jpg');\n+\n+        $this->client->request('GET', \\str_replace('test.jpg', 'other.jpg', $media->getUrl()));\n+        $response = $this->client->getResponse();\n+        $this->assertHttpStatusCode(404, $response);\n+    }\n+\n     public function testNotExistVersionDownloadAction(): void\n     {\n         $filePath = $this->createMediaFile('test.jpg');\n         $media = $this->createMedia($filePath, 'file-without-extension');\n \n-        $this->client->jsonRequest('GET', \\str_replace('v=1', 'v=99', $media->getUrl()));\n+        $this->client->request('GET', \\str_replace('v=1', 'v=99', $media->getUrl()));\n         $response = $this->client->getResponse();\n         $this->assertHttpStatusCode(404, $response);\n     }\n@@ -92,7 +102,7 @@ public function testDownloadWithoutExtensionAction(): void\n         $filePath = $this->createMediaFile('file-without-extension');\n         $media = $this->createMedia($filePath, 'File without Extension');\n \n-        $this->client->jsonRequest('GET', $media->getUrl());\n+        $this->client->request('GET', $media->getUrl());\n         $response = $this->client->getResponse();\n         $this->assertHttpStatusCode(200, $response);\n     }\n@@ -102,7 +112,7 @@ public function testDownloadWithDotInName(): void\n         $filePath = $this->createMediaFile('fitness-seasons.agency--C-&-C--Rodach,-Johannes');\n         $media = $this->createMedia($filePath, 'fitness-seasons.agency--C-&-C--Rodach,-Johannes');\n \n-        $this->client->jsonRequest('GET', $media->getUrl());\n+        $this->client->request('GET', $media->getUrl());\n         $response = $this->client->getResponse();\n         $this->assertHttpStatusCode(200, $response);\n \n@@ -118,7 +128,7 @@ public function testDownloadWithDotInName(): void\n \n     public function testGetImageActionForNonExistingMedia(): void\n     {\n-        $this->client->jsonRequest('GET', '/uploads/media/sulu-400x400/01/test.jpg?v=1');\n+        $this->client->request('GET', '/uploads/media/sulu-400x400/01/test.jpg?v=1');\n \n         $this->assertHttpStatusCode(404, $this->client->getResponse());\n     }\n@@ -128,11 +138,11 @@ public function testGetImageAction(): void\n         $filePath = $this->createMediaFile('test.jpg');\n         $media = $this->createMedia($filePath, 'Test jpg');\n \n-        $this->client->jsonRequest('GET', $media->getFormats()['small-inset']);\n+        $this->client->request('GET', $media->getFormats()['small-inset']);\n         $this->assertHttpStatusCode(200, $this->client->getResponse());\n         $this->assertSame('image/jpeg', $this->client->getResponse()->headers->get('Content-Type'));\n \n-        $this->client->jsonRequest('GET', $media->getFormats()['small-inset.gif']);\n+        $this->client->request('GET', $media->getFormats()['small-inset.gif']);\n         $this->assertHttpStatusCode(200, $this->client->getResponse());\n         $this->assertSame('image/gif', $this->client->getResponse()->headers->get('Content-Type'));\n     }\n@@ -142,11 +152,11 @@ public function testGetImageActionSvg(): void\n         $filePath = $this->createMediaFile('test.svg', 'sulu.svg');\n         $media = $this->createMedia($filePath, 'Test svg');\n \n-        $this->client->jsonRequest('GET', $media->getFormats()['small-inset']);\n+        $this->client->request('GET', $media->getFormats()['small-inset']);\n         $this->assertHttpStatusCode(200, $this->client->getResponse());\n         $this->assertSame('image/svg+xml', $this->client->getResponse()->headers->get('Content-Type'));\n \n-        $this->client->jsonRequest('GET', $media->getFormats()['small-inset.svg']);\n+        $this->client->request('GET', $media->getFormats()['small-inset.svg']);\n         $this->assertHttpStatusCode(200, $this->client->getResponse());\n         $this->assertSame('image/svg+xml', $this->client->getResponse()->headers->get('Content-Type'));\n     }\n@@ -162,14 +172,14 @@ public function testGetImageActionSvgAsJpg(): void\n         $filePath = $this->createMediaFile('test.svg', 'sulu.svg');\n         $media = $this->createMedia($filePath, 'Test svg');\n \n-        $this->client->jsonRequest('GET', $media->getFormats()['small-inset.jpg']);\n+        $this->client->request('GET', $media->getFormats()['small-inset.jpg']);\n         $this->assertHttpStatusCode(200, $this->client->getResponse());\n         $this->assertSame('image/jpeg', $this->client->getResponse()->headers->get('Content-Type'));\n     }\n \n     public function testDownloadActionForNonExistingMedia(): void\n     {\n-        $this->client->jsonRequest('GET', '/media/999/download/test.jpg?v=1');\n+        $this->client->request('GET', '/media/999/download/test.jpg?v=1');\n \n         $this->assertHttpStatusCode(404, $this->client->getResponse());\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eeb3cc463463fb110008352d9e0f550e355fdf36",
            "date": "2025-01-14T13:14:47Z",
            "author_login": "alexander-schranz"
          },
          {
            "sha": "6c9f9d63a3a2a0950ef0702dad33abab73d122c4",
            "date": "2025-01-14T13:14:32Z",
            "author_login": "Prokyonn"
          },
          {
            "sha": "8d5b3255a243b6b8a9cb8b3abb1f7f337a5ff18f",
            "date": "2025-01-09T14:15:55Z",
            "author_login": "mamazu"
          },
          {
            "sha": "04d33c30f978bec25dc380acb436ed0cef826e7b",
            "date": "2025-01-09T12:49:04Z",
            "author_login": "eekes"
          },
          {
            "sha": "e5cfa4d76104dabca227db25390b7b4aedd855e8",
            "date": "2025-01-08T11:08:58Z",
            "author_login": "alexander-schranz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Sulu is a PHP content management system. This vulnerability allows an attacker to inject arbitrary HTML/JavaScript code through the media download URL in Sulu CMS. It affects the SuluMediaBundle component. The vulnerability is a Reflected Cross-Site Scripting (XSS) issue, which could potentially allow attackers to steal sensitive information, manipulate the website's content, or perform actions on behalf of the victim. This vulnerability is fixed in 2.6.5 and 2.5.21.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-03T15:15:14.937",
    "last_modified": "2024-10-08T14:23:38.597",
    "fix_date": "2024-07-22T11:28:46Z"
  },
  "references": [
    {
      "url": "https://github.com/sulu/sulu/commit/a5a5ae555d282e88ff8559d38cfb46dea7939bda",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/sulu/sulu/commit/eeacd14b6cf55f710084788140d40ebb00314b29",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/sulu/sulu/security/advisories/GHSA-6784-9c82-vr85",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.105791",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sulu",
    "owner": "sulu",
    "created_at": "2013-10-18T12:57:02Z",
    "updated_at": "2025-01-14T13:14:57Z",
    "pushed_at": "2025-01-14T13:15:09Z",
    "size": 147491,
    "stars": 1189,
    "forks": 340,
    "open_issues": 545,
    "watchers": 1189,
    "has_security_policy": false,
    "default_branch": "2.6",
    "protected_branches": [
      "1.6",
      "2.5",
      "2.6",
      "3.0"
    ],
    "languages": {
      "PHP": 11214954,
      "JavaScript": 4770785,
      "SCSS": 163694,
      "Twig": 47211,
      "CSS": 9960,
      "VCL": 4428,
      "Shell": 158
    },
    "commit_activity": {
      "total_commits_last_year": 404,
      "avg_commits_per_week": 7.769230769230769,
      "days_active_last_year": 108
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:47:29.807566"
  }
}