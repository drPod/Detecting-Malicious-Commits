{
  "cve_id": "CVE-2024-47762",
  "github_data": {
    "repository": "backstage/backstage",
    "fix_commit": "323e6129073c5cb4cc106a1239eaec31a129554f",
    "related_commits": [
      "323e6129073c5cb4cc106a1239eaec31a129554f"
    ],
    "patch_url": "https://github.com/backstage/backstage/commit/323e6129073c5cb4cc106a1239eaec31a129554f.patch",
    "fix_commit_details": {
      "sha": "323e6129073c5cb4cc106a1239eaec31a129554f",
      "commit_date": "2024-10-03T14:32:09Z",
      "author": {
        "login": "Rugvip",
        "type": "User",
        "stats": {
          "total_commits": 12935,
          "average_weekly_commits": 49.75,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 248
        }
      },
      "commit_message": {
        "title": "Merge pull request #26950 from backstage/fix-app-config-env-variable",
        "length": 117,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 114,
        "additions": 108,
        "deletions": 6
      },
      "files": [
        {
          "filename": ".changeset/friendly-coins-approve.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+'@backstage/plugin-app-backend': patch\n+---\n+\n+Fixed unexpected behaviour where configuration supplied with `APP_CONFIG_*` environment variables where not filtered by the configuration schema."
        },
        {
          "filename": "plugins/app-backend/src/lib/config/readFrontendConfig.test.ts",
          "status": "added",
          "additions": 99,
          "deletions": 0,
          "patch": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2024 The Backstage Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import { createMockDirectory } from '@backstage/backend-test-utils';\n+import { readFrontendConfig } from './readFrontendConfig';\n+import { ConfigReader } from '@backstage/config';\n+\n+describe('readFrontendConfig', () => {\n+  const mockDir = createMockDirectory();\n+\n+  afterEach(() => {\n+    mockDir.clear();\n+  });\n+\n+  it('should validate env config', async () => {\n+    mockDir.setContent({\n+      'appDir/.config-schema.json': JSON.stringify({\n+        schemas: [\n+          {\n+            value: {\n+              type: 'object',\n+\n+              properties: {\n+                app: {\n+                  type: 'object',\n+                  properties: {\n+                    secretOfLife: {\n+                      type: 'string',\n+                      visibility: 'secret',\n+                    },\n+                    backendConfig: {\n+                      type: 'string',\n+                      visibility: 'backend',\n+                    },\n+                    publicValue: {\n+                      type: 'string',\n+                      visibility: 'frontend',\n+                    },\n+                  },\n+                },\n+              },\n+            },\n+          },\n+        ],\n+        backstageConfigSchemaVersion: 1,\n+      }),\n+    });\n+\n+    const config = new ConfigReader({\n+      app: {\n+        secretOfLife: '42',\n+        backendConfig: 'backend',\n+        publicValue: 'public',\n+      },\n+    });\n+\n+    const frontendConfig = await readFrontendConfig({\n+      env: {\n+        APP_CONFIG_app_secretOfLife: 'ignored',\n+        APP_CONFIG_app_backendConfig: 'ignored',\n+        APP_CONFIG_app_publicValue: 'injected',\n+      },\n+      appDistDir: `${mockDir.path}/appDir`,\n+      config,\n+    });\n+\n+    expect(frontendConfig).toEqual([\n+      {\n+        context: 'env',\n+        data: {\n+          app: {\n+            publicValue: 'injected',\n+          },\n+        },\n+        deprecatedKeys: [],\n+        filteredKeys: undefined,\n+      },\n+      {\n+        context: 'app',\n+        data: { app: { publicValue: 'public' } },\n+        deprecatedKeys: [],\n+        filteredKeys: undefined,\n+      },\n+    ]);\n+  });\n+});"
        },
        {
          "filename": "plugins/app-backend/src/lib/config/readFrontendConfig.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 6,
          "patch": "@@ -36,10 +36,9 @@ export async function readFrontendConfig(options: {\n }): Promise<AppConfig[]> {\n   const { env, appDistDir, config } = options;\n \n-  const appConfigs = readEnvConfig(env);\n-\n   const schemaPath = resolvePath(appDistDir, '.config-schema.json');\n   if (await fs.pathExists(schemaPath)) {\n+    const envConfigs = readEnvConfig(env);\n     const serializedSchema = await fs.readJson(schemaPath);\n \n     try {\n@@ -49,11 +48,10 @@ export async function readFrontendConfig(options: {\n           serialized: serializedSchema,\n         }));\n \n-      const frontendConfigs = await schema.process(\n-        [{ data: config.get() as JsonObject, context: 'app' }],\n+      return await schema.process(\n+        [...envConfigs, { data: config.get() as JsonObject, context: 'app' }],\n         { visibility: ['frontend'], withDeprecatedKeys: true },\n       );\n-      appConfigs.push(...frontendConfigs);\n     } catch (error) {\n       throw new Error(\n         'Invalid app bundle schema. If this error is unexpected you need to run `yarn build` in the app. ' +\n@@ -63,5 +61,5 @@ export async function readFrontendConfig(options: {\n     }\n   }\n \n-  return appConfigs;\n+  return [];\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3b80fcff4c3f1ce7e57b3ff28728c95876713377",
            "date": "2025-01-14T14:59:33Z",
            "author_login": "alexlorenzi"
          },
          {
            "sha": "10d45f446f2b6feec06f94c45aca4ec3a9cc1ddf",
            "date": "2025-01-14T14:38:04Z",
            "author_login": "Rugvip"
          },
          {
            "sha": "f0faf9606ab91357c5c5b93cbe0e9e430224c71d",
            "date": "2025-01-14T13:26:18Z",
            "author_login": "Rugvip"
          },
          {
            "sha": "d49dcceea0dc7c7724b24a39129aa81946924bac",
            "date": "2025-01-14T13:23:56Z",
            "author_login": "Rugvip"
          },
          {
            "sha": "afdfa4662c138be06e82487ef004dd14ee580055",
            "date": "2025-01-14T13:12:10Z",
            "author_login": "Rugvip"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-440",
    "description": "Backstage is an open framework for building developer portals. Configuration supplied through APP_CONFIG_* environment variables, for example APP_CONFIG_backend_listen_port=7007, where unexpectedly ignoring the visibility defined in configuration schema. This occurred even if the configuration schema specified that they should have backend or secret visibility. This was an intended feature of the APP_CONFIG_* way of supplying configuration, but now clearly goes against the expected behavior of the configuration system. This behavior leads to a risk of potentially exposing sensitive configuration details intended to remain private or restricted to backend processes. The issue has been resolved in version 0.3.75 of the @backstage/plugin-app-backend package. As a temporary measure, avoid supplying secrets using the APP_CONFIG_ configuration pattern. Consider alternative methods for setting secrets, such as the environment substitution available for Backstage configuration.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-03T18:15:05.287",
    "last_modified": "2024-10-04T13:50:43.727",
    "fix_date": "2024-10-03T14:32:09Z"
  },
  "references": [
    {
      "url": "https://github.com/backstage/backstage/commit/323e6129073c5cb4cc106a1239eaec31a129554f",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/backstage/backstage/security/advisories/GHSA-qc4v-xq2m-65wc",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.106732",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "backstage",
    "owner": "backstage",
    "created_at": "2020-01-24T22:39:49Z",
    "updated_at": "2025-01-14T13:31:26Z",
    "pushed_at": "2025-01-14T13:31:36Z",
    "size": 10047272,
    "stars": 29010,
    "forks": 6175,
    "open_issues": 474,
    "watchers": 29010,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "TypeScript": 19535758,
      "MDX": 476489,
      "JavaScript": 394933,
      "CSS": 289673,
      "Handlebars": 44288,
      "Mustache": 22733,
      "SCSS": 11090,
      "Dockerfile": 10872,
      "HTML": 10780,
      "Shell": 5657,
      "Makefile": 5185,
      "HCL": 1581,
      "PowerShell": 698
    },
    "commit_activity": {
      "total_commits_last_year": 13511,
      "avg_commits_per_week": 259.8269230769231,
      "days_active_last_year": 353
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:37:54.205572"
  }
}