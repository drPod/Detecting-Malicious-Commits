{
  "cve_id": "CVE-2024-47764",
  "github_data": {
    "repository": "jshttp/cookie",
    "fix_commit": "e10042845354fea83bd8f34af72475eed1dadf5c",
    "related_commits": [
      "e10042845354fea83bd8f34af72475eed1dadf5c"
    ],
    "patch_url": "https://github.com/jshttp/cookie/commit/e10042845354fea83bd8f34af72475eed1dadf5c.patch",
    "fix_commit_details": {
      "sha": "e10042845354fea83bd8f34af72475eed1dadf5c",
      "commit_date": "2024-10-01T22:56:55Z",
      "author": {
        "login": "bewinsnw",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: narrow the validation of cookies to match RFC6265 (#167)",
        "length": 61,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 68,
        "additions": 59,
        "deletions": 9
      },
      "files": [
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 55,
          "deletions": 9,
          "patch": "@@ -23,14 +23,60 @@ exports.serialize = serialize;\n var __toString = Object.prototype.toString\n \n /**\n- * RegExp to match field-content in RFC 7230 sec 3.2\n+ * RegExp to match cookie-name in RFC 6265 sec 4.1.1\n+ * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2\n+ * which has been replaced by the token definition in RFC 7230 appendix B.\n  *\n- * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n- * field-vchar   = VCHAR / obs-text\n- * obs-text      = %x80-FF\n+ * cookie-name       = token\n+ * token             = 1*tchar\n+ * tchar             = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" /\n+ *                     \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" /\n+ *                     \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n  */\n \n-var fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n+var cookieNameRegExp = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\n+\n+/**\n+ * RegExp to match cookie-value in RFC 6265 sec 4.1.1\n+ *\n+ * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n+ * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n+ *                     ; US-ASCII characters excluding CTLs,\n+ *                     ; whitespace DQUOTE, comma, semicolon,\n+ *                     ; and backslash\n+ */\n+\n+var cookieValueRegExp = /^(\"?)[\\u0021\\u0023-\\u002B\\u002D-\\u003A\\u003C-\\u005B\\u005D-\\u007E]*\\1$/;\n+\n+/**\n+ * RegExp to match domain-value in RFC 6265 sec 4.1.1\n+ *\n+ * domain-value      = <subdomain>\n+ *                     ; defined in [RFC1034], Section 3.5, as\n+ *                     ; enhanced by [RFC1123], Section 2.1\n+ * <subdomain>       = <label> | <subdomain> \".\" <label>\n+ * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]\n+ *                     Labels must be 63 characters or less.\n+ *                     'let-dig' not 'letter' in the first char, per RFC1123\n+ * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n+ * <let-dig-hyp>     = <let-dig> | \"-\"\n+ * <let-dig>         = <letter> | <digit>\n+ * <letter>          = any one of the 52 alphabetic characters A through Z in\n+ *                     upper case and a through z in lower case\n+ * <digit>           = any one of the ten digits 0 through 9\n+ */\n+\n+var domainValueRegExp = /^([a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;\n+\n+/**\n+ * RegExp to match path-value in RFC 6265 sec 4.1.1\n+ *\n+ * path-value        = <any CHAR except CTLs or \";\">\n+ * CHAR              = %x01-7F\n+ *                     ; defined in RFC 5234 appendix B.1\n+ */\n+\n+var pathValueRegExp = /^[\\u0020-\\u003A\\u003D-\\u007E]*$/;\n \n /**\n  * Parse a cookie header.\n@@ -116,13 +162,13 @@ function serialize(name, val, options) {\n     throw new TypeError('option encode is invalid');\n   }\n \n-  if (!fieldContentRegExp.test(name)) {\n+  if (!cookieNameRegExp.test(name)) {\n     throw new TypeError('argument name is invalid');\n   }\n \n   var value = enc(val);\n \n-  if (value && !fieldContentRegExp.test(value)) {\n+  if (value && !cookieValueRegExp.test(value)) {\n     throw new TypeError('argument val is invalid');\n   }\n \n@@ -139,15 +185,15 @@ function serialize(name, val, options) {\n   }\n \n   if (opt.domain) {\n-    if (!fieldContentRegExp.test(opt.domain)) {\n+    if (!domainValueRegExp.test(opt.domain)) {\n       throw new TypeError('option domain is invalid');\n     }\n \n     str += '; Domain=' + opt.domain;\n   }\n \n   if (opt.path) {\n-    if (!fieldContentRegExp.test(opt.path)) {\n+    if (!pathValueRegExp.test(opt.path)) {\n       throw new TypeError('option path is invalid');\n     }\n "
        },
        {
          "filename": "test/serialize.js",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -20,6 +20,7 @@ describe('cookie.serialize(name, value)', function () {\n   it('should throw for invalid name', function () {\n     assert.throws(cookie.serialize.bind(cookie, 'foo\\n', 'bar'), /argument name is invalid/)\n     assert.throws(cookie.serialize.bind(cookie, 'foo\\u280a', 'bar'), /argument name is invalid/)\n+    assert.throws(cookie.serialize.bind(cookie, 'foo bar', 'bar'), /argument name is invalid/)\n   })\n })\n \n@@ -52,6 +53,9 @@ describe('cookie.serialize(name, value, options)', function () {\n       assert.throws(cookie.serialize.bind(cookie, 'foo', '+ \\n', {\n         encode: function (v) { return v }\n       }), /argument val is invalid/)\n+      assert.throws(cookie.serialize.bind(cookie, 'foo', 'foo bar', {\n+        encode: function (v) { return v }\n+      }), /argument val is invalid/)\n     })\n   })\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e739f419e56442b754e4fea6dbcf98c1c8d00dda",
            "date": "2024-11-20T17:39:29Z",
            "author_login": "blakeembrey"
          },
          {
            "sha": "8be4b82b64c642e3569ff0787057d349d97877c7",
            "date": "2024-11-20T17:21:03Z",
            "author_login": "blakeembrey"
          },
          {
            "sha": "94ba436184889b203d422e348e541ec337580a8e",
            "date": "2024-11-15T20:12:24Z",
            "author_login": "blakeembrey"
          },
          {
            "sha": "4898ba23a59cb7196df35b58dedfe9a11b68fb91",
            "date": "2024-11-15T19:51:17Z",
            "author_login": "jonchurch"
          },
          {
            "sha": "408c2b40c6c5783fcfae619d30e8427e9c96a2db",
            "date": "2024-10-18T16:33:20Z",
            "author_login": "isnifer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-74",
    "description": "cookie is a basic HTTP cookie parser and serializer for HTTP servers. The cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. A similar escape can be used for path and domain, which could be abused to alter other fields of the cookie. Upgrade to 0.7.0, which updates the validation for name, path, and domain.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-10-04T20:15:07.310",
    "last_modified": "2024-10-07T17:48:28.117",
    "fix_date": "2024-10-01T22:56:55Z"
  },
  "references": [
    {
      "url": "https://github.com/jshttp/cookie/commit/e10042845354fea83bd8f34af72475eed1dadf5c",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/jshttp/cookie/pull/167",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/jshttp/cookie/security/advisories/GHSA-pxg6-pf52-xh8x",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.109699",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cookie",
    "owner": "jshttp",
    "created_at": "2012-05-28T23:47:31Z",
    "updated_at": "2025-01-13T10:20:20Z",
    "pushed_at": "2024-11-20T19:02:52Z",
    "size": 294,
    "stars": 1377,
    "forks": 161,
    "open_issues": 9,
    "watchers": 1377,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "TypeScript": 26824,
      "JavaScript": 2428
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T22:15:54.770805"
  }
}