{
  "cve_id": "CVE-2024-47765",
  "github_data": {
    "repository": "jgniecki/MinecraftMotdParser",
    "fix_commit": "b0ab9d68a964cd3d74977f39a9e7af0a94509f7c",
    "related_commits": [
      "b0ab9d68a964cd3d74977f39a9e7af0a94509f7c"
    ],
    "patch_url": "https://github.com/jgniecki/MinecraftMotdParser/commit/b0ab9d68a964cd3d74977f39a9e7af0a94509f7c.patch",
    "fix_commit_details": {
      "sha": "b0ab9d68a964cd3d74977f39a9e7af0a94509f7c",
      "commit_date": "2024-10-03T23:34:57Z",
      "author": {
        "login": "jgniecki",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 64,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 74,
        "additions": 71,
        "deletions": 3
      },
      "files": [
        {
          "filename": "src/Generator/HtmlGenerator.php",
          "status": "modified",
          "additions": 12,
          "deletions": 2,
          "patch": "@@ -46,7 +46,12 @@ public function generate(MotdItemCollection $collection): string\n \n             if ($motdItem->getColor()) {\n                 if (str_contains($motdItem->getColor(), '#')) {\n-                    $tags['span'][] = sprintf('color: %s;', $motdItem->getColor());\n+                    // Only allow valid hex color codes (without alpha channel), such as #FFF and #000000.\n+                    if(!preg_match('/^#(([0-9A-Fa-f]{2}){3}|[0-9A-Fa-f]{3})$/i', $motdItem->getColor())) {\n+                        continue;\n+                    }\n+\n+                    $tags['span'][] = sprintf('color: %s;', $this->escape($motdItem->getColor()));\n                 } else {\n                     $color = $this->colorCollection->get($motdItem->getColor());\n                     if (!$color) {\n@@ -77,7 +82,7 @@ public function generate(MotdItemCollection $collection): string\n             foreach ($tags as $tag => $styles) {\n                 $value = sprintf('<%s style=\"%s\">%s</%s>', $tag, implode(' ', $styles), $value, $tag);\n             }\n-            $value = sprintf($value, $motdItem->getText());\n+            $value = sprintf($value, $this->escape($motdItem->getText()));\n             $result .= $value;\n         }\n \n@@ -88,4 +93,9 @@ public function setFormatNewLine(string $format): void\n     {\n         $this->formatNewLine = $format;\n     }\n+\n+    private function escape(string $text): string\n+    {\n+        return htmlentities($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');\n+    }\n }"
        },
        {
          "filename": "tests/Generator/HtmlGeneratorTest.php",
          "status": "modified",
          "additions": 59,
          "deletions": 1,
          "patch": "@@ -275,4 +275,62 @@ public function testGenerateWithEmptyCollection()\n \n         $this->assertEquals('', $result);\n     }\n-}\n\\ No newline at end of file\n+\n+    public function testFilterInvalidHexColor()\n+    {\n+        $collection = new MotdItemCollection();\n+\n+        $item1 = new MotdItem();\n+        $item1->setText('Hello');\n+        $item1->setColor('#FF555');\n+        $collection->add($item1);\n+\n+        $item2 = new MotdItem();\n+        $item2->setText(\"\\n\");\n+        $collection->add($item2);\n+\n+        $item3 = new MotdItem();\n+        $item3->setText('Beautiful');\n+        $item3->setColor('#800080');\n+        $collection->add($item3);\n+\n+        $item4 = new MotdItem();\n+        $item4->setText(\"\\n\");\n+        $collection->add($item4);\n+\n+        $item5 = new MotdItem();\n+        $item5->setText('World');\n+        $item5->setColor('#42');\n+        $collection->add($item5);\n+\n+        $item6 = new MotdItem();\n+        $item6->setText('!');\n+        $item6->setColor('#42a');\n+        $collection->add($item6);\n+\n+        $generator = new HtmlGenerator();\n+        $result = $generator->generate($collection);\n+\n+        $this->assertEquals('<br /><span style=\"color: &num;800080;\">Beautiful</span><br /><span style=\"color: &num;42a;\">&excl;</span>', $result);\n+    }\n+\n+    public function testEscapeInput()\n+    {\n+        $collection = new MotdItemCollection();\n+\n+        $item1 = new MotdItem();\n+        $item1->setText('Hover me');\n+        $item1->setColor('#000000\" onmouseover=\"javascript:alert(\\'XSS when mouse pointer enters the span element\\')\"');\n+        $collection->add($item1);\n+\n+        $item2 = new MotdItem();\n+        $item2->setText('<script>alert(\"XSS on page load\")</script>');\n+        $item2->setColor('#800080');\n+        $collection->add($item2);\n+\n+        $generator = new HtmlGenerator();\n+        $result = $generator->generate($collection);\n+\n+        $this->assertEquals('<span style=\"color: &num;800080;\">&lt;script&gt;alert&lpar;&quot;XSS on page load&quot;&rpar;&lt;&sol;script&gt;</span>', $result);\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0e5d4f7eac5fa3e2710623771851c6e80542426b",
            "date": "2024-10-13T21:56:01Z",
            "author_login": "jgniecki"
          },
          {
            "sha": "97e448019f1c93452805f1e6b203f46e788cc30f",
            "date": "2024-10-13T21:55:18Z",
            "author_login": "jgniecki"
          },
          {
            "sha": "8620cf709dc7ff8e6a74a54957d64523f41d8384",
            "date": "2024-10-13T21:52:39Z",
            "author_login": "jgniecki"
          },
          {
            "sha": "351aad7cbe038a36fee4928d4503dbb4dd37235a",
            "date": "2024-10-13T21:50:11Z",
            "author_login": "jgniecki"
          },
          {
            "sha": "3f537608b38c3bdbfb0673ad14dce94c1901c54a",
            "date": "2024-10-13T21:10:44Z",
            "author_login": "jgniecki"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Minecraft MOTD Parser is a PHP library to parse minecraft server motd. The HtmlGenerator class is subject to potential cross-site scripting (XSS) attack through a parsed malformed Minecraft server MOTD. The HtmlGenerator iterates through objects of MotdItem that are contained in an object of MotdItemCollection to generate a HTML string. An attacker can make malicious inputs to the color and text properties of MotdItem to inject own HTML into a web page during web page generation. For example by sending a malicious MOTD from a Minecraft server under their control that was queried and passed to the HtmlGenerator. This XSS vulnerability exists because the values of these properties are neither filtered nor escaped. This vulnerability is fixed in 1.0.6.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-04T15:15:13.213",
    "last_modified": "2024-11-13T14:48:37.050",
    "fix_date": "2024-10-03T23:34:57Z"
  },
  "references": [
    {
      "url": "https://github.com/jgniecki/MinecraftMotdParser/commit/b0ab9d68a964cd3d74977f39a9e7af0a94509f7c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jgniecki/MinecraftMotdParser/security/advisories/GHSA-q898-frwq-f3qp",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.108496",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "MinecraftMotdParser",
    "owner": "jgniecki",
    "created_at": "2024-02-01T08:44:07Z",
    "updated_at": "2024-11-27T03:25:52Z",
    "pushed_at": "2024-10-13T21:56:01Z",
    "size": 93,
    "stars": 2,
    "forks": 0,
    "open_issues": 0,
    "watchers": 2,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "PHP": 73384
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T18:27:58.045656"
  }
}