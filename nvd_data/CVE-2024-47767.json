{
  "cve_id": "CVE-2024-47767",
  "github_data": {
    "repository": "Enalean/tuleap",
    "fix_commit": "16d9efccb2fad8e10343be2604e94c9058ef2c89",
    "related_commits": [
      "16d9efccb2fad8e10343be2604e94c9058ef2c89",
      "e5ce81279766115dc0f126a11d6b5065b5db7eec",
      "f89d7093d2c576ad5e2b35a6a096fcdaf563d1df"
    ],
    "patch_url": "https://github.com/Enalean/tuleap/commit/16d9efccb2fad8e10343be2604e94c9058ef2c89.patch",
    "fix_commit_details": {
      "sha": "16d9efccb2fad8e10343be2604e94c9058ef2c89",
      "commit_date": "2024-10-01T14:11:38Z",
      "author": {
        "login": "nterray",
        "type": "User",
        "stats": {
          "total_commits": 16550,
          "average_weekly_commits": 16.067961165048544,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 804
        }
      },
      "commit_message": {
        "title": "fix: request #39728: If a user does not have access at all to a tracker, it should not be displayed in the backlog.",
        "length": 169,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 743,
        "additions": 350,
        "deletions": 393
      },
      "files": [
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/Artifact/EventRedirectAfterArtifactCreationOrUpdateHandler.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -110,7 +110,7 @@ public function process(\n             return;\n         }\n \n-        $planning = $this->planning_factory->getPlanning($requested_planning['planning_id']);\n+        $planning = $this->planning_factory->getPlanning($request->getCurrentUser(), $requested_planning['planning_id']);\n \n         if ($redirect->stayInTracker()) {\n             $this->saveToRequestForFutureRedirection($planning, $last_milestone_artifact, $redirect, $request);"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/BacklogItem/PaginatedBacklogItemsRepresentationsBuilder.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -57,7 +57,7 @@ public function __construct(\n      */\n     public function getPaginatedBacklogItemsRepresentationsForMilestone(PFUser $user, Planning_Milestone $milestone, ISearchOnStatus $criterion, $limit, $offset)\n     {\n-        $backlog = $this->backlog_factory->getBacklog($milestone, $limit, $offset);\n+        $backlog = $this->backlog_factory->getBacklog($user, $milestone, $limit, $offset);\n \n         return $this->getBacklogItemsRepresentations($user, $milestone, $backlog, $criterion, $limit, $offset);\n     }"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/FormElement/MessageFetcher.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -56,11 +56,11 @@ public function __construct(\n     /**\n      * @return array\n      */\n-    public function getWarningsRelatedToPlanningConfiguration(Tracker $tracker)\n+    public function getWarningsRelatedToPlanningConfiguration(\\PFUser $user, Tracker $tracker)\n     {\n         $purifier = Codendi_HTMLPurifier::instance();\n         $warnings = [];\n-        $planning = $this->planning_factory->getPlanningByPlanningTracker($tracker);\n+        $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $tracker);\n \n         if (! $planning) {\n             $warnings[] = '<li>' . dgettext('tuleap-agiledashboard', 'This tracker is not a planning tracker') . '</li>';"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/Milestone/Backlog/Backlog.php",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -75,7 +75,10 @@ public function __construct(\n         );\n     }\n \n-    public function getDescendantTrackers()\n+    /**\n+     * @return Tracker[]\n+     */\n+    public function getDescendantTrackers(): array\n     {\n         return $this->descendant_trackers;\n     }"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/Milestone/Backlog/BacklogFactory.class.php",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -49,14 +49,11 @@ public function __construct(\n         $this->planning_factory = $planning_factory;\n     }\n \n-    /**\n-     * @return AgileDashboard_Milestone_Backlog_Backlog\n-     */\n-    public function getBacklog(Planning_Milestone $milestone, $limit = null, $offset = null)\n+    public function getBacklog(PFUser $user, Planning_Milestone $milestone, $limit = null, $offset = null): \\AgileDashboard_Milestone_Backlog_Backlog\n     {\n         $backlog_trackers_children_can_manage = [];\n-        $first_child_backlog_trackers         = $this->getFirstChildBacklogTracker($milestone);\n-        if ($first_child_backlog_trackers) {\n+        $first_child_backlog_trackers         = $this->getFirstChildBacklogTracker($user, $milestone);\n+        if ($first_child_backlog_trackers !== null) {\n             $backlog_trackers_children_can_manage = array_merge($backlog_trackers_children_can_manage, $first_child_backlog_trackers);\n         } else {\n             $backlog_trackers_children_can_manage = array_merge($backlog_trackers_children_can_manage, $milestone->getPlanning()->getBacklogTrackers());\n@@ -91,12 +88,15 @@ private function instantiateBacklog(\n         );\n     }\n \n-    private function getFirstChildBacklogTracker(Planning_Milestone $milestone)\n+    /**\n+     * @return Tracker[]|null\n+     */\n+    private function getFirstChildBacklogTracker(PFUser $user, Planning_Milestone $milestone): ?array\n     {\n         $backlog_tracker_children = $milestone->getPlanning()->getPlanningTracker()->getChildren();\n         if ($backlog_tracker_children) {\n             $first_child_tracker  = current($backlog_tracker_children);\n-            $first_child_planning = $this->planning_factory->getPlanningByPlanningTracker($first_child_tracker);\n+            $first_child_planning = $this->planning_factory->getPlanningByPlanningTracker($user, $first_child_tracker);\n             if ($first_child_planning) {\n                 return $first_child_planning->getBacklogTrackers();\n             }"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/Milestone/HeaderOptionsProvider.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -85,7 +85,7 @@ private function createCurrentContextSectionWithBacklogTrackers(\n \n         return $this->createCurrentContextSectionFromTrackers(\n             $milestone,\n-            $this->backlog_factory->getBacklog($milestone)->getDescendantTrackers(),\n+            $this->backlog_factory->getBacklog($user, $milestone)->getDescendantTrackers(),\n             $user,\n             (string) $milestone->getArtifactTitle(),\n             $current_context_section,"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneParentLinker.php",
          "status": "modified",
          "additions": 9,
          "deletions": 8,
          "patch": "@@ -52,7 +52,7 @@ public function linkToMilestoneParent(Planning_Milestone $milestone, PFUser $use\n \n         $parent_milestone_artifact = $parent_milestone->getArtifact();\n \n-        if (! $this->parentMilestoneHasItemTrackerInItsBacklogTracker($parent_milestone, $artifact_added)) {\n+        if (! $this->parentMilestoneHasItemTrackerInItsBacklogTracker($user, $parent_milestone, $artifact_added)) {\n             return;\n         }\n \n@@ -68,19 +68,20 @@ public function linkToMilestoneParent(Planning_Milestone $milestone, PFUser $use\n         }\n     }\n \n-    private function getBacklogTrackers(Planning_Milestone $milestone)\n+    /**\n+     * @return Tracker[]\n+     */\n+    private function getBacklogTrackers(PFUser $user, Planning_Milestone $milestone): array\n     {\n-        return $this->backlog_factory->getBacklog($milestone)->getDescendantTrackers();\n+        return $this->backlog_factory->getBacklog($user, $milestone)->getDescendantTrackers();\n     }\n \n-    /**\n-     * @return bool\n-     */\n     private function parentMilestoneHasItemTrackerInItsBacklogTracker(\n+        PFUser $user,\n         Planning_Milestone $parent_milestone,\n         Artifact $artifact_added,\n-    ) {\n-        $backlog_trackers = $this->getBacklogTrackers($parent_milestone);\n+    ): bool {\n+        $backlog_trackers = $this->getBacklogTrackers($user, $parent_milestone);\n \n         foreach ($backlog_trackers as $backlog_tracker) {\n             if ($backlog_tracker->getId() === $artifact_added->getTrackerId()) {"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProvider.class.php",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -65,14 +65,14 @@ public function __construct(\n      *\n      * @return string[]\n      */\n-    public function getSelectboxOptions(Tracker $backlog_tracker, $selected_milestone_id, PFUser $user)\n+    public function getSelectboxOptions(Tracker $backlog_tracker, $selected_milestone_id, PFUser $user): array\n     {\n         $nearest_planning_tracker = $this->nearest_planning_tracker_provider->getNearestPlanningTracker($backlog_tracker, $this->hierarchy_factory);\n         if (! $nearest_planning_tracker) {\n             return [];\n         }\n \n-        $planning_trackers_ids = $this->getPlanningTrackersIds($nearest_planning_tracker);\n+        $planning_trackers_ids = $this->getPlanningTrackersIds($user, $nearest_planning_tracker);\n \n         return $this->formatAllMilestonesAsSelectboxOptions($planning_trackers_ids, $selected_milestone_id, $backlog_tracker, $user);\n     }\n@@ -153,9 +153,9 @@ private function addTopBacklogPlanningEntry($selected_milestone_id, Tracker $bac\n     }\n \n     /** @return int[] */\n-    private function getPlanningTrackersIds(Tracker $nearest_planning_tracker)\n+    private function getPlanningTrackersIds(PFUser $user, Tracker $nearest_planning_tracker): array\n     {\n-        $parents = $this->getParentsWithPlanningAndOrderedFromTopToBottom($nearest_planning_tracker);\n+        $parents = $this->getParentsWithPlanningAndOrderedFromTopToBottom($user, $nearest_planning_tracker);\n \n         return array_map(\n             static function (Tracker $tracker) {\n@@ -166,11 +166,11 @@ static function (Tracker $tracker) {\n     }\n \n     /** @return Tracker[] */\n-    private function keepsTrackersUntilThereIsNoPlanning(array $list_of_trackers)\n+    private function keepsTrackersUntilThereIsNoPlanning(PFUser $user, array $list_of_trackers): array\n     {\n         $trackers = [];\n         foreach ($list_of_trackers as $tracker) {\n-            if (! $this->planning_factory->getPlanningByPlanningTracker($tracker)) {\n+            if (! $this->planning_factory->getPlanningByPlanningTracker($user, $tracker)) {\n                 break;\n             }\n             $trackers[] = $tracker;\n@@ -179,10 +179,10 @@ private function keepsTrackersUntilThereIsNoPlanning(array $list_of_trackers)\n     }\n \n     /** @return Tracker[] */\n-    private function getParentsWithPlanningAndOrderedFromTopToBottom(Tracker $nearest_planning_tracker)\n+    private function getParentsWithPlanningAndOrderedFromTopToBottom(PFUser $user, Tracker $nearest_planning_tracker): array\n     {\n         $parents   = $this->hierarchy_factory->getAllParents($nearest_planning_tracker);\n-        $parents   = $this->keepsTrackersUntilThereIsNoPlanning($parents);\n+        $parents   = $this->keepsTrackersUntilThereIsNoPlanning($user, $parents);\n         $parents   = array_reverse($parents);\n         $parents[] = $nearest_planning_tracker;\n "
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/Milestone/Pane/Details/DetailsPresenterBuilder.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -64,7 +64,7 @@ public function __construct(\n     public function getMilestoneDetailsPresenter(PFUser $user, Planning_Milestone $milestone)\n     {\n         $redirect_parameter = new Planning_MilestoneRedirectParameter();\n-        $backlog            = $this->backlog_factory->getBacklog($milestone);\n+        $backlog            = $this->backlog_factory->getBacklog($user, $milestone);\n         $redirect_to_self   = $redirect_parameter->getPlanningRedirectToSelf($milestone, DetailsPaneInfo::IDENTIFIER);\n \n         $descendant_trackers = $backlog->getDescendantTrackers();"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/Milestone/Pane/Planning/SubmilestoneFinder.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -44,7 +44,7 @@ public function __construct(\n         $this->planning_factory  = $planning_factory;\n     }\n \n-    public function findFirstSubmilestoneTracker(Planning_Milestone $milestone)\n+    public function findFirstSubmilestoneTracker(PFUser $user, Planning_Milestone $milestone)\n     {\n         $tracker_id = $milestone->getTrackerId();\n         if (is_array($tracker_id)) {\n@@ -59,7 +59,7 @@ public function findFirstSubmilestoneTracker(Planning_Milestone $milestone)\n         $milestone_backlog_trackers = $milestone->getPlanning()->getBacklogTrackers();\n         foreach ($milestone_backlog_trackers as $milestone_backlog_tracker) {\n             foreach ($children as $tracker) {\n-                $planning = $this->planning_factory->getPlanningByPlanningTracker($tracker);\n+                $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $tracker);\n \n                 if (! $planning) {\n                     continue;"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/Milestone/Sidebar/PromotedMilestoneBuilder.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -75,7 +75,7 @@ public function build(Artifact $milestone_artifact, PFUser $user, \\Project $proj\n             return Option::nothing(Planning_ArtifactMilestone::class);\n         }\n \n-        $planning = $this->planning_factory->getPlanningByPlanningTracker($milestone_artifact->getTracker());\n+        $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $milestone_artifact->getTracker());\n         if (! $planning) {\n             return Option::nothing(Planning_ArtifactMilestone::class);\n         }"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/PaneInfoFactory.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -40,9 +40,9 @@ public function getDetailsPaneInfo(Planning_Milestone $milestone)\n         return new DetailsPaneInfo($milestone);\n     }\n \n-    public function getPlanningV2PaneInfo(Planning_Milestone $milestone)\n+    public function getPlanningV2PaneInfo(PFUser $user, Planning_Milestone $milestone)\n     {\n-        $submilestone_tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($milestone);\n+        $submilestone_tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($user, $milestone);\n         if (! $submilestone_tracker) {\n             return;\n         }"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/Planning/HeaderOptionsForPlanningProvider.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -80,7 +80,7 @@ private function addPlanningOptionsForRegularMilestone(\n         PFUser $user,\n         Option $current_context_section,\n     ): Option {\n-        $tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($milestone);\n+        $tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($user, $milestone);\n         if (! $tracker || ! $tracker->userCanSubmitArtifact($user)) {\n             return $current_context_section;\n         }"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/REST/v1/Milestone/MilestoneRepresentationBuilder.php",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -94,7 +94,7 @@ public function getMilestoneRepresentation(\n             $status_count = $this->milestone_factory->getMilestoneStatusCount($user, $milestone);\n         }\n \n-        $backlog_trackers = $this->getBacklogTrackers($milestone);\n+        $backlog_trackers = $this->getBacklogTrackers($user, $milestone);\n \n \n         $pane_info_collector = new \\Tuleap\\AgileDashboard\\Milestone\\Pane\\PaneInfoCollector(\n@@ -106,7 +106,7 @@ public function getMilestoneRepresentation(\n         );\n         $this->event_manager->processEvent($pane_info_collector);\n \n-        $submilestone_tracker = $this->sub_milestone_finder->findFirstSubmilestoneTracker($milestone);\n+        $submilestone_tracker = $this->sub_milestone_finder->findFirstSubmilestoneTracker($user, $milestone);\n \n         $original_project_collector = new OriginalProjectCollector($milestone->getArtifact(), $user);\n         $this->event_manager->processEvent($original_project_collector);\n@@ -118,7 +118,7 @@ public function getMilestoneRepresentation(\n             $this->parent_tracker_retriever->getCreatableParentTrackers($milestone, $user, $backlog_trackers),\n             $this->milestone_factory->userCanChangePrioritiesInMilestone($milestone, $user),\n             $representation_type,\n-            $this->getSubPlanning($milestone),\n+            $this->getSubPlanning($user, $milestone),\n             $pane_info_collector,\n             $submilestone_tracker,\n             $original_project_collector,\n@@ -163,15 +163,15 @@ public function buildRepresentationsFromCollection(\n     /**\n      * @return \\Tracker[]\n      */\n-    private function getBacklogTrackers(\\Planning_Milestone $milestone): array\n+    private function getBacklogTrackers(\\PFUser $user, \\Planning_Milestone $milestone): array\n     {\n-        return $this->backlog_factory->getBacklog($milestone)->getDescendantTrackers();\n+        return $this->backlog_factory->getBacklog($user, $milestone)->getDescendantTrackers();\n     }\n \n-    private function getSubPlanning(\\Planning_Milestone $milestone): ?\\Planning\n+    private function getSubPlanning(\\PFUser $user, \\Planning_Milestone $milestone): ?\\Planning\n     {\n         $planning = $milestone->getPlanning();\n \n-        return $this->planning_factory->getChildrenPlanning($planning);\n+        return $this->planning_factory->getChildrenPlanning($user, $planning);\n     }\n }"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/REST/v1/MilestoneResource.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1025,7 +1025,7 @@ protected function postBacklog($id, BacklogItemReference $item)\n         $item_id  = $item->getArtifactId();\n         $artifact = $this->getBacklogItemAsArtifact($user, $item_id);\n \n-        $allowed_trackers = $this->backlog_factory->getBacklog($milestone)->getDescendantTrackers();\n+        $allowed_trackers = $this->backlog_factory->getBacklog($user, $milestone)->getDescendantTrackers();\n         if (! $this->milestone_validator->canBacklogItemBeAddedToMilestone($artifact, $allowed_trackers)) {\n             throw new RestException(400, \"Item of type '\" . $artifact->getTracker()->getName() . \"' cannot be added.\");\n         }"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/REST/v1/MilestoneResourceValidator.class.php",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -107,7 +107,7 @@ private function validateArtifactsForMilestoneContent(array $ids, Planning_Miles\n             $backlog = $this->backlog_factory->getSelfBacklog($milestone);\n \n             if ($milestone->getParent()) {\n-                $open_unplanned = $this->backlog_item_collection_factory->getUnplannedOpenCollection($user, $milestone->getParent(), $this->backlog_factory->getBacklog($milestone->getParent()), false);\n+                $open_unplanned = $this->backlog_item_collection_factory->getUnplannedOpenCollection($user, $milestone->getParent(), $this->backlog_factory->getBacklog($user, $milestone->getParent()), false);\n             } else {\n                 $top_milestone      = $this->milestone_factory->getVirtualTopMilestone($user, $milestone->getProject());\n                 $backlog_unassigned = $this->backlog_factory->getSelfBacklog($top_milestone);\n@@ -205,7 +205,7 @@ public function validateArtifactIdsAreInUnplannedMilestone(array $ids, Planning_\n     {\n         $this->validateIdsAreUnique($ids);\n \n-        $unplanned = $this->backlog_item_collection_factory->getUnplannedCollection($user, $milestone, $this->backlog_factory->getBacklog($milestone), false);\n+        $unplanned = $this->backlog_item_collection_factory->getUnplannedCollection($user, $milestone, $this->backlog_factory->getBacklog($user, $milestone), false);\n \n         foreach ($ids as $id) {\n             if (! $unplanned->containsId($id)) {\n@@ -238,7 +238,7 @@ public function validateArtifactIdsCanBeAddedToBacklog(array $to_add, Planning_M\n \n         $ids_to_add = $this->filterArtifactIdsAlreadyInBacklog($to_add, $milestone, $user);\n \n-        $indexed_children_backlog_trackers = $this->getIndexedChildrenBacklogTrackers($milestone);\n+        $indexed_children_backlog_trackers = $this->getIndexedChildrenBacklogTrackers($user, $milestone);\n \n         foreach ($ids_to_add as $id) {\n             $artifact = $this->tracker_artifact_factory->getArtifactById($id);\n@@ -262,10 +262,10 @@ private function filterArtifactIdsAlreadyInBacklog(array $ids, Planning_Mileston\n         return $to_add;\n     }\n \n-    private function getIndexedChildrenBacklogTrackers(Planning_Milestone $milestone)\n+    private function getIndexedChildrenBacklogTrackers(PFUser $user, Planning_Milestone $milestone): array\n     {\n         $children_backlog_trackers = [];\n-        $children_planning         = $this->planning_factory->getChildrenPlanning($milestone->getPlanning());\n+        $children_planning         = $this->planning_factory->getChildrenPlanning($user, $milestone->getPlanning());\n         if ($children_planning) {\n             foreach ($children_planning->getBacklogTrackersIds() as $id) {\n                 $children_backlog_trackers[$id] = true;\n@@ -289,7 +289,7 @@ private function getMilestoneBacklogItems(PFUser $user, $milestone)\n         return $this->backlog_item_collection_factory->getUnplannedOpenCollection(\n             $user,\n             $milestone,\n-            $this->backlog_factory->getBacklog($milestone),\n+            $this->backlog_factory->getBacklog($user, $milestone),\n             false\n         );\n     }"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/REST/v1/PlanningResource.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 5,
          "patch": "@@ -82,16 +82,13 @@ public function optionsForMilestones($id)\n     }\n \n     /**\n-     * @param int $id\n-     *\n-     * @return Planning\n      * @throws RestException 403\n      * @throws RestException 404\n      */\n-    private function getPlanning($id)\n+    private function getPlanning(int $id): Planning\n     {\n-        $planning = PlanningFactory::build()->getPlanning($id);\n         $user     = $this->getCurrentUser();\n+        $planning = PlanningFactory::build()->getPlanning($user, $id);\n \n         if (! $planning) {\n             throw new RestException(404, 'Planning not found');"
        },
        {
          "filename": "plugins/agiledashboard/include/AgileDashboard/SequenceIdManager.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -65,7 +65,7 @@ private function loadBacklogForMilestoneIfNeeded(PFUser $user, Planning_Mileston\n \n         if (! isset($this->backlog_item_ids[$milestone->getArtifactId()])) {\n             $this->backlog_item_ids[$milestone->getArtifactId() ?? 0] = [];\n-            $backlog                                                  = $this->backlog_factory->getBacklog($milestone);\n+            $backlog                                                  = $this->backlog_factory->getBacklog($user, $milestone);\n             $backlog_artifacts                                        = $backlog->getArtifacts($user);\n \n             $this->storeBacklogArtifacts($milestone->getArtifactId(), $backlog_artifacts);"
        },
        {
          "filename": "plugins/agiledashboard/include/Planning/ArtifactLinker.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -93,7 +93,7 @@ private function linkWithMilestoneArtifact(\n         $last_ancestor = $source_artifact;\n         if ($source_artifact) {\n             foreach ($source_artifact->getAllAncestors($user) as $ancestor) {\n-                $planning = $this->planning_factory->getPlanningByPlanningTracker($ancestor->getTracker());\n+                $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $ancestor->getTracker());\n                 if ($planning && in_array($artifact->getTracker(), $planning->getBacklogTrackers())) {\n                     $ancestor->linkArtifact($artifact->getId(), $user);\n                     $last_ancestor = $ancestor;"
        },
        {
          "filename": "plugins/agiledashboard/include/Planning/MilestoneController.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -160,11 +160,11 @@ public function getBreadcrumbs()\n     public function solveInconsistencies()\n     {\n         $milestone_artifact = Tracker_ArtifactFactory::instance()->getArtifactById($this->request->get('aid'));\n-        $milestone          = $this->milestone_factory->getMilestoneFromArtifact($milestone_artifact);\n+        $milestone          = $this->milestone_factory->getMilestoneFromArtifact($this->request->getCurrentUser(), $milestone_artifact);\n         $artifact_ids       = $this->request->get('inconsistent-artifacts-ids');\n         $extractor          = new AgileDashboard_PaneRedirectionExtractor();\n \n-        if (! ($this->inconsistentArtifactsIdsAreValid($artifact_ids) && $milestone->solveInconsistencies($this->getCurrentUser(), $artifact_ids))) {\n+        if (! $milestone || ! ($this->inconsistentArtifactsIdsAreValid($artifact_ids) && $milestone->solveInconsistencies($this->getCurrentUser(), $artifact_ids))) {\n             $this->addFeedback(Feedback::ERROR, dgettext('tuleap-agiledashboard', 'An error occurred while trying to solve inconsistencies.'));\n         }\n "
        },
        {
          "filename": "plugins/agiledashboard/include/Planning/MilestoneFactory.class.php",
          "status": "modified",
          "additions": 18,
          "deletions": 32,
          "patch": "@@ -167,7 +167,7 @@ public function getValidatedBareMilestoneByArtifactId(PFUser $user, $artifact_id\n     public function getBareMilestoneByArtifact(PFUser $user, Artifact $artifact)\n     {\n         $tracker  = $artifact->getTracker();\n-        $planning = $this->planning_factory->getPlanningByPlanningTracker($tracker);\n+        $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $tracker);\n         if ($planning) {\n             return $this->getBareMilestoneByArtifactAndPlanning($user, $artifact, $planning);\n         }\n@@ -205,7 +205,7 @@ private function getBareMilestoneByArtifactAndPlanning(PFUser $user, Artifact $a\n      */\n     public function getBareMilestone(PFUser $user, Project $project, $planning_id, $artifact_id)\n     {\n-        $planning = $this->planning_factory->getPlanning($planning_id);\n+        $planning = $this->planning_factory->getPlanning($user, $planning_id);\n         if ($planning === null) {\n             throw new NotFoundException($planning_id);\n         }\n@@ -520,7 +520,7 @@ private function convertDARToArrayOfMilestones(PFUser $user, Planning_Milestone\n                 continue;\n             }\n \n-            $planning = $this->planning_factory->getPlanningByPlanningTracker($artifact->getTracker());\n+            $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $artifact->getTracker());\n             if (! $planning) {\n                 continue;\n             }\n@@ -689,28 +689,10 @@ private function getAllMilestonesWithoutCaching(PFUser $user, Planning $planning\n         return $milestones;\n     }\n \n-    /**\n-     * Create a Milestone corresponding to given artifact and loads the artifacts planned for this milestone\n-     *\n-     *\n-     * @return Planning_ArtifactMilestone\n-     */\n-    public function getMilestoneFromArtifactWithPlannedArtifacts(Artifact $artifact, PFUser $user)\n-    {\n-        $planned_artifacts = $this->getPlannedArtifacts($user, $artifact);\n-        return $this->getMilestoneFromArtifact($artifact, $planned_artifacts);\n-    }\n-\n-    /**\n-     * Create a Milestone corresponding to given artifact\n-     *\n-     *\n-     * @return Planning_ArtifactMilestone\n-     */\n-    public function getMilestoneFromArtifact(Artifact $artifact, ?TreeNode $planned_artifacts = null)\n+    public function getMilestoneFromArtifact(PFUser $user, Artifact $artifact, ?TreeNode $planned_artifacts = null): ?Planning_ArtifactMilestone\n     {\n         $tracker  = $artifact->getTracker();\n-        $planning = $this->planning_factory->getPlanningByPlanningTracker($tracker);\n+        $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $tracker);\n         if (! $planning) {\n             return null;\n         }\n@@ -739,7 +721,7 @@ public function getMilestoneAncestors(PFUser $user, Planning_Milestone $mileston\n         if ($milestone_artifact) {\n             $parent_artifacts = $milestone_artifact->getAllAncestors($user);\n             foreach ($parent_artifacts as $artifact) {\n-                $parent_milestone[] = $this->getMilestoneFromArtifact($artifact);\n+                $parent_milestone[] = $this->getMilestoneFromArtifact($user, $artifact);\n             }\n         }\n         $parent_milestone = array_filter($parent_milestone);\n@@ -761,18 +743,16 @@ public function addMilestoneAncestors(PFUser $user, Planning_Milestone $mileston\n      * Get the top most recent milestone (last created artifact in planning tracker)\n      *\n      * @param int $planning_id\n-     *\n-     * @return Planning_Milestone\n      */\n-    public function getLastMilestoneCreated(PFUser $user, $planning_id)\n+    public function getLastMilestoneCreated(PFUser $user, $planning_id): ?Planning_Milestone\n     {\n-        $planning = $this->planning_factory->getPlanning($planning_id);\n+        $planning = $this->planning_factory->getPlanning($user, $planning_id);\n         if ($planning === null) {\n             throw new NotFoundException($planning_id);\n         }\n         $artifacts = $this->artifact_factory->getOpenArtifactsByTrackerIdUserCanView($user, $planning->getPlanningTrackerId());\n         if (count($artifacts) > 0) {\n-            return $this->getMilestoneFromArtifact(array_shift($artifacts));\n+            return $this->getMilestoneFromArtifact($user, array_shift($artifacts));\n         }\n         return new Planning_NoMilestone($planning->getPlanningTracker()->getProject(), $planning);\n     }\n@@ -794,7 +774,7 @@ public function getMilestoneStatusCount(PFUser $user, Planning_Milestone $milest\n     /**\n      * @return Planning_Milestone[]\n      */\n-    public function getAllCurrentMilestones(PFUser $user, Planning $planning)\n+    public function getAllCurrentMilestones(PFUser $user, Planning $planning): array\n     {\n         $milestones = [];\n         $artifacts  = $this->artifact_factory->getArtifactsByTrackerIdUserCanView($user, $planning->getPlanningTrackerId());\n@@ -804,7 +784,10 @@ public function getAllCurrentMilestones(PFUser $user, Planning $planning)\n                 continue;\n             }\n \n-            $milestones[] = $this->getMilestoneFromArtifact($artifact);\n+            $milestone = $this->getMilestoneFromArtifact($user, $artifact);\n+            if ($milestone) {\n+                $milestones[] = $milestone;\n+            }\n         }\n \n         return $milestones;\n@@ -823,7 +806,10 @@ public function getAllFutureMilestones(PFUser $user, Planning $planning)\n                 continue;\n             }\n \n-            $milestones[] = $this->getMilestoneFromArtifact($artifact);\n+            $milestone = $this->getMilestoneFromArtifact($user, $artifact);\n+            if ($milestone) {\n+                $milestones[] = $milestone;\n+            }\n         }\n \n         return $milestones;"
        },
        {
          "filename": "plugins/agiledashboard/include/Planning/MilestonePaneFactory.class.php",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -113,7 +113,7 @@ private function buildListOfPaneInfo(Planning_Milestone $milestone, PFUser $user\n \n         $this->list_of_pane_info[$milestone->getArtifactId() ?? 0][] = $this->getDetailsPaneInfo($milestone);\n \n-        $planning_v2_pane_info = $this->getPlanningV2PaneInfo($milestone);\n+        $planning_v2_pane_info = $this->getPlanningV2PaneInfo($user, $milestone);\n         if ($planning_v2_pane_info) {\n             $this->list_of_pane_info[$milestone->getArtifactId() ?? 0][] = $planning_v2_pane_info;\n         }\n@@ -160,14 +160,14 @@ private function buildDefaultPane(Planning_Milestone $milestone)\n         $this->active_pane[$milestone->getArtifactId() ?? 0] = $this->getDetailsPane($pane_info, $milestone);\n     }\n \n-    private function getPlanningV2PaneInfo(Planning_Milestone $milestone): ?PaneInfo\n+    private function getPlanningV2PaneInfo(PFUser $user, Planning_Milestone $milestone): ?PaneInfo\n     {\n-        $submilestone_tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($milestone);\n+        $submilestone_tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($user, $milestone);\n         if (! $submilestone_tracker) {\n             return null;\n         }\n \n-        $pane_info = $this->pane_info_factory->getPlanningV2PaneInfo($milestone);\n+        $pane_info = $this->pane_info_factory->getPlanningV2PaneInfo($user, $milestone);\n         if ($this->request->get('pane') == PlanningV2PaneInfo::IDENTIFIER) {\n             $pane_info->setActive(true);\n             $this->active_pane[$milestone->getArtifactId() ?? 0] = $this->getPlanningV2Pane($pane_info, $milestone);"
        },
        {
          "filename": "plugins/agiledashboard/include/Planning/Planning.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -176,7 +176,7 @@ public function setBacklogTrackers(array $backlog_trackers)\n     /**\n      * @return Tracker[]\n      */\n-    public function getBacklogTrackers()\n+    public function getBacklogTrackers(): array\n     {\n         return $this->backlog_trackers;\n     }"
        },
        {
          "filename": "plugins/agiledashboard/include/Planning/PlanningController.class.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -311,7 +311,7 @@ public function edit(\\Closure $displayHeader, \\Closure $displayFooter): void\n         $this->checkUserIsAdmin();\n \n         $planning_id = $this->request->get('planning_id');\n-        $planning    = $this->planning_factory->getPlanning($planning_id);\n+        $planning    = $this->planning_factory->getPlanning($this->request->getCurrentUser(), $planning_id);\n         if ($planning === null) {\n             throw new \\Tuleap\\AgileDashboard\\Planning\\NotFoundException($planning_id);\n         }\n@@ -394,7 +394,7 @@ public function update(): void\n         $this->checkUserIsAdmin();\n \n         $updated_planning_id = (int) $this->request->get('planning_id');\n-        $original_planning   = $this->planning_factory->getPlanning($updated_planning_id);\n+        $original_planning   = $this->planning_factory->getPlanning($this->request->getCurrentUser(), $updated_planning_id);\n         if ($original_planning === null) {\n             $this->addFeedback(\n                 Feedback::ERROR,\n@@ -523,7 +523,7 @@ public function getBreadcrumbs()\n     private function getPlanning()\n     {\n         $planning_id = $this->request->get('planning_id');\n-        return $this->planning_factory->getPlanning($planning_id);\n+        return $this->planning_factory->getPlanning($this->request->getCurrentUser(), $planning_id);\n     }\n \n     private function addBurnupWarning(array &$warning_list, Tracker $planning_tracker)"
        },
        {
          "filename": "plugins/agiledashboard/include/Planning/PlanningFactory.class.php",
          "status": "modified",
          "additions": 18,
          "deletions": 25,
          "patch": "@@ -62,7 +62,7 @@ public static function build()\n      * @param array  $tracker_mapping  An array mapping source tracker ids to destination tracker ids.\n      * @param array  $ugroups_mapping  An array mapping source ugroups and destinations ones.\n      */\n-    public function duplicatePlannings($group_id, $tracker_mapping, array $ugroups_mapping)\n+    public function duplicatePlannings(PFUser $user, $group_id, $tracker_mapping, array $ugroups_mapping): void\n     {\n         if (! $tracker_mapping) {\n             return;\n@@ -80,14 +80,14 @@ public function duplicatePlannings($group_id, $tracker_mapping, array $ugroups_m\n \n                 $inserted_planning_id = $this->dao->createPlanning($group_id, PlanningParameters::fromArray($row));\n \n-                $this->duplicatePriorityChangePermission($group_id, $row['id'], $inserted_planning_id, $ugroups_mapping);\n+                $this->duplicatePriorityChangePermission($user, $group_id, $row['id'], $inserted_planning_id, $ugroups_mapping);\n             }\n         }\n     }\n \n-    protected function duplicatePriorityChangePermission($group_id, $source_planning_id, $new_planning_id, array $ugroups_mapping)\n+    private function duplicatePriorityChangePermission(PFUser $user, $group_id, $source_planning_id, $new_planning_id, array $ugroups_mapping): void\n     {\n-        $source_planning = $this->getPlanning($source_planning_id);\n+        $source_planning = $this->getPlanning($user, $source_planning_id);\n         if ($source_planning === null) {\n             throw new \\Tuleap\\AgileDashboard\\Planning\\NotFoundException($source_planning_id);\n         }\n@@ -140,7 +140,7 @@ public function getPlannings(PFUser $user, $group_id)\n         foreach ($this->dao->searchByProjectId($group_id) as $row) {\n             $tracker = $this->tracker_factory->getTrackerById($row['planning_tracker_id']);\n             if ($tracker && $tracker->userCanView($user)) {\n-                $plannings[] = $this->getPlanningFromRow($row);\n+                $plannings[] = $this->getPlanningFromRow($user, $row);\n             }\n         }\n         if ($plannings) {\n@@ -305,7 +305,7 @@ public function getOrderedPlanningsWithBacklogTracker(PFUser $user, $group_id)\n         $plannings = $this->getPlannings($user, $group_id);\n \n         foreach ($plannings as $planning) {\n-            $planning->setBacklogTrackers($this->getBacklogTrackers($planning));\n+            $planning->setBacklogTrackers($this->getBacklogTrackers($user, $planning));\n         }\n \n         $this->sortPlanningsAccordinglyToHierarchy($plannings);\n@@ -334,21 +334,17 @@ static function (Planning $planning) {\n         });\n     }\n \n-    public function getPlanning($planning_id): ?Planning\n+    public function getPlanning(PFUser $user, $planning_id): ?Planning\n     {\n         $planning = $this->dao->searchById((int) $planning_id);\n         if ($planning === null) {\n             return null;\n         }\n \n-        return $this->getPlanningFromRow($planning);\n+        return $this->getPlanningFromRow($user, $planning);\n     }\n \n-    /**\n-     *\n-     * @return Planning\n-     */\n-    private function getPlanningFromRow(array $row)\n+    private function getPlanningFromRow(PFUser $user, array $row): Planning\n     {\n         $planning = new Planning(\n             $row['id'],\n@@ -359,7 +355,7 @@ private function getPlanningFromRow(array $row)\n             [],\n             $row['planning_tracker_id']\n         );\n-        $planning->setBacklogTrackers($this->getBacklogTrackers($planning));\n+        $planning->setBacklogTrackers($this->getBacklogTrackers($user, $planning));\n         $planning->setPlanningTracker($this->getPlanningTracker($planning));\n \n         return $planning;\n@@ -372,7 +368,7 @@ private function getPlanningFromRow(array $row)\n      * - Given I pass Release tracker as parameter\n      * - Then I should get the Release planning (for instance Epic -> Release)\n      */\n-    public function getPlanningByPlanningTracker(Tracker $planning_tracker): ?Planning\n+    public function getPlanningByPlanningTracker(PFUser $user, Tracker $planning_tracker): ?Planning\n     {\n         if (array_key_exists($planning_tracker->getId(), $this->instances)) {\n             return $this->instances[$planning_tracker->getId()];\n@@ -393,7 +389,7 @@ public function getPlanningByPlanningTracker(Tracker $planning_tracker): ?Planni\n             $planning['planning_tracker_id']\n         );\n         $returned->setPlanningTracker($this->getPlanningTracker($returned));\n-        $returned->setBacklogTrackers($this->getBacklogTrackers($returned));\n+        $returned->setBacklogTrackers($this->getBacklogTrackers($user, $returned));\n         $this->instances[$planning_tracker->getId()] = $returned;\n         return $returned;\n     }\n@@ -489,20 +485,17 @@ private function getPlanningTracker(Planning $planning)\n     }\n \n     /**\n-     * Get a list of trackers defined as backlog for a planning\n-     *\n-     *\n-     * @return array of Tracker\n+     * @return Tracker[]\n      */\n-    private function getBacklogTrackers(Planning $planning)\n+    private function getBacklogTrackers(PFUser $user, Planning $planning): array\n     {\n         $backlog_trackers = [];\n         $planning_id      = $planning->getId();\n         $rows             = $this->dao->searchBacklogTrackersByPlanningId($planning_id);\n \n         foreach ($rows as $row) {\n             $tracker = $this->tracker_factory->getTrackerById($row['tracker_id']);\n-            if ($tracker !== null) {\n+            if ($tracker !== null && $tracker->userCanView($user)) {\n                 $backlog_trackers[] = $tracker;\n             }\n         }\n@@ -650,7 +643,7 @@ public function getPlanningsOutOfRootPlanningHierarchy(PFUser $user, $group_id)\n                 if (! in_array($tracker_id, $potential_planning_trackers)) {\n                     $tracker = $this->tracker_factory->getTrackerById($tracker_id);\n                     if ($tracker !== null) {\n-                        $plannings[] = $this->getPlanningByPlanningTracker($tracker);\n+                        $plannings[] = $this->getPlanningByPlanningTracker($user, $tracker);\n                     }\n                 }\n             }\n@@ -666,14 +659,14 @@ public function getTrackerFactory()\n         return $this->tracker_factory;\n     }\n \n-    public function getChildrenPlanning(Planning $planning)\n+    public function getChildrenPlanning(PFUser $user, Planning $planning): ?Planning\n     {\n         $children = $this->tracker_factory->getHierarchyFactory()->getChildren($planning->getPlanningTrackerId());\n         if (count($children) == 0) {\n             return null;\n         } else {\n             $planning_tracker = array_shift($children);\n-            return $this->getPlanningByPlanningTracker($planning_tracker);\n+            return $this->getPlanningByPlanningTracker($user, $planning_tracker);\n         }\n     }\n "
        },
        {
          "filename": "plugins/agiledashboard/include/Planning/PlanningRequestValidator.class.php",
          "status": "modified",
          "additions": 15,
          "deletions": 10,
          "patch": "@@ -83,7 +83,12 @@ public function isValid(\n                 $current_user,\n                 $tracker_access_during_import_strategy,\n             )\n-            && $this->planningTrackerIsNotThePlanningTrackerOfAnotherPlanningInTheSameProject($group_id, $planning_id, $planning_parameters);\n+            && $this->planningTrackerIsNotThePlanningTrackerOfAnotherPlanningInTheSameProject(\n+                $current_user,\n+                $group_id,\n+                $planning_id,\n+                $planning_parameters,\n+            );\n     }\n \n     /**\n@@ -160,12 +165,14 @@ private function planningTrackerIdIsValid(\n      * @param int                $group_id            The group id to check the existing planning trackers against.\n      * @param int                $planning_id         The id of the planning to be updated.\n      * @param PlanningParameters $planning_parameters The validated parameters.\n-     *\n-     * @return bool\n      */\n-    private function planningTrackerIsNotThePlanningTrackerOfAnotherPlanningInTheSameProject($group_id, $planning_id, PlanningParameters $planning_parameters)\n-    {\n-        return ($this->planningTrackerIsTheCurrentOne($planning_id, $planning_parameters) ||\n+    private function planningTrackerIsNotThePlanningTrackerOfAnotherPlanningInTheSameProject(\n+        PFUser $user,\n+        $group_id,\n+        $planning_id,\n+        PlanningParameters $planning_parameters,\n+    ): bool {\n+        return ($this->planningTrackerIsTheCurrentOne($user, $planning_id, $planning_parameters) ||\n                 $this->trackerIsNotAlreadyUsedAsAPlanningTrackerInProject($group_id, $planning_parameters));\n     }\n \n@@ -175,12 +182,10 @@ private function planningTrackerIsNotThePlanningTrackerOfAnotherPlanningInTheSam\n      *\n      * @param int                $planning_id         The planning with the current planning tracker id\n      * @param PlanningParameters $planning_parameters The parameters being validated\n-     *\n-     * @return bool\n      */\n-    private function planningTrackerIsTheCurrentOne($planning_id, PlanningParameters $planning_parameters)\n+    private function planningTrackerIsTheCurrentOne(PFUser $user, $planning_id, PlanningParameters $planning_parameters): bool\n     {\n-        $planning = $this->factory->getPlanning($planning_id);\n+        $planning = $this->factory->getPlanning($user, $planning_id);\n \n         if (! $planning) {\n             return false;"
        },
        {
          "filename": "plugins/agiledashboard/include/agiledashboardPlugin.php",
          "status": "modified",
          "additions": 3,
          "deletions": 27,
          "patch": "@@ -426,14 +426,6 @@ public function userHistoryClear(array $params): void\n         $visit_cleaner->deleteVisitByUserId((int) $user->getId());\n     }\n \n-    public function cardwall_event_get_swimline_tracker($params) // phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps\n-    {\n-        $planning_factory = $this->getPlanningFactory();\n-        if ($planning = $planning_factory->getPlanningByPlanningTracker($params['tracker'])) {\n-            $params['backlog_trackers'] = $planning->getBacklogTrackers();\n-        }\n-    }\n-\n     /**\n      * @see Tracker_Report::TRACKER_EVENT_REPORT_DISPLAY_ADDITIONAL_CRITERIA\n      */\n@@ -602,6 +594,7 @@ public function tracker_event_project_creation_trackers_required($params) // php\n     public function trackerEventTrackersDuplicated(TrackerEventTrackersDuplicated $event): void\n     {\n         PlanningFactory::build()->duplicatePlannings(\n+            $event->user,\n             (int) $event->new_project->getID(),\n             $event->tracker_mapping,\n             $event->ugroups_mapping,\n@@ -887,23 +880,6 @@ public function rest_project_resources(array $params) // phpcs:ignore PSR1.Metho\n         $injector->declareProjectPlanningResource($params['resources'], $params['project']);\n     }\n \n-    private function getPlanningIdFromParameters($params)\n-    {\n-        if ($params['milestone_id'] == 0) {\n-            $planning = $this->getPlanningFactory()->getRootPlanning(\n-                $params['user'],\n-                $params['group_id']\n-            );\n-\n-            return $planning->getId();\n-        }\n-\n-        $artifact  = $this->getArtifactFactory()->getArtifactById($params['milestone_id']);\n-        $milestone = $this->getMilestoneFactory()->getMilestoneFromArtifact($artifact);\n-\n-        return $milestone->getPlanningId();\n-    }\n-\n     /** @see Event::GET_PROJECTID_FROM_URL */\n     public function get_projectid_from_url($params) // phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps\n     {\n@@ -1170,7 +1146,7 @@ public function getMessageFetcherAdditionalWarnings(MessageFetcherAdditionalWarn\n         $field = $event->getField();\n \n         if ($field::class === Tuleap\\AgileDashboard\\FormElement\\Burnup::class) {\n-            $event->setWarnings($message_fetcher->getWarningsRelatedToPlanningConfiguration($field->getTracker()));\n+            $event->setWarnings($message_fetcher->getWarningsRelatedToPlanningConfiguration($event->user, $field->getTracker()));\n         }\n     }\n \n@@ -1286,7 +1262,7 @@ public function getAllBreadCrumbsForMilestoneBuilder(): AllBreadCrumbsForMilesto\n \n     public function getSwitchToQuickLinkCollection(SwitchToLinksCollection $collection): void\n     {\n-        $milestone = $this->getMilestoneFactory()->getMilestoneFromArtifact($collection->getArtifact());\n+        $milestone = $this->getMilestoneFactory()->getMilestoneFromArtifact($collection->getCurrentUser(), $collection->getArtifact());\n         if ($milestone === null) {\n             return;\n         }"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Artifact/EventRedirectAfterArtifactCreationOrUpdateHandlerTest.php",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -134,7 +134,7 @@ public function testItRedirectsToPlanning(): void\n         $this->planning_factory\n             ->expects(self::once())\n             ->method('getPlanning')\n-            ->with(self::PLANNING_ID)\n+            ->with($this->user, self::PLANNING_ID)\n             ->willReturn($this->planning);\n \n         $milestone = $this->createMock(\\Planning_Milestone::class);\n@@ -216,7 +216,7 @@ public function testItRedirectsToPlanningWithFallbackToLegacyUrlIfPaneCannotBeFo\n         $this->planning_factory\n             ->expects(self::once())\n             ->method('getPlanning')\n-            ->with(self::PLANNING_ID)\n+            ->with($this->user, self::PLANNING_ID)\n             ->willReturn($this->planning);\n \n         $milestone = $this->createMock(\\Planning_Milestone::class);\n@@ -283,7 +283,7 @@ public function testItRedirectsToPlanningWithFallbackToLegacyUrlIfMilestoneHasNo\n         $this->planning_factory\n             ->expects(self::once())\n             ->method('getPlanning')\n-            ->with(self::PLANNING_ID)\n+            ->with($this->user, self::PLANNING_ID)\n             ->willReturn($this->planning);\n \n         $milestone = $this->createMock(\\Planning_Milestone::class);\n@@ -337,7 +337,7 @@ public function testItRedirectsToPlanningWithFallbackToLegacyUrlIfMilestoneCanno\n         $this->planning_factory\n             ->expects(self::once())\n             ->method('getPlanning')\n-            ->with(self::PLANNING_ID)\n+            ->with($this->user, self::PLANNING_ID)\n             ->willReturn($this->planning);\n \n         $this->milestone_factory\n@@ -387,7 +387,7 @@ public function testItRedirectsToTopPlanningIfPlanningCannotBeInstantiated(): vo\n         $this->planning_factory\n             ->expects(self::once())\n             ->method('getPlanning')\n-            ->with(self::PLANNING_ID)\n+            ->with($this->user, self::PLANNING_ID)\n             ->willReturn(null);\n \n         $redirect       = new Tracker_Artifact_Redirect();\n@@ -430,7 +430,7 @@ public function testItStaysInTracker(): void\n         $this->planning_factory\n             ->expects(self::once())\n             ->method('getPlanning')\n-            ->with(self::PLANNING_ID)\n+            ->with($this->user, self::PLANNING_ID)\n             ->willReturn($this->planning);\n \n         $redirect       = new Tracker_Artifact_Redirect();\n@@ -474,7 +474,7 @@ public function testItStaysInTrackerAndIncludesTheChildMilestoneIfModeIsSetToCre\n         $this->planning_factory\n             ->expects(self::once())\n             ->method('getPlanning')\n-            ->with(self::PLANNING_ID)\n+            ->with($this->user, self::PLANNING_ID)\n             ->willReturn($this->planning);\n \n         $redirect       = new Tracker_Artifact_Redirect();"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/FormElement/MessageFetcherTest.php",
          "status": "modified",
          "additions": 11,
          "deletions": 8,
          "patch": "@@ -30,6 +30,7 @@\n use Tracker;\n use Tracker_FormElement_Field;\n use Tuleap\\AgileDashboard\\Test\\Builders\\PlanningBuilder;\n+use Tuleap\\Test\\Builders\\UserTestBuilder;\n use Tuleap\\Test\\PHPUnit\\TestCase;\n use Tuleap\\Tracker\\Semantic\\Status\\Done\\SemanticDone;\n use Tuleap\\Tracker\\Semantic\\Status\\Done\\SemanticDoneFactory;\n@@ -45,6 +46,7 @@ final class MessageFetcherTest extends TestCase\n     private MessageFetcher $message_fetcher;\n     private AgileDashboard_Semantic_InitialEffortFactory&MockObject $initial_effort_factory;\n     private SemanticDoneFactory&MockObject $semantic_done_factory;\n+    private \\PFUser $user;\n \n     protected function setUp(): void\n     {\n@@ -61,6 +63,7 @@ protected function setUp(): void\n         $this->tracker         = TrackerTestBuilder::aTracker()->build();\n         $this->backlog_tracker = TrackerTestBuilder::aTracker()->build();\n         $this->field           = IntFieldBuilder::anIntField(145)->build();\n+        $this->user            = UserTestBuilder::buildWithDefaults();\n     }\n \n     public function testItDoesNotAddWarningsIfAllIsWellConfigured(): void\n@@ -69,20 +72,20 @@ public function testItDoesNotAddWarningsIfAllIsWellConfigured(): void\n         $semantic_done  = $this->getMockedSemanticDone(true);\n         $initial_effort = $this->getInitialEffortFieldSemantic();\n \n-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->tracker)->willReturn($planning);\n+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->tracker)->willReturn($planning);\n         $this->semantic_done_factory->method('getInstanceByTracker')->with($this->backlog_tracker)->willReturn($semantic_done);\n         $this->initial_effort_factory->method('getByTracker')->with($this->backlog_tracker)->willReturn($initial_effort);\n \n-        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->tracker);\n+        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->user, $this->tracker);\n \n         self::assertEmpty($warnings);\n     }\n \n     public function testItReturnsAWarningIfTrackerIsNotAPlanningTracker(): void\n     {\n-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->tracker)->willReturn(null);\n+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->tracker)->willReturn(null);\n \n-        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->tracker);\n+        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->user, $this->tracker);\n \n         self::assertNotEmpty($warnings);\n     }\n@@ -93,12 +96,12 @@ public function testItReturnsAWarningIfBacklogTrackerDoesNotHaveSemanticDone():\n         $semantic_done  = $this->getMockedSemanticDone(false);\n         $initial_effort = $this->getInitialEffortFieldSemantic();\n \n-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->tracker)->willReturn($planning);\n+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->tracker)->willReturn($planning);\n         $this->semantic_done_factory->method('getInstanceByTracker')->with($this->backlog_tracker)->willReturn($semantic_done);\n         $this->initial_effort_factory->method('getByTracker')->with($this->backlog_tracker)->willReturn($initial_effort);\n         $semantic_done->method('getUrl');\n \n-        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->tracker);\n+        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->user, $this->tracker);\n \n         self::assertNotEmpty($warnings);\n     }\n@@ -109,11 +112,11 @@ public function testItReturnsAWarningIfBacklogTrackerDoesNotHaveSemanticInitialE\n         $semantic_done  = $this->getMockedSemanticDone(true);\n         $initial_effort = new AgileDashBoard_Semantic_InitialEffort($this->tracker, null);\n \n-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->tracker)->willReturn($planning);\n+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->tracker)->willReturn($planning);\n         $this->semantic_done_factory->method('getInstanceByTracker')->with($this->backlog_tracker)->willReturn($semantic_done);\n         $this->initial_effort_factory->method('getByTracker')->with($this->backlog_tracker)->willReturn($initial_effort);\n \n-        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->tracker);\n+        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->user, $this->tracker);\n \n         self::assertNotEmpty($warnings);\n     }"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/Backlog/AgileDashboard_SequenceIdManagerTest.php",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -114,7 +114,7 @@ public function testItReturnsNothingIfThereAreNoArtifactsInMilestonesBacklog():\n         $this->backlog_1->expects(self::once())->method('getArtifacts')->with($this->user)\n             ->willReturn(new AgileDashboard_Milestone_Backlog_DescendantItemsCollection());\n \n-        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->milestone_1)\n+        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->user, $this->milestone_1)\n             ->willReturn($this->backlog_1);\n \n         self::assertNull($this->sequence_id_manager->getSequenceId($this->user, $this->milestone_1, 2));\n@@ -127,7 +127,7 @@ public function testItReturnsNothingIfTheArtifactIsNotInTheMilestoneBacklog(): v\n         $backlog_items->push($this->artifact_2);\n         $backlog_items->push($this->artifact_3);\n \n-        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->milestone_1)\n+        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->user, $this->milestone_1)\n             ->willReturn($this->backlog_1);\n         $this->backlog_1->expects(self::once())->method('getArtifacts')->with($this->user)\n             ->willReturn($backlog_items);\n@@ -142,7 +142,7 @@ public function testItReturns1IfTheArtifactIsInFirstPlace(): void\n         $backlog_items->push($this->artifact_2);\n         $backlog_items->push($this->artifact_3);\n \n-        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->milestone_1)\n+        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->user, $this->milestone_1)\n             ->willReturn($this->backlog_1);\n         $this->backlog_1->expects(self::once())->method('getArtifacts')->with($this->user)\n             ->willReturn($backlog_items);\n@@ -160,7 +160,7 @@ public function testItReturns2IfTheArtifactIsInFirstPlace(): void\n         $backlog_items->push($this->artifact_1);\n         $backlog_items->push($this->artifact_3);\n \n-        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->milestone_1)\n+        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->user, $this->milestone_1)\n             ->willReturn($this->backlog_1);\n         $this->backlog_1->expects(self::once())->method('getArtifacts')->with($this->user)\n             ->willReturn($backlog_items);\n@@ -178,7 +178,7 @@ public function testItKeepsInMemoryTheBacklogResult(): void\n         $backlog_items->push($this->artifact_1);\n         $backlog_items->push($this->artifact_3);\n \n-        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->milestone_1)\n+        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->user, $this->milestone_1)\n             ->willReturn($this->backlog_1);\n         $this->backlog_1->expects(self::once())->method('getArtifacts')->with($this->user)\n             ->willReturn($backlog_items);\n@@ -196,7 +196,7 @@ public function testItKeepsInMemoryTheBacklogResult(): void\n     public function testItCanDealWithMultipleCallWithDifferentMilestones(): void\n     {\n         $this->backlog_factory->expects(self::exactly(2))->method('getBacklog')\n-            ->withConsecutive([$this->milestone_1], [$this->milestone_2])\n+            ->withConsecutive([$this->user, $this->milestone_1], [$this->user, $this->milestone_2])\n             ->willReturnOnConsecutiveCalls($this->backlog_1, $this->backlog_2);\n \n         $backlog_items = new AgileDashboard_Milestone_Backlog_DescendantItemsCollection();"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/HeaderOptionsProviderTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -79,7 +79,7 @@ protected function setUp(): void\n \n         $this->backlog = $this->createMock(AgileDashboard_Milestone_Backlog_Backlog::class);\n         $backlog_factory->method('getBacklog')\n-            ->with($this->milestone)\n+            ->with($this->user, $this->milestone)\n             ->willReturn($this->backlog);\n \n         $this->epic            = TrackerTestBuilder::aTracker()"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/Pane/Planning/SubmilestoneFinderTest.php",
          "status": "modified",
          "additions": 17,
          "deletions": 13,
          "patch": "@@ -36,6 +36,7 @@\n use Tracker_HierarchyFactory;\n use Tuleap\\AgileDashboard\\Test\\Builders\\PlanningBuilder;\n use Tuleap\\Test\\Builders\\ProjectTestBuilder;\n+use Tuleap\\Test\\Builders\\UserTestBuilder;\n use Tuleap\\Test\\PHPUnit\\TestCase;\n use Tuleap\\Tracker\\Test\\Builders\\ArtifactTestBuilder;\n use Tuleap\\Tracker\\Test\\Builders\\TrackerTestBuilder;\n@@ -63,6 +64,7 @@ final class SubmilestoneFinderTest extends TestCase\n     private int $theme_tracker_id       = 5;\n     private int $team_tracker_id        = 6;\n     private int $requirement_tracker_id = 7;\n+    private \\PFUser $user;\n \n     protected function setUp(): void\n     {\n@@ -95,6 +97,8 @@ protected function setUp(): void\n         $this->tracker_hierarchy_factory = $this->createMock(Tracker_HierarchyFactory::class);\n         $this->planning_factory          = $this->createMock(PlanningFactory::class);\n \n+        $this->user = UserTestBuilder::buildWithDefaults();\n+\n         $this->finder = new AgileDashboard_Milestone_Pane_Planning_SubmilestoneFinder(\n             $this->tracker_hierarchy_factory,\n             $this->planning_factory,\n@@ -108,7 +112,7 @@ public function testItReturnsNullIfThereIsNoChildTrackerForMultiMilestoneConfigu\n     {\n         $this->tracker_hierarchy_factory->method('getChildren')->with($this->sprint_tracker_id)->willReturn([]);\n \n-        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->sprint_milestone));\n+        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->user, $this->sprint_milestone));\n     }\n \n     /**\n@@ -119,9 +123,9 @@ public function testItReturnsSprintWhenBothPlanningsHaveSameBacklogTrackerForMul\n     {\n         $this->release_planning->method('getBacklogTrackers')->willReturn([$this->user_story_tracker]);\n         $this->tracker_hierarchy_factory->method('getChildren')->with($this->release_tracker_id)->willReturn([$this->sprint_tracker]);\n-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->sprint_tracker)->willReturn($this->sprint_planning);\n+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->sprint_tracker)->willReturn($this->sprint_planning);\n \n-        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->release_milestone));\n+        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));\n     }\n \n     /**\n@@ -132,9 +136,9 @@ public function testItReturnsNullWhenChildHaveNoPlanningForMultiMilestoneConfigu\n     {\n         $this->release_planning->method('getBacklogTrackers')->willReturn([$this->user_story_tracker]);\n         $this->tracker_hierarchy_factory->method('getChildren')->with($this->release_tracker_id)->willReturn([$this->sprint_tracker]);\n-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->sprint_tracker)->willReturn(null);\n+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->sprint_tracker)->willReturn(null);\n \n-        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->release_milestone));\n+        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));\n     }\n \n     /**\n@@ -146,9 +150,9 @@ public function testItReturnsSprintWhenTheBacklogTrackerIsParentForMultiMileston\n         $this->release_planning->method('getBacklogTrackers')->willReturn([$this->epic_tracker]);\n         $this->tracker_hierarchy_factory->method('getChildren')->with($this->release_tracker_id)->willReturn([$this->sprint_tracker]);\n         $this->tracker_hierarchy_factory->method('getAllParents')->with($this->user_story_tracker)->willReturn([$this->epic_tracker]);\n-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->sprint_tracker)->willReturn($this->sprint_planning);\n+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->sprint_tracker)->willReturn($this->sprint_planning);\n \n-        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->release_milestone));\n+        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));\n     }\n \n     /**\n@@ -162,9 +166,9 @@ public function testItReturnsNullWhenTheBacklogTrackerIsNotRelatedForMultiMilest\n         $this->release_planning->method('getBacklogTrackers')->willReturn([$this->epic_tracker]);\n         $this->tracker_hierarchy_factory->method('getChildren')->with($this->release_tracker_id)->willReturn([$this->requirement_tracker]);\n         $this->tracker_hierarchy_factory->method('getAllParents')->with($this->team_tracker)->willReturn([]);\n-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->requirement_tracker)->willReturn($this->requirement_planning);\n+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->requirement_tracker)->willReturn($this->requirement_planning);\n \n-        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->release_milestone));\n+        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));\n     }\n \n     /**\n@@ -177,9 +181,9 @@ public function testItReturnsSprintWhenTheBacklogTrackerIsAncestorForMultiMilest\n         $this->release_planning->method('getBacklogTrackers')->willReturn([$this->theme_tracker]);\n         $this->tracker_hierarchy_factory->method('getChildren')->with($this->release_tracker_id)->willReturn([$this->sprint_tracker]);\n         $this->tracker_hierarchy_factory->method('getAllParents')->with($this->user_story_tracker)->willReturn([$this->epic_tracker, $this->theme_tracker]);\n-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->sprint_tracker)->willReturn($this->sprint_planning);\n+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->sprint_tracker)->willReturn($this->sprint_planning);\n \n-        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->release_milestone));\n+        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));\n     }\n \n     /**\n@@ -197,9 +201,9 @@ public function testItReturnsSprintEvenIfThereIsSiblingWithoutMatchingBacklogTra\n         $this->tracker_hierarchy_factory->method('getAllParents')\n             ->withConsecutive([$this->team_tracker], [$this->user_story_tracker])->willReturn([]);\n         $this->planning_factory->method('getPlanningByPlanningTracker')\n-            ->withConsecutive([$this->requirement_tracker], [$this->sprint_tracker])\n+            ->withConsecutive([$this->user, $this->requirement_tracker], [$this->user, $this->sprint_tracker])\n             ->willReturnOnConsecutiveCalls($this->requirement_planning, $this->sprint_planning);\n \n-        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->release_milestone));\n+        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));\n     }\n }"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/ArtifactLinkerTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -73,7 +73,7 @@ protected function setUp(): void\n         $release_planning = PlanningBuilder::aPlanning(101)->withBacklogTrackers($epic_tracker)->build();\n \n         $planning_factory = $this->createMock(PlanningFactory::class);\n-        $planning_factory->method('getPlanningByPlanningTracker')->willReturnCallback(static fn(Tracker $tracker) => match ($tracker) {\n+        $planning_factory->method('getPlanningByPlanningTracker')->willReturnCallback(static fn(PFUser $user, Tracker $tracker) => match ($tracker) {\n             $corp_tracker    => $corp_planning,\n             $product_tracker => $product_planning,\n             $release_tracker => $release_planning,"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetBareMilestoneByArtifactIdTest.php",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -95,7 +95,10 @@ public function testItReturnsAMilestone(): void\n             ->withProject(ProjectTestBuilder::aProject()->build())\n             ->build();\n \n-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($planning_tracker)->willReturn(PlanningBuilder::aPlanning(101)->build());\n+        $this->planning_factory\n+            ->method('getPlanningByPlanningTracker')\n+            ->with($this->user, $planning_tracker)\n+            ->willReturn(PlanningBuilder::aPlanning(101)->build());\n \n         $changeset = ChangesetTestBuilder::aChangeset('1')->build();\n \n@@ -118,7 +121,7 @@ public function testItReturnsAMilestone(): void\n     public function testItReturnsNullWhenArtifactIsNotAMilestone(): void\n     {\n         $planning_tracker = TrackerTestBuilder::aTracker()->build();\n-        $this->planning_factory->method('getPlanningByPlanningTracker')->with()->willReturn(null);\n+        $this->planning_factory->method('getPlanningByPlanningTracker')->willReturn(null);\n \n         $artifact = ArtifactTestBuilder::anArtifact(1)\n             ->inTracker($planning_tracker)"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetLastMilestoneCreatedTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -88,7 +88,7 @@ protected function setUp(): void\n             ->withMilestoneTracker($planning_tracker)\n             ->build();\n \n-        $planning_factory->method('getPlanning')->with($this->planning_id)->willReturn($planning);\n+        $planning_factory->method('getPlanning')->with($this->current_user, $this->planning_id)->willReturn($planning);\n     }\n \n     public function testItReturnsEmptyMilestoneWhenNothingMatches(): void\n@@ -105,7 +105,7 @@ public function testItReturnsTheLastOpenArtifactOfPlanningTracker(): void\n             ->willReturn(['115' => $this->sprint_1_artifact, '104' => ArtifactTestBuilder::anArtifact(104)->build()]);\n \n         $this->milestone_factory->method('getMilestoneFromArtifact')\n-            ->with($this->sprint_1_artifact)\n+            ->with($this->current_user, $this->sprint_1_artifact)\n             ->willReturn($this->sprint_1_milestone);\n \n         $milestone = $this->milestone_factory->getLastMilestoneCreated($this->current_user, $this->planning_id);"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactTest.php",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -37,6 +37,7 @@\n use Tracker_FormElementFactory;\n use Tuleap\\AgileDashboard\\Test\\Builders\\PlanningBuilder;\n use Tuleap\\Test\\Builders\\ProjectTestBuilder;\n+use Tuleap\\Test\\Builders\\UserTestBuilder;\n use Tuleap\\Test\\PHPUnit\\TestCase;\n use Tuleap\\Tracker\\Artifact\\Artifact;\n use Tuleap\\Tracker\\Semantic\\Timeframe\\SemanticTimeframeBuilder;\n@@ -51,6 +52,7 @@ final class MilestoneFactoryGetMilestoneFromArtifactTest extends TestCase\n     private Artifact $release_artifact;\n     private Planning $release_planning;\n     private Project $project;\n+    private \\PFUser $user;\n \n     protected function setUp(): void\n     {\n@@ -65,6 +67,8 @@ protected function setUp(): void\n \n         $this->planning_factory = $this->createMock(PlanningFactory::class);\n \n+        $this->user = UserTestBuilder::buildWithDefaults();\n+\n         $this->milestone_factory = new Planning_MilestoneFactory(\n             $this->planning_factory,\n             $this->createMock(Tracker_ArtifactFactory::class),\n@@ -80,7 +84,7 @@ protected function setUp(): void\n     public function testItCreateMilestoneFromArtifact(): void\n     {\n         $this->planning_factory->expects(self::once())->method('getPlanningByPlanningTracker')->willReturn($this->release_planning);\n-        $this->assertEqualToReleaseMilestone($this->milestone_factory->getMilestoneFromArtifact($this->release_artifact));\n+        $this->assertEqualToReleaseMilestone($this->milestone_factory->getMilestoneFromArtifact($this->user, $this->release_artifact));\n     }\n \n     private function assertEqualToReleaseMilestone($actual_release_milestone): void\n@@ -96,6 +100,6 @@ private function assertEqualToReleaseMilestone($actual_release_milestone): void\n     public function testItReturnsNullWhenThereIsNoPlanningForTheTracker(): void\n     {\n         $this->planning_factory->expects(self::once())->method('getPlanningByPlanningTracker')->willReturn(null);\n-        self::assertNull($this->milestone_factory->getMilestoneFromArtifact($this->task_artifact));\n+        self::assertNull($this->milestone_factory->getMilestoneFromArtifact($this->user, $this->task_artifact));\n     }\n }"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactWithPlannedArtifactsTest.php",
          "status": "removed",
          "additions": 0,
          "deletions": 55,
          "patch": "@@ -1,55 +0,0 @@\n-<?php\n-/**\n- * Copyright (c) Enalean, 2012 - present. All Rights Reserved.\n- *\n- *  This file is a part of Tuleap.\n- *\n- * Tuleap is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation; either version 2 of the License, or\n- * (at your option) any later version.\n- *\n- * Tuleap is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n- *\n- */\n-\n-declare(strict_types=1);\n-\n-namespace Tuleap\\AgileDashboard\\Planning;\n-\n-use ArtifactNode;\n-use Planning_MilestoneFactory;\n-use Tuleap\\Test\\Builders\\UserTestBuilder;\n-use Tuleap\\Test\\PHPUnit\\TestCase;\n-use Tuleap\\Tracker\\Test\\Builders\\ArtifactTestBuilder;\n-\n-final class MilestoneFactoryGetMilestoneFromArtifactWithPlannedArtifactsTest extends TestCase\n-{\n-    public function testItCreateMilestoneFromArtifactAndLoadsItsPlannedArtifacts(): void\n-    {\n-        $milestone_factory = $this->createPartialMock(Planning_MilestoneFactory::class, [\n-            'getPlannedArtifacts',\n-            'getMilestoneFromArtifact',\n-        ]);\n-\n-        $user      = UserTestBuilder::buildWithDefaults();\n-        $artifact  = ArtifactTestBuilder::anArtifact(101)->build();\n-        $artifact2 = ArtifactTestBuilder::anArtifact(102)->build();\n-        $artifact3 = ArtifactTestBuilder::anArtifact(103)->build();\n-\n-        $node = new ArtifactNode($artifact);\n-        $node->addChild(new ArtifactNode($artifact2));\n-        $node->addChild(new ArtifactNode($artifact3));\n-\n-        $milestone_factory->expects(self::once())->method('getPlannedArtifacts')->with($user, $artifact)->willReturn($node);\n-        $milestone_factory->expects(self::once())->method('getMilestoneFromArtifact')->with($artifact, $node);\n-\n-        $milestone_factory->getMilestoneFromArtifactWithPlannedArtifacts($artifact, $user);\n-    }\n-}"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -168,7 +168,7 @@ public function testItCanRetrieveSubMilestonesOfAGivenMilestone(): void\n \n \n         $this->planning_factory->method('getPlanningByPlanningTracker')\n-            ->withConsecutive([$sprints_tracker], [$sprints_tracker], [$hackfests_tracker])\n+            ->withConsecutive([$this->user, $sprints_tracker], [$this->user, $sprints_tracker], [$this->user, $hackfests_tracker])\n             ->willReturnOnConsecutiveCalls($sprint_planning, $sprint_planning, $hackfest_planning);\n \n         $milestone = new Planning_ArtifactMilestone("
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneWithAncestorsTest.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -76,7 +76,7 @@ public function testItBuildTheMilestoneForOneParent(): void\n         $this->sprint_artifact->method('getAllAncestors')->with($this->current_user)->willReturn([$release_artifact]);\n \n         $release_milestone = $this->createMock(Planning_ArtifactMilestone::class);\n-        $this->milestone_factory->method('getMilestoneFromArtifact')->with($release_artifact)->willReturn($release_milestone);\n+        $this->milestone_factory->method('getMilestoneFromArtifact')->with($this->current_user, $release_artifact)->willReturn($release_milestone);\n \n         $milestones = $this->milestone_factory->getMilestoneAncestors($this->current_user, $this->sprint_milestone);\n         self::assertEquals([$release_milestone], $milestones);\n@@ -93,7 +93,7 @@ public function testItBuildTheMilestoneForSeveralParents(): void\n         $release_milestone = $this->createMock(Planning_ArtifactMilestone::class);\n         $release_milestone->method('getArtifact')->willReturn($release_artifact);\n         $this->milestone_factory->method('getMilestoneFromArtifact')\n-            ->withConsecutive([$release_artifact], [$product_artifact])\n+            ->withConsecutive([$this->current_user, $release_artifact], [$this->current_user, $product_artifact])\n             ->willReturnOnConsecutiveCalls($release_milestone, $product_milestone);\n \n         $milestones = $this->milestone_factory->getMilestoneAncestors($this->current_user, $this->sprint_milestone);\n@@ -105,7 +105,7 @@ public function testItFiltersOutTheEmptyMilestones(): void\n         $release_artifact = ArtifactTestBuilder::anArtifact(1)->build();\n         $this->sprint_artifact->method('getAllAncestors')->with($this->current_user)->willReturn([$release_artifact]);\n \n-        $this->milestone_factory->method('getMilestoneFromArtifact')->with($release_artifact)->willReturn(null);\n+        $this->milestone_factory->method('getMilestoneFromArtifact')->with($this->current_user, $release_artifact)->willReturn(null);\n \n         $milestones = $this->milestone_factory->getMilestoneAncestors($this->current_user, $this->sprint_milestone);\n         self::assertEquals([], $milestones);"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetPaginatedMilestonesTest.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -230,7 +230,7 @@ public function testItReturnsSubMilestonesFilteredByStatus(): void\n \n         $this->artifact_factory->method('getInstanceFromRow')->willReturnOnConsecutiveCalls($first_artifact, $second_artifact);\n         $this->planning_factory->method('getPlanningByPlanningTracker')\n-            ->with($this->sub_milestone_tracker)\n+            ->with($this->user, $this->sub_milestone_tracker)\n             ->willReturn($this->sub_planning);\n \n         $sub_milestones = $this->getSubMilestones();\n@@ -291,7 +291,7 @@ public function testItReturnsSiblingTopMilestonesFilteredByStatus(): void\n \n         $this->artifact_factory->method('getInstanceFromRow')->willReturn($first_artifact, $second_artifact);\n         $this->planning_factory->method('getPlanningByPlanningTracker')\n-            ->with($top_milestone_tracker)\n+            ->with($this->user, $top_milestone_tracker)\n             ->willReturn($this->top_planning);\n \n         $sibling_milestones = $this->getSiblingMilestones();\n@@ -343,7 +343,7 @@ public function testItReturnsSiblingSubMilestonesFilteredByStatus(): void\n \n         $this->artifact_factory->method('getInstanceFromRow')->willReturnOnConsecutiveCalls($first_artifact, $second_artifact);\n         $this->planning_factory->method('getPlanningByPlanningTracker')\n-            ->with($this->sub_milestone_tracker)\n+            ->with($this->user, $this->sub_milestone_tracker)\n             ->willReturn($this->sub_planning);\n \n         $sibling_milestones = $this->getSiblingMilestones();"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningControllerTest.php",
          "status": "modified",
          "additions": 64,
          "deletions": 61,
          "patch": "@@ -28,7 +28,6 @@\n use EventManager;\n use Exception;\n use ForgeConfig;\n-use LogicException;\n use PHPUnit\\Framework\\MockObject\\MockObject;\n use Planning_Controller;\n use Planning_RequestValidator;\n@@ -48,6 +47,7 @@\n use Tuleap\\ForgeConfigSandbox;\n use Tuleap\\GlobalLanguageMock;\n use Tuleap\\GlobalResponseMock;\n+use Tuleap\\Test\\Builders\\HTTPRequestBuilder;\n use Tuleap\\Test\\Builders\\ProjectTestBuilder;\n use Tuleap\\Test\\Builders\\UserTestBuilder;\n use Tuleap\\Test\\DB\\DBTransactionExecutorPassthrough;\n@@ -64,7 +64,6 @@ final class PlanningControllerTest extends TestCase\n     private PlanningUpdater&MockObject $planning_updater;\n     private Planning_RequestValidator&MockObject $planning_request_validator;\n     private EventManager&MockObject $event_manager;\n-    private Codendi_Request&MockObject $request;\n     private Planning_Controller $planning_controller;\n     private UpdateIsAllowedChecker&MockObject $root_planning_update_checker;\n     private UpdateRequestValidator&MockObject $update_request_validator;\n@@ -75,9 +74,7 @@ protected function setUp(): void\n     {\n         ForgeConfig::set('codendi_dir', AGILEDASHBOARD_BASE_DIR . '/../../..');\n \n-        $this->request = $this->createMock(Codendi_Request::class);\n         $this->project = ProjectTestBuilder::aProject()->withId(101)->build();\n-        $this->request->method('getProject')->willReturn($this->project);\n \n         $this->planning_factory     = $this->createMock(PlanningFactory::class);\n         $this->explicit_backlog_dao = $this->createMock(ArtifactsInExplicitBacklogDao::class);\n@@ -88,9 +85,12 @@ protected function setUp(): void\n         $this->root_planning_update_checker    = $this->createMock(UpdateIsAllowedChecker::class);\n         $this->update_request_validator        = $this->createMock(UpdateRequestValidator::class);\n         $this->backlog_trackers_update_checker = $this->createMock(BacklogTrackersUpdateChecker::class);\n+    }\n \n-        $this->planning_controller = new Planning_Controller(\n-            $this->request,\n+    private function getPlanningController(Codendi_Request $request): Planning_Controller\n+    {\n+        return $this->planning_controller = new Planning_Controller(\n+            $request,\n             $this->planning_factory,\n             $this->createMock(ProjectManager::class),\n             $this->createMock(AgileDashboard_XMLFullStructureExporter::class),\n@@ -116,8 +116,6 @@ public function testItDeletesThePlanningAndRedirectsToTheIndex(): void\n         $user = UserTestBuilder::anActiveUser()\n             ->withAdministratorOf($this->project)\n             ->build();\n-        $this->request->expects(self::exactly(2))->method('getCurrentUser')->willReturn($user);\n-        $this->request->expects(self::once())->method('get')->with('planning_id')->willReturn(42);\n \n         $root_planning = PlanningBuilder::aPlanning(101)->withId(109)->build();\n         $this->planning_factory->method('getRootPlanning')->willReturn($root_planning);\n@@ -128,16 +126,19 @@ public function testItDeletesThePlanningAndRedirectsToTheIndex(): void\n \n         $GLOBALS['Response']->expects(self::once())->method('redirect')->with('/plugins/agiledashboard/?group_id=101&action=admin');\n \n-        $this->planning_controller->delete();\n+        $request = HTTPRequestBuilder::get()\n+            ->withUser($user)\n+            ->withProject($this->project)\n+            ->withParam('planning_id', 42)\n+            ->build();\n+        $this->getPlanningController($request)->delete();\n     }\n \n     public function testItDeletesExplicitBacklogPlanning(): void\n     {\n         $user = UserTestBuilder::anActiveUser()\n             ->withAdministratorOf($this->project)\n             ->build();\n-        $this->request->expects(self::exactly(2))->method('getCurrentUser')->willReturn($user);\n-        $this->request->expects(self::once())->method('get')->with('planning_id')->willReturn(42);\n \n         $root_planning = PlanningBuilder::aPlanning(101)->withId(42)->build();\n         $this->planning_factory->method('getRootPlanning')->willReturn($root_planning);\n@@ -148,7 +149,12 @@ public function testItDeletesExplicitBacklogPlanning(): void\n \n         $GLOBALS['Response']->expects(self::once())->method('redirect')->with('/plugins/agiledashboard/?group_id=101&action=admin');\n \n-        $this->planning_controller->delete();\n+        $request = HTTPRequestBuilder::get()\n+            ->withUser($user)\n+            ->withProject($this->project)\n+            ->withParam('planning_id', 42)\n+            ->build();\n+        $this->getPlanningController($request)->delete();\n     }\n \n     public function testItDoesntDeleteAnythingIfTheUserIsNotAdmin(): void\n@@ -157,14 +163,17 @@ public function testItDoesntDeleteAnythingIfTheUserIsNotAdmin(): void\n             ->withoutMemberOfProjects()\n             ->withoutSiteAdministrator()\n             ->build();\n-        $this->request->expects(self::once())->method('getCurrentUser')->willReturn($user);\n-        $this->request->expects(self::never())->method('get')->with('planning_id');\n \n         // redirect() is a never return method, but phpunit mock system cannot handle it, so replace the exit() call by an exception\n         $GLOBALS['Response']->expects(self::once())->method('redirect')->willThrowException(new Exception());\n \n         self::expectException(Exception::class);\n-        $this->planning_controller->delete();\n+\n+        $request = HTTPRequestBuilder::get()\n+            ->withUser($user)\n+            ->withProject($this->project)\n+            ->build();\n+        $this->getPlanningController($request)->delete();\n     }\n \n     public function testItOnlyUpdateCardWallConfigWhenRequestIsInvalid(): void\n@@ -173,9 +182,6 @@ public function testItOnlyUpdateCardWallConfigWhenRequestIsInvalid(): void\n             ->withAdministratorOf($this->project)\n             ->build();\n \n-        $this->request->expects(self::once())->method('getCurrentUser')->willReturn($user);\n-        $this->request->method('get')->with('planning_id')->willReturn(1);\n-\n         $GLOBALS['Response']->expects(self::once())->method('addFeedback');\n \n         $this->event_manager->expects(self::once())->method('processEvent');\n@@ -189,8 +195,12 @@ public function testItOnlyUpdateCardWallConfigWhenRequestIsInvalid(): void\n         $GLOBALS['Response']->expects(self::once())->method('redirect');\n \n         $this->planning_updater->expects(self::never())->method('update');\n-\n-        $this->planning_controller->update();\n+        $request = HTTPRequestBuilder::get()\n+            ->withUser($user)\n+            ->withProject($this->project)\n+            ->withParam('planning_id', 1)\n+            ->build();\n+        $this->getPlanningController($request)->update();\n     }\n \n     public function testItOnlyUpdateCardWallConfigWhenRootPlanningCannotBeUpdated(): void\n@@ -199,15 +209,6 @@ public function testItOnlyUpdateCardWallConfigWhenRootPlanningCannotBeUpdated():\n             ->withAdministratorOf($this->project)\n             ->build();\n \n-        $this->request->expects(self::exactly(2))->method('getCurrentUser')->willReturn($user);\n-        $planning_parameters = [];\n-        $this->request->method('get')\n-            ->will(self::returnCallback(static fn(string $arg) => match ($arg) {\n-                'planning_id' => 1,\n-                'planning'    => $planning_parameters,\n-                default       => throw new LogicException(\"Should not be called with '$arg'\"),\n-            }));\n-\n         $GLOBALS['Response']->expects(self::once())->method('addFeedback');\n \n         $this->event_manager->expects(self::once())->method('processEvent');\n@@ -226,7 +227,12 @@ public function testItOnlyUpdateCardWallConfigWhenRootPlanningCannotBeUpdated():\n \n         $GLOBALS['Response']->expects(self::once())->method('redirect');\n \n-        $this->planning_controller->update();\n+        $request = HTTPRequestBuilder::get()\n+            ->withUser($user)\n+            ->withProject($this->project)\n+            ->withParams(['planning_id' => 1, 'planning' => []])\n+            ->build();\n+        $this->getPlanningController($request)->update();\n     }\n \n     public function testItOnlyUpdateCardWallConfigWhenPlanningCannotBeUpdated(): void\n@@ -235,15 +241,6 @@ public function testItOnlyUpdateCardWallConfigWhenPlanningCannotBeUpdated(): voi\n             ->withAdministratorOf($this->project)\n             ->build();\n \n-        $this->request->expects(self::exactly(2))->method('getCurrentUser')->willReturn($user);\n-        $planning_parameters = [];\n-        $this->request->method('get')\n-            ->will(self::returnCallback(static fn(string $arg) => match ($arg) {\n-                'planning_id' => 1,\n-                'planning'    => $planning_parameters,\n-                default       => throw new LogicException(\"Should not be called with '$arg'\"),\n-            }));\n-\n         $GLOBALS['Response']->expects(self::once())->method('addFeedback');\n \n         $this->event_manager->expects(self::once())->method('processEvent');\n@@ -263,7 +260,12 @@ public function testItOnlyUpdateCardWallConfigWhenPlanningCannotBeUpdated(): voi\n \n         $GLOBALS['Response']->expects(self::once())->method('redirect');\n \n-        $this->planning_controller->update();\n+        $request = HTTPRequestBuilder::get()\n+            ->withUser($user)\n+            ->withProject($this->project)\n+            ->withParams(['planning_id' => 1, 'planning' => []])\n+            ->build();\n+        $this->getPlanningController($request)->update();\n     }\n \n     public function testItUpdatesThePlanning(): void\n@@ -272,14 +274,7 @@ public function testItUpdatesThePlanning(): void\n             ->withAdministratorOf($this->project)\n             ->build();\n \n-        $this->request->expects(self::exactly(2))->method('getCurrentUser')->willReturn($user);\n         $planning_parameters = [];\n-        $this->request->method('get')\n-            ->will(self::returnCallback(static fn(string $arg) => match ($arg) {\n-                'planning_id' => 1,\n-                'planning'    => $planning_parameters,\n-                default       => throw new LogicException(\"Should not be called with '$arg'\"),\n-            }));\n \n         $GLOBALS['Response']->expects(self::once())->method('addFeedback');\n \n@@ -298,7 +293,12 @@ public function testItUpdatesThePlanning(): void\n \n         $GLOBALS['Response']->expects(self::once())->method('redirect');\n \n-        $this->planning_controller->update();\n+        $request = HTTPRequestBuilder::get()\n+            ->withUser($user)\n+            ->withProject($this->project)\n+            ->withParams(['planning_id' => 1, 'planning' => []])\n+            ->build();\n+        $this->getPlanningController($request)->update();\n     }\n \n     public function testItShowsAnErrorMessageAndRedirectsBackToTheCreationForm(): void\n@@ -307,17 +307,18 @@ public function testItShowsAnErrorMessageAndRedirectsBackToTheCreationForm(): vo\n             ->withAdministratorOf($this->project)\n             ->build();\n \n-        $this->request->method('getCurrentUser')->willReturn($user);\n-        $this->request->method('getProject')->willReturn($this->project);\n-\n         $this->planning_request_validator->method('isValid')->willReturn(false);\n \n         $this->planning_factory->expects(self::never())->method('createPlanning');\n \n         $GLOBALS['Response']->expects(self::once())->method('addFeedback');\n         $GLOBALS['Response']->expects(self::once())->method('redirect')->with('/plugins/agiledashboard/?group_id=101&action=new');\n \n-        $this->planning_controller->create();\n+        $request = HTTPRequestBuilder::get()\n+            ->withUser($user)\n+            ->withProject($this->project)\n+            ->build();\n+        $this->getPlanningController($request)->create();\n     }\n \n     public function testItCreatesThePlanningAndRedirectsToTheIndex(): void\n@@ -335,18 +336,19 @@ public function testItCreatesThePlanningAndRedirectsToTheIndex(): void\n             PlanningPermissionsManager::PERM_PRIORITY_CHANGE => ['2', '3'],\n         ];\n \n-        $this->request->method('getCurrentUser')->willReturn($user);\n-        $this->request->method('get')->with('planning')->willReturn($planning_parameters);\n-        $this->request->method('getProject')->willReturn($this->project);\n-\n         $this->planning_request_validator->method('isValid')->willReturn(true);\n \n         $this->planning_factory->expects(self::once())->method('createPlanning');\n \n         $GLOBALS['Response']->expects(self::once())->method('addFeedback');\n         $GLOBALS['Response']->expects(self::once())->method('redirect')->with('/plugins/agiledashboard/?group_id=101&action=admin');\n \n-        $this->planning_controller->create();\n+        $request = HTTPRequestBuilder::get()\n+            ->withUser($user)\n+            ->withProject($this->project)\n+            ->withParam('planning', $planning_parameters)\n+            ->build();\n+        $this->getPlanningController($request)->create();\n     }\n \n     public function testItDoesntCreateAnythingIfTheUserIsNotAdmin(): void\n@@ -356,9 +358,6 @@ public function testItDoesntCreateAnythingIfTheUserIsNotAdmin(): void\n             ->withoutSiteAdministrator()\n             ->build();\n \n-        $this->request->method('getProject')->willReturn($this->project);\n-        $this->request->method('getCurrentUser')->willReturn($user);\n-\n         $this->planning_factory->expects(self::never())->method('createPlanning');\n \n         $GLOBALS['Response']->expects(self::once())->method('addFeedback');\n@@ -367,6 +366,10 @@ public function testItDoesntCreateAnythingIfTheUserIsNotAdmin(): void\n \n         self::expectException(Exception::class);\n \n-        $this->planning_controller->create();\n+        $request = HTTPRequestBuilder::get()\n+            ->withUser($user)\n+            ->withProject($this->project)\n+            ->build();\n+        $this->getPlanningController($request)->create();\n     }\n }"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryDuplicationTest.php",
          "status": "modified",
          "additions": 15,
          "deletions": 5,
          "patch": "@@ -28,6 +28,7 @@\n use PlanningPermissionsManager;\n use TrackerFactory;\n use Tuleap\\AgileDashboard\\Test\\Builders\\PlanningBuilder;\n+use Tuleap\\Test\\Builders\\UserTestBuilder;\n use Tuleap\\Test\\PHPUnit\\TestCase;\n \n final class PlanningFactoryDuplicationTest extends TestCase\n@@ -36,6 +37,7 @@ final class PlanningFactoryDuplicationTest extends TestCase\n     private PlanningFactory $planning_factory;\n     private PlanningPermissionsManager&MockObject $planning_permissions_manager;\n     private PlanningDao&MockObject $planning_dao;\n+    private \\PFUser $user;\n \n     protected function setUp(): void\n     {\n@@ -49,6 +51,8 @@ protected function setUp(): void\n             $this->planning_permissions_manager\n         );\n \n+        $this->user = UserTestBuilder::buildWithDefaults();\n+\n         $this->partial_factory = $this->getMockBuilder(PlanningFactory::class)\n             ->setConstructorArgs([$this->planning_dao, $tracker_factory, $this->planning_permissions_manager])\n             ->onlyMethods(['getPlanning'])\n@@ -68,7 +72,10 @@ public function testItDuplicatesPlannings(): void\n         $bug_tracker_copy_id    = 7;\n         $faq_tracker_copy_id    = 8;\n \n-        $this->partial_factory->method('getPlanning')->with(1)->willReturn(PlanningBuilder::aPlanning(123)->build());\n+        $this->partial_factory\n+            ->method('getPlanning')\n+            ->with($this->user, 1)\n+            ->willReturn(PlanningBuilder::aPlanning(123)->build());\n \n         $tracker_mapping = [\n             $sprint_tracker_id => $sprint_tracker_copy_id,\n@@ -110,7 +117,7 @@ public function testItDuplicatesPlannings(): void\n \n         $this->planning_permissions_manager->method('getGroupIdsWhoHasPermissionOnPlanning');\n \n-        $this->partial_factory->duplicatePlannings($group_id, $tracker_mapping, []);\n+        $this->partial_factory->duplicatePlannings($this->user, $group_id, $tracker_mapping, []);\n     }\n \n     public function testItDoesNothingIfThereAreNoTrackerMappings(): void\n@@ -120,7 +127,7 @@ public function testItDoesNothingIfThereAreNoTrackerMappings(): void\n \n         $this->planning_dao->expects(self::never())->method('createPlanning');\n \n-        $this->planning_factory->duplicatePlannings($group_id, $empty_tracker_mapping, []);\n+        $this->planning_factory->duplicatePlannings($this->user, $group_id, $empty_tracker_mapping, []);\n     }\n \n     public function testItTranslatesUgroupsIdsFromUgroupsMapping(): void\n@@ -136,7 +143,10 @@ public function testItTranslatesUgroupsIdsFromUgroupsMapping(): void\n         $bug_tracker_copy_id    = 7;\n         $faq_tracker_copy_id    = 8;\n \n-        $this->partial_factory->method('getPlanning')->with(1)->willReturn(PlanningBuilder::aPlanning(123)->build());\n+        $this->partial_factory\n+            ->method('getPlanning')\n+            ->with($this->user, 1)\n+            ->willReturn(PlanningBuilder::aPlanning(123)->build());\n \n         $tracker_mapping = [\n             $sprint_tracker_id => $sprint_tracker_copy_id,\n@@ -189,6 +199,6 @@ public function testItTranslatesUgroupsIdsFromUgroupsMapping(): void\n         $this->planning_permissions_manager->method('getGroupIdsWhoHasPermissionOnPlanning')->willReturn($ugroups_mapping);\n         $this->planning_dao->method('createPlanning');\n \n-        $this->partial_factory->duplicatePlannings($group_id, $tracker_mapping, $ugroups_mapping);\n+        $this->partial_factory->duplicatePlannings($this->user, $group_id, $tracker_mapping, $ugroups_mapping);\n     }\n }"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryTestGetPlanningByPlanningTrackerTest.php",
          "status": "modified",
          "additions": 15,
          "deletions": 9,
          "patch": "@@ -28,6 +28,7 @@\n use PlanningPermissionsManager;\n use TrackerFactory;\n use Tuleap\\AgileDashboard\\Test\\Builders\\PlanningBuilder;\n+use Tuleap\\Test\\Builders\\UserTestBuilder;\n use Tuleap\\Test\\PHPUnit\\TestCase;\n use Tuleap\\Tracker\\Test\\Builders\\TrackerTestBuilder;\n \n@@ -55,23 +56,28 @@ public function testItReturnsNothingIfThereIsNoAssociatedPlanning(): void\n         $tracker = TrackerTestBuilder::aTracker()->withId(99)->build();\n         $this->planning_dao->method('searchByMilestoneTrackerId')->willReturn(null);\n \n-        self::assertNull($this->planning_factory->getPlanningByPlanningTracker($tracker));\n+        self::assertNull($this->planning_factory->getPlanningByPlanningTracker(UserTestBuilder::buildWithDefaults(), $tracker));\n     }\n \n-    public function testItReturnsAPlanning(): void\n+    public function testItReturnsAPlanningWithoutUnreadableTrackers(): void\n     {\n-        $tracker          = TrackerTestBuilder::aTracker()->withId(99)->build();\n-        $planning_tracker = TrackerTestBuilder::aTracker()->withId(1)->build();\n-        $backlog_tracker  = TrackerTestBuilder::aTracker()->withId(2)->build();\n+        $tracker           = TrackerTestBuilder::aTracker()->withId(99)->build();\n+        $planning_tracker  = TrackerTestBuilder::aTracker()->withId(1)->withUserCanView(true)->build();\n+        $backlog_tracker   = TrackerTestBuilder::aTracker()->withId(2)->withUserCanView(true)->build();\n+        $topsecret_tracker = TrackerTestBuilder::aTracker()->withId(3)->withUserCanView(false)->build();\n \n         $planning = PlanningBuilder::aPlanning(102)\n             ->withMilestoneTracker($planning_tracker)\n             ->withBacklogTrackers($backlog_tracker)\n             ->build();\n \n-        $this->tracker_factory->expects(self::exactly(2))->method('getTrackerById')\n-            ->withConsecutive([1], [2])\n-            ->willReturnOnConsecutiveCalls($planning_tracker, $backlog_tracker);\n+        $this->tracker_factory\n+            ->method('getTrackerById')\n+            ->willReturnCallback(fn ($id) => match ($id) {\n+                1 => $planning_tracker,\n+                2 => $backlog_tracker,\n+                3 => $topsecret_tracker,\n+            });\n \n         $rows = [\n             'id'                  => 12,\n@@ -85,7 +91,7 @@ public function testItReturnsAPlanning(): void\n         $this->planning_dao->method('searchBacklogTrackersByPlanningId')->willReturn([['tracker_id' => 2]]);\n         $this->planning_dao->method('searchByMilestoneTrackerId')->willReturn($rows);\n \n-        $retrieved_planning = $this->planning_factory->getPlanningByPlanningTracker($tracker);\n+        $retrieved_planning = $this->planning_factory->getPlanningByPlanningTracker(UserTestBuilder::buildWithDefaults(), $tracker);\n         self::assertEquals($planning->getPlanningTracker(), $retrieved_planning->getPlanningTracker());\n         self::assertEquals($planning->getBacklogTrackers(), $retrieved_planning->getBacklogTrackers());\n     }"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryTestGetPlanningTest.php",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -72,11 +72,11 @@ protected function setUp(): void\n \n         $this->user = UserTestBuilder::buildWithDefaults();\n \n-        $this->planning_tracker = TrackerTestBuilder::aTracker()->withId(103)->build();\n-        $this->backlog_tracker  = TrackerTestBuilder::aTracker()->withId(104)->build();\n+        $this->planning_tracker = TrackerTestBuilder::aTracker()->withId(103)->withUserCanView(true)->build();\n+        $this->backlog_tracker  = TrackerTestBuilder::aTracker()->withId(104)->withUserCanView(true)->build();\n \n-        $epic_tracker          = TrackerTestBuilder::aTracker()->withId(101)->build();\n-        $story_tracker         = TrackerTestBuilder::aTracker()->withId(100)->build();\n+        $epic_tracker          = TrackerTestBuilder::aTracker()->withId(101)->withUserCanView(true)->build();\n+        $story_tracker         = TrackerTestBuilder::aTracker()->withId(100)->withUserCanView(true)->build();\n         $this->release_tracker = $this->mockTrackerWithId(107);\n         $this->sprint_tracker  = $this->mockTrackerWithId(108);\n \n@@ -162,7 +162,7 @@ public function testItCanRetrieveBothAPlanningAndItsTrackers(): void\n             ->with($planning_id)\n             ->willReturn([['tracker_id' => 104]]);\n \n-        $planning = $this->planning_factory->getPlanning($planning_id);\n+        $planning = $this->planning_factory->getPlanning($this->user, $planning_id);\n \n         self::assertInstanceOf(Planning::class, $planning);\n         self::assertEquals($this->planning_tracker, $planning->getPlanningTracker());"
        },
        {
          "filename": "plugins/agiledashboard/tests/unit/Planning/Planning_RequestValidatorTest.php",
          "status": "modified",
          "additions": 8,
          "deletions": 9,
          "patch": "@@ -21,6 +21,7 @@\n use Tuleap\\AgileDashboard\\AgileDashboard\\Planning\\VerifyTrackerAccessDuringImportStrategy;\n use Tuleap\\AgileDashboard\\AgileDashboard\\Planning\\EnsureThatTrackerIsReadableByUser;\n use Tuleap\\AgileDashboard\\Test\\Builders\\PlanningBuilder;\n+use Tuleap\\Test\\Builders\\UserTestBuilder;\n use Tuleap\\Tracker\\Test\\Builders\\TrackerTestBuilder;\n \n //phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\n@@ -60,28 +61,26 @@ final class Planning_RequestValidatorTest extends \\Tuleap\\Test\\PHPUnit\\TestCase\n     private $tracker_factory;\n     private PlanningFactory|\\PHPUnit\\Framework\\MockObject\\MockObject $planning_factory;\n     private EnsureThatTrackerIsReadableByUser $tracker_access_during_import_strategy;\n+    private PFUser $user;\n \n     protected function setUp(): void\n     {\n+        $this->user = UserTestBuilder::buildWithDefaults();\n+\n         $this->planning_factory = $this->createMock(\\PlanningFactory::class);\n         $this->tracker_factory  = $this->createMock(TrackerFactory::class);\n         $this->validator        = new Planning_RequestValidator(\n             $this->planning_factory,\n             $this->tracker_factory,\n-            new class implements \\Tuleap\\User\\ProvideCurrentUser\n-            {\n-                public function getCurrentUser(): \\PFUser\n-                {\n-                    return \\Tuleap\\Test\\Builders\\UserTestBuilder::aUser()->build();\n-                }\n-            }\n+            \\Tuleap\\Test\\Stubs\\ProvideCurrentUserStub::buildWithUser($this->user),\n         );\n \n         $this->release_planning_id = 34;\n         $this->releases_tracker_id = 56;\n         $this->sprints_tracker_id  = 78;\n         $this->holidays_tracker_id = 90;\n \n+\n         $this->tracker_access_during_import_strategy = new EnsureThatTrackerIsReadableByUser();\n     }\n \n@@ -189,7 +188,7 @@ public function testItValidatesTheRequestWhenPlanningTrackerCannotBeSeenByTheCur\n             ->withMilestoneTracker($release_tracker)\n             ->build();\n \n-        $this->planning_factory->method('getPlanning')->with($this->release_planning_id)->willReturn(\n+        $this->planning_factory->method('getPlanning')->with($this->user, $this->release_planning_id)->willReturn(\n             $this->release_planning\n         );\n         $this->planning_factory->method('getPlanningTrackerIdsByGroupId')->with($group_id)->willReturn(\n@@ -246,7 +245,7 @@ private function getAReleaseWithPlanning(): void\n             ->withMilestoneTracker($release_tracker)\n             ->build();\n \n-        $this->planning_factory->method('getPlanning')->with($this->release_planning_id)->willReturn(\n+        $this->planning_factory->method('getPlanning')->with($this->user, $this->release_planning_id)->willReturn(\n             $this->release_planning\n         );\n         $this->planning_factory->method('getPlanningTrackerIdsByGroupId')->with($group_id)->willReturn("
        },
        {
          "filename": "plugins/cardwall/include/SingleCardBuilder.class.php",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -72,7 +72,7 @@ public function __construct(\n     public function getSingleCard(PFUser $user, $artifact_id, $planning_id)\n     {\n         $card_artifact       = $this->getArtifact($artifact_id);\n-        $config              = $this->getConfig($planning_id);\n+        $config              = $this->getConfig($user, $planning_id);\n         $field_provider      = $this->getFieldRetriever($config);\n         $columns             = $config->getDashboardColumns();\n         $display_preferences = new Cardwall_UserPreferences_UserPreferencesDisplayUser(\n@@ -177,18 +177,18 @@ private function getArtifact($artifact_id)\n         throw new CardControllerBuilderRequestIdException();\n     }\n \n-    private function getConfig($planning_id)\n+    private function getConfig(PFUser $user, $planning_id)\n     {\n-        $config = $this->config_factory->getOnTopConfigByPlanning($this->getPlanning($planning_id));\n+        $config = $this->config_factory->getOnTopConfigByPlanning($this->getPlanning($user, $planning_id));\n         if ($config && $config->isEnabled()) {\n             return $config;\n         }\n         throw new CardControllerBuilderRequestDataException();\n     }\n \n-    private function getPlanning($planning_id)\n+    private function getPlanning(PFUser $user, $planning_id)\n     {\n-        $planning = $this->planning_factory->getPlanning($planning_id);\n+        $planning = $this->planning_factory->getPlanning($user, $planning_id);\n         if ($planning) {\n             return $planning;\n         }"
        },
        {
          "filename": "plugins/cardwall/include/cardwallPlugin.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -480,7 +480,7 @@ public function redirectAfterArtifactCreationOrUpdateEvent(RedirectAfterArtifact\n                 $redirect_params = current($cardwall);\n                 switch ($redirect_to) {\n                     case 'agile':\n-                        $this->redirectToAgileDashboard($redirect, $redirect_params);\n+                        $this->redirectToAgileDashboard($event->getRequest()->getCurrentUser(), $redirect, $redirect_params);\n                         break;\n                     case 'renderer':\n                         $this->redirectToRenderer($redirect, $redirect_params);\n@@ -492,11 +492,11 @@ public function redirectAfterArtifactCreationOrUpdateEvent(RedirectAfterArtifact\n         }\n     }\n \n-    private function redirectToAgileDashboard(Tracker_Artifact_Redirect $redirect, array $redirect_params)\n+    private function redirectToAgileDashboard(PFUser $user, Tracker_Artifact_Redirect $redirect, array $redirect_params)\n     {\n         $planning_id = key($redirect_params);\n         $artifact_id = current($redirect_params);\n-        $planning    = PlanningFactory::build()->getPlanning($planning_id);\n+        $planning    = PlanningFactory::build()->getPlanning($user, $planning_id);\n         if ($planning) {\n             $redirect->base_url         = AGILEDASHBOARD_BASE_URL;\n             $redirect->query_parameters = ["
        },
        {
          "filename": "plugins/program_management/include/Adapter/Program/PlanningAdapter.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -95,7 +95,7 @@ public function retrieveSecondPlanningMilestoneTracker(\n             return null;\n         }\n \n-        $children_planning = $this->planning_factory->getChildrenPlanning($root_planning);\n+        $children_planning = $this->planning_factory->getChildrenPlanning($pfuser, $root_planning);\n         if (! $children_planning) {\n             $errors_collector?->addTeamSprintPlanningNotFoundOrNotAccessible($project);\n             return null;"
        },
        {
          "filename": "plugins/program_management/tests/unit/Adapter/Events/TrackersDuplicatedHandlerTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -32,6 +32,7 @@\n use Tuleap\\ProgramManagement\\Tests\\Stub\\Program\\Plan\\RetrievePlanConfigurationStub;\n use Tuleap\\Project\\MappingRegistry;\n use Tuleap\\Test\\Builders\\ProjectTestBuilder;\n+use Tuleap\\Test\\Builders\\UserTestBuilder;\n use Tuleap\\Test\\PHPUnit\\TestCase;\n use Tuleap\\Tracker\\TrackerEventTrackersDuplicated;\n \n@@ -94,6 +95,7 @@ private function handle(): void\n         );\n         $handler->handle(\n             new TrackerEventTrackersDuplicated(\n+                UserTestBuilder::buildWithDefaults(),\n                 [],\n                 [],\n                 [],"
        },
        {
          "filename": "plugins/projectmilestones/include/Widget/ProjectMilestonesPresenterBuilder.php",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -194,8 +194,9 @@ public function getProjectMilestonePresenter(?Project $project, ?Planning $root_\n             throw ProjectMilestonesException::buildProjectDontExist();\n         }\n \n+        $user = $this->request->getCurrentUser();\n         try {\n-            $this->project_access_checker->checkUserCanAccessProject($this->request->getCurrentUser(), $project);\n+            $this->project_access_checker->checkUserCanAccessProject($user, $project);\n         } catch (Project_AccessPrivateException $e) {\n             throw ProjectMilestonesException::buildUserNotAccessToPrivateProject();\n         } catch (Project_AccessDeletedException | Project_AccessProjectNotFoundException | Project_AccessRestrictedException | ProjectAccessSuspendedException $e) {\n@@ -217,7 +218,7 @@ public function getProjectMilestonePresenter(?Project $project, ?Planning $root_\n             $project,\n             $this->getNumberUpcomingReleases(),\n             $this->getNumberBacklogItems(),\n-            $this->getTrackersIdAgileDashboard(),\n+            $this->getTrackersIdAgileDashboard($user),\n             $this->getLabelTrackerPlanning(),\n             $this->isTimeframeDurationField(),\n             $this->getLabelStartDateField(),\n@@ -253,15 +254,15 @@ private function getNumberBacklogItems(): int\n         return $backlog->count();\n     }\n \n-    private function getTrackersIdAgileDashboard(): array\n+    private function getTrackersIdAgileDashboard(\\PFUser $user): array\n     {\n         $trackers_agile_dashboard = [];\n-        $backlog_milestones       = $this->agile_dashboard_milestone_backlog_backlog_factory->getBacklog($this->getVirturalTopMilestone());\n+        $backlog_milestones       = $this->agile_dashboard_milestone_backlog_backlog_factory->getBacklog($user, $this->getVirturalTopMilestone());\n         $trackers_backlogs        = $backlog_milestones->getDescendantTrackers();\n \n         foreach ($trackers_backlogs as $tracker_backlog) {\n             $tracker_agile_dashboard = [\n-                'id' => (int) $tracker_backlog->getId(),\n+                'id' => $tracker_backlog->getId(),\n                 'color_name' => $tracker_backlog->getColor()->getName(),\n                 'label' => $tracker_backlog->getName(),\n             ];"
        },
        {
          "filename": "plugins/tracker/include/Tracker/FormElement/ChartMessageFetcher.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -111,7 +111,7 @@ public function fetchWarnings(Tracker_FormElement_Field $field, ChartFieldUsage\n             }\n         }\n \n-        $event = new MessageFetcherAdditionalWarnings($field);\n+        $event = new MessageFetcherAdditionalWarnings($user, $field);\n         $this->event_manager->processEvent($event);\n \n         $warnings = array_merge($warnings, $event->getWarnings());"
        },
        {
          "filename": "plugins/tracker/include/Tracker/FormElement/Event/MessageFetcherAdditionalWarnings.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -37,7 +37,7 @@ class MessageFetcherAdditionalWarnings implements Dispatchable\n      */\n     private $warnings = [];\n \n-    public function __construct(Tracker_FormElement_Field $field)\n+    public function __construct(public readonly \\PFUser $user, Tracker_FormElement_Field $field)\n     {\n         $this->field = $field;\n     }"
        },
        {
          "filename": "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Text.php",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -226,10 +226,8 @@ protected function getDao()\n     /**\n      * Return true if this field is the semantic title field of the tracker,\n      * false otherwise if not or if there is no title field defined.\n-     *\n-     * @return bool true if the field is the 'title' of the tracker\n      */\n-    protected function isSemanticTitle()\n+    protected function isSemanticTitle(): bool\n     {\n         $semantic_manager = new Tracker_SemanticManager($this->getTracker());\n         $semantics        = $semantic_manager->getSemantics();"
        },
        {
          "filename": "plugins/tracker/include/Tracker/Semantic/Tracker_SemanticManager.class.php",
          "status": "modified",
          "additions": 5,
          "deletions": 6,
          "patch": "@@ -41,6 +41,7 @@ class Tracker_SemanticManager\n      * Parameters:\n      * 'semantics' => @var Tracker_SemanticCollection A collection of semantics that needs adding to.\n      * 'tracker'   => @var Tracker                    The Tracker the semantics are defined upon\n+     * 'user'      => @var PFUser                     The current user\n      *\n      * Expected results\n      * The semantics parameter is populated with additional semantic fields\n@@ -187,10 +188,7 @@ public function getSemanticsTheFieldBelongsTo(Tracker_FormElement_Field $field):\n         return new CollectionOfSemanticsUsingAParticularTrackerField($field, $semantics_using_field);\n     }\n \n-    /**\n-     * @return Tracker_SemanticCollection\n-     */\n-    public function getSemantics()\n+    public function getSemantics(): Tracker_SemanticCollection\n     {\n         $semantics = new Tracker_SemanticCollection();\n \n@@ -221,7 +219,7 @@ public function getSemantics()\n         $semantics->add($semantic_progress);\n         $semantics->add($this->tracker->getTooltip());\n \n-        $this->addOtherSemantics($semantics);\n+        $this->addOtherSemantics(UserManager::instance()->getCurrentUser(), $semantics);\n \n         return $semantics;\n     }\n@@ -230,13 +228,14 @@ public function getSemantics()\n      * Use an event to get semantics from other plugins.\n      *\n      */\n-    private function addOtherSemantics(Tracker_SemanticCollection $semantics)\n+    private function addOtherSemantics(PFUser $user, Tracker_SemanticCollection $semantics): void\n     {\n          EventManager::instance()->processEvent(\n              self::TRACKER_EVENT_MANAGE_SEMANTICS,\n              [\n                  'semantics'   => $semantics,\n                  'tracker'     => $this->tracker,\n+                 'user'        => $user,\n              ]\n          );\n     }"
        },
        {
          "filename": "plugins/tracker/include/Tracker/TrackerEventTrackersDuplicated.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -30,6 +30,7 @@ final class TrackerEventTrackersDuplicated implements \\Tuleap\\Event\\Dispatchable\n      * @param list<array{from: int, to: int, values: array, workflow: bool}> $field_mapping\n      */\n     public function __construct(\n+        public readonly \\PFUser $user,\n         public readonly array $tracker_mapping,\n         public readonly array $field_mapping,\n         public readonly array $report_mapping,"
        },
        {
          "filename": "plugins/tracker/include/Tracker/TrackerFactory.class.php",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -542,8 +542,13 @@ protected function postCreateActions(Tracker $tracker, TrackerCreationSettings $\n      * - the shared fields\n      * - etc.\n      */\n-    public function duplicate(DBTransactionExecutor $transaction_executor, \\Project $from_project, \\Project $to_project, MappingRegistry $mapping_registry): void\n-    {\n+    public function duplicate(\n+        PFUser $user,\n+        DBTransactionExecutor $transaction_executor,\n+        \\Project $from_project,\n+        \\Project $to_project,\n+        MappingRegistry $mapping_registry,\n+    ): void {\n         $from_project_id  = (int) $from_project->getID();\n         $to_project_id    = (int) $to_project->getID();\n         $tracker_ids_list = [];\n@@ -607,6 +612,7 @@ function () use ($from_project_id, $tracker_ids_list, $mapping_registry, $to_pro\n         $shared_factory->fixOriginalFieldIdsAfterDuplication($to_project_id, $from_project_id, $field_mapping);\n \n         $this->getEventDispatcher()->dispatch(new TrackerEventTrackersDuplicated(\n+            $user,\n             $tracker_mapping,\n             $field_mapping,\n             $report_mapping,"
        },
        {
          "filename": "plugins/tracker/include/Tracker/TrackerManager.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -781,9 +781,9 @@ public function fetchTrackerSwitcher(PFUser $user, $separator, ?Project $include\n     /**\n      * On project creation, copy template trackers to destination project\n      */\n-    public function duplicate(DBTransactionExecutor $transaction_executor, \\Project $from_project, \\Project $to_project, MappingRegistry $mapping_registry): void\n+    public function duplicate(PFUser $user, DBTransactionExecutor $transaction_executor, \\Project $from_project, \\Project $to_project, MappingRegistry $mapping_registry): void\n     {\n-        $this->getTrackerFactory()->duplicate($transaction_executor, $from_project, $to_project, $mapping_registry);\n+        $this->getTrackerFactory()->duplicate($user, $transaction_executor, $from_project, $to_project, $mapping_registry);\n         $this->duplicateReferences((int) $from_project->getID());\n     }\n "
        },
        {
          "filename": "plugins/tracker/include/trackerPlugin.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -706,6 +706,7 @@ public function registerProjectCreationEvent(RegisterProjectCreationEvent $event\n \n             $tracker_manager = new TrackerManager();\n             $tracker_manager->duplicate(\n+                $event->getProjectAdministrator(),\n                 new DBTransactionExecutorWithConnection(DBFactory::getMainTuleapDBConnection()),\n                 $template,\n                 $project,"
        },
        {
          "filename": "plugins/tracker/tests/unit/Tracker/TrackerFactoryDuplicationTest.php",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -26,6 +26,7 @@\n use PHPUnit\\Framework\\MockObject\\MockObject;\n use Tuleap\\Project\\MappingRegistry;\n use Tuleap\\Test\\Builders\\ProjectTestBuilder;\n+use Tuleap\\Test\\Builders\\UserTestBuilder;\n use Tuleap\\Test\\DB\\DBTransactionExecutorPassthrough;\n use Tuleap\\Tracker\\Semantic\\Timeframe\\SemanticTimeframeDuplicator;\n use Tuleap\\Tracker\\Test\\Builders\\TrackerTestBuilder;\n@@ -87,6 +88,7 @@ public function testDuplicateDuplicatesAllTrackersWithHierarchy(): void\n         $this->semantic_timeframe_duplicator->expects(self::once())->method('duplicateSemanticTimeframeForAllTrackers');\n \n         $this->tracker_factory->duplicate(\n+            UserTestBuilder::buildWithDefaults(),\n             new DBTransactionExecutorPassthrough(),\n             ProjectTestBuilder::aProject()->withId(100)->build(),\n             ProjectTestBuilder::aProject()->withId(999)->build(),\n@@ -137,6 +139,7 @@ public function testDuplicateDuplicatesSharedFields(): void\n         $this->semantic_timeframe_duplicator->expects(self::once())->method('duplicateSemanticTimeframeForAllTrackers');\n \n         $this->tracker_factory->duplicate(\n+            UserTestBuilder::buildWithDefaults(),\n             new DBTransactionExecutorPassthrough(),\n             ProjectTestBuilder::aProject()->withId($from_project_id)->build(),\n             ProjectTestBuilder::aProject()->withId($to_project_id)->build(),\n@@ -155,6 +158,7 @@ public function testDuplicateIgnoresNonDuplicatableTrackers(): void\n         $this->tracker_factory->expects(self::never())->method('create');\n \n         $this->tracker_factory->duplicate(\n+            UserTestBuilder::buildWithDefaults(),\n             new DBTransactionExecutorPassthrough(),\n             ProjectTestBuilder::aProject()->withId(100)->build(),\n             ProjectTestBuilder::aProject()->withId(999)->build(),\n@@ -187,6 +191,7 @@ public function testDuplicateDuplicatesAllTriggerRules(): void\n         $this->semantic_timeframe_duplicator->expects(self::once())->method('duplicateSemanticTimeframeForAllTrackers');\n \n         $this->tracker_factory->duplicate(\n+            UserTestBuilder::buildWithDefaults(),\n             new DBTransactionExecutorPassthrough(),\n             ProjectTestBuilder::aProject()->withId(100)->build(),\n             ProjectTestBuilder::aProject()->withId(999)->build(),\n@@ -220,6 +225,7 @@ public function testDuplicateDuplicatesAllTrackersWithSemanticTimeframe(): void\n             ->with([], [1234 => 555]);\n \n         $this->tracker_factory->duplicate(\n+            UserTestBuilder::buildWithDefaults(),\n             new DBTransactionExecutorPassthrough(),\n             ProjectTestBuilder::aProject()->withId(100)->build(),\n             ProjectTestBuilder::aProject()->withId(999)->build(),"
        },
        {
          "filename": "plugins/tracker/tests/unit/Tracker/TrackerManagerTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -248,6 +248,7 @@ public function testDuplicateCopyReferences(): void\n         $rm->expects(self::once())->method('createReference')->with($r2);\n \n         $tm->duplicate(\n+            UserTestBuilder::buildWithDefaults(),\n             new \\Tuleap\\Test\\DB\\DBTransactionExecutorPassthrough(),\n             ProjectTestBuilder::aProject()->withId($source_project_id)->build(),\n             ProjectTestBuilder::aProject()->withId($destination_project_id)->build(),"
        },
        {
          "filename": "plugins/velocity/include/Velocity/Semantic/BacklogRetriever.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -38,9 +38,9 @@ public function __construct(PlanningFactory $planning_factory)\n     /**\n      * @return Tracker[]\n      */\n-    public function getBacklogTrackers(Tracker $tracker)\n+    public function getBacklogTrackers(\\PFUser $user, Tracker $tracker)\n     {\n-        $planning_trackers = $this->planning_factory->getPlanningByPlanningTracker($tracker);\n+        $planning_trackers = $this->planning_factory->getPlanningByPlanningTracker($user, $tracker);\n         if (! $planning_trackers) {\n             return [];\n         }"
        },
        {
          "filename": "plugins/velocity/include/Velocity/Semantic/SemanticVelocity.php",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -38,6 +38,7 @@\n use Tuleap\\Tracker\\Semantic\\Status\\Done\\SemanticDoneDao;\n use Tuleap\\Tracker\\Semantic\\Status\\Done\\SemanticDoneFactory;\n use Tuleap\\Tracker\\Semantic\\Status\\Done\\SemanticDoneValueChecker;\n+use UserManager;\n \n class SemanticVelocity extends Tracker_Semantic\n {\n@@ -101,7 +102,7 @@ public function fetchForSemanticsHomepage(): string\n             $this->getBacklogRetriever(),\n             new VelocitySemanticChecker()\n         );\n-        $velocity_presenter = $builder->build($this->getTracker(), $this->semantic_done, $this->velocity_field);\n+        $velocity_presenter = $builder->build(UserManager::instance()->getCurrentUser(), $this->getTracker(), $this->semantic_done, $this->velocity_field);\n \n         return $renderer->renderToString('velocity-intro', $velocity_presenter);\n     }\n@@ -122,6 +123,7 @@ public function displayAdmin(\n \n         $renderer  = TemplateRendererFactory::build()->getRenderer(VELOCITY_BASE_DIR . '/templates');\n         $presenter = $builder->build(\n+            $current_user,\n             $this->getTracker(),\n             $this->getCSRFSynchronizerToken(),\n             $this->semantic_done,"
        },
        {
          "filename": "plugins/velocity/include/Velocity/Semantic/SemanticVelocityAdminPresenterBuilder.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -50,13 +50,14 @@ public function __construct(\n     }\n \n     public function build(\n+        \\PFUser $user,\n         Tracker $tracker,\n         CSRFSynchronizerToken $csrf,\n         SemanticDone $semantic_done,\n         array $possible_fields,\n         $semantic_velocity_field_id,\n     ) {\n-        $backlog_trackers                     = $this->backlog_retriever->getBacklogTrackers($tracker);\n+        $backlog_trackers                     = $this->backlog_retriever->getBacklogTrackers($user, $tracker);\n         $backlog_required_trackers_collection = $this->missing_requirement_retriever->buildCollectionFromBacklogTrackers(\n             $backlog_trackers\n         );"
        },
        {
          "filename": "plugins/velocity/include/Velocity/Semantic/SemanticVelocityPresenterBuilder.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -50,11 +50,12 @@ public function __construct(\n     }\n \n     public function build(\n+        \\PFUser $user,\n         Tracker $tracker,\n         SemanticDone $semantic_done,\n         ?Tracker_FormElement_Field $velocity_field = null,\n     ) {\n-        $backlog_trackers                     = $this->backlog_retriever->getBacklogTrackers($tracker);\n+        $backlog_trackers                     = $this->backlog_retriever->getBacklogTrackers($user, $tracker);\n         $backlog_required_trackers_collection = $this->missing_requirement_retriever->buildCollectionFromBacklogTrackers(\n             $backlog_trackers\n         );"
        },
        {
          "filename": "plugins/velocity/include/velocityPlugin.php",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -75,21 +75,22 @@ public function getPluginInfo()\n     #[\\Tuleap\\Plugin\\ListeningToEventName(Tracker_SemanticManager::TRACKER_EVENT_MANAGE_SEMANTICS)]\n     public function trackerEventManageSemantics($parameters): void // @codingStandardsIgnoreLine\n     {\n+        $user      = $parameters['user'];\n         $tracker   = $parameters['tracker'];\n         $semantics = $parameters['semantics'];\n         \\assert($semantics instanceof Tracker_SemanticCollection);\n \n-        if (! $this->isAPlanningTrackers($tracker)) {\n+        if (! $this->isAPlanningTrackers($user, $tracker)) {\n             return;\n         }\n \n         $semantics->insertAfter(SemanticDone::NAME, SemanticVelocity::load($tracker));\n     }\n \n-    private function isAPlanningTrackers(Tracker $semantic_tracker)\n+    private function isAPlanningTrackers(PFUser $user, Tracker $semantic_tracker): bool\n     {\n         $planning_factory = PlanningFactory::build();\n-        $planning         = $planning_factory->getPlanningByPlanningTracker($semantic_tracker);\n+        $planning         = $planning_factory->getPlanningByPlanningTracker($user, $semantic_tracker);\n \n         if ($planning) {\n             return $semantic_tracker->getId() === $planning->getPlanningTrackerId();"
        },
        {
          "filename": "tests/psalm/psalm.xml",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -192,7 +192,6 @@\n             <file name=\"plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetBareMilestoneByArtifactIdTest.php\"/>\n             <file name=\"plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetLastMilestoneCreatedTest.php\"/>\n             <file name=\"plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactTest.php\"/>\n-            <file name=\"plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactWithPlannedArtifactsTest.php\"/>\n             <file name=\"plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneTest.php\"/>\n             <file name=\"plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneWithAncestorsTest.php\"/>\n             <file name=\"plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetPaginatedMilestonesTest.php\"/>"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 22,
        "unique_directories": 34,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9853bbe9eefcf4ad385b6e8474c59bd1aa8a6545",
            "date": "2025-01-14T16:07:28Z",
            "author_login": "magarnier"
          },
          {
            "sha": "f0aaaefd3ef209c794869a752a86b4f174d53d16",
            "date": "2025-01-14T16:07:20Z",
            "author_login": "magarnier"
          },
          {
            "sha": "e0da8b7336dcef7fb38b41cfee101f34f9249442",
            "date": "2025-01-14T14:59:51Z",
            "author_login": "nterray"
          },
          {
            "sha": "336f9ed6a3e16d12c03792f0764bbe06da36ced9",
            "date": "2025-01-14T14:59:12Z",
            "author_login": "nterray"
          },
          {
            "sha": "a4a770f2f7a401e471fde4bc167c5973d97dbd81",
            "date": "2025-01-14T13:19:55Z",
            "author_login": "Gashmob"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-280",
    "description": "Tuleap is a tool for end to end traceability of application and system developments. Prior to Tuleap Community Edition 15.13.99.113, Tuleap Enterprise Edition 15.13-5, and Tuleap Enterprise Edition 15.12-5, users might see tracker names they should not have access to. Tuleap Community Edition 15.13.99.113, Tuleap Enterprise Edition 15.13-5, and Tuleap Enterprise Edition 15.12-8 fix this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-14T18:15:04.593",
    "last_modified": "2024-10-17T13:50:45.307",
    "fix_date": "2024-10-01T14:11:38Z"
  },
  "references": [
    {
      "url": "https://github.com/Enalean/tuleap/commit/16d9efccb2fad8e10343be2604e94c9058ef2c89",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/Enalean/tuleap/commit/e5ce81279766115dc0f126a11d6b5065b5db7eec",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/Enalean/tuleap/commit/f89d7093d2c576ad5e2b35a6a096fcdaf563d1df",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-j342-v27q-329v",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=16d9efccb2fad8e10343be2604e94c9058ef2c89",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=e5ce81279766115dc0f126a11d6b5065b5db7eec",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=f89d7093d2c576ad5e2b35a6a096fcdaf563d1df",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://tuleap.net/plugins/tracker/?aid=39728",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.144018",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tuleap",
    "owner": "Enalean",
    "created_at": "2012-06-12T15:48:54Z",
    "updated_at": "2025-01-14T09:23:28Z",
    "pushed_at": "2025-01-14T09:23:22Z",
    "size": 382430,
    "stars": 1043,
    "forks": 285,
    "open_issues": 3,
    "watchers": 1043,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 64309783,
      "TypeScript": 12164261,
      "JavaScript": 4302645,
      "Vue": 3161023,
      "Mustache": 2174238,
      "SCSS": 1603030,
      "HTML": 502284,
      "CSS": 281155,
      "Shell": 126767,
      "Smarty": 121199,
      "MDX": 89474,
      "Nix": 48015,
      "Go": 44709,
      "Makefile": 41978,
      "Rust": 27741,
      "Groovy": 13947,
      "PEG.js": 12394,
      "Perl": 11384,
      "Dockerfile": 10302,
      "Python": 3977,
      "XSLT": 1077,
      "Awk": 597
    },
    "commit_activity": {
      "total_commits_last_year": 5447,
      "avg_commits_per_week": 104.75,
      "days_active_last_year": 255
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:46:56.606881"
  }
}