{
  "cve_id": "CVE-2024-47824",
  "github_data": {
    "repository": "matrix-org/matrix-react-sdk",
    "fix_commit": "6fc9d7641c51ca3db8225cf58b9d6e6fdd2d6556",
    "related_commits": [
      "6fc9d7641c51ca3db8225cf58b9d6e6fdd2d6556"
    ],
    "patch_url": "https://github.com/matrix-org/matrix-react-sdk/commit/6fc9d7641c51ca3db8225cf58b9d6e6fdd2d6556.patch",
    "fix_commit_details": {
      "sha": "6fc9d7641c51ca3db8225cf58b9d6e6fdd2d6556",
      "commit_date": "2024-06-14T13:13:41Z",
      "author": {
        "login": "uhoreg",
        "type": "User",
        "stats": {
          "total_commits": 98,
          "average_weekly_commits": 0.1952191235059761,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 41
        }
      },
      "commit_message": {
        "title": "Remove room key history sharing (#12618)",
        "length": 102,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 65,
        "additions": 8,
        "deletions": 57
      },
      "files": [
        {
          "filename": "src/RoomInvite.tsx",
          "status": "modified",
          "additions": 2,
          "deletions": 7,
          "patch": "@@ -40,21 +40,17 @@ export interface IInviteResult {\n  *\n  * @param {string} roomId The ID of the room to invite to\n  * @param {string[]} addresses Array of strings of addresses to invite. May be matrix IDs or 3pids.\n- * @param {boolean} sendSharedHistoryKeys whether to share e2ee keys with the invitees if applicable.\n  * @param {function} progressCallback optional callback, fired after each invite.\n  * @returns {Promise} Promise\n  */\n export function inviteMultipleToRoom(\n     client: MatrixClient,\n     roomId: string,\n     addresses: string[],\n-    sendSharedHistoryKeys = false,\n     progressCallback?: () => void,\n ): Promise<IInviteResult> {\n     const inviter = new MultiInviter(client, roomId, progressCallback);\n-    return inviter\n-        .invite(addresses, undefined, sendSharedHistoryKeys)\n-        .then((states) => Promise.resolve({ states, inviter }));\n+    return inviter.invite(addresses, undefined).then((states) => Promise.resolve({ states, inviter }));\n }\n \n export function showStartChatInviteDialog(initialText = \"\"): void {\n@@ -105,10 +101,9 @@ export function inviteUsersToRoom(\n     client: MatrixClient,\n     roomId: string,\n     userIds: string[],\n-    sendSharedHistoryKeys = false,\n     progressCallback?: () => void,\n ): Promise<void> {\n-    return inviteMultipleToRoom(client, roomId, userIds, sendSharedHistoryKeys, progressCallback)\n+    return inviteMultipleToRoom(client, roomId, userIds, progressCallback)\n         .then((result) => {\n             const room = client.getRoom(roomId)!;\n             showAnyInviteErrors(result.states, room, result.inviter);"
        },
        {
          "filename": "src/SlashCommands.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -420,7 +420,7 @@ export const Commands = [\n                     return success(\n                         prom\n                             .then(() => {\n-                                return inviter.invite([address], reason, true);\n+                                return inviter.invite([address], reason);\n                             })\n                             .then(() => {\n                                 if (inviter.getCompletionState(address) !== \"invited\") {"
        },
        {
          "filename": "src/components/views/dialogs/InviteDialog.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 19,
          "patch": "@@ -22,7 +22,6 @@ import { MatrixCall } from \"matrix-js-sdk/src/webrtc/call\";\n import { logger } from \"matrix-js-sdk/src/logger\";\n import { uniqBy } from \"lodash\";\n \n-import { Icon as InfoIcon } from \"../../../../res/img/element-icons/info.svg\";\n import { Icon as EmailPillAvatarIcon } from \"../../../../res/img/icon-email-pill-avatar.svg\";\n import { _t, _td } from \"../../../languageHandler\";\n import { MatrixClientPeg } from \"../../../MatrixClientPeg\";\n@@ -624,7 +623,7 @@ export default class InviteDialog extends React.PureComponent<Props, IInviteDial\n         }\n \n         try {\n-            const result = await inviteMultipleToRoom(cli, this.props.roomId, targetIds, true);\n+            const result = await inviteMultipleToRoom(cli, this.props.roomId, targetIds);\n             if (!this.shouldAbortAfterInviteError(result, room)) {\n                 // handles setting error message too\n                 this.props.onFinished(true);\n@@ -1279,7 +1278,6 @@ export default class InviteDialog extends React.PureComponent<Props, IInviteDial\n         let consultConnectSection;\n         let extraSection;\n         let footer;\n-        let keySharingWarning = <span />;\n \n         const identityServersEnabled = SettingsStore.getValue(UIFeature.IdentityServer);\n \n@@ -1391,21 +1389,6 @@ export default class InviteDialog extends React.PureComponent<Props, IInviteDial\n \n             buttonText = _t(\"action|invite\");\n             goButtonFn = this.inviteUsers;\n-\n-            if (cli.isRoomEncrypted(this.props.roomId)) {\n-                const room = cli.getRoom(this.props.roomId)!;\n-                const visibilityEvent = room.currentState.getStateEvents(\"m.room.history_visibility\", \"\");\n-                const visibility =\n-                    visibilityEvent && visibilityEvent.getContent() && visibilityEvent.getContent().history_visibility;\n-                if (visibility === \"world_readable\" || visibility === \"shared\") {\n-                    keySharingWarning = (\n-                        <p className=\"mx_InviteDialog_helpText\">\n-                            <InfoIcon height={14} width={14} />\n-                            {\" \" + _t(\"invite|key_share_warning\")}\n-                        </p>\n-                    );\n-                }\n-            }\n         } else if (this.props.kind === InviteKind.CallTransfer) {\n             title = _t(\"action|transfer\");\n \n@@ -1471,7 +1454,6 @@ export default class InviteDialog extends React.PureComponent<Props, IInviteDial\n                         {spinner}\n                     </div>\n                 </div>\n-                {keySharingWarning}\n                 {this.renderIdentityServerWarning()}\n                 <div className=\"error\">{this.state.errorText}</div>\n                 {onlyOneThreepidNote}"
        },
        {
          "filename": "src/i18n/strings/en_EN.json",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -1294,7 +1294,6 @@\n         \"failed_generic\": \"Operation failed\",\n         \"failed_title\": \"Failed to invite\",\n         \"invalid_address\": \"Unrecognised address\",\n-        \"key_share_warning\": \"Invited people will be able to read old messages.\",\n         \"name_email_mxid_share_room\": \"Invite someone using their name, email address, username (like <userId/>) or <a>share this room</a>.\",\n         \"name_email_mxid_share_space\": \"Invite someone using their name, email address, username (like <userId/>) or <a>share this space</a>.\",\n         \"name_mxid_share_room\": \"Invite someone using their name, username (like <userId/>) or <a>share this room</a>.\","
        },
        {
          "filename": "src/utils/MultiInviter.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 28,
          "patch": "@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and\n limitations under the License.\n */\n \n-import { MatrixError, MatrixClient, EventType, HistoryVisibility } from \"matrix-js-sdk/src/matrix\";\n+import { MatrixError, MatrixClient, EventType } from \"matrix-js-sdk/src/matrix\";\n import { KnownMembership } from \"matrix-js-sdk/src/types\";\n import { defer, IDeferred } from \"matrix-js-sdk/src/utils\";\n import { logger } from \"matrix-js-sdk/src/logger\";\n@@ -83,10 +83,9 @@ export default class MultiInviter {\n      *\n      * @param {array} addresses Array of addresses to invite\n      * @param {string} reason Reason for inviting (optional)\n-     * @param {boolean} sendSharedHistoryKeys whether to share e2ee keys with the invitees if applicable.\n      * @returns {Promise} Resolved when all invitations in the queue are complete\n      */\n-    public invite(addresses: string[], reason?: string, sendSharedHistoryKeys = false): Promise<CompletionStates> {\n+    public invite(addresses: string[], reason?: string): Promise<CompletionStates> {\n         if (this.addresses.length > 0) {\n             throw new Error(\"Already inviting/invited\");\n         }\n@@ -105,31 +104,7 @@ export default class MultiInviter {\n         this.deferred = defer<CompletionStates>();\n         this.inviteMore(0);\n \n-        if (!sendSharedHistoryKeys || !this.roomId || !this.matrixClient.isRoomEncrypted(this.roomId)) {\n-            return this.deferred.promise;\n-        }\n-\n-        const room = this.matrixClient.getRoom(this.roomId);\n-        const visibilityEvent = room?.currentState.getStateEvents(EventType.RoomHistoryVisibility, \"\");\n-        const visibility = visibilityEvent?.getContent().history_visibility;\n-\n-        if (visibility !== HistoryVisibility.WorldReadable && visibility !== HistoryVisibility.Shared) {\n-            return this.deferred.promise;\n-        }\n-\n-        return this.deferred.promise.then(async (states): Promise<CompletionStates> => {\n-            const invitedUsers: string[] = [];\n-            for (const [addr, state] of Object.entries(states)) {\n-                if (state === InviteState.Invited && getAddressType(addr) === AddressType.MatrixUserId) {\n-                    invitedUsers.push(addr);\n-                }\n-            }\n-\n-            logger.log(\"Sharing history with\", invitedUsers);\n-            this.matrixClient.sendSharedHistoryKeys(this.roomId, invitedUsers); // do this in the background\n-\n-            return states;\n-        });\n+        return this.deferred.promise;\n     }\n \n     /**"
        },
        {
          "filename": "src/utils/RoomUpgrade.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -120,7 +120,7 @@ export async function upgradeRoom(\n \n     if (toInvite.length > 0) {\n         // Errors are handled internally to this function\n-        await inviteUsersToRoom(cli, newRoomId, toInvite, false, () => {\n+        await inviteUsersToRoom(cli, newRoomId, toInvite, () => {\n             progress.inviteUsersProgress!++;\n             progressCallback?.(progress);\n         });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b67a2303f912a8cab5caf089f3ea710850aa252c",
            "date": "2024-09-11T13:37:55Z",
            "author_login": "langleyd"
          },
          {
            "sha": "0252c1214c2398a6283f3da3c36239a29c2568e9",
            "date": "2024-09-10T12:49:18Z",
            "author_login": "RiotRobot"
          },
          {
            "sha": "2bb3313c3181ec4ac26e53b6c16b852b8a7cc8a7",
            "date": "2024-09-10T12:49:08Z",
            "author_login": "RiotRobot"
          },
          {
            "sha": "0aa9df2a2272d271bbe0b1143f7bead0f1246a7e",
            "date": "2024-09-10T12:48:00Z",
            "author_login": "RiotRobot"
          },
          {
            "sha": "fe01257371c185782f8714ad7bbdb5ae357557ac",
            "date": "2024-09-10T12:32:24Z",
            "author_login": "RiotRobot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-200",
    "description": "matrix-react-sdk is react-based software development kit for inserting a Matrix chat/VOIP client into a web page. Starting in version 3.18.0 and before 3.102.0, matrix-react-sdk allows a malicious homeserver to potentially steal message keys for a room when a user invites another user to that room, via injection of a malicious device controlled by the homeserver. This is possible because matrix-react-sdk before 3.102.0 shared historical message keys on invite. Version 3.102.0 fixes this issue by disabling sharing message keys on invite by removing calls to the vulnerable functionality. No known workarounds are available.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-10-15T16:15:05.120",
    "last_modified": "2024-11-21T17:15:17.650",
    "fix_date": "2024-06-14T13:13:41Z"
  },
  "references": [
    {
      "url": "https://github.com/matrix-org/matrix-react-sdk/commit/6fc9d7641c51ca3db8225cf58b9d6e6fdd2d6556",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/matrix-react-sdk/pull/12618",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/matrix-react-sdk/security/advisories/GHSA-qcvh-p9jq-wp8v",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.148914",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "matrix-react-sdk",
    "owner": "matrix-org",
    "created_at": "2015-06-09T16:37:07Z",
    "updated_at": "2024-12-31T11:20:02Z",
    "pushed_at": "2024-09-11T17:47:21Z",
    "size": 318415,
    "stars": 1102,
    "forks": 827,
    "open_issues": 4,
    "watchers": 1102,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "TypeScript": 13326839,
      "CSS": 1012051,
      "JavaScript": 32699,
      "Shell": 6707,
      "Python": 5019,
      "HTML": 2809,
      "Dockerfile": 350
    },
    "commit_activity": {
      "total_commits_last_year": 1045,
      "avg_commits_per_week": 20.096153846153847,
      "days_active_last_year": 173
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:21:37.088788"
  }
}