{
  "cve_id": "CVE-2024-47831",
  "github_data": {
    "repository": "vercel/next.js",
    "fix_commit": "d11cbc9ff0b1aaefabcba9afe1e562e0b1fde65a",
    "related_commits": [
      "d11cbc9ff0b1aaefabcba9afe1e562e0b1fde65a"
    ],
    "patch_url": "https://github.com/vercel/next.js/commit/d11cbc9ff0b1aaefabcba9afe1e562e0b1fde65a.patch",
    "fix_commit_details": {
      "sha": "d11cbc9ff0b1aaefabcba9afe1e562e0b1fde65a",
      "commit_date": "2024-08-08T08:35:21Z",
      "author": {
        "login": "huozhi",
        "type": "User",
        "stats": {
          "total_commits": 1203,
          "average_weekly_commits": 2.7782909930715936,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 178
        }
      },
      "commit_message": {
        "title": "Reject next image urls in image optimizer (#68628)",
        "length": 480,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 74,
        "additions": 66,
        "deletions": 8
      },
      "files": [
        {
          "filename": "packages/next/src/lib/url.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -11,3 +11,11 @@ export function getPathname(url: string) {\n export function isFullStringUrl(url: string) {\n   return /https?:\\/\\//.test(url)\n }\n+\n+export function parseUrl(url: string): URL | undefined {\n+  let parsed = undefined\n+  try {\n+    parsed = new URL(url, DUMMY_ORIGIN)\n+  } catch {}\n+  return parsed\n+}"
        },
        {
          "filename": "packages/next/src/server/image-optimizer.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 3,
          "patch": "@@ -28,6 +28,7 @@ import type {\n import { sendEtagResponse } from './send-payload'\n import { getContentType, getExtension } from './serve-static'\n import * as Log from '../build/output/log'\n+import { parseUrl } from '../lib/url'\n \n type XCacheHeader = 'MISS' | 'HIT' | 'STALE'\n \n@@ -197,9 +198,13 @@ export class ImageOptimizerCache {\n       }\n     }\n \n-    if (url.startsWith('/_next/image')) {\n-      return {\n-        errorMessage: '\"url\" parameter cannot be recursive',\n+    const parsedUrl = parseUrl(url)\n+    if (parsedUrl) {\n+      const decodedPathname = decodeURIComponent(parsedUrl.pathname)\n+      if (/\\/_next\\/image($|\\/)/.test(decodedPathname)) {\n+        return {\n+          errorMessage: '\"url\" parameter cannot be recursive',\n+        }\n       }\n     }\n "
        },
        {
          "filename": "test/integration/image-optimizer/test/util.ts",
          "status": "modified",
          "additions": 41,
          "deletions": 5,
          "patch": "@@ -8,6 +8,7 @@ import {\n   fetchViaHTTP,\n   File,\n   findPort,\n+  getFetchUrl,\n   killApp,\n   launchApp,\n   nextBuild,\n@@ -879,11 +880,46 @@ export function runTests(ctx) {\n     )\n   })\n \n-  it('should fail when url is recursive', async () => {\n-    const query = { url: `/_next/image?url=test.pngw=1&q=1`, w: ctx.w, q: 1 }\n-    const res = await fetchViaHTTP(ctx.appPort, '/_next/image', query, {})\n-    expect(res.status).toBe(400)\n-    expect(await res.text()).toBe(`\"url\" parameter cannot be recursive`)\n+  describe('recursive url is not allowed', () => {\n+    it('should fail with relative next image url', async () => {\n+      const query = { url: `/_next/image?url=test.pngw=1&q=1`, w: ctx.w, q: 1 }\n+      const res = await fetchViaHTTP(ctx.appPort, '/_next/image', query, {})\n+      expect(res.status).toBe(400)\n+      expect(await res.text()).toBe(`\"url\" parameter cannot be recursive`)\n+    })\n+\n+    it('should fail with encoded relative image url', async () => {\n+      const query = {\n+        url: '%2F_next%2Fimage%3Furl%3Dtest.pngw%3D1%26q%3D1',\n+        w: ctx.w,\n+        q: 1,\n+      }\n+      const res = await fetchViaHTTP(ctx.appPort, '/_next/image', query, {})\n+      expect(res.status).toBe(400)\n+      expect(await res.text()).toBe(`\"url\" parameter is invalid`)\n+    })\n+\n+    it('should fail with absolute next image url', async () => {\n+      const fullUrl = getFetchUrl(\n+        ctx.appPort,\n+        '/_next/image?url=test.pngw=1&q=1'\n+      )\n+      const query = { url: fullUrl, w: ctx.w, q: 1 }\n+      const res = await fetchViaHTTP(ctx.appPort, '/_next/image', query, {})\n+      expect(res.status).toBe(400)\n+      expect(await res.text()).toBe(`\"url\" parameter cannot be recursive`)\n+    })\n+\n+    it('should fail with relative image url with assetPrefix', async () => {\n+      const fullUrl = getFetchUrl(\n+        ctx.appPort,\n+        `/assets/_next/image?url=test.pngw=1&q=1`\n+      )\n+      const query = { url: fullUrl, w: ctx.w, q: 1 }\n+      const res = await fetchViaHTTP(ctx.appPort, '/_next/image', query, {})\n+      expect(res.status).toBe(400)\n+      expect(await res.text()).toBe(`\"url\" parameter cannot be recursive`)\n+    })\n   })\n \n   it('should fail when internal url is not an image', async () => {"
        },
        {
          "filename": "test/lib/next-test-utils.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -147,6 +147,15 @@ export function withQuery(\n   return `${pathname}?${querystring}`\n }\n \n+export function getFetchUrl(\n+  appPort: string | number,\n+  pathname: string,\n+  query?: Record<string, any> | string | null | undefined\n+) {\n+  const url = query ? withQuery(pathname, query) : pathname\n+  return getFullUrl(appPort, url)\n+}\n+\n export function fetchViaHTTP(\n   appPort: string | number,\n   pathname: string,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "39c7aded0769fbf3d4a2aedda51f4cba5893d8b5",
            "date": "2025-01-14T17:33:45Z",
            "author_login": "acdlite"
          },
          {
            "sha": "52281196b8d02ef2fd0493d0a9a94c407dbaa317",
            "date": "2025-01-14T17:31:06Z",
            "author_login": "acdlite"
          },
          {
            "sha": "2e9538bdea8c1da10629b49b9a01a8dcc3db3238",
            "date": "2025-01-14T17:28:48Z",
            "author_login": "acdlite"
          },
          {
            "sha": "65db12fee15bb33b3464b73e193863e44d888cf0",
            "date": "2025-01-14T17:24:25Z",
            "author_login": "acdlite"
          },
          {
            "sha": "4c09fa53a9555eab69c0fcf530fb968fecca52e6",
            "date": "2025-01-14T16:55:05Z",
            "author_login": "vercel-release-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-674",
    "description": "Next.js is a React Framework for the Web. Cersions on the 10.x, 11.x, 12.x, 13.x, and 14.x branches before version 14.2.7 contain a vulnerability in the image optimization feature which allows for a potential Denial of Service (DoS) condition which could lead to excessive CPU consumption. Neither the `next.config.js` file that is configured with `images.unoptimized` set to `true` or `images.loader` set to a non-default value nor the Next.js application that is hosted on Vercel are affected. This issue was fully patched in Next.js `14.2.7`. As a workaround, ensure that the `next.config.js` file has either `images.unoptimized`, `images.loader` or `images.loaderFile` assigned.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-10-14T18:15:05.013",
    "last_modified": "2024-11-08T15:39:21.823",
    "fix_date": "2024-08-08T08:35:21Z"
  },
  "references": [
    {
      "url": "https://github.com/vercel/next.js/commit/d11cbc9ff0b1aaefabcba9afe1e562e0b1fde65a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vercel/next.js/security/advisories/GHSA-g77x-44xx-532m",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.144297",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "next.js",
    "owner": "vercel",
    "created_at": "2016-10-05T23:32:51Z",
    "updated_at": "2025-01-14T13:45:04Z",
    "pushed_at": "2025-01-14T13:44:59Z",
    "size": 2155258,
    "stars": 128559,
    "forks": 27398,
    "open_issues": 3709,
    "watchers": 128559,
    "has_security_policy": false,
    "default_branch": "canary",
    "protected_branches": [],
    "languages": {
      "JavaScript": 28771068,
      "TypeScript": 12411341,
      "Rust": 6704790,
      "MDX": 277533,
      "CSS": 252412,
      "Shell": 9517,
      "SCSS": 8077,
      "Dockerfile": 4523,
      "HTML": 2644,
      "Batchfile": 579,
      "WebAssembly": 497,
      "Sass": 302,
      "Pug": 49
    },
    "commit_activity": {
      "total_commits_last_year": 6770,
      "avg_commits_per_week": 130.19230769230768,
      "days_active_last_year": 347
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:02:14.685871"
  }
}