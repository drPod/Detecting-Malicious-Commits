{
  "cve_id": "CVE-2024-47874",
  "github_data": {
    "repository": "encode/starlette",
    "fix_commit": "fd038f3070c302bff17ef7d173dbb0b007617733",
    "related_commits": [
      "fd038f3070c302bff17ef7d173dbb0b007617733"
    ],
    "patch_url": "https://github.com/encode/starlette/commit/fd038f3070c302bff17ef7d173dbb0b007617733.patch",
    "fix_commit_details": {
      "sha": "fd038f3070c302bff17ef7d173dbb0b007617733",
      "commit_date": "2024-10-15T06:40:51Z",
      "author": {
        "login": "Kludex",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 22,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 52,
        "additions": 45,
        "deletions": 7
      },
      "files": [
        {
          "filename": "starlette/formparsers.py",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -31,12 +31,12 @@ class FormMessage(Enum):\n class MultipartPart:\n     content_disposition: bytes | None = None\n     field_name: str = \"\"\n-    data: bytes = b\"\"\n+    data: bytearray = field(default_factory=bytearray)\n     file: UploadFile | None = None\n     item_headers: list[tuple[bytes, bytes]] = field(default_factory=list)\n \n \n-def _user_safe_decode(src: bytes, codec: str) -> str:\n+def _user_safe_decode(src: bytes | bytearray, codec: str) -> str:\n     try:\n         return src.decode(codec)\n     except (UnicodeDecodeError, LookupError):\n@@ -117,7 +117,8 @@ async def parse(self) -> FormData:\n \n \n class MultiPartParser:\n-    max_file_size = 1024 * 1024\n+    max_file_size = 1024 * 1024  # 1MB\n+    max_part_size = 1024 * 1024  # 1MB\n \n     def __init__(\n         self,\n@@ -149,7 +150,9 @@ def on_part_begin(self) -> None:\n     def on_part_data(self, data: bytes, start: int, end: int) -> None:\n         message_bytes = data[start:end]\n         if self._current_part.file is None:\n-            self._current_part.data += message_bytes\n+            if len(self._current_part.data) + len(message_bytes) > self.max_part_size:\n+                raise MultiPartException(f\"Part exceeded maximum size of {int(self.max_part_size / 1024)}KB.\")\n+            self._current_part.data.extend(message_bytes)\n         else:\n             self._file_parts_to_write.append((self._current_part, message_bytes))\n "
        },
        {
          "filename": "tests/test_formparsers.py",
          "status": "modified",
          "additions": 38,
          "deletions": 3,
          "patch": "@@ -640,9 +640,7 @@ def test_max_files_is_customizable_low_raises(\n         assert res.text == \"Too many files. Maximum number of files is 1.\"\n \n \n-def test_max_fields_is_customizable_high(\n-    test_client_factory: TestClientFactory,\n-) -> None:\n+def test_max_fields_is_customizable_high(test_client_factory: TestClientFactory) -> None:\n     client = test_client_factory(make_app_max_parts(max_fields=2000, max_files=2000))\n     fields = []\n     for i in range(2000):\n@@ -664,3 +662,40 @@ def test_max_fields_is_customizable_high(\n         \"content\": \"\",\n         \"content_type\": None,\n     }\n+\n+\n+@pytest.mark.parametrize(\n+    \"app,expectation\",\n+    [\n+        (app, pytest.raises(MultiPartException)),\n+        (Starlette(routes=[Mount(\"/\", app=app)]), does_not_raise()),\n+    ],\n+)\n+def test_max_part_size_exceeds_limit(\n+    app: ASGIApp,\n+    expectation: typing.ContextManager[Exception],\n+    test_client_factory: TestClientFactory,\n+) -> None:\n+    client = test_client_factory(app)\n+    boundary = \"------------------------4K1ON9fZkj9uCUmqLHRbbR\"\n+\n+    multipart_data = (\n+        f\"--{boundary}\\r\\n\"\n+        f'Content-Disposition: form-data; name=\"small\"\\r\\n\\r\\n'\n+        \"small content\\r\\n\"\n+        f\"--{boundary}\\r\\n\"\n+        f'Content-Disposition: form-data; name=\"large\"\\r\\n\\r\\n'\n+        + (\"x\" * 1024 * 1024 + \"x\")  # 1MB + 1 byte of data\n+        + \"\\r\\n\"\n+        f\"--{boundary}--\\r\\n\"\n+    ).encode(\"utf-8\")\n+\n+    headers = {\n+        \"Content-Type\": f\"multipart/form-data; boundary={boundary}\",\n+        \"Transfer-Encoding\": \"chunked\",\n+    }\n+\n+    with expectation:\n+        response = client.post(\"/\", data=multipart_data, headers=headers)  # type: ignore\n+        assert response.status_code == 400\n+        assert response.text == \"Part exceeded maximum size of 1024KB.\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0109dce29b76c64e93c56c01fa5020860f935ed3",
            "date": "2025-01-04T09:52:50Z",
            "author_login": "Kludex"
          },
          {
            "sha": "0ad90dcbe26e2cf70858d54dcb1ad724977738ae",
            "date": "2025-01-03T13:24:19Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "950f528bf5f620f68c10fc5a35939b716d38ee98",
            "date": "2025-01-03T13:16:39Z",
            "author_login": "graingert"
          },
          {
            "sha": "7c0d1e6d1a499e6eeb68d447321838be3927e83b",
            "date": "2024-12-30T21:06:32Z",
            "author_login": "Kludex"
          },
          {
            "sha": "76e053ac8221349fc068ef542fa43d20b40340d1",
            "date": "2024-12-30T07:48:16Z",
            "author_login": "Kludex"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-770",
    "description": "Starlette is an Asynchronous Server Gateway Interface (ASGI) framework/toolkit. Prior to version 0.40.0, Starlette treats `multipart/form-data` parts without a `filename` as text form fields and buffers those in byte strings with no size limit. This allows an attacker to upload arbitrary large form fields and cause Starlette to both slow down significantly due to excessive memory allocations and copy operations, and also consume more and more memory until the server starts swapping and grinds to a halt, or the OS terminates the server process with an OOM error. Uploading multiple such requests in parallel may be enough to render a service practically unusable, even if reasonable request size limits are enforced by a reverse proxy in front of Starlette. This Denial of service (DoS) vulnerability affects all applications built with Starlette (or FastAPI) accepting form requests. Verison 0.40.0 fixes this issue.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-10-15T16:15:05.260",
    "last_modified": "2024-11-21T17:15:17.990",
    "fix_date": "2024-10-15T06:40:51Z"
  },
  "references": [
    {
      "url": "https://github.com/encode/starlette/commit/fd038f3070c302bff17ef7d173dbb0b007617733",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/encode/starlette/security/advisories/GHSA-f96h-pmfr-66vw",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.149112",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "starlette",
    "owner": "encode",
    "created_at": "2018-06-25T13:16:21Z",
    "updated_at": "2025-01-14T10:55:54Z",
    "pushed_at": "2025-01-04T09:54:35Z",
    "size": 7018,
    "stars": 10460,
    "forks": 954,
    "open_issues": 39,
    "watchers": 10460,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 601931,
      "Shell": 3037
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T14:33:33.891852"
  }
}