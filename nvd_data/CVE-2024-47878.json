{
  "cve_id": "CVE-2024-47878",
  "github_data": {
    "repository": "OpenRefine/OpenRefine",
    "fix_commit": "10bf0874d67f1018a58b3732332d76b840192fea",
    "related_commits": [
      "10bf0874d67f1018a58b3732332d76b840192fea"
    ],
    "patch_url": "https://github.com/OpenRefine/OpenRefine/commit/10bf0874d67f1018a58b3732332d76b840192fea.patch",
    "fix_commit_details": {
      "sha": "10bf0874d67f1018a58b3732332d76b840192fea",
      "commit_date": "2024-08-17T09:39:36Z",
      "author": {
        "login": "wetneb",
        "type": "User",
        "stats": {
          "total_commits": 1479,
          "average_weekly_commits": 1.891304347826087,
          "total_additions": 347804,
          "total_deletions": 349731,
          "weeks_active": 288
        }
      },
      "commit_message": {
        "title": "gdata: check cb parameter in authorized command",
        "length": 342,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 115,
        "additions": 94,
        "deletions": 21
      },
      "files": [
        {
          "filename": "extensions/gdata/module/MOD-INF/controller.js",
          "status": "modified",
          "additions": 4,
          "deletions": 17,
          "patch": "@@ -101,23 +101,10 @@ function process(path, request, response) {\n     \n     send(request, response, \"authorize.vt\", context);\n   } else if (path == \"authorized\") {\n-    var context = {};\n-    context.state = request.getParameter(\"state\");\n-    \n-    (function() {\n-      if (Packages.com.google.refine.extension.gdata.TokenCookie.getToken(request) !== null) {\n-          return;\n-      }\n-      var tokenAndExpiresInSeconds =  Packages.com.google.refine.extension.gdata.GoogleAPIExtension.getTokenFromCode(module,request);\n-      if (tokenAndExpiresInSeconds) {\n-        var tokenInfo = tokenAndExpiresInSeconds.split(\",\");\n-        Packages.com.google.refine.extension.gdata.TokenCookie.setToken(request, response, tokenInfo[0], tokenInfo[1]);\n-        return;\n-      }\n-      Packages.com.google.refine.extension.gdata.TokenCookie.deleteToken(request, response);\n-    })();\n-    \n-    send(request, response, \"authorized.vt\", context);\n+    // it's a command but we handle it manually here, so as to preserve the URL\n+    var command = new Packages.com.google.refine.extension.gdata.AuthorizedCommand(module);\n+    command.doGet(request, response);\n+    butterfly.responded();\n   } else if (path == \"/\" || path == \"\") {\n       var context = {};\n       context.version = version;"
        },
        {
          "filename": "extensions/gdata/module/authorized.vt",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -40,10 +40,8 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   <span id=\"gdata-authorized\"></span>\n   \n   <script>\n-    var state = JSON.parse(window.atob(\"$state\"));\n-    \n-    var windowName = state.winname;\n-    var callbackName = state.cb;\n+    var windowName = \"$winname\";\n+    var callbackName = \"$cb\";\n     \n     var w = window.open(\"\", windowName);\n     var callback = w[callbackName];"
        },
        {
          "filename": "extensions/gdata/src/com/google/refine/extension/gdata/AuthorizedCommand.java",
          "status": "added",
          "additions": 88,
          "deletions": 0,
          "patch": "@@ -0,0 +1,88 @@\n+\n+package com.google.refine.extension.gdata;\n+\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.regex.Pattern;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import edu.mit.simile.butterfly.ButterflyModule;\n+import org.apache.velocity.VelocityContext;\n+\n+import com.google.refine.commands.Command;\n+import com.google.refine.util.ParsingUtilities;\n+\n+public class AuthorizedCommand extends Command {\n+\n+    Pattern callbackPattern = Pattern.compile(\"^cb[0-9]+$\");\n+    Pattern winnamePattern = Pattern.compile(\"^openrefine[0-9]+$\");\n+\n+    ButterflyModule module;\n+\n+    public AuthorizedCommand(ButterflyModule module) {\n+        this.module = module;\n+    }\n+\n+    @Override\n+    public void doGet(HttpServletRequest request, HttpServletResponse response)\n+            throws ServletException, IOException {\n+        VelocityContext velocityContext = new VelocityContext();\n+        String state = request.getParameter(\"state\");\n+        if (state == null) {\n+            respond(response, \"error\", \"No 'state' parameter provided\");\n+            return;\n+        }\n+        try {\n+            byte[] decoded = Base64.getDecoder().decode(state);\n+            JsonNode parsed = ParsingUtilities.mapper.readTree(decoded);\n+            if (parsed instanceof ObjectNode && parsed.has(\"winname\") && parsed.has(\"cb\")) {\n+                ObjectNode object = (ObjectNode) parsed;\n+                String cb = object.get(\"cb\").asText();\n+                String winname = object.get(\"winname\").asText();\n+                if (!winnamePattern.matcher(winname).find()) {\n+                    respond(response, \"error\", \"Invalid winname provided\");\n+                    return;\n+                }\n+                if (!callbackPattern.matcher(cb).find()) {\n+                    respond(response, \"error\", \"Invalid callback provided\");\n+                    return;\n+                }\n+                velocityContext.internalPut(\"winname\", winname);\n+                velocityContext.internalPut(\"cb\", cb);\n+\n+            } else {\n+                throw new IllegalArgumentException(\"expected a JSON object\");\n+            }\n+        } catch (IllegalArgumentException | IOException e) {\n+            respond(response, \"error\", \"Invalid 'state' parameter provided\");\n+            return;\n+        }\n+\n+        updateToken(request, response);\n+\n+        try {\n+            module.sendTextFromTemplate(request, response, velocityContext, \"authorized.vt\", \"UTF-8\", \"text/html\", false);\n+        } catch (Exception e) {\n+            respondException(response, e);\n+        }\n+    }\n+\n+    private void updateToken(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+        if (TokenCookie.getToken(request) != null) {\n+            return;\n+        }\n+        var tokenAndExpiresInSeconds = GoogleAPIExtension.getTokenFromCode(module, request);\n+        if (tokenAndExpiresInSeconds != null) {\n+            var tokenInfo = tokenAndExpiresInSeconds.split(\",\");\n+            TokenCookie.setToken(request, response, tokenInfo[0], tokenInfo[1]);\n+            return;\n+        }\n+        TokenCookie.deleteToken(request, response);\n+    }\n+\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9353d6df6b9c0554d3581a53fda972cae54370fc",
            "date": "2025-01-14T12:38:27Z",
            "author_login": "weblate"
          },
          {
            "sha": "1d48fb60530f9d7ac6c2d633a7774d70f0c18298",
            "date": "2025-01-14T07:09:22Z",
            "author_login": "thadguidry"
          },
          {
            "sha": "f353f9865a1356681bb2321f4e0bcf1e65585d43",
            "date": "2025-01-13T20:34:43Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e40d26a824272da40c0804cff25dde34e517b74f",
            "date": "2025-01-13T20:34:09Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a86836eed3f4d9e5e8e163aa40b25469ee170e43",
            "date": "2025-01-13T20:33:00Z",
            "author_login": "weblate"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-79",
    "description": "OpenRefine is a free, open source tool for working with messy data. Prior to version 3.8.3, the `/extension/gdata/authorized` endpoint includes the `state` GET parameter verbatim in a `<script>` tag in the output, so without escaping. An attacker could lead or redirect a user to a crafted URL containing JavaScript code, which would then cause that code to be executed in the victim's browser as if it was part of OpenRefine. Version 3.8.3 fixes this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-24T21:15:12.293",
    "last_modified": "2024-10-30T18:01:44.277",
    "fix_date": "2024-08-17T09:39:36Z"
  },
  "references": [
    {
      "url": "https://github.com/OpenRefine/OpenRefine/commit/10bf0874d67f1018a58b3732332d76b840192fea",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-pw3x-c5vp-mfc3",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.082422",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "OpenRefine",
    "owner": "OpenRefine",
    "created_at": "2012-10-15T02:22:48Z",
    "updated_at": "2025-01-14T12:38:35Z",
    "pushed_at": "2025-01-14T12:38:30Z",
    "size": 404937,
    "stars": 11031,
    "forks": 1998,
    "open_issues": 659,
    "watchers": 11031,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 5624322,
      "JavaScript": 1796106,
      "HTML": 680637,
      "CSS": 155170,
      "Shell": 24785,
      "Batchfile": 9507,
      "Python": 4899,
      "Inno Setup": 4432,
      "mIRC Script": 762,
      "Less": 139
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:30:34.126653"
  }
}