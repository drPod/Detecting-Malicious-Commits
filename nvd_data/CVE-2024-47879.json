{
  "cve_id": "CVE-2024-47879",
  "github_data": {
    "repository": "OpenRefine/OpenRefine",
    "fix_commit": "090924ca923489b6c94397cf1f5df7f7f78f0126",
    "related_commits": [
      "090924ca923489b6c94397cf1f5df7f7f78f0126"
    ],
    "patch_url": "https://github.com/OpenRefine/OpenRefine/commit/090924ca923489b6c94397cf1f5df7f7f78f0126.patch",
    "fix_commit_details": {
      "sha": "090924ca923489b6c94397cf1f5df7f7f78f0126",
      "commit_date": "2024-10-08T09:19:31Z",
      "author": {
        "login": "wetneb",
        "type": "User",
        "stats": {
          "total_commits": 1479,
          "average_weekly_commits": 1.891304347826087,
          "total_additions": 347804,
          "total_deletions": 349731,
          "weeks_active": 288
        }
      },
      "commit_message": {
        "title": "Add CSRF protection to commands that evaluate expressions",
        "length": 375,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 613,
        "additions": 357,
        "deletions": 256
      },
      "files": [
        {
          "filename": "extensions/wikibase/module/scripts/menu-bar-extension.js",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -35,8 +35,10 @@ WikibaseExporterMenuBar.exportTo = function (format) {\n   var form = document.createElement(\"form\");\n   $(form).css(\"display\", \"none\")\n       .attr(\"method\", \"post\")\n-      .attr(\"action\", \"command/core/export-rows/\" + targetUrl)\n       .attr(\"target\", \"openrefine-export-\" + format);\n+  Refine.wrapCSRF(function(csrfToken) {\n+    $(form).attr(\"action\", \"command/core/export-rows/\" + targetUrl + \"?\" + $.attr({csrf_token: csrfToken}))\n+  });\n   $('<input />')\n       .attr(\"name\", \"engine\")\n       .val(JSON.stringify(ui.browsingEngine.getJSON()))"
        },
        {
          "filename": "main/src/com/google/refine/commands/browsing/ComputeClustersCommand.java",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -58,13 +58,14 @@ public class ComputeClustersCommand extends Command {\n \n     final static Logger logger = LoggerFactory.getLogger(\"compute-clusters_command\");\n \n-    /**\n-     * This command uses POST (probably to allow for larger parameters) but does not actually modify any state so we do\n-     * not add CSRF protection to it.\n-     */\n     @Override\n     public void doPost(HttpServletRequest request, HttpServletResponse response)\n             throws ServletException, IOException {\n+        // This command triggers evaluation expression and therefore requires CSRF-protection\n+        if (!hasValidCSRFToken(request)) {\n+            respondCSRFError(response);\n+            return;\n+        }\n \n         try {\n             long start = System.currentTimeMillis();"
        },
        {
          "filename": "main/src/com/google/refine/commands/browsing/ComputeFacetsCommand.java",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -45,13 +45,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n public class ComputeFacetsCommand extends Command {\n \n-    /**\n-     * This command uses POST (probably to allow for larger parameters) but does not actually modify any state so we do\n-     * not add CSRF protection to it.\n-     */\n     @Override\n     public void doPost(HttpServletRequest request, HttpServletResponse response)\n             throws ServletException, IOException {\n+        // This command triggers evaluation expression and therefore requires CSRF-protection\n+        if (!hasValidCSRFToken(request)) {\n+            respondCSRFError(response);\n+            return;\n+        }\n \n         try {\n             Project project = getProject(request);"
        },
        {
          "filename": "main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -69,6 +69,11 @@ public class GetScatterplotCommand extends Command {\n     @Override\n     public void doGet(HttpServletRequest request, HttpServletResponse response)\n             throws ServletException, IOException {\n+        // This command triggers evaluation expression and therefore requires CSRF-protection.\n+        if (!hasValidCSRFTokenAsGET(request)) {\n+            respondCSRFError(response);\n+            return;\n+        }\n \n         try {\n             long start = System.currentTimeMillis();"
        },
        {
          "filename": "main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -121,15 +121,16 @@ public PreviewResult(List<ExpressionValue> evaluated) {\n         }\n     }\n \n-    /**\n-     * The command uses POST but does not actually modify any state so it does not require CSRF.\n-     */\n-\n     @Override\n     public void doPost(HttpServletRequest request, HttpServletResponse response)\n             throws ServletException, IOException {\n-\n         try {\n+            // This command triggers evaluation expression and therefore requires CSRF-protection\n+            if (!hasValidCSRFToken(request)) {\n+                respondCSRFError(response);\n+                return;\n+            }\n+\n             Project project = getProject(request);\n \n             int cellIndex = Integer.parseInt(request.getParameter(\"cellIndex\"));"
        },
        {
          "filename": "main/src/com/google/refine/commands/project/ExportRowsCommand.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -86,6 +86,11 @@ static public Properties getRequestParameters(HttpServletRequest request) {\n     @Override\n     public void doPost(HttpServletRequest request, HttpServletResponse response)\n             throws ServletException, IOException {\n+        // This command triggers evaluation expression and therefore requires CSRF-protection\n+        if (!hasValidCSRFToken(request)) {\n+            respondCSRFError(response);\n+            return;\n+        }\n \n         ProjectManager.singleton.setBusy(true);\n "
        },
        {
          "filename": "main/tests/server/src/com/google/refine/commands/browsing/ComputeClustersCommandTests.java",
          "status": "added",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -0,0 +1,25 @@\n+\n+package com.google.refine.commands.browsing;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.ServletException;\n+\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import com.google.refine.commands.CommandTestBase;\n+\n+public class ComputeClustersCommandTests extends CommandTestBase {\n+\n+    @BeforeMethod\n+    public void setUpCommand() {\n+        command = new ComputeClustersCommand();\n+    }\n+\n+    @Test\n+    public void testCSRFProtection() throws ServletException, IOException {\n+        command.doPost(request, response);\n+        assertCSRFCheckFailed();\n+    }\n+}"
        },
        {
          "filename": "main/tests/server/src/com/google/refine/commands/browsing/ComputeFacetsCommandTests.java",
          "status": "added",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -0,0 +1,25 @@\n+\n+package com.google.refine.commands.browsing;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.ServletException;\n+\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import com.google.refine.commands.CommandTestBase;\n+\n+public class ComputeFacetsCommandTests extends CommandTestBase {\n+\n+    @BeforeMethod\n+    public void setUpCommand() {\n+        command = new ComputeClustersCommand();\n+    }\n+\n+    @Test\n+    public void testCSRFProtection() throws ServletException, IOException {\n+        command.doPost(request, response);\n+        assertCSRFCheckFailed();\n+    }\n+}"
        },
        {
          "filename": "main/tests/server/src/com/google/refine/commands/browsing/ScatterplotDrawCommandTests.java",
          "status": "modified",
          "additions": 10,
          "deletions": 19,
          "patch": "@@ -1,15 +1,9 @@\n \n package com.google.refine.commands.browsing;\n \n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n \n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.ServletException;\n \n import com.fasterxml.jackson.core.JsonParseException;\n import com.fasterxml.jackson.databind.JsonMappingException;\n@@ -18,23 +12,14 @@\n import org.testng.annotations.Test;\n \n import com.google.refine.browsing.facets.ScatterplotFacet;\n-import com.google.refine.commands.Command;\n+import com.google.refine.commands.CommandTestBase;\n import com.google.refine.util.ParsingUtilities;\n \n-public class ScatterplotDrawCommandTests {\n-\n-    protected HttpServletRequest request = null;\n-    protected HttpServletResponse response = null;\n-    protected StringWriter writer = null;\n-    protected Command command = null;\n+public class ScatterplotDrawCommandTests extends CommandTestBase {\n \n     @BeforeMethod\n-    public void setUp() throws IOException {\n-        request = mock(HttpServletRequest.class);\n-        response = mock(HttpServletResponse.class);\n+    public void setUpCommand() {\n         command = new GetScatterplotCommand();\n-        writer = new StringWriter();\n-        when(response.getWriter()).thenReturn(new PrintWriter(writer));\n     }\n \n     public static String configJson = \"{\"\n@@ -109,6 +94,12 @@ public void setUp() throws IOException {\n             + \"\\\"to_y\\\":0,\"\n             + \"\\\"color\\\":\\\"ff6a00\\\"}\";\n \n+    @Test\n+    public void testCSRFProtection() throws ServletException, IOException {\n+        command.doGet(request, response);\n+        assertCSRFCheckFailed();\n+    }\n+\n     @Test\n     public void testParseConfig() throws JsonParseException, JsonMappingException, IOException {\n         GetScatterplotCommand.PlotterConfig config = ParsingUtilities.mapper.readValue(configJson,"
        },
        {
          "filename": "main/tests/server/src/com/google/refine/commands/expr/PreviewExpressionCommandTests.java",
          "status": "modified",
          "additions": 11,
          "deletions": 22,
          "patch": "@@ -27,47 +27,30 @@\n \n package com.google.refine.commands.expr;\n \n-import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n import java.io.IOException;\n-import java.io.PrintWriter;\n import java.io.Serializable;\n-import java.io.StringWriter;\n \n import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n \n import org.testng.annotations.AfterMethod;\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n-import com.google.refine.RefineTest;\n import com.google.refine.commands.Command;\n+import com.google.refine.commands.CommandTestBase;\n import com.google.refine.expr.MetaParser;\n import com.google.refine.grel.Parser;\n import com.google.refine.model.Project;\n import com.google.refine.util.TestUtils;\n \n-public class PreviewExpressionCommandTests extends RefineTest {\n+public class PreviewExpressionCommandTests extends CommandTestBase {\n \n     protected Project project = null;\n-    protected HttpServletRequest request = null;\n-    protected HttpServletResponse response = null;\n-    protected Command command = null;\n-    protected StringWriter writer = null;\n \n     @BeforeMethod\n-    public void setUpRequestResponse() {\n-        request = mock(HttpServletRequest.class);\n-        response = mock(HttpServletResponse.class);\n-        writer = new StringWriter();\n-        try {\n-            when(response.getWriter()).thenReturn(new PrintWriter(writer));\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n+    public void setUpCommandAndProject() {\n         command = new PreviewExpressionCommand();\n         project = createProject(\n                 new String[] { \"a\", \"b\" },\n@@ -89,8 +72,14 @@ public void unregisterGRELParser() {\n     }\n \n     @Test\n-    public void testJsonResponse() throws ServletException, IOException {\n+    public void testCSRFProtection() throws ServletException, IOException {\n+        command.doPost(request, response);\n+        assertCSRFCheckFailed();\n+    }\n \n+    @Test\n+    public void testJsonResponse() throws ServletException, IOException {\n+        when(request.getParameter(\"csrf_token\")).thenReturn(Command.csrfFactory.getFreshToken());\n         when(request.getParameter(\"project\")).thenReturn(Long.toString(project.id));\n         when(request.getParameter(\"cellIndex\")).thenReturn(\"1\");\n         when(request.getParameter(\"expression\")).thenReturn(\"grel:value + \\\"_u\\\"\");\n@@ -106,7 +95,7 @@ public void testJsonResponse() throws ServletException, IOException {\n \n     @Test\n     public void testParseError() throws ServletException, IOException {\n-\n+        when(request.getParameter(\"csrf_token\")).thenReturn(Command.csrfFactory.getFreshToken());\n         when(request.getParameter(\"project\")).thenReturn(Long.toString(project.id));\n         when(request.getParameter(\"cellIndex\")).thenReturn(\"1\");\n         when(request.getParameter(\"expression\")).thenReturn(\"grel:value +\");"
        },
        {
          "filename": "main/tests/server/src/com/google/refine/commands/project/ExportRowsCommandTests.java",
          "status": "added",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -0,0 +1,25 @@\n+\n+package com.google.refine.commands.project;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.ServletException;\n+\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import com.google.refine.commands.CommandTestBase;\n+\n+public class ExportRowsCommandTests extends CommandTestBase {\n+\n+    @BeforeMethod\n+    public void setUpCommand() {\n+        command = new ExportRowsCommand();\n+    }\n+\n+    @Test\n+    public void testCSRFProtection() throws ServletException, IOException {\n+        command.doPost(request, response);\n+        assertCSRFCheckFailed();\n+    }\n+}"
        },
        {
          "filename": "main/webapp/modules/core/scripts/dialogs/clustering-dialog.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -444,7 +444,7 @@ ClusteringDialog.prototype._cluster = function() {\n \n     this._elmts.resultSummary.empty();\n \n-    $.post(\n+    Refine.postCSRF(\n         \"command/core/compute-clusters?\" + $.param({ project: theProject.id }),\n         {\n             engine: JSON.stringify(ui.browsingEngine.getJSON()),"
        },
        {
          "filename": "main/webapp/modules/core/scripts/dialogs/custom-tabular-exporter-dialog.js",
          "status": "modified",
          "additions": 19,
          "deletions": 17,
          "patch": "@@ -309,32 +309,34 @@ CustomTabularExporterDialog.prototype._postExport = function(preview) {\n   }\n   \n   var ext = CustomTabularExporterDialog.formats[format].extension;\n-  var form = ExporterManager.prepareExportRowsForm(format, !exportAllRowsCheckbox, ext);\n+  Refine.wrapCSRF(function(csrfToken) {\n+    var form = ExporterManager.prepareExportRowsForm(format, !exportAllRowsCheckbox, ext, csrfToken);\n \n-  if (preview) {\n-    $(form).attr(\"target\", \"refine-export\");\n-  }\n-  $('<input />')\n-  .attr(\"name\", \"options\")\n-  .val(JSON.stringify(options))\n-  .appendTo(form);\n-  if (encoding) {\n+    if (preview) {\n+      $(form).attr(\"target\", \"refine-export\");\n+    }\n     $('<input />')\n-    .attr(\"name\", \"encoding\")\n-    .val(encoding)\n-    .appendTo(form);\n-  }\n-  $('<input />')\n-  .attr(\"name\", \"preview\")\n-  .val(preview)\n-  .appendTo(form);\n+      .attr(\"name\", \"options\")\n+      .val(JSON.stringify(options))\n+      .appendTo(form);\n+    if (encoding) {\n+      $('<input />')\n+        .attr(\"name\", \"encoding\")\n+        .val(encoding)\n+        .appendTo(form);\n+    }\n+    $('<input />')\n+      .attr(\"name\", \"preview\")\n+      .val(preview)\n+      .appendTo(form);\n \n     document.body.appendChild(form);\n     if (preview) {\n       window.open(\" \", \"refine-export\");\n     }\n     form.submit();\n     document.body.removeChild(form);\n+  });\n }\n \n CustomTabularExporterDialog.prototype._selectColumn = function(columnName) {"
        },
        {
          "filename": "main/webapp/modules/core/scripts/dialogs/expression-preview-dialog.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -444,7 +444,7 @@ ExpressionPreviewDialog.Widget.prototype.update = function() {\n     if(activeTabName === \"Distance\"){\n         self._renderDistancePreview(this._values[0]);\n     } else {\n-        $.post(\n+        Refine.postCSRF(\n             \"command/core/preview-expression?\" + $.param(params), \n             {\n                 expression: this._getLanguage() + \":\" + expression,"
        },
        {
          "filename": "main/webapp/modules/core/scripts/dialogs/scatterplot-dialog.js",
          "status": "modified",
          "additions": 118,
          "deletions": 115,
          "patch": "@@ -99,123 +99,126 @@ ScatterplotDialog.prototype._renderMatrix = function() {\n         var params = {\n             project: theProject.id\n         };\n-        $.getJSON(\"command/core/get-columns-info?\" + $.param(params),function(data) {\n-            if (data === null || typeof data.length == 'undefined') {\n-                container.html($.i18n('core-dialogs/error-getColumnInfo'));\n-                return;\n-            }\n-                \n-            var columns = [];\n-            for (var i = 0; i < data.length; i++) {\n-                if (data[i].is_numeric) {\n-                    columns.push(data[i]);\n-                }\n-            }\n-                \n-            if (typeof self._plot_size == 'undefined') {\n-                self._plot_size = Math.max(Math.floor(500 / columns.length / 5) * 5,20);\n-                self._dot_size = 0.8;\n-            }\n-            \n-            var table = '<table class=\"scatterplot-matrix-table\"><tbody>';\n-            \n-            var createScatterplot = function(cx, cy) {\n-                var title = cx + ' (x) vs. ' + cy + ' (y)';\n-                var link = '<a href=\"javascript:{}\" title=\"' + title + '\" cx=\"' + cx + '\" cy=\"' + cy + '\">';\n-                var plotter_params = { \n-                    'cx' : cx, \n-                    'cy' : cy,\n-                    'l' : self._plot_size,\n-                    'dot': self._dot_size,\n-                    'dim_x': self._plot_method,\n-                    'dim_y': self._plot_method,\n-                    'r': self._rotation\n-                };\n-                var params = {\n-                    project: theProject.id,\n-                    engine: JSON.stringify(ui.browsingEngine.getJSON()), \n-                    plotter: JSON.stringify(plotter_params) \n-                };\n-                var url = \"command/core/get-scatterplot?\" + $.param(params);\n+        Refine.wrapCSRF(function(csrfToken) {\n+          $.getJSON(\"command/core/get-columns-info?\" + $.param(params),function(data) {\n+              if (data === null || typeof data.length == 'undefined') {\n+                  container.html($.i18n('core-dialogs/error-getColumnInfo'));\n+                  return;\n+              }\n+                  \n+              var columns = [];\n+              for (var i = 0; i < data.length; i++) {\n+                  if (data[i].is_numeric) {\n+                      columns.push(data[i]);\n+                  }\n+              }\n+                  \n+              if (typeof self._plot_size == 'undefined') {\n+                  self._plot_size = Math.max(Math.floor(500 / columns.length / 5) * 5,20);\n+                  self._dot_size = 0.8;\n+              }\n+              \n+              var table = '<table class=\"scatterplot-matrix-table\"><tbody>';\n+              \n+              var createScatterplot = function(cx, cy) {\n+                  var title = cx + ' (x) vs. ' + cy + ' (y)';\n+                  var link = '<a href=\"javascript:{}\" title=\"' + title + '\" cx=\"' + cx + '\" cy=\"' + cy + '\">';\n+                  var plotter_params = { \n+                      'cx' : cx, \n+                      'cy' : cy,\n+                      'l' : self._plot_size,\n+                      'dot': self._dot_size,\n+                      'dim_x': self._plot_method,\n+                      'dim_y': self._plot_method,\n+                      'r': self._rotation\n+                  };\n+                  var params = {\n+                      project: theProject.id,\n+                      engine: JSON.stringify(ui.browsingEngine.getJSON()), \n+                      plotter: JSON.stringify(plotter_params),\n+                      csrf_token: csrfToken\n+                  };\n+                  var url = \"command/core/get-scatterplot?\" + $.param(params);\n \n-                var attrs = [\n-                    'width=\"' + self._plot_size + '\"',\n-                    'height=\"' + self._plot_size + '\"',\n-                    'src2=\"' + url + '\"'\n-                ];\n-                \n-                return link + '<img ' + attrs.join(' ') + ' /></a>';\n-            };\n-    \n-            for (var i = 0; i < columns.length; i++) {\n-                table += '<tr>';\n-                var div_class = \"column_header\";\n-                if (columns[i].name == self._column) div_class += \" current_column\";\n-                table += '<td class=\"' + div_class + '\" colspan=\"' + (i + 1) + '\">' + columns[i].name + '</td>';\n-                for (var j = i + 1; j < columns.length; j++) {\n-                    var cx = columns[i].name;\n-                    var cy = columns[j].name;\n-                    \n-                    var div_class = \"scatterplot\";\n-                    var current = cx == self._column || cy == self._column;\n-                    if (current) div_class += \" current_column\";\n-                    table += '<td><div class=\"' + div_class + '\">' + createScatterplot(cx,cy) + '</div></td>';\n-                }\n-                table += '</tr>';\n-            }\n-    \n-            table += \"</tbody></table>\";\n-            \n-            var width = container.width();\n-            container.empty().css(\"width\", width + \"px\").html(table);\n-            \n-            container.find(\"a\").on('click',function() {\n-                var options = {\n-                    \"name\" : $(this).attr(\"title\"),\n-                    \"cx\" : $(this).attr(\"cx\"), \n-                    \"cy\" : $(this).attr(\"cy\"), \n-                    \"l\" : 150,\n-                    \"ex\" : \"value\",\n-                    \"ey\" : \"value\",\n-                    \"dot\" : self._dot_size,\n-                    \"dim_x\" : self._plot_method,\n-                    \"dim_y\" : self._plot_method,\n-                    'r': self._rotation\n-                };\n-                ui.browsingEngine.addFacet(\"scatterplot\", options);\n-                self._dismiss();\n-            });\n+                  var attrs = [\n+                      'width=\"' + self._plot_size + '\"',\n+                      'height=\"' + self._plot_size + '\"',\n+                      'src2=\"' + url + '\"'\n+                  ];\n+                  \n+                  return link + '<img ' + attrs.join(' ') + ' /></a>';\n+              };\n+      \n+              for (var i = 0; i < columns.length; i++) {\n+                  table += '<tr>';\n+                  var div_class = \"column_header\";\n+                  if (columns[i].name == self._column) div_class += \" current_column\";\n+                  table += '<td class=\"' + div_class + '\" colspan=\"' + (i + 1) + '\">' + columns[i].name + '</td>';\n+                  for (var j = i + 1; j < columns.length; j++) {\n+                      var cx = columns[i].name;\n+                      var cy = columns[j].name;\n+                      \n+                      var div_class = \"scatterplot\";\n+                      var current = cx == self._column || cy == self._column;\n+                      if (current) div_class += \" current_column\";\n+                      table += '<td><div class=\"' + div_class + '\">' + createScatterplot(cx,cy) + '</div></td>';\n+                  }\n+                  table += '</tr>';\n+              }\n+      \n+              table += \"</tbody></table>\";\n+              \n+              var width = container.width();\n+              container.empty().css(\"width\", width + \"px\").html(table);\n+              \n+              container.find(\"a\").on('click',function() {\n+                  var options = {\n+                      \"name\" : $(this).attr(\"title\"),\n+                      \"cx\" : $(this).attr(\"cx\"), \n+                      \"cy\" : $(this).attr(\"cy\"), \n+                      \"l\" : 150,\n+                      \"ex\" : \"value\",\n+                      \"ey\" : \"value\",\n+                      \"dot\" : self._dot_size,\n+                      \"dim_x\" : self._plot_method,\n+                      \"dim_y\" : self._plot_method,\n+                      'r': self._rotation\n+                  };\n+                  ui.browsingEngine.addFacet(\"scatterplot\", options);\n+                  self._dismiss();\n+              });\n \n-            var load_images = function(data) {\n-                if (self._active) {\n-                    data.batch = 0;\n-                    var end = Math.min(data.index + data.batch_size,data.images.length);\n-                    for (; data.index < end; data.index++) {\n-                        load_image(data);\n-                    }\n-                }\n-            };\n-            \n-            var load_image = function(data) {\n-                var img = $(data.images[data.index]);\n-                var src2 = img.attr(\"src2\");\n-                if (src2) {\n-                    img.attr(\"src\", src2);\n-                    img.removeAttr(\"src2\");\n-                    img.on(\"load\", function() {\n-                        data.batch++;\n-                        if (data.batch == data.batch_size) {\n-                            load_images(data);\n-                        }\n-                    });\n-                }\n-            };\n-            \n-            load_images({\n-                index : 0,\n-                batch_size: 4,\n-                images : container.find(\".scatterplot img\")\n-            });\n+              var load_images = function(data) {\n+                  if (self._active) {\n+                      data.batch = 0;\n+                      var end = Math.min(data.index + data.batch_size,data.images.length);\n+                      for (; data.index < end; data.index++) {\n+                          load_image(data);\n+                      }\n+                  }\n+              };\n+              \n+              var load_image = function(data) {\n+                  var img = $(data.images[data.index]);\n+                  var src2 = img.attr(\"src2\");\n+                  if (src2) {\n+                      img.attr(\"src\", src2);\n+                      img.removeAttr(\"src2\");\n+                      img.on(\"load\", function() {\n+                          data.batch++;\n+                          if (data.batch == data.batch_size) {\n+                              load_images(data);\n+                          }\n+                      });\n+                  }\n+              };\n+              \n+              load_images({\n+                  index : 0,\n+                  batch_size: 4,\n+                  images : container.find(\".scatterplot img\")\n+              });\n+          });\n         });\n     } else {\n         container.html("
        },
        {
          "filename": "main/webapp/modules/core/scripts/dialogs/sql-exporter-dialog.js",
          "status": "modified",
          "additions": 39,
          "deletions": 34,
          "patch": "@@ -347,38 +347,39 @@ function SqlExporterDialog(options) {\n       options.limit = 10;\n     }\n \n-  // var ext = SqlExporterDialog.formats[format].extension;\n-    var form = self._prepareSqlExportRowsForm(format, !exportAllRowsCheckbox, \"sql\");\n-    if (preview) {\n-      $(form).attr(\"target\", \"refine-export\");\n-    }\n-    $('<input />')\n-    .attr(\"name\", \"options\")\n-    .val(JSON.stringify(options))\n-    .appendTo(form);\n-    if (encoding) {\n+    Refine.wrapCSRF(function(csrfToken) { \n+      var form = self._prepareSqlExportRowsForm(format, !exportAllRowsCheckbox, \"sql\", csrfToken);\n+      if (preview) {\n+        $(form).attr(\"target\", \"refine-export\");\n+      }\n       $('<input />')\n-      .attr(\"name\", \"encoding\")\n-      .val(encoding)\n-      .appendTo(form);\n-    }\n-    $('<input />')\n-    .attr(\"name\", \"preview\")\n-    .val(preview)\n-    .appendTo(form);\n+        .attr(\"name\", \"options\")\n+        .val(JSON.stringify(options))\n+        .appendTo(form);\n+      if (encoding) {\n+        $('<input />')\n+          .attr(\"name\", \"encoding\")\n+          .val(encoding)\n+          .appendTo(form);\n+      }\n+      $('<input />')\n+        .attr(\"name\", \"preview\")\n+        .val(preview)\n+        .appendTo(form);\n \n-    document.body.appendChild(form);\n+      document.body.appendChild(form);\n \n-    if (preview) {\n-      window.open(\" \", \"refine-export\");\n-    }\n-    form.submit();\n+      if (preview) {\n+        window.open(\" \", \"refine-export\");\n+      }\n+      form.submit();\n \n-    document.body.removeChild(form);\n+      document.body.removeChild(form);\n+    });\n     return true;\n   };\n \n-  SqlExporterDialog.prototype._prepareSqlExportRowsForm = function(format, includeEngine, ext) {\n+  SqlExporterDialog.prototype._prepareSqlExportRowsForm = function(format, includeEngine, ext, csrfToken) {\n       var name = ExporterManager.stripNonFileChars(theProject.metadata.name);\n       var form = document.createElement(\"form\");\n       $(form)\n@@ -387,18 +388,22 @@ function SqlExporterDialog(options) {\n       .attr(\"action\", \"command/core/export-rows/\" + name + ((ext) ? (\".\" + ext) : \"\"));\n \n       $('<input />')\n-      .attr(\"name\", \"project\")\n-      .val(theProject.id)\n-      .appendTo(form);\n+        .attr('name', 'csrf_token')\n+        .attr('value', csrfToken)\n+        .appendTo(form);\n       $('<input />')\n-      .attr(\"name\", \"format\")\n-      .val(format)\n-      .appendTo(form);\n+        .attr(\"name\", \"project\")\n+        .val(theProject.id)\n+        .appendTo(form);\n+      $('<input />')\n+        .attr(\"name\", \"format\")\n+        .val(format)\n+        .appendTo(form);\n       if (includeEngine) {\n         $('<input />')\n-        .attr(\"name\", \"engine\")\n-        .val(JSON.stringify(ui.browsingEngine.getJSON()))\n-        .appendTo(form);\n+          .attr(\"name\", \"engine\")\n+          .val(JSON.stringify(ui.browsingEngine.getJSON()))\n+          .appendTo(form);\n       }\n \n       return form;"
        },
        {
          "filename": "main/webapp/modules/core/scripts/dialogs/templating-exporter-dialog.js",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -53,7 +53,12 @@ TemplatingExporterDialog.prototype._createDialog = function() {\n     this._elmts.cancelButton.html($.i18n('core-buttons/cancel'));\n     this._elmts.previewTextarea.attr('aria-label',$.i18n('core-dialogs/template-preview'))\n     \n-    this._elmts.exportButton.on('click',function() { self._export(); self._dismiss(); });\n+    this._elmts.exportButton.on('click',function() {\n+      Refine.wrapCSRF(function(csrfToken) {\n+        self._export(csrfToken);\n+        self._dismiss();\n+      });\n+    });\n     this._elmts.cancelButton.on('click',function() { self._dismiss(); });\n     this._elmts.resetButton.on('click',function() {\n         self._fillInTemplate(self._createDefaultTemplate());\n@@ -122,7 +127,7 @@ TemplatingExporterDialog.prototype._dismiss = function() {\n \n TemplatingExporterDialog.prototype._updatePreview = function() {\n     var self = this;\n-    $.post(\n+    Refine.postCSRF(\n         \"command/core/export-rows/preview.txt\",\n         {\n             \"project\" : theProject.id, \n@@ -147,7 +152,7 @@ TemplatingExporterDialog.prototype._updatePreview = function() {\n     });\n };\n \n-TemplatingExporterDialog.prototype._export = function() {\n+TemplatingExporterDialog.prototype._export = function(csrfToken) {\n     var name = ExporterManager.stripNonFileChars(theProject.metadata.name);\n     var form = document.createElement(\"form\");\n     $(form)\n@@ -162,6 +167,7 @@ TemplatingExporterDialog.prototype._export = function() {\n             .appendTo(form);\n     };\n \n+    appendField(\"csrf_token\", csrfToken);\n     appendField(\"engine\", JSON.stringify(ui.browsingEngine.getJSON()));\n     appendField(\"project\", theProject.id);\n     appendField(\"format\", \"template\");"
        },
        {
          "filename": "main/webapp/modules/core/scripts/facets/scatterplot-facet.js",
          "status": "modified",
          "additions": 28,
          "deletions": 19,
          "patch": "@@ -146,12 +146,14 @@ class ScatterplotFacet extends Facet {\n     });\n \n     this._elmts.plotDiv.width(this._config.l + \"px\").height(this._config.l + \"px\");\n-    this._elmts.plotBaseImg.attr(\"src\", this._formulateBaseImageUrl())\n-    .attr(\"width\", this._config.l)\n-    .attr(\"height\", this._config.l);\n-    this._elmts.plotImg.attr(\"src\", this._formulateCurrentImageUrl())\n-    .attr(\"width\", this._config.l)\n-    .attr(\"height\", this._config.l);\n+    Refine.wrapCSRF(function(csrfToken) {\n+      self._elmts.plotBaseImg.attr(\"src\", self._formulateBaseImageUrl(csrfToken))\n+        .attr(\"width\", self._config.l)\n+        .attr(\"height\", self._config.l);\n+      self._elmts.plotImg.attr(\"src\", self._formulateCurrentImageUrl(csrfToken))\n+        .attr(\"width\", self._config.l)\n+        .attr(\"height\",self._config.l);\n+    });\n \n     var ops = {\n         instance: true,        \n@@ -252,19 +254,19 @@ class ScatterplotFacet extends Facet {\n     }\n   };\n \n-  _formulateCurrentImageUrl() {\n-    return this._formulateImageUrl(ui.browsingEngine.getJSON(false, this), { color: \"ff6a00\" });\n+  _formulateCurrentImageUrl(csrfToken) {\n+    return this._formulateImageUrl(ui.browsingEngine.getJSON(false, this), { color: \"ff6a00\" }, csrfToken);\n   };\n \n-  _formulateBaseImageUrl() {\n-    return this._formulateImageUrl({},{ color: \"888888\", dot : this._config.dot * 0.9 });\n+  _formulateBaseImageUrl(csrfToken) {\n+    return this._formulateImageUrl({},{ color: \"888888\", dot : this._config.dot * 0.9 }, csrfToken);\n   };\n \n-  _formulateExportImageUrl() {\n-    return this._formulateImageUrl(ui.browsingEngine.getJSON(false, this), { dot : this._config.dot * 5, l: 500, base_color: \"888888\" });\n+  _formulateExportImageUrl(csrfToken) {\n+    return this._formulateImageUrl(ui.browsingEngine.getJSON(false, this), { dot : this._config.dot * 5, l: 500, base_color: \"888888\" }, csrfToken);\n   };\n \n-  _formulateImageUrl(engineConfig, conf) {\n+  _formulateImageUrl(engineConfig, conf, csrfToken) {\n     var options = {};\n     for (var p in this._config) {\n       if (this._config.hasOwnProperty(p)) {        \n@@ -279,7 +281,8 @@ class ScatterplotFacet extends Facet {\n     var params = {\n         project: theProject.id,\n         engine: JSON.stringify(engineConfig), \n-        plotter: JSON.stringify(options) \n+        plotter: JSON.stringify(options),\n+        csrf_token: csrfToken \n     };\n     return \"command/core/get-scatterplot?\" + $.param(params);\n   };\n@@ -337,9 +340,12 @@ class ScatterplotFacet extends Facet {\n   };\n \n   changePlot() {\n-    this._elmts.plotBaseImg.attr(\"src\", this._formulateBaseImageUrl());\n-    this._elmts.plotImg.attr(\"src\", this._formulateCurrentImageUrl());\n-    this._elmts.exportPlotLink.attr(\"href\", this._formulateExportImageUrl());\n+    let self = this;\n+    Refine.wrapCSRF(function(csrfToken) {\n+      self._elmts.plotBaseImg.attr(\"src\", self._formulateBaseImageUrl(csrfToken));\n+      self._elmts.plotImg.attr(\"src\", self._formulateCurrentImageUrl(csrfToken));\n+      self._elmts.exportPlotLink.attr(\"href\", self._formulateExportImageUrl(csrfToken));\n+    });\n   };\n \n   render() {\n@@ -359,8 +365,11 @@ class ScatterplotFacet extends Facet {\n     this._elmts.plotDiv.show();\n     this._elmts.statusDiv.show();\n \n-    this._elmts.plotImg.attr(\"src\", this._formulateCurrentImageUrl());\n-    this._elmts.exportPlotLink.attr(\"href\", this._formulateExportImageUrl());\n+    let self = this;\n+    Refine.wrapCSRF(function(csrfToken) {\n+      self._elmts.plotImg.attr(\"src\", self._formulateCurrentImageUrl(csrfToken));\n+      self._elmts.exportPlotLink.attr(\"href\", self._formulateExportImageUrl(csrfToken));\n+    });\n   };\n \n   _updateRest() {"
        },
        {
          "filename": "main/webapp/modules/core/scripts/project/browsing-engine.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -265,7 +265,7 @@ BrowsingEngine.prototype.update = function(onDone) {\n   this._elmts.controls.css(\"display\", \"none\");\n   this._elmts.indicator.css(\"display\", \"block\");\n \n-  $.post(\n+  Refine.postCSRF(\n     \"command/core/compute-facets?\" + $.param({ project: theProject.id }),\n     { engine: JSON.stringify(this.getJSON(true)) },\n     function(data) {"
        },
        {
          "filename": "main/webapp/modules/core/scripts/project/exporters.js",
          "status": "modified",
          "additions": 10,
          "deletions": 8,
          "patch": "@@ -112,19 +112,21 @@ ExporterManager.stripNonFileChars = function(name) {\n };\n \n ExporterManager.handlers.exportRows = function(format, ext) {\n-  let form = ExporterManager.prepareExportRowsForm(format, true, ext);\n-  document.body.appendChild(form);\n-  form.submit();\n-  document.body.removeChild(form);\n+  Refine.wrapCSRF(function(csrfToken) {\n+    let form = ExporterManager.prepareExportRowsForm(format, true, ext, csrfToken);\n+    document.body.appendChild(form);\n+    form.submit();\n+    document.body.removeChild(form);\n+  });\n };\n \n-ExporterManager.prepareExportRowsForm = function(format, includeEngine, ext) {\n+ExporterManager.prepareExportRowsForm = function(format, includeEngine, ext, csrfToken) {\n   let name = encodeURI(ExporterManager.stripNonFileChars(theProject.metadata.name));\n   let form = document.createElement(\"form\");\n   $(form)\n-  .css(\"display\", \"none\")\n-  .attr(\"method\", \"post\")\n-  .attr(\"action\", \"command/core/export-rows/\" + name + ((ext) ? (\".\" + ext) : \"\"));\n+   .css(\"display\", \"none\")\n+   .attr(\"method\", \"post\")\n+   .attr(\"action\", \"command/core/export-rows/\" + name + ((ext) ? (\".\" + ext) : \"\") + \"?\" + $.param({csrf_token: csrfToken}));\n \n   $('<input />')\n   .attr(\"name\", \"project\")"
        },
        {
          "filename": "main/webapp/modules/core/scripts/util/csrf.js",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -3,7 +3,7 @@ CSRFUtil = {};\n // Requests a CSRF token and calls the supplied callback\n // with the token\n CSRFUtil.wrapCSRF = function(onCSRF) {\n-    $.get(\n+    return $.get(\n         \"command/core/get-csrf-token\",\n         {},\n         function(response) {\n@@ -20,7 +20,11 @@ CSRFUtil.postCSRF = function(url, data, success, dataType, failCallback) {\n     return CSRFUtil.wrapCSRF(function(token) {\n         var fullData = data || {};\n         if (typeof fullData == 'string') {\n-            fullData = fullData + \"&\" + $.param({csrf_token: token});\n+            if (fullData.includes('?')) {\n+              fullData = fullData + \"&\" + $.param({csrf_token: token});\n+            } else {\n+              fullData = fullData + \"?\" + $.param({csrf_token: token});\n+            }\n         } else {\n             fullData['csrf_token'] = token;\n         }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 11,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9353d6df6b9c0554d3581a53fda972cae54370fc",
            "date": "2025-01-14T12:38:27Z",
            "author_login": "weblate"
          },
          {
            "sha": "1d48fb60530f9d7ac6c2d633a7774d70f0c18298",
            "date": "2025-01-14T07:09:22Z",
            "author_login": "thadguidry"
          },
          {
            "sha": "f353f9865a1356681bb2321f4e0bcf1e65585d43",
            "date": "2025-01-13T20:34:43Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e40d26a824272da40c0804cff25dde34e517b74f",
            "date": "2025-01-13T20:34:09Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a86836eed3f4d9e5e8e163aa40b25469ee170e43",
            "date": "2025-01-13T20:33:00Z",
            "author_login": "weblate"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:L",
    "cwe_id": "CWE-94",
    "description": "OpenRefine is a free, open source tool for working with messy data. Prior to version 3.8.3, lack of cross-site request forgery protection on the `preview-expression` command means that visiting a malicious website could cause an attacker-controlled expression to be executed. The expression can contain arbitrary Clojure or Python code. The attacker must know a valid project ID of a project that contains at least one row, and the attacker must convince the victim to open a malicious webpage. Version 3.8.3 fixes the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-24T21:15:12.523",
    "last_modified": "2024-12-04T17:21:35.370",
    "fix_date": "2024-10-08T09:19:31Z"
  },
  "references": [
    {
      "url": "https://github.com/OpenRefine/OpenRefine/commit/090924ca923489b6c94397cf1f5df7f7f78f0126",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-3jm4-c6qf-jrh3",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.082550",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "OpenRefine",
    "owner": "OpenRefine",
    "created_at": "2012-10-15T02:22:48Z",
    "updated_at": "2025-01-14T12:38:35Z",
    "pushed_at": "2025-01-14T12:38:30Z",
    "size": 404937,
    "stars": 11031,
    "forks": 1998,
    "open_issues": 659,
    "watchers": 11031,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 5624322,
      "JavaScript": 1796106,
      "HTML": 680637,
      "CSS": 155170,
      "Shell": 24785,
      "Batchfile": 9507,
      "Python": 4899,
      "Inno Setup": 4432,
      "mIRC Script": 762,
      "Less": 139
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:30:34.126653"
  }
}