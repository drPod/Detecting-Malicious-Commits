{
  "cve_id": "CVE-2024-47881",
  "github_data": {
    "repository": "OpenRefine/OpenRefine",
    "fix_commit": "853a1d91662e7dc278a9a94a38be58de04494056",
    "related_commits": [
      "853a1d91662e7dc278a9a94a38be58de04494056"
    ],
    "patch_url": "https://github.com/OpenRefine/OpenRefine/commit/853a1d91662e7dc278a9a94a38be58de04494056.patch",
    "fix_commit_details": {
      "sha": "853a1d91662e7dc278a9a94a38be58de04494056",
      "commit_date": "2024-08-25T17:20:47Z",
      "author": {
        "login": "wetneb",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "database extension: fix remote code execution vulnerability",
        "length": 335,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 79,
        "additions": 49,
        "deletions": 30
      },
      "files": [
        {
          "filename": "extensions/database/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManager.java",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -29,6 +29,7 @@\n \n package com.google.refine.extension.database.sqlite;\n \n+import java.io.File;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.sql.Connection;\n@@ -69,8 +70,21 @@ public static SQLiteConnectionManager getInstance() {\n     }\n \n     public static String getDatabaseUrl(DatabaseConfiguration dbConfig) {\n+        String dbPath = dbConfig.getDatabaseName();\n+        if (dbPath.contains(\"?\")) {\n+            throw new IllegalArgumentException(\"Paths to SQLite databases are not allowed to contain '?'\");\n+        }\n+        if (dbPath.startsWith(\"//\") || dbPath.startsWith(\"\\\\\\\\\") || dbPath.startsWith(\"\\\\/\") || dbPath.startsWith(\"/\\\\\")) {\n+            throw new IllegalArgumentException(\"File path starts with illegal prefix; only local files are accepted.\");\n+        }\n+        if (!new File(dbPath).isFile()) {\n+            throw new IllegalArgumentException(\"File could not be read: \" + dbPath);\n+        }\n         try {\n-            URI uri = new URI(\"jdbc:\" + dbConfig.getDatabaseType().toLowerCase(), dbConfig.getDatabaseName(), null);\n+            URI uri = new URI(\n+                    \"jdbc:\" + dbConfig.getDatabaseType().toLowerCase(),\n+                    dbPath + \"?open_mode=1&limit_attached=0\", // open_mode=1 means read-only\n+                    null);\n             return uri.toASCIIString();\n         } catch (URISyntaxException e) {\n             throw new IllegalArgumentException(e);"
        },
        {
          "filename": "extensions/database/tests/conf/appveyor_tests.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -25,7 +25,7 @@\n     <parameter name = \"mariadbDbPassword\" value=\"\"/>\n     <parameter name = \"mariadbTestTable\" value=\"test_table\"/>\n \n-    <parameter name = \"sqliteDbName\" value=\"extension_test_db.sqlite\"/>\n+    <parameter name = \"sqliteDbName\" value=\"tests/resources/test_db.sqlite\"/>\n     <parameter name = \"sqliteDbHost\" value=\"\"/>\n     <parameter name = \"sqliteDbPort\" value=\"\"/>\n     <parameter name = \"sqliteDbUser\" value=\"\"/>"
        },
        {
          "filename": "extensions/database/tests/conf/github_actions_tests.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -21,7 +21,7 @@\n     <parameter name = \"mariadbDbPassword\" value=\"root\"/>\n     <parameter name = \"mariadbTestTable\" value=\"test_table\"/>\n \n-    <parameter name = \"sqliteDbName\" value=\"extension_test_db.sqlite\"/>\n+    <parameter name = \"sqliteDbName\" value=\"tests/resources/test_db.sqlite\"/>\n     <parameter name = \"sqliteDbHost\" value=\"\"/>\n     <parameter name = \"sqliteDbPort\" value=\"\"/>\n     <parameter name = \"sqliteDbUser\" value=\"\"/>"
        },
        {
          "filename": "extensions/database/tests/conf/tests.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -29,7 +29,7 @@\n     <parameter name = \"mariadbDbPassword\" value=\"\"/>\n     <parameter name = \"mariadbTestTable\" value=\"test_table\"/>\n \n-    <parameter name = \"sqliteDbName\" value=\"extension_test_db.sqlite\"/>\n+    <parameter name = \"sqliteDbName\" value=\"tests/resources/test_db.sqlite\"/>\n     <parameter name = \"sqliteDbHost\" value=\"\"/>\n     <parameter name = \"sqliteDbPort\" value=\"\"/>\n     <parameter name = \"sqliteDbUser\" value=\"\"/>"
        },
        {
          "filename": "extensions/database/tests/resources/test_db.sqlite",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "extensions/database/tests/src/com/google/refine/extension/database/DBExtensionTests.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -61,7 +61,7 @@ public class DBExtensionTests {\n     protected final String DEFAULT_MARIADB_NAME = \"testdb\";\n \n     protected final String SQLITE_DB_NAME = \"sqlite\";\n-    protected final String DEFAULT_SQLITE_DB_NAME = \"extension_test_db.sqlite\";\n+    protected final String DEFAULT_SQLITE_DB_NAME = \"tests/resources/test_db.sqlite\";\n \n     protected final String DEFAULT_TEST_TABLE = \"test_data\";\n "
        },
        {
          "filename": "extensions/database/tests/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManagerTest.java",
          "status": "modified",
          "additions": 0,
          "deletions": 11,
          "patch": "@@ -29,13 +29,11 @@\n \n package com.google.refine.extension.database.sqlite;\n \n-import java.io.File;\n import java.sql.Connection;\n import java.sql.SQLException;\n \n import org.mockito.MockitoAnnotations;\n import org.testng.Assert;\n-import org.testng.annotations.AfterTest;\n import org.testng.annotations.BeforeTest;\n import org.testng.annotations.Optional;\n import org.testng.annotations.Parameters;\n@@ -66,15 +64,6 @@ public void beforeTest(@Optional(DEFAULT_SQLITE_DB_NAME) String sqliteDbName,\n         DatabaseService.DBType.registerDatabase(SQLiteDatabaseService.DB_NAME, SQLiteDatabaseService.getInstance());\n     }\n \n-    @AfterTest\n-    @Parameters({ \"sqliteDbName\" })\n-    public void afterTest(@Optional(DEFAULT_SQLITE_DB_NAME) String sqliteDbName) {\n-        File f = new File(sqliteDbName);\n-        if (f.exists()) {\n-            f.delete();\n-        }\n-    }\n-\n     @Test\n     public void testTestConnection() throws DatabaseServiceException {\n         boolean isConnected = SQLiteConnectionManager.getInstance().testConnection(testDbConfig);"
        },
        {
          "filename": "extensions/database/tests/src/com/google/refine/extension/database/sqlite/SQLiteDatabaseServiceTest.java",
          "status": "modified",
          "additions": 30,
          "deletions": 14,
          "patch": "@@ -29,20 +29,17 @@\n \n package com.google.refine.extension.database.sqlite;\n \n-import java.io.File;\n import java.sql.Connection;\n import java.sql.SQLException;\n import java.util.List;\n \n import org.mockito.MockitoAnnotations;\n import org.testng.Assert;\n-import org.testng.annotations.AfterTest;\n import org.testng.annotations.BeforeTest;\n import org.testng.annotations.Optional;\n import org.testng.annotations.Parameters;\n import org.testng.annotations.Test;\n \n-import com.google.refine.extension.database.DBExtensionTestUtils;\n import com.google.refine.extension.database.DBExtensionTests;\n import com.google.refine.extension.database.DatabaseConfiguration;\n import com.google.refine.extension.database.DatabaseService;\n@@ -69,28 +66,18 @@ public void beforeTest(@Optional(DEFAULT_SQLITE_DB_NAME) String sqliteDbName,\n         testDbConfig.setDatabaseType(SQLiteDatabaseService.DB_NAME);\n \n         testTable = sqliteTestTable;\n-        DBExtensionTestUtils.initTestData(testDbConfig, sqliteTestTable);\n \n         DatabaseService.DBType.registerDatabase(SQLiteDatabaseService.DB_NAME, SQLiteDatabaseService.getInstance());\n     }\n \n-    @AfterTest\n-    @Parameters({ \"sqliteDbName\" })\n-    public void afterTest(@Optional(DEFAULT_SQLITE_DB_NAME) String sqliteDbName) {\n-        File f = new File(sqliteDbName);\n-        if (f.exists()) {\n-            f.delete();\n-        }\n-    }\n-\n     @Test\n     public void testGetDatabaseUrl() {\n         SQLiteDatabaseService sqLiteDatabaseService = (SQLiteDatabaseService) DatabaseService\n                 .get(SQLiteDatabaseService.DB_NAME);\n         String dbUrl = sqLiteDatabaseService.getDatabaseUrl(testDbConfig);\n \n         Assert.assertNotNull(dbUrl);\n-        Assert.assertEquals(dbUrl, \"jdbc:sqlite:extension_test_db.sqlite\");\n+        Assert.assertEquals(dbUrl, \"jdbc:sqlite:tests/resources/test_db.sqlite?open_mode=1&limit_attached=0\");\n     }\n \n     @Test\n@@ -103,6 +90,35 @@ public void testGetConnection() throws DatabaseServiceException {\n         Assert.assertNotNull(conn);\n     }\n \n+    /*\n+     * We don't allow loading extensions because that executes arbitrary code\n+     */\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testGetConnectionWithExtensions() throws DatabaseServiceException {\n+        DatabaseConfiguration testDbConfigWithExtensions = new DatabaseConfiguration();\n+        testDbConfigWithExtensions.setDatabaseName(\"test_db.sqlite?enable_load_extension=true\");\n+        testDbConfigWithExtensions.setDatabaseType(SQLiteDatabaseService.DB_NAME);\n+\n+        SQLiteDatabaseService sqLiteDatabaseService = (SQLiteDatabaseService) DatabaseService\n+                .get(SQLiteDatabaseService.DB_NAME);\n+        sqLiteDatabaseService.getConnection(testDbConfigWithExtensions);\n+    }\n+\n+    /*\n+     * We don't allow loading a remote SQLite file to make remote code execution harder\n+     */\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testGetConnectionWithRemoteFile() throws DatabaseServiceException {\n+        DatabaseConfiguration testDbConfigWithExtensions = new DatabaseConfiguration();\n+        testDbConfigWithExtensions\n+                .setDatabaseName(\"https://github.com/xerial/sqlite-jdbc/raw/master/src/test/resources/org/sqlite/sample.db\");\n+        testDbConfigWithExtensions.setDatabaseType(SQLiteDatabaseService.DB_NAME);\n+\n+        SQLiteDatabaseService sqLiteDatabaseService = (SQLiteDatabaseService) DatabaseService\n+                .get(SQLiteDatabaseService.DB_NAME);\n+        sqLiteDatabaseService.getConnection(testDbConfigWithExtensions);\n+    }\n+\n     @Test\n     public void testTestConnection() throws DatabaseServiceException {\n         SQLiteDatabaseService sqLiteDatabaseService = (SQLiteDatabaseService) DatabaseService"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 7,
        "unique_directories": 5,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9353d6df6b9c0554d3581a53fda972cae54370fc",
            "date": "2025-01-14T12:38:27Z",
            "author_login": "weblate"
          },
          {
            "sha": "1d48fb60530f9d7ac6c2d633a7774d70f0c18298",
            "date": "2025-01-14T07:09:22Z",
            "author_login": "thadguidry"
          },
          {
            "sha": "f353f9865a1356681bb2321f4e0bcf1e65585d43",
            "date": "2025-01-13T20:34:43Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e40d26a824272da40c0804cff25dde34e517b74f",
            "date": "2025-01-13T20:34:09Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a86836eed3f4d9e5e8e163aa40b25469ee170e43",
            "date": "2025-01-13T20:33:00Z",
            "author_login": "weblate"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-89",
    "description": "OpenRefine is a free, open source tool for working with messy data. Starting in version 3.4-beta and prior to version 3.8.3, in the `database` extension, the \"enable_load_extension\" property can be set for the SQLite integration, enabling an attacker to load (local or remote) extension DLLs and so run arbitrary code on the server. The attacker needs to have network access to the OpenRefine instance. Version 3.8.3 fixes this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-24T21:15:12.957",
    "last_modified": "2024-10-28T14:14:02.157",
    "fix_date": "2024-08-25T17:20:47Z"
  },
  "references": [
    {
      "url": "https://github.com/OpenRefine/OpenRefine/commit/853a1d91662e7dc278a9a94a38be58de04494056",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-87cf-j763-vvh8",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.082992",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "OpenRefine",
    "owner": "OpenRefine",
    "created_at": "2012-10-15T02:22:48Z",
    "updated_at": "2025-01-14T12:38:35Z",
    "pushed_at": "2025-01-14T12:38:30Z",
    "size": 404937,
    "stars": 11031,
    "forks": 1998,
    "open_issues": 659,
    "watchers": 11031,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 5624322,
      "JavaScript": 1796106,
      "HTML": 680637,
      "CSS": 155170,
      "Shell": 24785,
      "Batchfile": 9507,
      "Python": 4899,
      "Inno Setup": 4432,
      "mIRC Script": 762,
      "Less": 139
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:30:34.126653"
  }
}