{
  "cve_id": "CVE-2024-47883",
  "github_data": {
    "repository": "OpenRefine/simile-butterfly",
    "fix_commit": "537f64bfa72746f8b21d4bda461fad843435319c",
    "related_commits": [
      "537f64bfa72746f8b21d4bda461fad843435319c"
    ],
    "patch_url": "https://github.com/OpenRefine/simile-butterfly/commit/537f64bfa72746f8b21d4bda461fad843435319c.patch",
    "fix_commit_details": {
      "sha": "537f64bfa72746f8b21d4bda461fad843435319c",
      "commit_date": "2024-10-11T15:08:52Z",
      "author": {
        "login": "wetneb",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Only serve resources within the expected directory",
        "length": 275,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 71,
        "additions": 63,
        "deletions": 8
      },
      "files": [
        {
          "filename": "main/src/edu/mit/simile/butterfly/ButterflyModuleImpl.java",
          "status": "modified",
          "additions": 10,
          "deletions": 8,
          "patch": "@@ -14,6 +14,7 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLConnection;\n+import java.nio.file.Path;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedHashSet;\n@@ -71,6 +72,7 @@ public class ButterflyModuleImpl implements ButterflyModule {\n     protected Timer _timer;\n     protected ServletConfig _config;\n     protected File _path;\n+    protected Path _normalizedPath;\n     protected MountPoint _mountPoint;\n     protected ButterflyMounter _mounter;\n     protected String _name;\n@@ -118,6 +120,7 @@ public void setClassLoader(ClassLoader classLoader) {\n     public void setPath(File path) {\n         _logger.trace(\"{} -(path)-> {}\", this, path);\n         this._path = path;\n+        this._normalizedPath = path.toPath().toAbsolutePath().normalize();\n     }\n \n     public void setName(String name) {\n@@ -259,6 +262,8 @@ public ButterflyModule getModule(String name) {\n \n     protected Pattern super_pattern = Pattern.compile(\"^@@(.*)@@$\");\n     \n+    // TODO 2025-10: migrate away from URL as a return type to File/Path as we don't want this to fetch anything remote\n+    @Override\n     public URL getResource(String resource) {\n         _logger.trace(\"> getResource({}->{},{})\", new Object[] { _name, _extended, resource });\n         URL u = null;\n@@ -283,14 +288,11 @@ public URL getResource(String resource) {\n         \n         if (u == null) {\n             try {\n-                if (resource.startsWith(\"file:/\")) {\n-                    u = new URL(resource);\n-                } else {\n-                    if (resource.charAt(0) == '/') resource = resource.substring(1);\n-                    File f = new File(_path, resource);\n-                    if (f.exists()) {\n-                        u = f.toURI().toURL();\n-                    }\n+                if (resource.charAt(0) == '/') resource = resource.substring(1);\n+                File f = new File(_path, resource);\n+                // check that the file does not escape the expected directory\n+                if (f.toPath().toAbsolutePath().normalize().startsWith(_normalizedPath) && f.exists()) {\n+                    u = f.toURI().toURL();\n                 }\n             } catch (MalformedURLException e) {\n                 _logger.error(\"Error\", e);"
        },
        {
          "filename": "main/tests/src/edu/mit/simile/butterfly/tests/ButterflyModuleImplTests.java",
          "status": "added",
          "additions": 53,
          "deletions": 0,
          "patch": "@@ -0,0 +1,53 @@\n+package edu.mit.simile.butterfly.tests;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.nio.file.Files;\n+\n+import edu.mit.simile.butterfly.ButterflyModuleImpl;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+public class ButterflyModuleImplTests {\n+    \n+    ButterflyModuleImpl SUT;\n+    File tempDir;\n+    File firstFolder;\n+    File secondFolder;\n+    File textFile;\n+    File testFile;\n+    \n+    @BeforeMethod\n+    public void setUp() throws IOException {\n+        SUT = new ButterflyModuleImpl();\n+        tempDir = Files.createTempDirectory(\"ButterflyModuleImplTests\").toFile();\n+        tempDir.deleteOnExit();\n+        firstFolder = new File(tempDir, \"first_folder\");\n+        firstFolder.mkdir();\n+        secondFolder = new File(tempDir, \"other_folder\");\n+        secondFolder.mkdir();\n+        textFile = new File(secondFolder, \"file.txt\");\n+        textFile.createNewFile();\n+        testFile = new File(firstFolder, \"test.txt\");\n+        testFile.createNewFile();\n+        SUT.setPath(firstFolder);\n+    }\n+    \n+    @Test\n+    public void testGetResource() throws MalformedURLException {\n+        // file exists and is in the expected directory\n+        Assert.assertEquals(SUT.getResource(\"test.txt\"), testFile.toURI().toURL());\n+        // file does not exist\n+        Assert.assertNull(SUT.getResource(\"does_not_exist.xls\"));\n+        \n+        // file exists but escapes the expected directory (it would be a security issue to accept it)\n+        Assert.assertEquals(SUT.getResource(\"../other_folder/file.txt\"), null);\n+        // we don't support passing full URIs (it would be a security issue to accept reading any resource)\n+        String fullURI = testFile.toURI().toString();\n+        Assert.assertTrue(fullURI.startsWith(\"file:/\"));\n+        Assert.assertEquals(SUT.getResource(fullURI), null);\n+    }\n+\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8e4351a1d8bc1067638ac85739876fa8b13a7205",
            "date": "2025-01-03T08:21:58Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "af2e2787e64a134fa19dc4861c4f35f66b5e2c92",
            "date": "2024-12-16T08:46:43Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "00b224fb02d025b138b6eb5d4b394f2eedfd2738",
            "date": "2024-11-20T08:16:58Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "240d6c6a944e29c7c63ba6566f5c28839c332bd4",
            "date": "2024-10-24T07:17:53Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2901c7722b3eb66a3e6214428d16e734643b2abc",
            "date": "2024-10-24T04:57:09Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-36",
    "description": "The OpenRefine fork of the MIT Simile Butterfly server is a modular web application framework. The Butterfly framework uses the `java.net.URL` class to refer to (what are expected to be) local resource files, like images or templates. This works: \"opening a connection\" to these URLs opens the local file. However, prior to version 1.2.6, if a `file:/` URL is directly given where a relative path (resource name) is expected, this is also accepted in some code paths; the app then fetches the file, from a remote machine if indicated, and uses it as if it was a trusted part of the app's codebase. This leads to multiple weaknesses and potential weaknesses. An attacker that has network access to the application could use it to gain access to files, either on the the server's filesystem (path traversal) or shared by nearby machines (server-side request forgery with e.g. SMB). An attacker that can lead or redirect a user to a crafted URL belonging to the app could cause arbitrary attacker-controlled JavaScript to be loaded in the victim's browser (cross-site scripting). If an app is written in such a way that an attacker can influence the resource name used for a template, that attacker could cause the app to fetch and execute an attacker-controlled template (remote code execution). Version 1.2.6 contains a patch.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-24T21:15:13.430",
    "last_modified": "2024-10-29T15:38:11.573",
    "fix_date": "2024-10-11T15:08:52Z"
  },
  "references": [
    {
      "url": "https://github.com/OpenRefine/simile-butterfly/commit/537f64bfa72746f8b21d4bda461fad843435319c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenRefine/simile-butterfly/security/advisories/GHSA-3p8v-w8mr-m3x8",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.083305",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "simile-butterfly",
    "owner": "OpenRefine",
    "created_at": "2013-08-17T18:31:43Z",
    "updated_at": "2025-01-03T08:22:02Z",
    "pushed_at": "2025-01-06T01:55:19Z",
    "size": 9297,
    "stars": 10,
    "forks": 12,
    "open_issues": 12,
    "watchers": 10,
    "has_security_policy": false,
    "default_branch": "openrefine",
    "protected_branches": [],
    "languages": {
      "Java": 157419,
      "Shell": 14330,
      "JavaScript": 3791,
      "HTML": 3023,
      "Less": 1117,
      "CSS": 714
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T20:00:02.607901"
  }
}