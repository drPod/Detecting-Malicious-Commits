{
  "cve_id": "CVE-2024-48651",
  "github_data": {
    "repository": "proftpd/proftpd",
    "fix_commit": "cec01cc0a2523453e5da5a486bc6d977c3768db1",
    "related_commits": [
      "cec01cc0a2523453e5da5a486bc6d977c3768db1"
    ],
    "patch_url": "https://github.com/proftpd/proftpd/commit/cec01cc0a2523453e5da5a486bc6d977c3768db1.patch",
    "fix_commit_details": {
      "sha": "cec01cc0a2523453e5da5a486bc6d977c3768db1",
      "commit_date": "2024-11-13T14:33:35Z",
      "author": {
        "login": "Castaglia",
        "type": "User",
        "stats": {
          "total_commits": 3767,
          "average_weekly_commits": 6.750896057347671,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 387
        }
      },
      "commit_message": {
        "title": "Issue #1830: When no supplemental groups are provided by the underlying authentication providers, fall back to using the primary group/GID. (#1835)",
        "length": 299,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 227,
        "additions": 213,
        "deletions": 14
      },
      "files": [
        {
          "filename": "NEWS",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -35,6 +35,8 @@\n   configuring appropriate key.\n - Issue 1840 - RADIUS Message-Authenticator verification failed with ProFTPD\n   mod_radius.\n+- Issue 1830 - Supplemental group inheritance grants unintended access to\n+  GID 0 due to lack of supplemental groups from mod_sql.\n \n 1.3.9rc2 - Released 19-Dec-2023\n --------------------------------"
        },
        {
          "filename": "contrib/mod_sftp/auth.c",
          "status": "modified",
          "additions": 13,
          "deletions": 1,
          "patch": "@@ -418,8 +418,20 @@ static int setup_env(pool *p, const char *user) {\n       session.groups == NULL) {\n     res = pr_auth_getgroups(p, pw->pw_name, &session.gids, &session.groups);\n     if (res < 1) {\n+      /* If no supplemental groups are provided, default to using the process\n+       * primary GID as the supplemental group.  This prevents access\n+       * regressions as seen in Issue #1830.\n+       */\n       (void) pr_log_writefile(sftp_logfd, MOD_SFTP_VERSION,\n-        \"no supplemental groups found for user '%s'\", pw->pw_name);\n+        \"no supplemental groups found for user '%s', \"\n+        \"using primary group %s (GID %lu)\", pw->pw_name, session.group,\n+        (unsigned long) session.login_gid);\n+\n+      session.gids = make_array(p, 2, sizeof(gid_t));\n+      session.groups = make_array(p, 2, sizeof(char *));\n+\n+      *((gid_t *) push_array(session.gids)) = session.login_gid;\n+      *((char **) push_array(session.groups)) = pstrdup(p, session.group);\n     }\n   }\n "
        },
        {
          "filename": "modules/mod_auth.c",
          "status": "modified",
          "additions": 16,
          "deletions": 5,
          "patch": "@@ -2,7 +2,7 @@\n  * ProFTPD - FTP server daemon\n  * Copyright (c) 1997, 1998 Public Flood Software\n  * Copyright (c) 1999, 2000 MacGyver aka Habeeb J. Dihu <macgyver@tos.net>\n- * Copyright (c) 2001-2023 The ProFTPD Project team\n+ * Copyright (c) 2001-2024 The ProFTPD Project team\n  *\n  * This program is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published by\n@@ -1140,8 +1140,8 @@ static int setup_env(pool *p, cmd_rec *cmd, const char *user, char *pass) {\n     session.groups = NULL;\n   }\n \n-  if (!session.gids &&\n-      !session.groups) {\n+  if (session.gids == NULL &&\n+      session.groups == NULL) {\n     /* Get the supplemental groups.  Note that we only look up the\n      * supplemental group credentials if we have not cached the group\n      * credentials before, in session.gids and session.groups.\n@@ -1151,8 +1151,19 @@ static int setup_env(pool *p, cmd_rec *cmd, const char *user, char *pass) {\n      */\n      res = pr_auth_getgroups(p, pw->pw_name, &session.gids, &session.groups);\n      if (res < 1) {\n-       pr_log_debug(DEBUG5, \"no supplemental groups found for user '%s'\",\n-         pw->pw_name);\n+       /* If no supplemental groups are provided, default to using the process\n+        * primary GID as the supplemental group.  This prevents access\n+        * regressions as seen in Issue #1830.\n+        */\n+       pr_log_debug(DEBUG5, \"no supplemental groups found for user '%s', \"\n+         \"using primary group %s (GID %lu)\", pw->pw_name, session.group,\n+         (unsigned long) session.login_gid);\n+\n+       session.gids = make_array(p, 2, sizeof(gid_t));\n+       session.groups = make_array(p, 2, sizeof(char *));\n+\n+       *((gid_t *) push_array(session.gids)) = session.login_gid;\n+       *((char **) push_array(session.groups)) = pstrdup(p, session.group);\n      }\n   }\n "
        },
        {
          "filename": "src/auth.c",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -2,7 +2,7 @@\n  * ProFTPD - FTP server daemon\n  * Copyright (c) 1997, 1998 Public Flood Software\n  * Copyright (c) 1999, 2000 MacGyver aka Habeeb J. Dihu <macgyver@tos.net>\n- * Copyright (c) 2001-2022 The ProFTPD Project team\n+ * Copyright (c) 2001-2024 The ProFTPD Project team\n  *\n  * This program is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published by\n@@ -1471,12 +1471,12 @@ int pr_auth_getgroups(pool *p, const char *name, array_header **group_ids,\n   }\n \n   /* Allocate memory for the array_headers of GIDs and group names. */\n-  if (group_ids) {\n-    *group_ids = make_array(permanent_pool, 2, sizeof(gid_t));\n+  if (group_ids != NULL) {\n+    *group_ids = make_array(p, 2, sizeof(gid_t));\n   }\n \n-  if (group_names) {\n-    *group_names = make_array(permanent_pool, 2, sizeof(char *));\n+  if (group_names != NULL) {\n+    *group_names = make_array(p, 2, sizeof(char *));\n   }\n \n   cmd = make_cmd(p, 3, name, group_ids ? *group_ids : NULL,\n@@ -1495,7 +1495,7 @@ int pr_auth_getgroups(pool *p, const char *name, array_header **group_ids,\n      * for the benefit of auth_getgroup() implementors.\n      */\n \n-    if (group_ids) {\n+    if (group_ids != NULL) {\n       register unsigned int i;\n       char *strgids = \"\";\n       gid_t *gids = (*group_ids)->elts;\n@@ -1511,7 +1511,7 @@ int pr_auth_getgroups(pool *p, const char *name, array_header **group_ids,\n         *strgids ? strgids : \"(None; corrupted group file?)\");\n     }\n \n-    if (group_names) {\n+    if (group_names != NULL) {\n       register unsigned int i;\n       char *strgroups = \"\";\n       char **groups = (*group_names)->elts;\n@@ -1527,7 +1527,7 @@ int pr_auth_getgroups(pool *p, const char *name, array_header **group_ids,\n     }\n   }\n \n-  if (cmd->tmp_pool) {\n+  if (cmd->tmp_pool != NULL) {\n     destroy_pool(cmd->tmp_pool);\n     cmd->tmp_pool = NULL;\n   }"
        },
        {
          "filename": "tests/t/lib/ProFTPD/Tests/Modules/mod_sql_sqlite.pm",
          "status": "modified",
          "additions": 174,
          "deletions": 0,
          "patch": "@@ -467,6 +467,11 @@ my $TESTS = {\n     order => ++$order,\n     test_class => [qw(forking bug mod_tls)],\n   },\n+\n+  sql_user_info_no_suppl_groups_issue1830 => {\n+    order => ++$order,\n+    test_class => [qw(forking bug rootprivs)],\n+  },\n };\n \n sub new {\n@@ -15764,4 +15769,173 @@ EOC\n   test_cleanup($setup->{log_file}, $ex);\n }\n \n+sub sql_user_info_no_suppl_groups_issue1830 {\n+  my $self = shift;\n+  my $tmpdir = $self->{tmpdir};\n+  my $setup = test_setup($tmpdir, 'sqlite');\n+\n+  my $db_file = File::Spec->rel2abs(\"$tmpdir/proftpd.db\");\n+\n+  # Build up sqlite3 command to create users, groups tables and populate them\n+  my $db_script = File::Spec->rel2abs(\"$tmpdir/proftpd.sql\");\n+\n+  if (open(my $fh, \"> $db_script\")) {\n+    print $fh <<EOS;\n+CREATE TABLE users (\n+  userid TEXT,\n+  passwd TEXT,\n+  uid INTEGER,\n+  gid INTEGER,\n+  homedir TEXT,\n+  shell TEXT\n+);\n+INSERT INTO users (userid, passwd, uid, gid, homedir, shell) VALUES ('$setup->{user}', '$setup->{passwd}', $setup->{uid}, $setup->{gid}, '$setup->{home_dir}', '/bin/bash');\n+\n+CREATE TABLE groups (\n+  groupname TEXT,\n+  gid INTEGER,\n+  members TEXT\n+);\n+INSERT INTO groups (groupname, gid, members) VALUES ('$setup->{group}', $setup->{gid}, '$setup->{user}');\n+EOS\n+\n+    unless (close($fh)) {\n+      die(\"Can't write $db_script: $!\");\n+    }\n+\n+  } else {\n+    die(\"Can't open $db_script: $!\");\n+  }\n+\n+  my $cmd = \"sqlite3 $db_file < $db_script\";\n+  build_db($cmd, $db_script);\n+\n+  # Make sure that, if we're running as root, the database file has\n+  # the permissions/privs set for use by proftpd\n+  if ($< == 0) {\n+    unless (chmod(0666, $db_file)) {\n+      die(\"Can't set perms on $db_file to 0666: $!\");\n+    }\n+  }\n+\n+  my $config = {\n+    PidFile => $setup->{pid_file},\n+    ScoreboardFile => $setup->{scoreboard_file},\n+    SystemLog => $setup->{log_file},\n+    TraceLog => $setup->{log_file},\n+    Trace => 'auth:20 sql:20',\n+\n+    # Required for logging the expected message\n+    DebugLevel => 5,\n+\n+    IfModules => {\n+      'mod_delay.c' => {\n+        DelayEngine => 'off',\n+      },\n+\n+      'mod_sql.c' => {\n+        AuthOrder => 'mod_sql.c',\n+\n+        SQLAuthenticate => 'users',\n+        SQLAuthTypes => 'plaintext',\n+        SQLBackend => 'sqlite3',\n+        SQLConnectInfo => $db_file,\n+        SQLLogFile => $setup->{log_file},\n+\n+        # Set these, so that our lower UID/GID will be used\n+        SQLMinUserUID => 100,\n+        SQLMinUserGID => 100,\n+      },\n+    },\n+  };\n+\n+  my ($port, $config_user, $config_group) = config_write($setup->{config_file},\n+    $config);\n+\n+  # Open pipes, for use between the parent and child processes.  Specifically,\n+  # the child will indicate when it's done with its test by writing a message\n+  # to the parent.\n+  my ($rfh, $wfh);\n+  unless (pipe($rfh, $wfh)) {\n+    die(\"Can't open pipe: $!\");\n+  }\n+\n+  my $ex;\n+\n+  # Fork child\n+  $self->handle_sigchld();\n+  defined(my $pid = fork()) or die(\"Can't fork: $!\");\n+  if ($pid) {\n+    eval {\n+      sleep(2);\n+\n+      my $client = ProFTPD::TestSuite::FTP->new('127.0.0.1', $port);\n+      $client->login($setup->{user}, $setup->{passwd});\n+\n+      my $resp_msgs = $client->response_msgs();\n+      my $nmsgs = scalar(@$resp_msgs);\n+\n+      my $expected = 1;\n+      $self->assert($expected == $nmsgs,\n+        test_msg(\"Expected $expected, got $nmsgs\"));\n+\n+      $expected = \"User $setup->{user} logged in\";\n+      $self->assert($expected eq $resp_msgs->[0],\n+        test_msg(\"Expected response '$expected', got '$resp_msgs->[0]'\"));\n+\n+      $client->quit();\n+    };\n+    if ($@) {\n+      $ex = $@;\n+    }\n+\n+    $wfh->print(\"done\\n\");\n+    $wfh->flush();\n+\n+  } else {\n+    eval { server_wait($setup->{config_file}, $rfh) };\n+    if ($@) {\n+      warn($@);\n+      exit 1;\n+    }\n+\n+    exit 0;\n+  }\n+\n+  # Stop server\n+  server_stop($setup->{pid_file});\n+  $self->assert_child_ok($pid);\n+\n+  eval {\n+    if (open(my $fh, \"< $setup->{log_file}\")) {\n+      my $ok = 0;\n+\n+      while (my $line = <$fh>) {\n+        chomp($line);\n+\n+        if ($ENV{TEST_VERBOSE}) {\n+          print STDERR \"# $line\\n\";\n+        }\n+\n+        if ($line =~ /no supplemental groups found for user '$setup->{user}', using primary group/) {\n+          $ok = 1;\n+          last;\n+        }\n+      }\n+\n+      close($fh);\n+\n+      $self->assert($ok, test_msg(\"Did not see expected log message\"));\n+\n+    } else {\n+      die(\"Can't read $setup->{log_file}: $!\");\n+    }\n+  };\n+  if ($@) {\n+    $ex = $@ unless $ex;\n+  }\n+\n+  test_cleanup($setup->{log_file}, $ex);\n+}\n+\n 1;"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d5a707348922b1d3294b7aa1e02c177e59b89fcb",
            "date": "2025-01-05T19:07:06Z",
            "author_login": "Castaglia"
          },
          {
            "sha": "7b2af33f379a748a601799933d2331e5b8ebf7e1",
            "date": "2024-12-30T18:13:48Z",
            "author_login": "Castaglia"
          },
          {
            "sha": "d4e8c6c9218b7319fd77f07e0d2414809553e61d",
            "date": "2024-12-30T18:06:35Z",
            "author_login": "Shivam7-1"
          },
          {
            "sha": "7652d8e145216ddff42b1c79771b66e00c5874de",
            "date": "2024-12-13T23:08:56Z",
            "author_login": "Castaglia"
          },
          {
            "sha": "e3457a391b6ed6dcc92172093068e2c9b19ecc66",
            "date": "2024-12-12T19:04:19Z",
            "author_login": "Castaglia"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": null,
    "description": "In ProFTPD through 1.3.8b before cec01cc, supplemental group inheritance grants unintended access to GID 0 because of the lack of supplemental groups from mod_sql.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-29T05:15:05.963",
    "last_modified": "2024-11-29T15:15:17.403",
    "fix_date": "2024-11-13T14:33:35Z"
  },
  "references": [
    {
      "url": "https://github.com/proftpd/proftpd/commit/cec01cc0a2523453e5da5a486bc6d977c3768db1",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/proftpd/proftpd/issues/1830",
      "source": "cve@mitre.org",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:31.314407",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "proftpd",
    "owner": "proftpd",
    "created_at": "2014-05-16T16:22:01Z",
    "updated_at": "2025-01-13T11:12:33Z",
    "pushed_at": "2025-01-05T19:07:16Z",
    "size": 75330,
    "stars": 541,
    "forks": 207,
    "open_issues": 154,
    "watchers": 541,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 19973898,
      "Shell": 854251,
      "PHP": 388170,
      "M4": 287572,
      "Perl": 150476,
      "Makefile": 92074,
      "Roff": 28578
    },
    "commit_activity": {
      "total_commits_last_year": 68,
      "avg_commits_per_week": 1.3076923076923077,
      "days_active_last_year": 36
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:31:18.770014"
  }
}