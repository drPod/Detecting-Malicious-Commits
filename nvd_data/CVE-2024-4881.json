{
  "cve_id": "CVE-2024-4881",
  "github_data": {
    "repository": "parisneo/lollms",
    "fix_commit": "95ad36eeffc6a6be3e3f35ed35a384d768f0ecf6",
    "related_commits": [
      "95ad36eeffc6a6be3e3f35ed35a384d768f0ecf6",
      "95ad36eeffc6a6be3e3f35ed35a384d768f0ecf6"
    ],
    "patch_url": "https://github.com/parisneo/lollms/commit/95ad36eeffc6a6be3e3f35ed35a384d768f0ecf6.patch",
    "fix_commit_details": {
      "sha": "95ad36eeffc6a6be3e3f35ed35a384d768f0ecf6",
      "commit_date": "2024-04-29T16:06:40Z",
      "author": {
        "login": "ParisNeo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "updated security",
        "length": 16,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 21,
        "additions": 12,
        "deletions": 9
      },
      "files": [
        {
          "filename": "lollms/security.py",
          "status": "modified",
          "additions": 12,
          "deletions": 9,
          "patch": "@@ -126,6 +126,9 @@ def sanitize_path(path: str, allow_absolute_path: bool = False, error_text=\"Abso\n     if not allow_absolute_path and path.strip().startswith(\"/\"):\n         raise HTTPException(status_code=400, detail=exception_text)\n \n+    # Normalize path to use forward slashes\n+    path = path.replace('\\\\', '/')\n+\n     if path is None:\n         return path\n \n@@ -149,13 +152,14 @@ def sanitize_path(path: str, allow_absolute_path: bool = False, error_text=\"Abso\n     \n def sanitize_path_from_endpoint(path: str, error_text: str = \"A suspected LFI attack detected. The path sent to the server has suspicious elements in it!\", exception_text: str = \"Invalid path!\") -> str:\n     \"\"\"\n-    Sanitize a given file path from an endpoint by checking for potentially dangerous patterns and unauthorized characters.\n+    Sanitize a given file path from an endpoint by checking for potentially dangerous patterns and unauthorized characters,\n+    and standardizing path separators to prevent directory traversal attacks.\n \n     Args:\n     -----\n     path (str): The file path to sanitize.\n-    error_text (str, optional): The error message to display if a path traversal or unauthorized character is detected. Default is \"A suspected LFI attack detected. The path sent to the server has suspicious elements in it!\".\n-    exception_text (str, optional): The exception message to display if an absolute path or invalid character is detected. Default is \"Invalid path!\".\n+    error_text (str, optional): Error message to display if a path traversal or unauthorized character is detected. Default is a warning about a suspected LFI attack.\n+    exception_text (str, optional): Exception message to display if an absolute path or invalid character is detected. Default is \"Invalid path!\".\n \n     Raises:\n     ------\n@@ -164,15 +168,14 @@ def sanitize_path_from_endpoint(path: str, error_text: str = \"A suspected LFI at\n     Returns:\n     -------\n     str: The sanitized file path.\n-\n-    Note:\n-    -----\n-    This function checks for patterns like \"....\" and multiple forward slashes. It also checks for unauthorized punctuation characters, excluding the dot (.) character.\n     \"\"\"\n \n     if path is None:\n         return path\n \n+    # Normalize path to use forward slashes\n+    path = path.replace('\\\\', '/')\n+\n     if path.strip().startswith(\"/\"):\n         raise HTTPException(status_code=400, detail=exception_text)\n \n@@ -185,13 +188,13 @@ def sanitize_path_from_endpoint(path: str, error_text: str = \"A suspected LFI at\n         raise HTTPException(status_code=400, detail=exception_text)\n \n     if suspicious_patterns.search(path) or Path(path).is_absolute():\n-        ASCIIColors.error(error_text)\n-        raise HTTPException(status_code=400, detail=exception_text)\n+        raise HTTPException(status_code=400, detail=error_text)\n \n     path = path.lstrip('/')\n     return path\n \n \n+\n def forbid_remote_access(lollmsElfServer, exception_text = \"This functionality is forbidden if the server is exposed\"):\n     if not lollmsElfServer.config.force_accept_remote_access and lollmsElfServer.config.host!=\"localhost\" and lollmsElfServer.config.host!=\"127.0.0.1\":\n         raise Exception(exception_text)"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6d1c0b6b697f96b69e447ee5eccde642d4b278a2",
            "date": "2025-01-14T10:04:38Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "3f9987e439cdd13608436a6ac404618090a921b8",
            "date": "2025-01-13T00:58:56Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "f995c304a0bc604cc7016dc88df416d56e3c105b",
            "date": "2025-01-10T16:32:16Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "12ca2678c789a75ad763c31fd1df88445b19a135",
            "date": "2025-01-09T07:56:12Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "e6dc54617cb983cfe884bf48fe9bd64c727824e9",
            "date": "2025-01-08T23:52:02Z",
            "author_login": "ParisNeo"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-36",
    "description": "A path traversal vulnerability exists in the parisneo/lollms application, affecting version 9.4.0 and potentially earlier versions, but fixed in version 5.9.0. The vulnerability arises due to improper validation of file paths between Windows and Linux environments, allowing attackers to traverse beyond the intended directory and read any file on the Windows system. Specifically, the application fails to adequately sanitize file paths containing backslashes (`\\`), which can be exploited to access the root directory and read, or even delete, sensitive files. This issue was discovered in the context of the `/user_infos` endpoint, where a crafted request using backslashes to reference a file (e.g., `\\windows\\win.ini`) could result in unauthorized file access. The impact of this vulnerability includes the potential for attackers to access sensitive information such as environment variables, database files, and configuration files, which could lead to further compromise of the system.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-06T19:16:03.063",
    "last_modified": "2024-11-21T09:43:46.897",
    "fix_date": "2024-04-29T16:06:40Z"
  },
  "references": [
    {
      "url": "https://github.com/parisneo/lollms/commit/95ad36eeffc6a6be3e3f35ed35a384d768f0ecf6",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/94f7f901-80b0-4cf5-b545-ac5c1e7635e9",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parisneo/lollms/commit/95ad36eeffc6a6be3e3f35ed35a384d768f0ecf6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/94f7f901-80b0-4cf5-b545-ac5c1e7635e9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.350305",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "lollms",
    "owner": "parisneo",
    "created_at": "2023-06-02T10:46:33Z",
    "updated_at": "2025-01-14T10:04:43Z",
    "pushed_at": "2025-01-14T10:04:39Z",
    "size": 7673,
    "stars": 280,
    "forks": 51,
    "open_issues": 16,
    "watchers": 280,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 1513527,
      "Shell": 30804,
      "Batchfile": 16275,
      "HTML": 6350,
      "Jupyter Notebook": 4229,
      "C++": 3433,
      "Dockerfile": 957,
      "Makefile": 294
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:22:31.487113"
  }
}