{
  "cve_id": "CVE-2024-48911",
  "github_data": {
    "repository": "thinkst/opencanary",
    "fix_commit": "2c11575b1a3dd8b0df26a879ba856c0aa350c049",
    "related_commits": [
      "2c11575b1a3dd8b0df26a879ba856c0aa350c049"
    ],
    "patch_url": "https://github.com/thinkst/opencanary/commit/2c11575b1a3dd8b0df26a879ba856c0aa350c049.patch",
    "fix_commit_details": {
      "sha": "2c11575b1a3dd8b0df26a879ba856c0aa350c049",
      "commit_date": "2024-09-17T07:10:55Z",
      "author": {
        "login": "DavidBakerEffendi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent Local Privilege Escalation via Config & Untrusted Aliases",
        "length": 227,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 52,
        "additions": 44,
        "deletions": 8
      },
      "files": [
        {
          "filename": "opencanary/__init__.py",
          "status": "modified",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -1 +1,34 @@\n+import os\n+import subprocess\n+\n __version__ = \"0.9.3\"\n+\n+from os import PathLike\n+from typing import Union\n+\n+BIN_LOCATIONS = [\"/usr/bin\", \"/bin\", \"/usr/sbin\", \"/sbin\"]\n+\n+\n+def _check_file_exists_and_executable(path: Union[PathLike, str]) -> bool:\n+    if not os.path.isfile(path):\n+        return False\n+    else:\n+        return os.access(path, os.X_OK)\n+\n+\n+def safe_exec(binary_name: str, args: list) -> bytes:\n+    \"\"\"\n+    Executes the given binary with the given arguments as a subprocess. What makes this safe is that the binary name\n+    is not executed as an alias, and only binaries that live in trusted system locations are executed. This means that\n+    only system-wide binaries are executable.\n+    \"\"\"\n+    exec_path = None\n+    for prefix in BIN_LOCATIONS:\n+        bin_path = os.path.join(prefix, binary_name)\n+        if _check_file_exists_and_executable(os.path.join(prefix, binary_name)):\n+            exec_path = bin_path\n+            break\n+    if exec_path is None:\n+        raise Exception(f\"Could not find executable ${binary_name}\")\n+    else:\n+        return subprocess.check_output(args, shell=True, executable=exec_path)"
        },
        {
          "filename": "opencanary/config.py",
          "status": "modified",
          "additions": 9,
          "deletions": 6,
          "patch": "@@ -3,12 +3,12 @@\n import json\n import itertools\n import string\n-import subprocess\n import shutil\n import re\n from os.path import expanduser\n from pkg_resources import resource_filename\n from pathlib import Path\n+from . import safe_exec\n \n SAMPLE_SETTINGS = resource_filename(__name__, \"data/settings.json\")\n SETTINGS = \"opencanary.conf\"\n@@ -54,9 +54,9 @@ def __init__(self, configfile=SETTINGS):\n         self.__configfile = configfile\n \n         files = [\n-            configfile,\n-            \"%s/.%s\" % (expanduser(\"~\"), configfile),\n             \"/etc/opencanaryd/%s\" % configfile,\n+            \"%s/.%s\" % (expanduser(\"~\"), configfile),\n+            configfile,\n         ]\n         print(\n             \"** We hope you enjoy using OpenCanary. For more open source Canary goodness, head over to canarytokens.org. **\"\n@@ -67,14 +67,17 @@ def __init__(self, configfile=SETTINGS):\n                     print(\"[-] Using config file: %s\" % fname)\n                     self.__config = json.load(f)\n                     self.__config = expand_vars(self.__config)\n+                if fname is configfile:\n+                    print(\n+                        \"[-] Warning, making use of the configuration file in the immediate directory is not recommended! Suggested locations: %s\"\n+                        % \", \".join(files[:2])\n+                    )\n                 return\n             except IOError as e:\n                 print(\"[-] Failed to open %s for reading (%s)\" % (fname, e))\n             except ValueError as e:\n                 print(\"[-] Failed to decode json from %s (%s)\" % (fname, e))\n-                subprocess.call(\n-                    \"cp -r %s /var/tmp/config-err-$(date +%%s)\" % fname, shell=True\n-                )\n+                safe_exec(\"cp\", [\"-r\", fname, \"/var/tmp/config-err-$(date +%%s)\"])\n             except Exception as e:\n                 print(\"[-] An error occurred loading %s (%s)\" % (fname, e))\n         if self.__config is None:"
        },
        {
          "filename": "opencanary/modules/portscan.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,8 +1,8 @@\n from opencanary.modules import CanaryService\n from opencanary.modules import FileSystemWatcher\n+from opencanary import safe_exec\n import os\n import shutil\n-import subprocess\n \n \n class SynLogWatcher(FileSystemWatcher):\n@@ -68,7 +68,7 @@ def handleLines(self, lines=None):  # noqa: C901\n \n \n def detectNFTables():\n-    return b\"nf_tables\" in subprocess.check_output([\"iptables\", \"--version\"])\n+    return b\"nf_tables\" in safe_exec(\"iptables\", [\"--version\"])\n \n \n class CanaryPortscan(CanaryService):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ae4aadd0eb5afa7aba02a4f27e94465f3d983120",
            "date": "2024-11-29T08:22:20Z",
            "author_login": "hagen-bauer-regioit"
          },
          {
            "sha": "d73bdd7f0019b95006a1cba9e7b1326dcbe62879",
            "date": "2024-11-11T06:31:37Z",
            "author_login": "NoahGrahamDev"
          },
          {
            "sha": "e6e2b8f2c8bf8277c341c42a3b2239943fecc171",
            "date": "2024-10-18T09:03:11Z",
            "author_login": "thinkst-az"
          },
          {
            "sha": "fd3c748a8f5842a56593b3ac0bc86d94ea01e9a0",
            "date": "2024-10-18T05:23:13Z",
            "author_login": "thinkst-az"
          },
          {
            "sha": "250973438d9dfc20709586ac8cda79cfe8d85665",
            "date": "2024-10-17T14:11:02Z",
            "author_login": "thinkst-az"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-863",
    "description": "OpenCanary, a multi-protocol network honeypot, directly executed commands taken from its config file. Prior to version 0.9.4, where the config file is stored in an unprivileged user directory but the daemon is executed by root, it\u2019s possible for the unprivileged user to change the config file and escalate permissions when root later runs the daemon. Version 0.9.4 contains a fix for the issue.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-14T21:15:12.323",
    "last_modified": "2024-10-17T21:13:37.147",
    "fix_date": "2024-09-17T07:10:55Z"
  },
  "references": [
    {
      "url": "https://github.com/thinkst/opencanary/commit/2c11575b1a3dd8b0df26a879ba856c0aa350c049",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/thinkst/opencanary/releases/tag/v0.9.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/thinkst/opencanary/security/advisories/GHSA-pf5v-pqfv-x8jj",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.145363",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "opencanary",
    "owner": "thinkst",
    "created_at": "2015-08-05T14:44:09Z",
    "updated_at": "2025-01-10T13:36:40Z",
    "pushed_at": "2024-11-29T08:22:20Z",
    "size": 3272,
    "stars": 2365,
    "forks": 365,
    "open_issues": 7,
    "watchers": 2365,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 226728,
      "CSS": 38493,
      "HTML": 15952,
      "Shell": 8634,
      "JavaScript": 1055
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T20:33:37.894227"
  }
}