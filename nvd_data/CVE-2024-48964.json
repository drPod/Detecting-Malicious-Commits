{
  "cve_id": "CVE-2024-48964",
  "github_data": {
    "repository": "snyk/snyk-gradle-plugin",
    "fix_commit": "2f5ee7579f00660282dd161a0b79690f4a9c865d",
    "related_commits": [
      "2f5ee7579f00660282dd161a0b79690f4a9c865d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "2f5ee7579f00660282dd161a0b79690f4a9c865d",
      "commit_date": "2024-10-03T10:29:59Z",
      "author": {
        "login": "DOlufemi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat: handle gradle wrapper files for windows (#292)",
        "length": 211,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 114,
        "additions": 82,
        "deletions": 32
      },
      "files": [
        {
          "filename": "lib/index.ts",
          "status": "modified",
          "additions": 35,
          "deletions": 9,
          "patch": "@@ -396,11 +396,13 @@ function getVersionBuildInfo(\n export async function getGradleVersion(\n   root: string,\n   command: string,\n+  args?: string[],\n ): Promise<string> {\n   debugLog('`gradle -v` command run: ' + command);\n   let gradleVersionOutput = '[COULD NOT RUN gradle -v]';\n+  const completeArgs = args ? args.concat(['-v']) : ['-v'];\n   try {\n-    gradleVersionOutput = await subProcess.execute(command, ['-v'], {\n+    gradleVersionOutput = await subProcess.execute(command, completeArgs, {\n       cwd: root,\n     });\n   } catch (_) {\n@@ -409,6 +411,22 @@ export async function getGradleVersion(\n   return gradleVersionOutput;\n }\n \n+export function generateWrapperProcessArgs(\n+  commandPath: string,\n+  args: string[],\n+): { command: string; args: string[] } {\n+  let parseArgs: string[] = [];\n+  let command = commandPath;\n+  const isWinLocal = /^win/.test(os.platform());\n+  if (isWinLocal && command !== 'gradle') {\n+    command = 'cmd.exe';\n+    parseArgs.push('/c');\n+    parseArgs.push(commandPath);\n+  }\n+  parseArgs = parseArgs.concat(args);\n+  return { command, args: parseArgs };\n+}\n+\n async function getAllDepsWithPlugin(\n   root: string,\n   targetFile: string,\n@@ -427,12 +445,15 @@ async function getAllDepsWithPlugin(\n     gradleVersion,\n   );\n \n-  const fullCommandText = 'gradle command: ' + command + ' ' + args.join(' ');\n-  debugLog('Executing ' + fullCommandText);\n+  const { command: wrapperedCommand, args: wrapperArgs } =\n+    generateWrapperProcessArgs(command, args);\n \n+  const fullCommandText =\n+    'gradle command: ' + wrapperedCommand + ' ' + wrapperArgs.join(' ');\n+  debugLog('Executing ' + fullCommandText);\n   const stdoutText = await subProcess.execute(\n-    command,\n-    args,\n+    wrapperedCommand,\n+    wrapperArgs,\n     { cwd: root },\n     printIfEcho,\n   );\n@@ -467,7 +488,13 @@ async function getAllDeps(\n   snykHttpClient: SnykHttpClient,\n ): Promise<JsonDepsScriptResult> {\n   const command = getCommand(root, targetFile);\n-  const gradleVersion = await getGradleVersion(root, command);\n+  const { command: wrapperedCommand, args: wrapperArgs } =\n+    generateWrapperProcessArgs(command, []);\n+  const gradleVersion = await getGradleVersion(\n+    root,\n+    wrapperedCommand,\n+    wrapperArgs,\n+  );\n   if (gradleVersion.match(/Gradle 1/)) {\n     throw new Error('Gradle 1.x is not supported');\n   }\n@@ -636,7 +663,6 @@ function toCamelCase(input: string) {\n \n function getCommand(root: string, targetFile: string) {\n   const isWinLocal = /^win/.test(os.platform()); // local check, can be stubbed in tests\n-  const quotLocal = isWinLocal ? '\"' : \"'\";\n   const wrapperScript = isWinLocal ? 'gradlew.bat' : './gradlew';\n   // try to find a sibling wrapper script first\n   let pathToWrapper = path.resolve(\n@@ -645,12 +671,12 @@ function getCommand(root: string, targetFile: string) {\n     wrapperScript,\n   );\n   if (fs.existsSync(pathToWrapper)) {\n-    return quotLocal + pathToWrapper + quotLocal;\n+    return pathToWrapper;\n   }\n   // now try to find a wrapper in the root\n   pathToWrapper = path.resolve(root, wrapperScript);\n   if (fs.existsSync(pathToWrapper)) {\n-    return quotLocal + pathToWrapper + quotLocal;\n+    return pathToWrapper;\n   }\n   return 'gradle';\n }"
        },
        {
          "filename": "lib/sub-process.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1,6 +1,6 @@\n import * as childProcess from 'child_process';\n import debugModule = require('debug');\n-import { quoteAll } from 'shescape';\n+import { escapeAll } from 'shescape';\n \n const debugLogging = debugModule('snyk-gradle-plugin');\n \n@@ -12,7 +12,7 @@ export function execute(\n   perLineCallback?: (s: string) => Promise<void>,\n ): Promise<string> {\n   const spawnOptions: childProcess.SpawnOptions = {\n-    shell: true,\n+    shell: false,\n     env: { ...process.env },\n   };\n   if (options?.cwd) {\n@@ -22,7 +22,7 @@ export function execute(\n     spawnOptions.env = { ...process.env, ...options.env };\n   }\n \n-  args = quoteAll(args, spawnOptions);\n+  args = escapeAll(args, spawnOptions);\n \n   // Before spawning an external process, we look if we need to restore the system proxy configuration,\n   // which overides the cli internal proxy configuration."
        },
        {
          "filename": "test/fixtures-with-wrappers/with-lock-file/dep-graph.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -144,4 +144,4 @@\n       }\n     ]\n   }\n-}\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "test/system/darwin.test.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -34,7 +34,7 @@ test('darwin without wrapper invokes gradle directly', async () => {\n test('darwin with wrapper invokes wrapper script', async () => {\n   await expect(inspect(rootWithWrapper, 'build.gradle')).rejects.toThrow();\n   expect(subProcessExecSpy.mock.calls[0][0]).toBe(\n-    \"'\" + path.join(rootWithWrapper, 'gradlew') + \"'\",\n+    path.join(rootWithWrapper, 'gradlew'),\n   );\n });\n \n@@ -43,6 +43,6 @@ test('darwin with wrapper in root invokes wrapper script', async () => {\n     inspect(subWithWrapper, path.join('app', 'build.gradle')),\n   ).rejects.toThrow();\n   expect(subProcessExecSpy.mock.calls[0][0]).toBe(\n-    \"'\" + path.join(subWithWrapper, 'gradlew') + \"'\",\n+    path.join(subWithWrapper, 'gradlew'),\n   );\n });"
        },
        {
          "filename": "test/system/plugin.test.ts",
          "status": "modified",
          "additions": 16,
          "deletions": 1,
          "patch": "@@ -2,7 +2,8 @@ import * as fs from 'fs';\n import * as path from 'path';\n import * as depGraphLib from '@snyk/dep-graph';\n import { fixtureDir } from '../common';\n-import { inspect } from '../../lib';\n+import { generateWrapperProcessArgs, inspect } from '../../lib';\n+import * as os from 'os';\n \n const rootNoWrapper = fixtureDir('no wrapper');\n const withInitScript = fixtureDir('with-init-script');\n@@ -212,3 +213,17 @@ test('repeated transitive lines not pruned if verbose graph', async () => {\n   });\n   expect(result.dependencyGraph?.equals(expected)).toBe(true);\n });\n+\n+test('generateWrapperProcessArgs should return gradle is wrapper is not used', () => {\n+  const result = generateWrapperProcessArgs('gradle', ['-v']);\n+  expect(result).toEqual({ command: 'gradle', args: ['-v'] });\n+});\n+test('generateWrapperProcessArgs should return wrapped command is os is windows ', () => {\n+  const platformMock = jest.spyOn(os, 'platform');\n+  platformMock.mockReturnValue('win32');\n+  const result = generateWrapperProcessArgs('foo/bar/gradlew.bat', ['-v']);\n+  expect(result).toEqual({\n+    command: 'cmd.exe',\n+    args: ['/c', 'foo/bar/gradlew.bat', '-v'],\n+  });\n+});"
        },
        {
          "filename": "test/system/windows.test.ts",
          "status": "modified",
          "additions": 25,
          "deletions": 16,
          "patch": "@@ -9,6 +9,7 @@ const rootWithWrapper = fixtureDir('with-wrapper');\n const subWithWrapper = fixtureDir('with-wrapper-in-root');\n let subProcessExecSpy;\n let platformMock;\n+const isWinLocal = /^win/.test(os.platform());\n \n beforeAll(() => {\n   platformMock = jest.spyOn(os, 'platform');\n@@ -24,23 +25,31 @@ afterAll(() => {\n afterEach(() => {\n   jest.clearAllMocks();\n });\n+if (isWinLocal) {\n+  test('windows with wrapper in root invokes wrapper bat', async () => {\n+    await expect(\n+      inspect(subWithWrapper, path.join('app', 'build.gradle')),\n+    ).rejects.toThrow();\n+    expect(subProcessExecSpy.mock.calls[0]).toEqual([\n+      'cmd.exe',\n+      ['/c', `${subWithWrapper}\\\\gradlew.bat`, '-v'],\n+      {\n+        cwd: `${subWithWrapper}`,\n+      },\n+    ]);\n+  });\n \n-test('windows with wrapper in root invokes wrapper bat', async () => {\n-  await expect(\n-    inspect(subWithWrapper, path.join('app', 'build.gradle')),\n-  ).rejects.toThrow();\n-  expect(subProcessExecSpy.mock.calls[0][0]).toBe(\n-    '\"' + path.join(subWithWrapper, 'gradlew.bat') + '\"',\n-  );\n-});\n-\n-test('windows with wrapper invokes wrapper bat', async () => {\n-  await expect(inspect(rootWithWrapper, 'build.gradle')).rejects.toThrow();\n-  expect(subProcessExecSpy.mock.calls[0][0]).toBe(\n-    '\"' + path.join(rootWithWrapper, 'gradlew.bat') + '\"',\n-  );\n-});\n-\n+  test('windows with wrapper invokes wrapper bat', async () => {\n+    await expect(inspect(rootWithWrapper, 'build.gradle')).rejects.toThrow();\n+    expect(subProcessExecSpy.mock.calls[0]).toEqual([\n+      'cmd.exe',\n+      ['/c', `${rootWithWrapper}\\\\gradlew.bat`, '-v'],\n+      {\n+        cwd: `${rootWithWrapper}`,\n+      },\n+    ]);\n+  });\n+}\n test('windows without wrapper invokes gradle directly', async () => {\n   await expect(inspect(rootNoWrapper, 'build.gradle')).rejects.toThrow();\n   expect(subProcessExecSpy.mock.calls[0][0]).toBe('gradle');"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9589d184dcf5baba8e198074b4f2746e5ec3a8ad",
            "date": "2024-12-19T11:33:14Z",
            "author_login": "gitphill"
          },
          {
            "sha": "17eb0c2544fa66ed8b30314d48304a93ccdbe8a4",
            "date": "2024-12-03T10:54:59Z",
            "author_login": "orsagie"
          },
          {
            "sha": "37316ada5b77188e7c4d152bd2b9f0bb7b187102",
            "date": "2024-11-29T11:41:58Z",
            "author_login": "DOlufemi"
          },
          {
            "sha": "3c5e6830a42a384b9c83a4a6023312d35192fdfe",
            "date": "2024-11-19T11:28:10Z",
            "author_login": "orsagie"
          },
          {
            "sha": "b73c0daa1ed764c03d2adf5c3a7c0f67179a9e07",
            "date": "2024-10-21T12:50:53Z",
            "author_login": "DOlufemi"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "The package Snyk CLI before 1.1294.0 is vulnerable to Code Injection when scanning an untrusted Gradle project. The vulnerability can be triggered if Snyk test is run inside the untrusted project due to the improper handling of the current working directory name. Snyk recommends only scanning trusted projects.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-10-23T19:15:19.833",
    "last_modified": "2024-10-30T13:46:31.657",
    "fix_date": "2024-10-03T10:29:59Z"
  },
  "references": [
    {
      "url": "https://github.com/snyk/snyk-gradle-plugin/commit/2f5ee7579f00660282dd161a0b79690f4a9c865d",
      "source": "report@snyk.io",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.077242",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "snyk-gradle-plugin",
    "owner": "snyk",
    "created_at": "2017-06-20T08:30:06Z",
    "updated_at": "2024-12-19T11:33:19Z",
    "pushed_at": "2024-12-19T11:34:02Z",
    "size": 6876,
    "stars": 25,
    "forks": 21,
    "open_issues": 0,
    "watchers": 25,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "TypeScript": 112924
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:21:28.487145"
  }
}