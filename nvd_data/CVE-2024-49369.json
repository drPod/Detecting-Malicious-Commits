{
  "cve_id": "CVE-2024-49369",
  "github_data": {
    "repository": "Icinga/icinga2",
    "fix_commit": "0419a2c36de408e9a703aec0962061ec9a285d3c",
    "related_commits": [
      "0419a2c36de408e9a703aec0962061ec9a285d3c",
      "2febc5e18ae0c93d989e64ebc2a9fd90e7205ad8",
      "3504fc7ed688c10d86988e2029a65efc311393fe",
      "869a7d6f0fe38c748e67bacc1fbdd42c933030f6",
      "8fed6608912c752b337d977f730547875a820831"
    ],
    "patch_url": "https://github.com/Icinga/icinga2/commit/0419a2c36de408e9a703aec0962061ec9a285d3c.patch",
    "fix_commit_details": {
      "sha": "0419a2c36de408e9a703aec0962061ec9a285d3c",
      "commit_date": "2024-10-16T10:00:00Z",
      "author": {
        "login": "julianbrost",
        "type": "User",
        "stats": {
          "total_commits": 547,
          "average_weekly_commits": 0.8176382660687593,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 152
        }
      },
      "commit_message": {
        "title": "Security: fix TLS certificate validation bypass",
        "length": 341,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 70,
        "additions": 51,
        "deletions": 19
      },
      "files": [
        {
          "filename": "lib/base/tlsstream.cpp",
          "status": "modified",
          "additions": 48,
          "deletions": 14,
          "patch": "@@ -18,14 +18,48 @@\n \n using namespace icinga;\n \n-bool UnbufferedAsioTlsStream::IsVerifyOK() const\n+/**\n+ * Checks whether the TLS handshake was completed with a valid peer certificate.\n+ *\n+ * @return true if the peer presented a valid certificate, false otherwise\n+ */\n+bool UnbufferedAsioTlsStream::IsVerifyOK()\n {\n-\treturn m_VerifyOK;\n+\tif (!SSL_is_init_finished(native_handle())) {\n+\t\t// handshake was not completed\n+\t\treturn false;\n+\t}\n+\n+\tif (GetPeerCertificate() == nullptr) {\n+\t\t// no peer certificate was sent\n+\t\treturn false;\n+\t}\n+\n+\treturn SSL_get_verify_result(native_handle()) == X509_V_OK;\n }\n \n-String UnbufferedAsioTlsStream::GetVerifyError() const\n+/**\n+ * Returns a human-readable error string for situations where IsVerifyOK() returns false.\n+ *\n+ * If the handshake was completed and a peer certificate was provided,\n+ * the string additionally contains the OpenSSL verification error code.\n+ *\n+ * @return string containing the error message\n+ */\n+String UnbufferedAsioTlsStream::GetVerifyError()\n {\n-\treturn m_VerifyError;\n+\tif (!SSL_is_init_finished(native_handle())) {\n+\t\treturn \"handshake not completed\";\n+\t}\n+\n+\tif (GetPeerCertificate() == nullptr) {\n+\t\treturn \"no peer certificate provided\";\n+\t}\n+\n+\tstd::ostringstream buf;\n+\tlong err = SSL_get_verify_result(native_handle());\n+\tbuf << \"code \" << err << \": \" << X509_verify_cert_error_string(err);\n+\treturn buf.str();\n }\n \n std::shared_ptr<X509> UnbufferedAsioTlsStream::GetPeerCertificate()\n@@ -43,17 +77,17 @@ void UnbufferedAsioTlsStream::BeforeHandshake(handshake_type type)\n \n \tset_verify_mode(ssl::verify_peer | ssl::verify_client_once);\n \n-\tset_verify_callback([this](bool preverified, ssl::verify_context& ctx) {\n-\t\tif (!preverified) {\n-\t\t\tm_VerifyOK = false;\n-\n-\t\t\tstd::ostringstream msgbuf;\n-\t\t\tint err = X509_STORE_CTX_get_error(ctx.native_handle());\n-\n-\t\t\tmsgbuf << \"code \" << err << \": \" << X509_verify_cert_error_string(err);\n-\t\t\tm_VerifyError = msgbuf.str();\n-\t\t}\n+\tset_verify_callback([](bool preverified, ssl::verify_context& ctx) {\n+\t\t(void) preverified;\n+\t\t(void) ctx;\n \n+\t\t/* Continue the handshake even if an invalid peer certificate was presented. The verification result has to be\n+\t\t * checked using the IsVerifyOK() method.\n+\t\t *\n+\t\t * Such connections are used for the initial enrollment of nodes where they use a self-signed certificate to\n+\t\t * send a certificate request and receive their valid certificate after approval (manually by the administrator\n+\t\t * or using a certificate ticket).\n+\t\t */\n \t\treturn true;\n \t});\n "
        },
        {
          "filename": "lib/base/tlsstream.hpp",
          "status": "modified",
          "additions": 3,
          "deletions": 5,
          "patch": "@@ -70,12 +70,12 @@ class UnbufferedAsioTlsStream : public AsioTcpTlsStream\n public:\n \tinline\n \tUnbufferedAsioTlsStream(UnbufferedAsioTlsStreamParams& init)\n-\t\t: AsioTcpTlsStream(init.IoContext, init.SslContext), m_VerifyOK(true), m_Hostname(init.Hostname)\n+\t\t: AsioTcpTlsStream(init.IoContext, init.SslContext), m_Hostname(init.Hostname)\n \t{\n \t}\n \n-\tbool IsVerifyOK() const;\n-\tString GetVerifyError() const;\n+\tbool IsVerifyOK();\n+\tString GetVerifyError();\n \tstd::shared_ptr<X509> GetPeerCertificate();\n \n \ttemplate<class... Args>\n@@ -97,8 +97,6 @@ class UnbufferedAsioTlsStream : public AsioTcpTlsStream\n \t}\n \n private:\n-\tbool m_VerifyOK;\n-\tString m_VerifyError;\n \tString m_Hostname;\n \n \tvoid BeforeHandshake(handshake_type type);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cddb3ca86810a0d581f588572e0c610997284b34",
            "date": "2025-01-14T11:53:21Z",
            "author_login": "Al2Klimov"
          },
          {
            "sha": "1f047ebbf5e719fcf26e4d09b9713be6015c1160",
            "date": "2025-01-14T08:43:37Z",
            "author_login": "julianbrost"
          },
          {
            "sha": "cd7bf428b0459f69001a88ee91811fe96fb7ec46",
            "date": "2025-01-13T17:43:11Z",
            "author_login": "Al2Klimov"
          },
          {
            "sha": "55829c4f552dcc5a6910f69522acd278e1dd5e73",
            "date": "2025-01-13T11:00:12Z",
            "author_login": "julianbrost"
          },
          {
            "sha": "fb50e4b1f1e189ef6e623c91f8bcb04cc0eb7ab1",
            "date": "2025-01-13T10:56:19Z",
            "author_login": "julianbrost"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-295",
    "description": "Icinga is a monitoring system which checks the availability of network resources, notifies users of outages, and generates performance data for reporting. The TLS certificate validation in all Icinga 2 versions starting from 2.4.0 was flawed, allowing an attacker to impersonate both trusted cluster nodes as well as any API users that use TLS client certificates for authentication (ApiUser objects with the client_cn attribute set). This vulnerability has been fixed in v2.14.3, v2.13.10, v2.12.11, and v2.11.12.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-12T17:15:08.250",
    "last_modified": "2024-11-13T17:01:58.603",
    "fix_date": "2024-10-16T10:00:00Z"
  },
  "references": [
    {
      "url": "https://github.com/Icinga/icinga2/commit/0419a2c36de408e9a703aec0962061ec9a285d3c",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Icinga/icinga2/commit/2febc5e18ae0c93d989e64ebc2a9fd90e7205ad8",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Icinga/icinga2/commit/3504fc7ed688c10d86988e2029a65efc311393fe",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Icinga/icinga2/commit/869a7d6f0fe38c748e67bacc1fbdd42c933030f6",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Icinga/icinga2/commit/8fed6608912c752b337d977f730547875a820831",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Icinga/icinga2/security/advisories/GHSA-j7wq-r9mg-9wpv",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://icinga.com/blog/2024/11/12/critical-icinga-2-security-releases-2-14-3",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.286268",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "icinga2",
    "owner": "Icinga",
    "created_at": "2013-08-28T18:02:06Z",
    "updated_at": "2025-01-14T11:53:25Z",
    "pushed_at": "2025-01-14T14:36:07Z",
    "size": 57750,
    "stars": 2042,
    "forks": 579,
    "open_issues": 476,
    "watchers": 2042,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 3124869,
      "CMake": 90324,
      "PLpgSQL": 71074,
      "Yacc": 44406,
      "C#": 22871,
      "Shell": 20910,
      "Vim Script": 17220,
      "LLVM": 12004,
      "PowerShell": 9561,
      "Python": 1943,
      "C": 1367
    },
    "commit_activity": {
      "total_commits_last_year": 312,
      "avg_commits_per_week": 6.0,
      "days_active_last_year": 129
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T15:09:48.696465"
  }
}