{
  "cve_id": "CVE-2024-50340",
  "github_data": {
    "repository": "symfony/symfony",
    "fix_commit": "a77b308c3f179ed7c8a8bc295f82b2d6ee3493fa",
    "related_commits": [
      "a77b308c3f179ed7c8a8bc295f82b2d6ee3493fa"
    ],
    "patch_url": "https://github.com/symfony/symfony/commit/a77b308c3f179ed7c8a8bc295f82b2d6ee3493fa.patch",
    "fix_commit_details": {
      "sha": "a77b308c3f179ed7c8a8bc295f82b2d6ee3493fa",
      "commit_date": "2024-10-15T08:18:46Z",
      "author": {
        "login": "wouterj",
        "type": "User",
        "stats": {
          "total_commits": 428,
          "average_weekly_commits": 0.5452229299363057,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 203
        }
      },
      "commit_message": {
        "title": "Do not read from argv on non-CLI SAPIs",
        "length": 38,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 34,
        "additions": 29,
        "deletions": 5
      },
      "files": [
        {
          "filename": "src/Symfony/Component/Runtime/SymfonyRuntime.php",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -95,7 +95,7 @@ public function __construct(array $options = [])\n \n         if (isset($options['env'])) {\n             $_SERVER[$envKey] = $options['env'];\n-        } elseif (isset($_SERVER['argv']) && class_exists(ArgvInput::class)) {\n+        } elseif (empty($_GET) && isset($_SERVER['argv']) && class_exists(ArgvInput::class)) {\n             $this->options = $options;\n             $this->getInput();\n         }\n@@ -216,6 +216,10 @@ protected static function register(GenericRuntime $runtime): GenericRuntime\n \n     private function getInput(): ArgvInput\n     {\n+        if (!empty($_GET) && filter_var(ini_get('register_argc_argv'), \\FILTER_VALIDATE_BOOL)) {\n+            throw new \\Exception('CLI applications cannot be run safely on non-CLI SAPIs with register_argc_argv=On.');\n+        }\n+\n         if (null !== $this->input) {\n             return $this->input;\n         }"
        },
        {
          "filename": "src/Symfony/Component/Runtime/Tests/phpt/kernel.php",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -17,19 +17,21 @@\n \n class TestKernel implements HttpKernelInterface\n {\n+    private $env;\n     private $var;\n \n-    public function __construct(string $var)\n+    public function __construct(string $env, string $var)\n     {\n+        $this->env = $env;\n         $this->var = $var;\n     }\n \n     public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = true): Response\n     {\n-        return new Response('OK Kernel '.$this->var);\n+        return new Response('OK Kernel (env='.$this->env.') '.$this->var);\n     }\n }\n \n return function (array $context) {\n-    return new TestKernel($context['SOME_VAR']);\n+    return new TestKernel($context['APP_ENV'], $context['SOME_VAR']);\n };"
        },
        {
          "filename": "src/Symfony/Component/Runtime/Tests/phpt/kernel.phpt",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -9,4 +9,4 @@ require $_SERVER['SCRIPT_FILENAME'] = __DIR__.'/kernel.php';\n \n ?>\n --EXPECTF--\n-OK Kernel foo_bar\n+OK Kernel (env=dev) foo_bar"
        },
        {
          "filename": "src/Symfony/Component/Runtime/Tests/phpt/kernel_register_argc_argv.phpt",
          "status": "added",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -0,0 +1,18 @@\n+--TEST--\n+Test HttpKernelInterface with register_argc_argv=1\n+--INI--\n+display_errors=1\n+register_argc_argv=1\n+--FILE--\n+<?php\n+\n+// emulating PHP behavior with register_argc_argv=1\n+$_GET['-e_test'] = '';\n+$_SERVER['argc'] = 1;\n+$_SERVER['argv'] = [' ', '-e', 'test'];\n+\n+require $_SERVER['SCRIPT_FILENAME'] = __DIR__.'/kernel.php';\n+\n+?>\n+--EXPECTF--\n+OK Kernel (env=dev) foo_bar"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 2,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f6312d3f3313afc62c5b1e920b2cbfe62fcf3f8e",
            "date": "2025-01-13T09:20:08Z",
            "author_login": "nicolas-grekas"
          },
          {
            "sha": "7b338721ca42ba1d5544658b39359916715170f4",
            "date": "2025-01-12T22:16:37Z",
            "author_login": "derrabus"
          },
          {
            "sha": "1a76f128845de80fe6644c7de12e0dcdad8197f1",
            "date": "2025-01-12T20:19:12Z",
            "author_login": "derrabus"
          },
          {
            "sha": "0d0758e87be2e990d7744e4e66b59e6609a2b3c9",
            "date": "2025-01-12T17:25:07Z",
            "author_login": "fabpot"
          },
          {
            "sha": "946278f9f8cd1bc40c075d37b1d6c2a289c8eb4c",
            "date": "2025-01-12T12:57:08Z",
            "author_login": "alamirault"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-74",
    "description": "symfony/runtime is a module for the Symphony PHP framework which enables decoupling PHP applications from global state. When the `register_argv_argc` php directive is set to `on` , and users call any URL with a special crafted query string, they are able to change the environment or debug mode used by the kernel when handling the request. As of versions 5.4.46, 6.4.14, and 7.1.7 the `SymfonyRuntime` now ignores the `argv` values for non-SAPI PHP runtimes. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-06T21:15:05.527",
    "last_modified": "2024-11-08T19:01:25.633",
    "fix_date": "2024-10-15T08:18:46Z"
  },
  "references": [
    {
      "url": "https://github.com/symfony/symfony/commit/a77b308c3f179ed7c8a8bc295f82b2d6ee3493fa",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/symfony/symfony/security/advisories/GHSA-x8vp-gf4q-mw5j",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.226402",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "symfony",
    "owner": "symfony",
    "created_at": "2010-01-04T14:21:21Z",
    "updated_at": "2025-01-14T09:56:31Z",
    "pushed_at": "2025-01-13T13:22:56Z",
    "size": 290479,
    "stars": 29917,
    "forks": 9510,
    "open_issues": 879,
    "watchers": 29917,
    "has_security_policy": false,
    "default_branch": "7.3",
    "protected_branches": [
      "2.0",
      "2.1",
      "2.2",
      "2.3",
      "2.4",
      "2.5",
      "2.6",
      "2.7",
      "2.8",
      "3.0",
      "3.1",
      "3.2",
      "3.3",
      "3.4",
      "4.0",
      "4.1",
      "4.2",
      "4.3",
      "4.4",
      "5.0",
      "5.1",
      "5.2",
      "5.3",
      "5.4",
      "6.0",
      "6.1",
      "6.2",
      "6.3",
      "6.4",
      "7.0"
    ],
    "languages": {
      "PHP": 30007525,
      "Twig": 527335,
      "CSS": 56186,
      "JavaScript": 28225,
      "HTML": 16804,
      "Shell": 9654,
      "Makefile": 1612,
      "Hack": 26
    },
    "commit_activity": {
      "total_commits_last_year": 4163,
      "avg_commits_per_week": 80.0576923076923,
      "days_active_last_year": 343
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:44:47.171985"
  }
}