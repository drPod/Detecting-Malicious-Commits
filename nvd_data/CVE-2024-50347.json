{
  "cve_id": "CVE-2024-50347",
  "github_data": {
    "repository": "laravel/reverb",
    "fix_commit": "73cc140d76e803b151fc2dd2e4eb3eb784a82ee2",
    "related_commits": [
      "73cc140d76e803b151fc2dd2e4eb3eb784a82ee2"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "73cc140d76e803b151fc2dd2e4eb3eb784a82ee2",
      "commit_date": "2024-09-25T15:08:49Z",
      "author": {
        "login": "joedixon",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[1.x] Implements API signature verification (#252)",
        "length": 142,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 126,
        "additions": 87,
        "deletions": 39
      },
      "files": [
        {
          "filename": "src/Protocols/Pusher/Http/Controllers/Controller.php",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -48,6 +48,7 @@ public function verify(RequestInterface $request, Connection $connection, $appId\n \n         $this->setApplication($appId);\n         $this->setChannels();\n+        $this->verifySignature($request);\n     }\n \n     /**\n@@ -100,8 +101,9 @@ protected function verifySignature(RequestInterface $request): void\n         ]);\n \n         $signature = hash_hmac('sha256', $signature, $this->application->secret());\n+        $authSignature = $this->query['auth_signature'] ?? '';\n \n-        if ($signature !== $this->query['auth_signature']) {\n+        if ($signature !== $authSignature) {\n             throw new HttpException(401, 'Authentication signature invalid.');\n         }\n     }"
        },
        {
          "filename": "tests/Feature/Protocols/Pusher/Reverb/ChannelControllerTest.php",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -1,6 +1,7 @@\n <?php\n \n use Laravel\\Reverb\\Tests\\ReverbTestCase;\n+use React\\Http\\Message\\ResponseException;\n \n use function React\\Async\\await;\n \n@@ -141,3 +142,9 @@\n \n     expect($response->getHeader('Content-Length'))->toBe(['40']);\n });\n+\n+it('fails when using an invalid signature', function () {\n+    $response = await($this->request('channels/test-channel-one?info=user_count,subscription_count,cache'));\n+\n+    expect($response->getStatusCode())->toBe(401);\n+})->throws(ResponseException::class, exceptionCode: 401);"
        },
        {
          "filename": "tests/Feature/Protocols/Pusher/Reverb/ChannelUsersControllerTest.php",
          "status": "modified",
          "additions": 10,
          "deletions": 4,
          "patch": "@@ -13,11 +13,11 @@\n it('returns an error when presence channel not provided', function () {\n     subscribe('test-channel');\n     await($this->signedRequest('channels/test-channel/users'));\n-})->throws(ResponseException::class);\n+})->throws(ResponseException::class, exceptionCode: 400);\n \n it('returns an error when unoccupied channel provided', function () {\n     await($this->signedRequest('channels/presence-test-channel/users'));\n-})->throws(ResponseException::class);\n+})->throws(ResponseException::class, exceptionCode: 404);\n \n it('returns the user data', function () {\n     $channel = app(ChannelManager::class)\n@@ -53,13 +53,13 @@\n     subscribe('test-channel');\n \n     await($this->signedRequest('channels/test-channel/users'));\n-})->throws(ResponseException::class);\n+})->throws(ResponseException::class, exceptionCode: 400);\n \n it('returns an error when gathering unoccupied channel provided', function () {\n     $this->usingRedis();\n \n     await($this->signedRequest('channels/presence-test-channel/users'));\n-})->throws(ResponseException::class);\n+})->throws(ResponseException::class, exceptionCode: 404);\n \n it('can send the content-length header', function () {\n     $channel = app(ChannelManager::class)\n@@ -120,3 +120,9 @@\n \n     expect($response->getHeader('Content-Length'))->toBe(['38']);\n });\n+\n+it('fails when using an invalid signature', function () {\n+    $response = await($this->request('channels/presence-test-channel/users'));\n+\n+    expect($response->getStatusCode())->toBe(401);\n+})->throws(ResponseException::class, exceptionCode: 401);"
        },
        {
          "filename": "tests/Feature/Protocols/Pusher/Reverb/ChannelsControllerTest.php",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@\n \n use Illuminate\\Support\\Arr;\n use Laravel\\Reverb\\Tests\\ReverbTestCase;\n+use React\\Http\\Message\\ResponseException;\n \n use function React\\Async\\await;\n \n@@ -122,3 +123,9 @@\n \n     expect($response->getHeader('Content-Length'))->toBe(['81']);\n });\n+\n+it('fails when using an invalid signature', function () {\n+    $response = await($this->request('channels?info=user_count'));\n+\n+    expect($response->getStatusCode())->toBe(401);\n+})->throws(ResponseException::class, exceptionCode: 401);"
        },
        {
          "filename": "tests/Feature/Protocols/Pusher/Reverb/ConnectionsControllerTest.php",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -1,6 +1,7 @@\n <?php\n \n use Laravel\\Reverb\\Tests\\ReverbTestCase;\n+use React\\Http\\Message\\ResponseException;\n \n use function React\\Async\\await;\n \n@@ -71,3 +72,9 @@\n \n     expect($response->getHeader('Content-Length'))->toBe(['17']);\n });\n+\n+it('fails when using an invalid signature', function () {\n+    $response = await($this->request('connections'));\n+\n+    expect($response->getStatusCode())->toBe(401);\n+})->throws(ResponseException::class, exceptionCode: 401);"
        },
        {
          "filename": "tests/Feature/Protocols/Pusher/Reverb/EventsBatchControllerTest.php",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -171,3 +171,15 @@\n \n     expect($response->getHeader('Content-Length'))->toBe(['12']);\n });\n+\n+it('fails when using an invalid signature', function () {\n+    $response = await($this->postRequest('batch_events', ['batch' => [\n+        [\n+            'name' => 'NewEvent',\n+            'channel' => 'test-channel',\n+            'data' => json_encode(['some' => 'data']),\n+        ],\n+    ]]));\n+\n+    expect($response->getStatusCode())->toBe(401);\n+})->throws(ResponseException::class, exceptionCode: 401);"
        },
        {
          "filename": "tests/Feature/Protocols/Pusher/Reverb/EventsControllerTest.php",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -182,7 +182,7 @@\n         'name' => 'NewEvent',\n         'channel' => 'test-channel',\n         'data' => json_encode([str_repeat('a', 10_100)]),\n-    ], appId: '654321'));\n+    ], appId: '654321', key: 'reverb-key-2', secret: 'reverb-secret-2'));\n \n     expect($response->getStatusCode())->toBe(200);\n     expect($response->getBody()->getContents())->toBe('{}');\n@@ -207,3 +207,13 @@\n \n     expect($response->getHeader('Content-Length'))->toBe(['2']);\n });\n+\n+it('fails when using an invalid signature', function () {\n+    $response = await($this->postRequest('events', [\n+        'name' => 'NewEvent',\n+        'channel' => 'test-channel',\n+        'data' => json_encode(['some' => 'data']),\n+    ]));\n+\n+    expect($response->getStatusCode())->toBe(401);\n+})->throws(ResponseException::class, exceptionCode: 401);"
        },
        {
          "filename": "tests/Feature/Protocols/Pusher/Reverb/ServerTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -465,7 +465,7 @@\n         'name' => 'NewEvent',\n         'channel' => 'test-channel',\n         'data' => json_encode([str_repeat('a', 150_000)]),\n-    ], appId: '654321'));\n+    ], appId: '654321', key: 'reverb-key-2', secret: 'reverb-secret-2'));\n \n     expect($response->getStatusCode())->toBe(200);\n     expect($response->getBody()->getContents())->toBe('{}');"
        },
        {
          "filename": "tests/Feature/Protocols/Pusher/Reverb/UsersTerminateControllerTest.php",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -9,7 +9,7 @@\n \n it('returns an error when connection cannot be found', function () {\n     await($this->signedPostRequest('channels/users/not-a-user/terminate_connections'));\n-})->throws(ResponseException::class);\n+})->throws(ResponseException::class, exceptionCode: 404);\n \n it('unsubscribes from all channels and terminates a user', function () {\n     $connection = connect();\n@@ -54,3 +54,9 @@\n     expect(collect(channels()->all())->get('test-channel-two')->connections())->toHaveCount(1);\n     expect($response->getHeader('Content-Length'))->toBe(['2']);\n });\n+\n+it('fails when using an invalid signature', function () {\n+    $response = await($this->postRequest('users/987/terminate_connections'));\n+\n+    expect($response->getStatusCode())->toBe(401);\n+})->throws(ResponseException::class, exceptionCode: 401);"
        },
        {
          "filename": "tests/ReverbTestCase.php",
          "status": "modified",
          "additions": 22,
          "deletions": 31,
          "patch": "@@ -160,16 +160,29 @@ public function requestWithoutAppId(string $path, string $method = 'GET', mixed\n     /**\n      * Send a signed request to the server.\n      */\n-    public function signedRequest(string $path, string $method = 'GET', mixed $data = '', string $host = '0.0.0.0', string $port = '8080', string $appId = '123456'): PromiseInterface\n+    public function signedRequest(string $path, string $method = 'GET', mixed $data = '', string $host = '0.0.0.0', string $port = '8080', string $appId = '123456', string $key = 'reverb-key', string $secret = 'reverb-secret'): PromiseInterface\n     {\n-        $hash = md5(json_encode($data));\n         $timestamp = time();\n-        $query = \"auth_key=reverb-key&auth_timestamp={$timestamp}&auth_version=1.0&body_md5={$hash}\";\n-        $string = \"POST\\n/apps/{$appId}/{$path}\\n$query\";\n-        $signature = hash_hmac('sha256', $string, 'reverb-secret');\n-        $path = Str::contains($path, '?') ? \"{$path}&{$query}\" : \"{$path}?{$query}\";\n \n-        return $this->request(\"{$path}&auth_signature={$signature}\", $method, $data, $host, $port, $appId);\n+        $query = Str::contains($path, '?') ? Str::after($path, '?') : '';\n+        $auth = \"auth_key={$key}&auth_timestamp={$timestamp}&auth_version=1.0\";\n+        $query = $query ? \"{$query}&{$auth}\" : $auth;\n+\n+        $query = explode('&', $query);\n+        sort($query);\n+        $query = implode('&', $query);\n+        \n+        $path = Str::before($path, '?');\n+\n+        if ($data) {\n+            $hash = md5(json_encode($data));\n+            $query .= \"&body_md5={$hash}\";\n+        }\n+\n+        $string = \"{$method}\\n/apps/{$appId}/{$path}\\n$query\";\n+        $signature = hash_hmac('sha256', $string, $secret);\n+\n+        return $this->request(\"{$path}?{$query}&auth_signature={$signature}\", $method, $data, $host, $port, $appId);\n     }\n \n     /**\n@@ -183,30 +196,8 @@ public function postRequest(string $path, ?array $data = [], string $host = '0.0\n     /**\n      * Send a signed POST request to the server.\n      */\n-    public function signedPostRequest(string $path, ?array $data = [], string $host = '0.0.0.0', string $port = '8080', string $appId = '123456'): PromiseInterface\n+    public function signedPostRequest(string $path, ?array $data = [], string $host = '0.0.0.0', string $port = '8080', string $appId = '123456', $key = 'reverb-key', $secret = 'reverb-secret'): PromiseInterface\n     {\n-        $hash = md5(json_encode($data));\n-        $timestamp = time();\n-        $query = \"auth_key=reverb-key&auth_timestamp={$timestamp}&auth_version=1.0&body_md5={$hash}\";\n-        $string = \"POST\\n/apps/{$appId}/{$path}\\n$query\";\n-        $signature = hash_hmac('sha256', $string, 'reverb-secret');\n-\n-        return $this->postRequest(\"{$path}?{$query}&auth_signature={$signature}\", $data, $host, $port, $appId);\n-    }\n-\n-    /**\n-     * Send a signed GET request to the server.\n-     */\n-    public function getWithSignature(string $path, array $data = [], string $host = '0.0.0.0', string $port = '8080', string $appId = '123456'): PromiseInterface\n-    {\n-        $hash = md5(json_encode($data));\n-        $timestamp = time();\n-        $query = \"auth_key=reverb-key&auth_timestamp={$timestamp}&auth_version=1.0&body_md5={$hash}\";\n-        $string = \"POST\\n/apps/{$appId}/{$path}\\n$query\";\n-        $signature = hash_hmac('sha256', $string, 'reverb-secret');\n-\n-        $path = Str::contains($path, '?') ? \"{$path}&{$query}\" : \"{$path}?{$query}\";\n-\n-        return $this->request(\"{$path}&auth_signature={$signature}\", 'GET', '', $host, $port, $appId);\n+        return $this->signedRequest($path, 'POST', $data, $host, $port, $appId, $key, $secret);\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 9,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c55c36a6477b99be1e7c16024fcffc13fa9532d6",
            "date": "2025-01-21T14:58:37Z",
            "author_login": "MahdiBagheri71"
          },
          {
            "sha": "c3a4961d4cafcf4bc340c1253bc47d590ef17600",
            "date": "2025-01-14T15:53:14Z",
            "author_login": "taylorotwell"
          },
          {
            "sha": "a058259ec799d6e27ce6d9f6b793a1f5d19bcabe",
            "date": "2024-12-27T21:05:09Z",
            "author_login": "kirills-morozovs"
          },
          {
            "sha": "16a5bdaacb3bbb6af2fe01db1206d6742c19e52e",
            "date": "2024-12-27T20:52:18Z",
            "author_login": "joedixon"
          },
          {
            "sha": "94697329fe50da5ed24ee20857338518df493d29",
            "date": "2024-12-10T16:19:12Z",
            "author_login": "taylorotwell"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-347",
    "description": "Laravel Reverb provides a real-time WebSocket communication backend for Laravel applications. Prior to 1.4.0, there is an issue where verification signatures for requests sent to Reverb's Pusher-compatible API were not being verified. This API is used in scenarios such as broadcasting a message from a backend service or for obtaining statistical information (such as number of connections) about a given channel. This issue only affects the Pusher-compatible API endpoints and not the WebSocket connections themselves. In order to exploit this vulnerability, the application ID which, should never be exposed, would need to be known by an attacker. This vulnerability is fixed in 1.4.0.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-10-31T18:15:05.600",
    "last_modified": "2024-11-01T12:57:03.417",
    "fix_date": "2024-09-25T15:08:49Z"
  },
  "references": [
    {
      "url": "https://github.com/laravel/reverb/commit/73cc140d76e803b151fc2dd2e4eb3eb784a82ee2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/laravel/reverb/pull/252",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/laravel/reverb/releases/tag/v1.4.0",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/laravel/reverb/security/advisories/GHSA-pfrr-xvrf-pxjx",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.117395",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "reverb",
    "owner": "laravel",
    "created_at": "2022-11-02T14:52:28Z",
    "updated_at": "2025-01-26T03:59:29Z",
    "pushed_at": "2025-01-24T10:23:35Z",
    "size": 595,
    "stars": 1203,
    "forks": 103,
    "open_issues": 4,
    "watchers": 1203,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "PHP": 289427,
      "Blade": 18063
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:28:42.786453"
  }
}