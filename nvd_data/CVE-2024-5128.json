{
  "cve_id": "CVE-2024-5128",
  "github_data": {
    "repository": "lunary-ai/lunary",
    "fix_commit": "0755dde1afc2a74ec23b55eee03e4416916cf48f",
    "related_commits": [
      "0755dde1afc2a74ec23b55eee03e4416916cf48f",
      "0755dde1afc2a74ec23b55eee03e4416916cf48f"
    ],
    "patch_url": "https://github.com/lunary-ai/lunary/commit/0755dde1afc2a74ec23b55eee03e4416916cf48f.patch",
    "fix_commit_details": {
      "sha": "0755dde1afc2a74ec23b55eee03e4416916cf48f",
      "commit_date": "2024-05-19T18:03:37Z",
      "author": {
        "login": "hughcrt",
        "type": "User",
        "stats": {
          "total_commits": 819,
          "average_weekly_commits": 9.202247191011235,
          "total_additions": 146326,
          "total_deletions": 109724,
          "weeks_active": 64
        }
      },
      "commit_message": {
        "title": "fix: api security (#330)",
        "length": 24,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 134,
        "additions": 77,
        "deletions": 57
      },
      "files": [
        {
          "filename": "packages/backend/src/api/v1/datasets/index.ts",
          "status": "modified",
          "additions": 77,
          "deletions": 57,
          "patch": "@@ -21,33 +21,28 @@ datasets.get(\"/\", checkAccess(\"datasets\", \"list\"), async (ctx: Context) => {\n   ctx.body = rows\n })\n \n-// Can be public route\n-datasets.get(\n-  \"/:identifier\",\n-  // checkAccess(\"datasets\", \"read\"),\n-  async (ctx: Context) => {\n-    const { projectId } = ctx.state\n-    const { identifier } = ctx.params\n+datasets.get(\"/:identifier\", async (ctx: Context) => {\n+  const { projectId } = ctx.state\n+  const { identifier } = ctx.params\n \n-    const isUUID = validateUUID(identifier)\n+  const isUUID = validateUUID(identifier)\n \n-    if (isUUID) {\n-      // For frontend\n-      const datasetId = identifier\n-      const dataset = await getDatasetById(datasetId, projectId)\n+  if (isUUID) {\n+    // For frontend\n+    const datasetId = identifier\n+    const dataset = await getDatasetById(datasetId, projectId)\n \n-      ctx.body = dataset\n-      return\n-    } else {\n-      // For SDK\n-      const slug = identifier\n-      const dataset = await getDatasetBySlug(slug, projectId)\n+    ctx.body = dataset\n+    return\n+  } else {\n+    // For SDK\n+    const slug = identifier\n+    const dataset = await getDatasetBySlug(slug, projectId)\n \n-      ctx.body = dataset\n-      return\n-    }\n-  },\n-)\n+    ctx.body = dataset\n+    return\n+  }\n+})\n \n const DEFAULT_PROMPT = {\n   chat: [\n@@ -81,7 +76,6 @@ datasets.post(\"/\", checkAccess(\"datasets\", \"create\"), async (ctx: Context) => {\n     })} returning *\n   `\n \n-  // insert 1 prompt and 1 variation\n   const [prompt] = await sql`insert into dataset_prompt\n     ${sql({\n       datasetId: dataset.id,\n@@ -124,16 +118,15 @@ datasets.delete(\n   \"/:id\",\n   checkAccess(\"datasets\", \"delete\"),\n   async (ctx: Context) => {\n-    const { id } = ctx.params\n+    const { id: datasetId } = ctx.params\n     const { projectId } = ctx.state\n \n-    await sql`delete from dataset where id = ${id} and project_id = ${projectId}`\n+    await sql`delete from dataset where id = ${datasetId} and project_id = ${projectId}`\n \n     ctx.status = 200\n   },\n )\n \n-// Create prompt\n datasets.post(\n   \"/prompts\",\n   checkAccess(\"datasets\", \"update\"),\n@@ -157,33 +150,32 @@ datasets.post(\n     returning *\n   `\n \n-    // insert 1 variation\n-    await sql`insert into dataset_prompt_variation\n-    ${sql({\n-      promptId: prompt.id,\n-      variables: {},\n-      idealOutput: idealOutput ? lastMsg(idealOutput) : \"\",\n-    })}\n-    returning *\n-  `\n+    await sql`\n+      insert into dataset_prompt_variation\n+        ${sql({\n+          promptId: prompt.id,\n+          variables: {},\n+          idealOutput: idealOutput ? lastMsg(idealOutput) : \"\",\n+        })}\n+      returning *\n+    `\n \n     ctx.body = prompt\n   },\n )\n \n-// return array of prompts and variations\n datasets.get(\n   \"/prompts/:id\",\n   checkAccess(\"datasets\", \"read\"),\n   async (ctx: Context) => {\n     const { id } = ctx.params as { id: string }\n \n     const [prompt] = await sql`\n-    select * from dataset_prompt where id = ${id} order by created_at asc\n+      select * from dataset_prompt where id = ${id} order by created_at asc\n     `\n \n     const variations = await sql`\n-    select * from dataset_prompt_variation where prompt_id = ${id} order by created_at asc\n+      select * from dataset_prompt_variation where prompt_id = ${id} order by created_at asc\n     `\n \n     prompt.variations = variations\n@@ -192,21 +184,35 @@ datasets.get(\n   },\n )\n \n-// add route ot to delete dataset_prompt and dataset_prompt_variation\n datasets.delete(\n   \"/prompts/:id\",\n   checkAccess(\"datasets\", \"update\"),\n   async (ctx: Context) => {\n-    const { id } = ctx.params\n+    const { id: promptId } = ctx.params\n+\n+    const [datasetPrompt] = await sql`\n+      select\n+        *\n+      from\n+        dataset_prompt dp\n+        left join dataset d on dp.dataset_id = d.id\n+        left join project p on d.project_id = p.id\n+      where\n+        p.org_id = ${ctx.state.orgId} \n+        and dp.id = ${promptId}\n+    `\n \n-    await sql`delete from dataset_prompt where id = ${id}`\n-    await sql`delete from dataset_prompt_variation where prompt_id = ${id}`\n+    if (!datasetPrompt) {\n+      ctx.throw(401, \"You do not have access to this ressource.\")\n+    }\n+\n+    await sql`delete from dataset_prompt where id = ${promptId}`\n+    await sql`delete from dataset_prompt_variation where prompt_id = ${promptId}`\n \n     ctx.status = 200\n   },\n )\n \n-// Update prompt\n datasets.patch(\n   \"/prompts/:id\",\n   checkAccess(\"datasets\", \"update\"),\n@@ -245,15 +251,30 @@ datasets.delete(\n   \"/variations/:id\",\n   checkAccess(\"datasets\", \"update\"),\n   async (ctx: Context) => {\n-    const { id } = ctx.params\n+    const { id: variationId } = ctx.params\n+\n+    const [promptVariation] = await sql`\n+      select\n+        *\n+      from\n+        dataset_prompt_variation dpv\n+        left join dataset_prompt dp on dpv.prompt_id = dp.id\n+        left join dataset d on dp.dataset_id = d.id\n+        left join project p on d.project_id = p.id\n+      where\n+        p.org_id = ${ctx.state.orgId} \n+        and dpv.id = ${variationId}\n+    `\n+    if (!promptVariation) {\n+      ctx.throw(401, \"You do not have access to this ressource.\")\n+    }\n \n-    await sql`delete from dataset_prompt_variation where id = ${id}`\n+    await sql`delete from dataset_prompt_variation where id = ${variationId}`\n \n     ctx.status = 200\n   },\n )\n \n-// Update variation\n datasets.patch(\n   \"/variations/:variationId\",\n   checkAccess(\"datasets\", \"update\"),\n@@ -279,7 +300,6 @@ datasets.patch(\n   },\n )\n \n-// Create variation\n datasets.post(\n   \"/variations\",\n   checkAccess(\"datasets\", \"update\"),\n@@ -291,15 +311,15 @@ datasets.post(\n     }\n \n     const [variation] = await sql`insert into dataset_prompt_variation\n-  ${sql(\n-    clearUndefined({\n-      promptId,\n-      variables,\n-      idealOutput,\n-    }),\n-  )}\n-  returning *\n-  `\n+      ${sql(\n+        clearUndefined({\n+          promptId,\n+          variables,\n+          idealOutput,\n+        }),\n+      )}\n+      returning *\n+    `\n \n     ctx.body = variation\n   },"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a4c1a889ecc4329f4b8fc976904d08cd57636546",
            "date": "2025-01-13T15:25:14Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "2447a7cc873d1f96fcc150a00f3d46ff13f4964c",
            "date": "2025-01-12T16:53:00Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "a3211170ffe39424c54a102d4afa27cec99c362d",
            "date": "2025-01-12T16:48:23Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "ea73f8db2ec427defadb4d70c56ebfc65964b677",
            "date": "2025-01-11T00:32:52Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "32974c788404aa69fd55709231e8834777dee7ab",
            "date": "2025-01-10T22:45:01Z",
            "author_login": "hughcrt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-639",
    "description": "An Insecure Direct Object Reference (IDOR) vulnerability was identified in lunary-ai/lunary, affecting versions up to and including 1.2.2. This vulnerability allows unauthorized users to view, update, or delete any dataset_prompt or dataset_prompt_variation within any dataset or project. The issue stems from improper access control checks in the dataset management endpoints, where direct references to object IDs are not adequately secured against unauthorized access. This vulnerability was fixed in version 1.2.25.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-06T19:16:04.323",
    "last_modified": "2024-11-21T09:47:01.963",
    "fix_date": "2024-05-19T18:03:37Z"
  },
  "references": [
    {
      "url": "https://github.com/lunary-ai/lunary/commit/0755dde1afc2a74ec23b55eee03e4416916cf48f",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/11248071-11b2-42d9-991a-504bf2044332",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lunary-ai/lunary/commit/0755dde1afc2a74ec23b55eee03e4416916cf48f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/11248071-11b2-42d9-991a-504bf2044332",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.350691",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "lunary",
    "owner": "lunary-ai",
    "created_at": "2023-05-12T10:03:05Z",
    "updated_at": "2025-01-13T15:25:18Z",
    "pushed_at": "2025-01-13T15:25:16Z",
    "size": 5319,
    "stars": 1133,
    "forks": 139,
    "open_issues": 0,
    "watchers": 1133,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "llm-1533-allow-filtering-by-feedback-in-thread-and-trace-page",
      "llm-1666-improve-exports-for-traces-enable-export-for-threads",
      "llm-1708-when-clicking-on-a-trace-row-theres-a-quick-render-bug-that",
      "llm-1711-save-row-sorting-in-views",
      "llm-1906-allow-a-team-owner-to-make-another-user-owner-instead-of",
      "llm-1910-prompts-settings-bug",
      "llm-1911-invite-button-doesnt-show-a-success-notification",
      "llm-1922-button-next-to-metadata-that-redirects-to-search",
      "llm-1939-integer-out-of-range-error-on-lunary-app",
      "llm-1942-implement-streaming-from-database-for-csvjsonl-exports",
      "llm-1966-long-project-names-are-croped-in-project-drowndopre",
      "llm-2101-sign-in-with-github",
      "main",
      "playwright_test_feedback_comment_dataset_user"
    ],
    "languages": {
      "TypeScript": 1181050,
      "Python": 112937,
      "CSS": 8238,
      "JavaScript": 3378,
      "Shell": 522
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:04:58.689247"
  }
}