{
  "cve_id": "CVE-2024-51478",
  "github_data": {
    "repository": "YesWiki/yeswiki",
    "fix_commit": "b5a8f93b87720d5d5f033a4b3a131ce0fb621dbc",
    "related_commits": [
      "b5a8f93b87720d5d5f033a4b3a131ce0fb621dbc",
      "e1285709f6f6a2277bd0075acf369f33cefd78f7"
    ],
    "patch_url": "https://github.com/YesWiki/yeswiki/commit/b5a8f93b87720d5d5f033a4b3a131ce0fb621dbc.patch",
    "fix_commit_details": {
      "sha": "b5a8f93b87720d5d5f033a4b3a131ce0fb621dbc",
      "commit_date": "2024-10-31T07:29:56Z",
      "author": {
        "login": "mrflos",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 22,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 94,
        "additions": 94,
        "deletions": 0
      },
      "files": [
        {
          "filename": "includes/services/UserManager.php",
          "status": "modified",
          "additions": 94,
          "deletions": 0,
          "patch": "@@ -23,6 +23,10 @@\n use YesWiki\\Security\\Controller\\SecurityController;\n use YesWiki\\Wiki;\n \n+if (!function_exists('send_mail')) {\n+    require_once 'includes/email.inc.php';\n+}\n+\n class UserManager implements UserProviderInterface, PasswordUpgraderInterface\n {\n     protected $wiki;\n@@ -33,6 +37,7 @@ class UserManager implements UserProviderInterface, PasswordUpgraderInterface\n \n     private $getOneByNameCacheResults;\n \n+    public const KEY_VOCABULARY = 'http://outils-reseaux.org/_vocabulary/key';\n \n     public function __construct(\n         Wiki $wiki,\n@@ -47,6 +52,7 @@ public function __construct(\n         $this->securityController = $securityController;\n         $this->params = $params;\n         $this->getOneByNameCacheResults = [];\n+        $this->userlink = '';\n     }\n \n     private function arrayToUser(?array $userAsArray = null, bool $fillEmpty = false): ?User\n@@ -176,6 +182,94 @@ public function create($wikiNameOrUser, string $email = \"\", string $plainPasswor\n         );\n     }\n \n+    /*\n+     * Password recovery process (AKA reset password)\n+     * 1. A key is generated using name, email alongside with other stuff.\n+     * 2. The triple (user's name, specific key \"vocabulary\",key) is stored in triples table.\n+     * 3. In order to update h\u00b7er\u00b7is password, the user must provided that key.\n+     * 4. The new password is accepted only if the key matches with the value in triples table.\n+     * 5. The corresponding row is removed from triples table.\n+     */\n+\n+    protected function generateUserLink($user)\n+    {\n+        // Generate the password recovery key\n+        $passwordHasher = $this->passwordHasherFactory->getPasswordHasher($user);\n+        $plainKey = $user['name'] . '_' . $user['email'] . random_int(0, 10000) . date('Y-m-d H:i:s');\n+        $hashedKey = $passwordHasher->hash($plainKey);\n+        $tripleStore = $this->wiki->services->get(TripleStore::class);\n+        // Erase the previous triples in the trible table\n+        $tripleStore->delete($user['name'], self::KEY_VOCABULARY, null, '', '');\n+        // Store the (name, vocabulary, key) triple in triples table\n+        $tripleStore->create($user['name'], self::KEY_VOCABULARY, $hashedKey, '', '');\n+\n+        // Generate the recovery email\n+        $this->userlink = $this->wiki->Href('', 'MotDePassePerdu', [\n+            'a' => 'recover',\n+            'email' => $hashedKey,\n+            'u' => base64_encode($user['name']),\n+        ], false);\n+    }\n+\n+    /**\n+     * Part of the Password recovery process: Handles the password recovery email process.\n+     *\n+     * Generates the password recovery key\n+     * Stores the (name, vocabulary, key) triple in triples table\n+     * Generates the recovery email\n+     * Sends it\n+     *\n+     * @return bool True if OK or false if any problems\n+     */\n+    public function sendPasswordRecoveryEmail(User $user, string $title): bool\n+    {\n+        $this->generateUserLink($user);\n+        $pieces = parse_url($this->params->get('base_url'));\n+        $domain = isset($pieces['host']) ? $pieces['host'] : '';\n+\n+        $message = _t('LOGIN_DEAR') . ' ' . $user['name'] . \",\\n\";\n+        $message .= _t('LOGIN_CLICK_FOLLOWING_LINK') . ' :' . \"\\n\";\n+        $message .= '-----------------------' . \"\\n\";\n+        $message .= $this->userlink . \"\\n\";\n+        $message .= '-----------------------' . \"\\n\";\n+        $message .= _t('LOGIN_THE_TEAM') . ' ' . $domain . \"\\n\";\n+\n+        $subject = $title . ' ' . $domain;\n+        // Send the email\n+        return send_mail($this->params->get('BAZ_ADRESSE_MAIL_ADMIN'), $this->params->get('BAZ_ADRESSE_MAIL_ADMIN'), $user['email'], $subject, $message);\n+    }\n+\n+    /**\n+     * Assessor for userlink field.\n+     */\n+    public function getUserLink(): string\n+    {\n+        return $this->userlink;\n+    }\n+\n+    /**\n+     * Assessor for userlink field.\n+     */\n+    public function getLastUserLink(User $user): string\n+    {\n+        $passwordHasher = $this->passwordHasherFactory->getPasswordHasher($user);\n+        $plainKey = $user['name'] . '_' . $user['email'] . random_int(0, 10000) . date('Y-m-d H:i:s');\n+        $hashedKey = $passwordHasher->hash($plainKey);\n+        $tripleStore = $this->wiki->services->get(TripleStore::class);\n+        $key = $tripleStore->getOne($user['name'], self::KEY_VOCABULARY, '', '');\n+        if ($key != null) {\n+            $this->userlink = $this->wiki->Href('', 'MotDePassePerdu', [\n+                'a' => 'recover',\n+                'email' => $key,\n+                'u' => base64_encode($user['name']),\n+            ], false);\n+        } else {\n+            $this->generateUserLink($user);\n+        }\n+\n+        return $this->userlink;\n+    }\n+\n     /**\n      * update user params\n      * for e-mail check is existing e-mail"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6d88f99cae2d1ffa5e09183cf08ff52b60b2fded",
            "date": "2025-01-13T14:37:12Z",
            "author_login": "mrflos"
          },
          {
            "sha": "116f112ddc08c71a532abd87eb0f48018fc965bd",
            "date": "2025-01-12T21:05:04Z",
            "author_login": "zamentur"
          },
          {
            "sha": "c14ad192b819b61aacd76691535f26182fd6c177",
            "date": "2025-01-04T23:11:45Z",
            "author_login": "VeveQNV"
          },
          {
            "sha": "bc2ffb49abd60e0506b929c916b127bd151274bf",
            "date": "2025-01-04T23:08:57Z",
            "author_login": "VeveQNV"
          },
          {
            "sha": "86d93f3e35c2e43f52a3a7bf67e880fa7a2b2089",
            "date": "2024-12-10T15:32:06Z",
            "author_login": "mrflos"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:L/A:L",
    "cwe_id": "CWE-327",
    "description": "YesWiki is a wiki system written in PHP. Prior to 4.4.5, the use of a weak cryptographic algorithm and a hard-coded salt to hash the password reset key allows it to be recovered and used to reset the password of any account. This issue is fixed in 4.4.5.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-31T17:15:13.500",
    "last_modified": "2024-11-01T12:57:03.417",
    "fix_date": "2024-10-31T07:29:56Z"
  },
  "references": [
    {
      "url": "https://github.com/YesWiki/yeswiki/commit/b5a8f93b87720d5d5f033a4b3a131ce0fb621dbc",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/YesWiki/yeswiki/commit/e1285709f6f6a2277bd0075acf369f33cefd78f7",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/YesWiki/yeswiki/security/advisories/GHSA-4fvx-h823-38v3",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.117085",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "yeswiki",
    "owner": "YesWiki",
    "created_at": "2009-09-09T09:00:49Z",
    "updated_at": "2025-01-13T14:37:19Z",
    "pushed_at": "2025-01-13T14:37:15Z",
    "size": 107382,
    "stars": 111,
    "forks": 58,
    "open_issues": 49,
    "watchers": 111,
    "has_security_policy": false,
    "default_branch": "doryphore-dev",
    "protected_branches": [
      "anacoluthe",
      "bachibouzouk",
      "cercopitheque",
      "doryphore"
    ],
    "languages": {
      "PHP": 3359464,
      "JavaScript": 744499,
      "Twig": 296179,
      "CSS": 193862,
      "HTML": 151163,
      "Shell": 1920,
      "Makefile": 1516
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T15:57:18.845221"
  }
}