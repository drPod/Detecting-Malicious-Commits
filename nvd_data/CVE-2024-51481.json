{
  "cve_id": "CVE-2024-51481",
  "github_data": {
    "repository": "NixOS/nix",
    "fix_commit": "597fcc98e18e3178734d06a9e7306250e8cb8d74",
    "related_commits": [
      "597fcc98e18e3178734d06a9e7306250e8cb8d74"
    ],
    "patch_url": "https://github.com/NixOS/nix/commit/597fcc98e18e3178734d06a9e7306250e8cb8d74.patch",
    "fix_commit_details": {
      "sha": "597fcc98e18e3178734d06a9e7306250e8cb8d74",
      "commit_date": "2024-10-30T20:44:39Z",
      "author": {
        "login": "edolstra",
        "type": "User",
        "stats": {
          "total_commits": 9978,
          "average_weekly_commits": 8.744960560911482,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 965
        }
      },
      "commit_message": {
        "title": "Merge remote-tracking branch 'nix-ghsa-wf4c-57rh-9pjg/advisory-fix-1-2.24' into 2.24-maintenance",
        "length": 96,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 257,
        "additions": 129,
        "deletions": 128
      },
      "files": [
        {
          "filename": "configure.ac",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -62,12 +62,16 @@ AC_CHECK_TOOL([AR], [ar])\n AC_SYS_LARGEFILE\n \n \n-# Solaris-specific stuff.\n+# OS-specific stuff.\n case \"$host_os\" in\n   solaris*)\n     # Solaris requires -lsocket -lnsl for network functions\n     LDFLAGS=\"-lsocket -lnsl $LDFLAGS\"\n     ;;\n+  darwin*)\n+    # Need to link to libsandbox.\n+    LDFLAGS=\"-lsandbox $LDFLAGS\"\n+    ;;\n esac\n \n "
        },
        {
          "filename": "package.nix",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@\n , libseccomp\n , libsodium\n , man\n+, darwin\n , lowdown\n , mdbook\n , mdbook-linkcheck\n@@ -237,6 +238,7 @@ in {\n     gtest\n     rapidcheck\n   ] ++ lib.optional stdenv.isLinux libseccomp\n+    ++ lib.optional stdenv.hostPlatform.isDarwin darwin.apple_sdk.libs.sandbox\n     ++ lib.optional stdenv.hostPlatform.isx86_64 libcpuid\n     # There have been issues building these dependencies\n     ++ lib.optional (stdenv.hostPlatform == stdenv.buildPlatform && (stdenv.isLinux || stdenv.isDarwin))"
        },
        {
          "filename": "src/libstore/meson.build",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -68,6 +68,11 @@ has_acl_support = cxx.has_header('sys/xattr.h') \\\n   and cxx.has_function('lremovexattr')\n configdata.set('HAVE_ACL_SUPPORT', has_acl_support.to_int())\n \n+if host_machine.system() == 'darwin'\n+  sandbox = cxx.find_library('sandbox')\n+  deps_other += [sandbox]\n+endif\n+\n subdir('build-utils-meson/threads')\n \n boost = dependency("
        },
        {
          "filename": "src/libstore/package.nix",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -7,6 +7,7 @@\n , ninja\n , pkg-config\n , unixtools\n+, darwin\n \n , nix-util\n , boost\n@@ -65,6 +66,7 @@ mkMesonDerivation (finalAttrs: {\n     sqlite\n   ] ++ lib.optional stdenv.hostPlatform.isLinux libseccomp\n     # There have been issues building these dependencies\n+    ++ lib.optional stdenv.hostPlatform.isDarwin darwin.apple_sdk.libs.sandbox\n     ++ lib.optional (stdenv.hostPlatform == stdenv.buildPlatform && (stdenv.isLinux || stdenv.isDarwin))\n       aws-sdk-cpp\n   ;"
        },
        {
          "filename": "src/libstore/unix/build/local-derivation-goal.cc",
          "status": "modified",
          "additions": 115,
          "deletions": 127,
          "patch": "@@ -58,6 +58,10 @@\n #if __APPLE__\n #include <spawn.h>\n #include <sys/sysctl.h>\n+#include <sandbox.h>\n+\n+/* This definition is undocumented but depended upon by all major browsers. */\n+extern \"C\" int sandbox_init_with_parameters(const char *profile, uint64_t flags, const char *const parameters[], char **errorbuf);\n #endif\n \n #include <pwd.h>\n@@ -2034,154 +2038,130 @@ void LocalDerivationGoal::runChild()\n                 throw SysError(\"setuid failed\");\n         }\n \n-        /* Fill in the arguments. */\n-        Strings args;\n+#if __APPLE__\n+        /* This has to appear before import statements. */\n+        std::string sandboxProfile = \"(version 1)\\n\";\n \n-        std::string builder = \"invalid\";\n+        if (useChroot) {\n \n-        if (drv->isBuiltin()) {\n-            ;\n-        }\n-#if __APPLE__\n-        else {\n-            /* This has to appear before import statements. */\n-            std::string sandboxProfile = \"(version 1)\\n\";\n-\n-            if (useChroot) {\n-\n-                /* Lots and lots and lots of file functions freak out if they can't stat their full ancestry */\n-                PathSet ancestry;\n-\n-                /* We build the ancestry before adding all inputPaths to the store because we know they'll\n-                   all have the same parents (the store), and there might be lots of inputs. This isn't\n-                   particularly efficient... I doubt it'll be a bottleneck in practice */\n-                for (auto & i : pathsInChroot) {\n-                    Path cur = i.first;\n-                    while (cur.compare(\"/\") != 0) {\n-                        cur = dirOf(cur);\n-                        ancestry.insert(cur);\n-                    }\n-                }\n+            /* Lots and lots and lots of file functions freak out if they can't stat their full ancestry */\n+            PathSet ancestry;\n \n-                /* And we want the store in there regardless of how empty pathsInChroot. We include the innermost\n-                   path component this time, since it's typically /nix/store and we care about that. */\n-                Path cur = worker.store.storeDir;\n+            /* We build the ancestry before adding all inputPaths to the store because we know they'll\n+               all have the same parents (the store), and there might be lots of inputs. This isn't\n+               particularly efficient... I doubt it'll be a bottleneck in practice */\n+            for (auto & i : pathsInChroot) {\n+                Path cur = i.first;\n                 while (cur.compare(\"/\") != 0) {\n-                    ancestry.insert(cur);\n                     cur = dirOf(cur);\n+                    ancestry.insert(cur);\n                 }\n+            }\n \n-                /* Add all our input paths to the chroot */\n-                for (auto & i : inputPaths) {\n-                    auto p = worker.store.printStorePath(i);\n-                    pathsInChroot[p] = p;\n-                }\n-\n-                /* Violations will go to the syslog if you set this. Unfortunately the destination does not appear to be configurable */\n-                if (settings.darwinLogSandboxViolations) {\n-                    sandboxProfile += \"(deny default)\\n\";\n-                } else {\n-                    sandboxProfile += \"(deny default (with no-log))\\n\";\n-                }\n+            /* And we want the store in there regardless of how empty pathsInChroot. We include the innermost\n+               path component this time, since it's typically /nix/store and we care about that. */\n+            Path cur = worker.store.storeDir;\n+            while (cur.compare(\"/\") != 0) {\n+                ancestry.insert(cur);\n+                cur = dirOf(cur);\n+            }\n \n-                sandboxProfile +=\n-                    #include \"sandbox-defaults.sb\"\n-                    ;\n+            /* Add all our input paths to the chroot */\n+            for (auto & i : inputPaths) {\n+                auto p = worker.store.printStorePath(i);\n+                pathsInChroot[p] = p;\n+            }\n \n-                if (!derivationType->isSandboxed())\n-                    sandboxProfile +=\n-                        #include \"sandbox-network.sb\"\n-                        ;\n-\n-                /* Add the output paths we'll use at build-time to the chroot */\n-                sandboxProfile += \"(allow file-read* file-write* process-exec\\n\";\n-                for (auto & [_, path] : scratchOutputs)\n-                    sandboxProfile += fmt(\"\\t(subpath \\\"%s\\\")\\n\", worker.store.printStorePath(path));\n-\n-                sandboxProfile += \")\\n\";\n-\n-                /* Our inputs (transitive dependencies and any impurities computed above)\n-\n-                   without file-write* allowed, access() incorrectly returns EPERM\n-                 */\n-                sandboxProfile += \"(allow file-read* file-write* process-exec\\n\";\n-                for (auto & i : pathsInChroot) {\n-                    if (i.first != i.second.source)\n-                        throw Error(\n-                            \"can't map '%1%' to '%2%': mismatched impure paths not supported on Darwin\",\n-                            i.first, i.second.source);\n-\n-                    std::string path = i.first;\n-                    auto optSt = maybeLstat(path.c_str());\n-                    if (!optSt) {\n-                        if (i.second.optional)\n-                            continue;\n-                        throw SysError(\"getting attributes of required path '%s\", path);\n-                    }\n-                    if (S_ISDIR(optSt->st_mode))\n-                        sandboxProfile += fmt(\"\\t(subpath \\\"%s\\\")\\n\", path);\n-                    else\n-                        sandboxProfile += fmt(\"\\t(literal \\\"%s\\\")\\n\", path);\n-                }\n-                sandboxProfile += \")\\n\";\n+            /* Violations will go to the syslog if you set this. Unfortunately the destination does not appear to be configurable */\n+            if (settings.darwinLogSandboxViolations) {\n+                sandboxProfile += \"(deny default)\\n\";\n+            } else {\n+                sandboxProfile += \"(deny default (with no-log))\\n\";\n+            }\n \n-                /* Allow file-read* on full directory hierarchy to self. Allows realpath() */\n-                sandboxProfile += \"(allow file-read*\\n\";\n-                for (auto & i : ancestry) {\n-                    sandboxProfile += fmt(\"\\t(literal \\\"%s\\\")\\n\", i);\n-                }\n-                sandboxProfile += \")\\n\";\n+            sandboxProfile +=\n+                #include \"sandbox-defaults.sb\"\n+                ;\n \n-                sandboxProfile += additionalSandboxProfile;\n-            } else\n+            if (!derivationType->isSandboxed())\n                 sandboxProfile +=\n-                    #include \"sandbox-minimal.sb\"\n+                    #include \"sandbox-network.sb\"\n                     ;\n \n-            debug(\"Generated sandbox profile:\");\n-            debug(sandboxProfile);\n+            /* Add the output paths we'll use at build-time to the chroot */\n+            sandboxProfile += \"(allow file-read* file-write* process-exec\\n\";\n+            for (auto & [_, path] : scratchOutputs)\n+                sandboxProfile += fmt(\"\\t(subpath \\\"%s\\\")\\n\", worker.store.printStorePath(path));\n \n-            Path sandboxFile = tmpDir + \"/.sandbox.sb\";\n+            sandboxProfile += \")\\n\";\n \n-            writeFile(sandboxFile, sandboxProfile);\n+            /* Our inputs (transitive dependencies and any impurities computed above)\n \n-            bool allowLocalNetworking = parsedDrv->getBoolAttr(\"__darwinAllowLocalNetworking\");\n-\n-            /* The tmpDir in scope points at the temporary build directory for our derivation. Some packages try different mechanisms\n-               to find temporary directories, so we want to open up a broader place for them to put their files, if needed. */\n-            Path globalTmpDir = canonPath(defaultTempDir(), true);\n+               without file-write* allowed, access() incorrectly returns EPERM\n+             */\n+            sandboxProfile += \"(allow file-read* file-write* process-exec\\n\";\n+            for (auto & i : pathsInChroot) {\n+                if (i.first != i.second.source)\n+                    throw Error(\n+                        \"can't map '%1%' to '%2%': mismatched impure paths not supported on Darwin\",\n+                        i.first, i.second.source);\n+\n+                std::string path = i.first;\n+                auto optSt = maybeLstat(path.c_str());\n+                if (!optSt) {\n+                    if (i.second.optional)\n+                        continue;\n+                    throw SysError(\"getting attributes of required path '%s\", path);\n+                }\n+                if (S_ISDIR(optSt->st_mode))\n+                    sandboxProfile += fmt(\"\\t(subpath \\\"%s\\\")\\n\", path);\n+                else\n+                    sandboxProfile += fmt(\"\\t(literal \\\"%s\\\")\\n\", path);\n+            }\n+            sandboxProfile += \")\\n\";\n \n-            /* They don't like trailing slashes on subpath directives */\n-            while (!globalTmpDir.empty() && globalTmpDir.back() == '/')\n-                globalTmpDir.pop_back();\n+            /* Allow file-read* on full directory hierarchy to self. Allows realpath() */\n+            sandboxProfile += \"(allow file-read*\\n\";\n+            for (auto & i : ancestry) {\n+                sandboxProfile += fmt(\"\\t(literal \\\"%s\\\")\\n\", i);\n+            }\n+            sandboxProfile += \")\\n\";\n \n-            if (getEnv(\"_NIX_TEST_NO_SANDBOX\") != \"1\") {\n-                builder = \"/usr/bin/sandbox-exec\";\n-                args.push_back(\"sandbox-exec\");\n-                args.push_back(\"-f\");\n-                args.push_back(sandboxFile);\n-                args.push_back(\"-D\");\n-                args.push_back(\"_GLOBAL_TMP_DIR=\" + globalTmpDir);\n-                if (allowLocalNetworking) {\n-                    args.push_back(\"-D\");\n-                    args.push_back(std::string(\"_ALLOW_LOCAL_NETWORKING=1\"));\n-                }\n-                args.push_back(drv->builder);\n-            } else {\n-                builder = drv->builder;\n-                args.push_back(std::string(baseNameOf(drv->builder)));\n+            sandboxProfile += additionalSandboxProfile;\n+        } else\n+            sandboxProfile +=\n+                #include \"sandbox-minimal.sb\"\n+                ;\n+\n+        debug(\"Generated sandbox profile:\");\n+        debug(sandboxProfile);\n+\n+        bool allowLocalNetworking = parsedDrv->getBoolAttr(\"__darwinAllowLocalNetworking\");\n+\n+        /* The tmpDir in scope points at the temporary build directory for our derivation. Some packages try different mechanisms\n+            to find temporary directories, so we want to open up a broader place for them to put their files, if needed. */\n+        Path globalTmpDir = canonPath(defaultTempDir(), true);\n+\n+        /* They don't like trailing slashes on subpath directives */\n+        while (!globalTmpDir.empty() && globalTmpDir.back() == '/')\n+            globalTmpDir.pop_back();\n+\n+        if (getEnv(\"_NIX_TEST_NO_SANDBOX\") != \"1\") {\n+            Strings sandboxArgs;\n+            sandboxArgs.push_back(\"_GLOBAL_TMP_DIR\");\n+            sandboxArgs.push_back(globalTmpDir);\n+            if (allowLocalNetworking) {\n+                sandboxArgs.push_back(\"_ALLOW_LOCAL_NETWORKING\");\n+                sandboxArgs.push_back(\"1\");\n+            }\n+            char * sandbox_errbuf = nullptr;\n+            if (sandbox_init_with_parameters(sandboxProfile.c_str(), 0, stringsToCharPtrs(sandboxArgs).data(), &sandbox_errbuf)) {\n+                writeFull(STDERR_FILENO, fmt(\"failed to configure sandbox: %s\\n\", sandbox_errbuf ? sandbox_errbuf : \"(null)\"));\n+                _exit(1);\n             }\n-        }\n-#else\n-        else {\n-            builder = drv->builder;\n-            args.push_back(std::string(baseNameOf(drv->builder)));\n         }\n #endif\n \n-        for (auto & i : drv->args)\n-            args.push_back(rewriteStrings(i, inputRewrites));\n-\n         /* Indicate that we managed to set up the build environment. */\n         writeFull(STDERR_FILENO, std::string(\"\\2\\n\"));\n \n@@ -2212,6 +2192,14 @@ void LocalDerivationGoal::runChild()\n             }\n         }\n \n+        // Now builder is not builtin\n+\n+        Strings args;\n+        args.push_back(std::string(baseNameOf(drv->builder)));\n+\n+        for (auto & i : drv->args)\n+            args.push_back(rewriteStrings(i, inputRewrites));\n+\n #if __APPLE__\n         posix_spawnattr_t attrp;\n \n@@ -2233,9 +2221,9 @@ void LocalDerivationGoal::runChild()\n             posix_spawnattr_setbinpref_np(&attrp, 1, &cpu, NULL);\n         }\n \n-        posix_spawn(NULL, builder.c_str(), NULL, &attrp, stringsToCharPtrs(args).data(), stringsToCharPtrs(envStrs).data());\n+        posix_spawn(NULL, drv->builder.c_str(), NULL, &attrp, stringsToCharPtrs(args).data(), stringsToCharPtrs(envStrs).data());\n #else\n-        execve(builder.c_str(), stringsToCharPtrs(args).data(), stringsToCharPtrs(envStrs).data());\n+        execve(drv->builder.c_str(), stringsToCharPtrs(args).data(), stringsToCharPtrs(envStrs).data());\n #endif\n \n         throw SysError(\"executing '%1%'\", drv->builder);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8aafc0588594033fc6f1c3e2a36fe6f04559981f",
            "date": "2025-01-14T12:52:08Z",
            "author_login": "edolstra"
          },
          {
            "sha": "0be55f869b9b504b98f26be014a94f1714add8f4",
            "date": "2024-11-14T23:51:22Z",
            "author_login": "puffnfresh"
          },
          {
            "sha": "2cb0ddfe4eb216fab6d826c1056743c152722720",
            "date": "2025-01-13T20:05:28Z",
            "author_login": "Mic92"
          },
          {
            "sha": "a78f998cc786723d7bd52b443340fd74c389f8a9",
            "date": "2025-01-13T12:33:12Z",
            "author_login": "edolstra"
          },
          {
            "sha": "fd053fdcad7bbd0dcff7a2daefd8011235653f06",
            "date": "2025-01-13T08:42:41Z",
            "author_login": "siddarthkay"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-693",
    "description": "Nix is a package manager for Linux and other Unix systems. On macOS, built-in builders (such as `builtin:fetchurl`, exposed to users with `import <nix/fetchurl.nix>`) were not executed in the macOS sandbox. Thus, these builders (which are running under the `nixbld*` users) had read access to world-readable paths and write access to world-writable paths outside of the sandbox. This issue is fixed in 2.18.9, 2.19.7, 2.20.9, 2.21.5, 2.22.4, 2.23.4, and 2.24.10. Note that sandboxing is not enabled by default on macOS. The Nix sandbox is not primarily intended as a security mechanism, but as an aid to improve reproducibility and purity of Nix builds. However, sandboxing *can* mitigate the impact of other security issues by limiting what parts of the host system a build has access to.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-10-31T17:15:13.723",
    "last_modified": "2024-11-01T12:57:03.417",
    "fix_date": "2024-10-30T20:44:39Z"
  },
  "references": [
    {
      "url": "https://github.com/NixOS/nix/commit/597fcc98e18e3178734d06a9e7306250e8cb8d74",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/NixOS/nix/security/advisories/GHSA-wf4c-57rh-9pjg",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.117208",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "nix",
    "owner": "NixOS",
    "created_at": "2012-02-08T10:17:59Z",
    "updated_at": "2025-01-14T12:52:15Z",
    "pushed_at": "2025-01-14T13:40:33Z",
    "size": 75780,
    "stars": 13291,
    "forks": 1564,
    "open_issues": 3532,
    "watchers": 13291,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "0.6-maintenance",
      "0.8-maintenance",
      "0.9-maintenance",
      "0.10-maintenance",
      "1.11-maintenance",
      "2.0-maintenance",
      "2.1-maintenance",
      "2.2-maintenance",
      "2.3-maintenance",
      "2.4-maintenance",
      "2.5-maintenance",
      "2.6-maintenance",
      "2.7-maintenance",
      "2.8-maintenance",
      "2.9-maintenance"
    ],
    "languages": {
      "C++": 3788585,
      "Shell": 521060,
      "Nix": 353193,
      "Meson": 94236,
      "C": 53321,
      "Perl": 27346,
      "Yacc": 18717,
      "XS": 13072,
      "Rust": 11498,
      "Lex": 10146,
      "Python": 7018,
      "Emacs Lisp": 598,
      "Hack": 365,
      "Ruby": 175
    },
    "commit_activity": {
      "total_commits_last_year": 2883,
      "avg_commits_per_week": 55.44230769230769,
      "days_active_last_year": 328
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T13:51:36.208020"
  }
}