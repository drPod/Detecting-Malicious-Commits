{
  "cve_id": "CVE-2024-51744",
  "github_data": {
    "repository": "golang-jwt/jwt",
    "fix_commit": "7b1c1c00a171c6c79bbdb40e4ce7d197060c1c2c",
    "related_commits": [
      "7b1c1c00a171c6c79bbdb40e4ce7d197060c1c2c"
    ],
    "patch_url": "https://github.com/golang-jwt/jwt/commit/7b1c1c00a171c6c79bbdb40e4ce7d197060c1c2c.patch",
    "fix_commit_details": {
      "sha": "7b1c1c00a171c6c79bbdb40e4ce7d197060c1c2c",
      "commit_date": "2024-11-03T20:01:24Z",
      "author": {
        "login": "oxisto",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 186,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 58,
        "additions": 36,
        "deletions": 22
      },
      "files": [
        {
          "filename": "example_test.go",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -93,7 +93,7 @@ func ExampleParseWithClaims_customClaimsType() {\n \t// Output: bar test\n }\n \n-// An example of parsing the error types using bitfield checks\n+// An example of parsing the error types using [errors.Is].\n func ExampleParse_errorChecking() {\n \t// Token from another example.  This token is expired\n \tvar tokenString = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJleHAiOjE1MDAwLCJpc3MiOiJ0ZXN0In0.HE7fK0xOQwFEr4WDgRWj4teRPZ6i3GLwD5YCm6Pwu_c\"\n@@ -106,6 +106,10 @@ func ExampleParse_errorChecking() {\n \t\tfmt.Println(\"You look nice today\")\n \t} else if errors.Is(err, jwt.ErrTokenMalformed) {\n \t\tfmt.Println(\"That's not even a token\")\n+\t} else if errors.Is(err, jwt.ErrTokenUnverifiable) {\n+\t\tfmt.Println(\"We could not verify this token\")\n+\t} else if errors.Is(err, jwt.ErrTokenSignatureInvalid) {\n+\t\tfmt.Println(\"This token has an invalid signature\")\n \t} else if errors.Is(err, jwt.ErrTokenExpired) || errors.Is(err, jwt.ErrTokenNotValidYet) {\n \t\t// Token is either expired or not active yet\n \t\tfmt.Println(\"Timing is everything\")"
        },
        {
          "filename": "parser.go",
          "status": "modified",
          "additions": 20,
          "deletions": 21,
          "patch": "@@ -36,19 +36,21 @@ func NewParser(options ...ParserOption) *Parser {\n \treturn p\n }\n \n-// Parse parses, validates, verifies the signature and returns the parsed token.\n-// keyFunc will receive the parsed token and should return the key for validating.\n+// Parse parses, validates, verifies the signature and returns the parsed token. keyFunc will\n+// receive the parsed token and should return the key for validating.\n func (p *Parser) Parse(tokenString string, keyFunc Keyfunc) (*Token, error) {\n \treturn p.ParseWithClaims(tokenString, MapClaims{}, keyFunc)\n }\n \n-// ParseWithClaims parses, validates, and verifies like Parse, but supplies a default object implementing the Claims\n-// interface. This provides default values which can be overridden and allows a caller to use their own type, rather\n-// than the default MapClaims implementation of Claims.\n+// ParseWithClaims parses, validates, and verifies like Parse, but supplies a default object\n+// implementing the Claims interface. This provides default values which can be overridden and\n+// allows a caller to use their own type, rather than the default MapClaims implementation of\n+// Claims.\n //\n-// Note: If you provide a custom claim implementation that embeds one of the standard claims (such as RegisteredClaims),\n-// make sure that a) you either embed a non-pointer version of the claims or b) if you are using a pointer, allocate the\n-// proper memory for it before passing in the overall claims, otherwise you might run into a panic.\n+// Note: If you provide a custom claim implementation that embeds one of the standard claims (such\n+// as RegisteredClaims), make sure that a) you either embed a non-pointer version of the claims or\n+// b) if you are using a pointer, allocate the proper memory for it before passing in the overall\n+// claims, otherwise you might run into a panic.\n func (p *Parser) ParseWithClaims(tokenString string, claims Claims, keyFunc Keyfunc) (*Token, error) {\n \ttoken, parts, err := p.ParseUnverified(tokenString, claims)\n \tif err != nil {\n@@ -85,35 +87,32 @@ func (p *Parser) ParseWithClaims(tokenString string, claims Claims, keyFunc Keyf\n \t\treturn token, &ValidationError{Inner: err, Errors: ValidationErrorUnverifiable}\n \t}\n \n+\t// Perform validation\n+\ttoken.Signature = parts[2]\n+\tif err := token.Method.Verify(strings.Join(parts[0:2], \".\"), token.Signature, key); err != nil {\n+\t\treturn token, &ValidationError{Inner: err, Errors: ValidationErrorSignatureInvalid}\n+\t}\n+\n \tvErr := &ValidationError{}\n \n \t// Validate Claims\n \tif !p.SkipClaimsValidation {\n \t\tif err := token.Claims.Valid(); err != nil {\n-\n \t\t\t// If the Claims Valid returned an error, check if it is a validation error,\n \t\t\t// If it was another error type, create a ValidationError with a generic ClaimsInvalid flag set\n \t\t\tif e, ok := err.(*ValidationError); !ok {\n \t\t\t\tvErr = &ValidationError{Inner: err, Errors: ValidationErrorClaimsInvalid}\n \t\t\t} else {\n \t\t\t\tvErr = e\n \t\t\t}\n+\t\t\treturn token, vErr\n \t\t}\n \t}\n \n-\t// Perform validation\n-\ttoken.Signature = parts[2]\n-\tif err = token.Method.Verify(strings.Join(parts[0:2], \".\"), token.Signature, key); err != nil {\n-\t\tvErr.Inner = err\n-\t\tvErr.Errors |= ValidationErrorSignatureInvalid\n-\t}\n-\n-\tif vErr.valid() {\n-\t\ttoken.Valid = true\n-\t\treturn token, nil\n-\t}\n+\t// No errors so far, token is valid.\n+\ttoken.Valid = true\n \n-\treturn token, vErr\n+\treturn token, nil\n }\n \n // ParseUnverified parses the token but doesn't validate the signature."
        },
        {
          "filename": "parser_test.go",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -111,6 +111,17 @@ var jwtTestData = []struct {\n \t\tnil,\n \t\tjwt.SigningMethodRS256,\n \t},\n+\t{\n+\t\t\"basic invalid and expired\",\n+\t\t\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJmb28iOiJiYXIiLCJleHAiOjEyMzR9.IbFvatLIJ2Z7B_MAaeIaRZsRSQF1CDzmAE0osHII3WfRTbPavonrDXz-p2Ap_oh9LT2lyohL_jCLoVcpTyu7K3Rt-hdgxZ1_r1StwM1we0SqW2BFFeXCzyS9SLf2YTaVR35lVvfwwlCpPBgOw1SBbczm9m6yPgA9Afsvw_lG_GU2civvG0UzHXxbzWWvJoflGokJDuoHQiku2bfxReyNsoUGcLjx5tfkY7cPihM3CffPpRFYCVjv_abHYelZWpVjdGULQyJDInGYqO8oANqNTtjui7aqxBpcFCUBwVVgktM4Q6Dvj-o5LrdPyJSEl0b_R2JstFE5CbEZGN5anN1yHa\",\n+\t\tdefaultKeyFunc,\n+\t\tjwt.MapClaims{\"foo\": \"bar\", \"exp\": 1234.0},\n+\t\tfalse,\n+\t\tjwt.ValidationErrorSignatureInvalid,\n+\t\t[]error{jwt.ErrTokenSignatureInvalid, rsa.ErrVerification},\n+\t\tnil,\n+\t\tjwt.SigningMethodRS256,\n+\t},\n \t{\n \t\t\"basic nokeyfunc\",\n \t\t\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJmb28iOiJiYXIifQ.FhkiHkoESI_cG3NPigFrxEk9Z60_oXrOT2vGm9Pn6RDgYNovYORQmmA0zs1AoAOf09ly2Nx2YAg6ABqAYga1AcMFkJljwxTT5fYphTuqpWdy4BELeSYJx5Ty2gmr8e7RonuUztrdD5WfPqLKMm1Ozp_T6zALpRmwTIW0QPnaBXaQD90FplAg46Iy1UlDKr-Eupy0i5SLch5Q-p2ZpaL_5fnTIUDlxC3pWhJTyx_71qDI-mAA_5lE_VdroOeflG56sSmDxopPEG3bFlSu1eowyBfxtu0_CuVd-M42RU75Zc4Gsj6uV77MBtbMrf4_7M_NUTSgoIF3fRqxrj0NzihIBg\","
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bc8bdca5cced1caa9787e4a1c313a3538544c877",
            "date": "2024-11-04T06:57:43Z",
            "author_login": "oxisto"
          },
          {
            "sha": "5ec246c074b71790eec1f2e05b54daf6ec29ec5f",
            "date": "2024-09-06T00:39:08Z",
            "author_login": "kvii"
          },
          {
            "sha": "0123f1ad66cbc45013dbfba6eff0cd81472bfc12",
            "date": "2024-09-06T00:38:10Z",
            "author_login": "AlexanderYastrebov"
          },
          {
            "sha": "f961c72abd3b91442a9ab3d3e356bf547636e89b",
            "date": "2024-08-16T12:47:03Z",
            "author_login": "mfridman"
          },
          {
            "sha": "62e504c2810b67f6b97313424411cfffb25e41b0",
            "date": "2024-05-13T12:06:47Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-755",
    "description": "golang-jwt is a Go implementation of JSON Web Tokens. Unclear documentation of the error behavior in `ParseWithClaims` can lead to situation where users are potentially not checking errors in the way they should be. Especially, if a token is both expired and invalid, the errors returned by `ParseWithClaims` return both error codes. If users only check for the `jwt.ErrTokenExpired ` using `error.Is`, they will ignore the embedded `jwt.ErrTokenSignatureInvalid` and thus potentially accept invalid tokens. A fix has been back-ported with the error handling logic from the `v5` branch to the `v4` branch. In this logic, the `ParseWithClaims` function will immediately return in \"dangerous\" situations (e.g., an invalid signature), limiting the combined errors only to situations where the signature is valid, but further validation failed (e.g., if the signature is valid, but is expired AND has the wrong audience). This fix is part of the 4.5.1 release. We are aware that this changes the behaviour of an established function and is not 100 % backwards compatible, so updating to 4.5.1 might break your code. In case you cannot update to 4.5.0, please make sure that you are properly checking for all errors (\"dangerous\" ones first), so that you are not running in the case detailed above.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-11-04T22:15:03.997",
    "last_modified": "2024-11-05T16:04:26.053",
    "fix_date": "2024-11-03T20:01:24Z"
  },
  "references": [
    {
      "url": "https://github.com/golang-jwt/jwt/commit/7b1c1c00a171c6c79bbdb40e4ce7d197060c1c2c",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/golang-jwt/jwt/security/advisories/GHSA-29wx-vh33-7x7r",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.203260",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jwt",
    "owner": "golang-jwt",
    "created_at": "2021-05-18T22:42:37Z",
    "updated_at": "2025-01-14T15:25:19Z",
    "pushed_at": "2024-11-04T06:57:44Z",
    "size": 1489,
    "stars": 7498,
    "forks": 361,
    "open_issues": 49,
    "watchers": 7498,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 183361
    },
    "commit_activity": {
      "total_commits_last_year": 10,
      "avg_commits_per_week": 0.19230769230769232,
      "days_active_last_year": 9
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T17:54:26.368259"
  }
}