{
  "cve_id": "CVE-2024-51749",
  "github_data": {
    "repository": "element-hq/element-web",
    "fix_commit": "a00c343435d633e64de2c0548217aa611c7bbef5",
    "related_commits": [
      "a00c343435d633e64de2c0548217aa611c7bbef5"
    ],
    "patch_url": "https://github.com/element-hq/element-web/commit/a00c343435d633e64de2c0548217aa611c7bbef5.patch",
    "fix_commit_details": {
      "sha": "a00c343435d633e64de2c0548217aa611c7bbef5",
      "commit_date": "2024-11-12T09:07:39Z",
      "author": {
        "login": "t3chguy",
        "type": "User",
        "stats": {
          "total_commits": 1818,
          "average_weekly_commits": 3.6215139442231075,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 250
        }
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 81,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 330,
        "additions": 262,
        "deletions": 68
      },
      "files": [
        {
          "filename": "jest.config.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -38,7 +38,7 @@ const config: Config = {\n         \"recorderWorkletFactory\": \"<rootDir>/__mocks__/empty.js\",\n         \"^fetch-mock$\": \"<rootDir>/node_modules/fetch-mock\",\n     },\n-    transformIgnorePatterns: [\"/node_modules/(?!matrix-js-sdk).+$\"],\n+    transformIgnorePatterns: [\"/node_modules/(?!(mime|matrix-js-sdk)).+$\"],\n     collectCoverageFrom: [\n         \"<rootDir>/src/**/*.{js,ts,tsx}\",\n         // getSessionLock is piped into a different JS context via stringification, and the coverage functionality is"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -129,6 +129,7 @@\n         \"matrix-js-sdk\": \"34.10.0\",\n         \"matrix-widget-api\": \"^1.9.0\",\n         \"memoize-one\": \"^6.0.0\",\n+        \"mime\": \"^4.0.4\",\n         \"oidc-client-ts\": \"^3.0.1\",\n         \"opus-recorder\": \"^8.0.3\",\n         \"pako\": \"^2.0.3\","
        },
        {
          "filename": "playwright/e2e/widgets/stickers.spec.ts",
          "status": "modified",
          "additions": 101,
          "deletions": 60,
          "patch": "@@ -6,32 +6,48 @@ SPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only\n Please see LICENSE files in the repository root for full details.\n */\n \n+import * as fs from \"node:fs\";\n+\n import type { Page } from \"@playwright/test\";\n import { test, expect } from \"../../element-web-test\";\n import { ElementAppPage } from \"../../pages/ElementAppPage\";\n+import { Credentials } from \"../../plugins/homeserver\";\n \n const STICKER_PICKER_WIDGET_ID = \"fake-sticker-picker\";\n const STICKER_PICKER_WIDGET_NAME = \"Fake Stickers\";\n const STICKER_NAME = \"Test Sticker\";\n const ROOM_NAME_1 = \"Sticker Test\";\n const ROOM_NAME_2 = \"Sticker Test Two\";\n-const STICKER_MESSAGE = JSON.stringify({\n-    action: \"m.sticker\",\n-    api: \"fromWidget\",\n-    data: {\n-        name: \"teststicker\",\n-        description: STICKER_NAME,\n-        file: \"test.png\",\n-        content: {\n-            body: STICKER_NAME,\n-            msgtype: \"m.sticker\",\n-            url: \"mxc://localhost/somewhere\",\n+const STICKER_IMAGE = fs.readFileSync(\"playwright/sample-files/riot.png\");\n+\n+function getStickerMessage(contentUri: string, mimetype: string): string {\n+    return JSON.stringify({\n+        action: \"m.sticker\",\n+        api: \"fromWidget\",\n+        data: {\n+            name: \"teststicker\",\n+            description: STICKER_NAME,\n+            file: \"test.png\",\n+            content: {\n+                body: STICKER_NAME,\n+                info: {\n+                    h: 480,\n+                    mimetype: mimetype,\n+                    size: 13818,\n+                    w: 480,\n+                },\n+                msgtype: \"m.sticker\",\n+                url: contentUri,\n+            },\n         },\n-    },\n-    requestId: \"1\",\n-    widgetId: STICKER_PICKER_WIDGET_ID,\n-});\n-const WIDGET_HTML = `\n+        requestId: \"1\",\n+        widgetId: STICKER_PICKER_WIDGET_ID,\n+    });\n+}\n+\n+function getWidgetHtml(contentUri: string, mimetype: string) {\n+    const stickerMessage = getStickerMessage(contentUri, mimetype);\n+    return `\n     <html lang=\"en\">\n         <head>\n             <title>Fake Sticker Picker</title>\n@@ -51,13 +67,13 @@ const WIDGET_HTML = `\n             <button name=\"Send\" id=\"sendsticker\">Press for sticker</button>\n             <script>\n                 document.getElementById('sendsticker').onclick = () => {\n-                    window.parent.postMessage(${STICKER_MESSAGE}, '*')\n+                    window.parent.postMessage(${stickerMessage}, '*')\n                 };\n             </script>\n         </body>\n     </html>\n `;\n-\n+}\n async function openStickerPicker(app: ElementAppPage) {\n     const options = await app.openMessageComposerOptions();\n     await options.getByRole(\"menuitem\", { name: \"Sticker\" }).click();\n@@ -71,7 +87,8 @@ async function sendStickerFromPicker(page: Page) {\n     await expect(page.locator(\".mx_AppTileFullWidth#stickers\")).not.toBeVisible();\n }\n \n-async function expectTimelineSticker(page: Page, roomId: string) {\n+async function expectTimelineSticker(page: Page, roomId: string, contentUri: string) {\n+    const contentId = contentUri.split(\"/\").slice(-1)[0];\n     // Make sure it's in the right room\n     await expect(page.locator(\".mx_EventTile_sticker > a\")).toHaveAttribute(\"href\", new RegExp(`/${roomId}/`));\n \n@@ -80,13 +97,43 @@ async function expectTimelineSticker(page: Page, roomId: string) {\n     // download URL.\n     await expect(page.locator(`img[alt=\"${STICKER_NAME}\"]`)).toHaveAttribute(\n         \"src\",\n-        new RegExp(\"/download/localhost/somewhere\"),\n+        new RegExp(`/localhost/${contentId}`),\n     );\n }\n \n+async function expectFileTile(page: Page, roomId: string, contentUri: string) {\n+    await expect(page.locator(\".mx_MFileBody_info_filename\")).toContainText(STICKER_NAME);\n+}\n+\n+async function setWidgetAccountData(\n+    app: ElementAppPage,\n+    user: Credentials,\n+    stickerPickerUrl: string,\n+    provideCreatorUserId: boolean = true,\n+) {\n+    await app.client.setAccountData(\"m.widgets\", {\n+        [STICKER_PICKER_WIDGET_ID]: {\n+            content: {\n+                type: \"m.stickerpicker\",\n+                name: STICKER_PICKER_WIDGET_NAME,\n+                url: stickerPickerUrl,\n+                creatorUserId: provideCreatorUserId ? user.userId : undefined,\n+            },\n+            sender: user.userId,\n+            state_key: STICKER_PICKER_WIDGET_ID,\n+            type: \"m.widget\",\n+            id: STICKER_PICKER_WIDGET_ID,\n+        },\n+    });\n+}\n+\n test.describe(\"Stickers\", () => {\n     test.use({\n         displayName: \"Sally\",\n+        room: async ({ app }, use) => {\n+            const roomId = await app.client.createRoom({ name: ROOM_NAME_1 });\n+            await use({ roomId });\n+        },\n     });\n \n     // We spin up a web server for the sticker picker so that we're not testing to see if\n@@ -96,66 +143,60 @@ test.describe(\"Stickers\", () => {\n     //\n     // See sendStickerFromPicker() for more detail on iframe comms.\n     let stickerPickerUrl: string;\n-    test.beforeEach(async ({ webserver }) => {\n-        stickerPickerUrl = webserver.start(WIDGET_HTML);\n-    });\n \n-    test(\"should send a sticker to multiple rooms\", async ({ page, app, user }) => {\n-        const roomId1 = await app.client.createRoom({ name: ROOM_NAME_1 });\n+    test(\"should send a sticker to multiple rooms\", async ({ webserver, page, app, user, room }) => {\n         const roomId2 = await app.client.createRoom({ name: ROOM_NAME_2 });\n-\n-        await app.client.setAccountData(\"m.widgets\", {\n-            [STICKER_PICKER_WIDGET_ID]: {\n-                content: {\n-                    type: \"m.stickerpicker\",\n-                    name: STICKER_PICKER_WIDGET_NAME,\n-                    url: stickerPickerUrl,\n-                    creatorUserId: user.userId,\n-                },\n-                sender: user.userId,\n-                state_key: STICKER_PICKER_WIDGET_ID,\n-                type: \"m.widget\",\n-                id: STICKER_PICKER_WIDGET_ID,\n-            },\n-        });\n+        const { content_uri: contentUri } = await app.client.uploadContent(STICKER_IMAGE, { type: \"image/png\" });\n+        const widgetHtml = getWidgetHtml(contentUri, \"image/png\");\n+        stickerPickerUrl = webserver.start(widgetHtml);\n+        setWidgetAccountData(app, user, stickerPickerUrl);\n \n         await app.viewRoomByName(ROOM_NAME_1);\n-        await expect(page).toHaveURL(`/#/room/${roomId1}`);\n+        await expect(page).toHaveURL(`/#/room/${room.roomId}`);\n         await openStickerPicker(app);\n         await sendStickerFromPicker(page);\n-        await expectTimelineSticker(page, roomId1);\n+        await expectTimelineSticker(page, room.roomId, contentUri);\n \n         // Ensure that when we switch to a different room that the sticker\n         // goes to the right place\n         await app.viewRoomByName(ROOM_NAME_2);\n         await expect(page).toHaveURL(`/#/room/${roomId2}`);\n         await openStickerPicker(app);\n         await sendStickerFromPicker(page);\n-        await expectTimelineSticker(page, roomId2);\n+        await expectTimelineSticker(page, roomId2, contentUri);\n     });\n \n-    test(\"should handle a sticker picker widget missing creatorUserId\", async ({ page, app, user }) => {\n-        const roomId1 = await app.client.createRoom({ name: ROOM_NAME_1 });\n+    test(\"should handle a sticker picker widget missing creatorUserId\", async ({\n+        webserver,\n+        page,\n+        app,\n+        user,\n+        room,\n+    }) => {\n+        const { content_uri: contentUri } = await app.client.uploadContent(STICKER_IMAGE, { type: \"image/png\" });\n+        const widgetHtml = getWidgetHtml(contentUri, \"image/png\");\n+        stickerPickerUrl = webserver.start(widgetHtml);\n+        setWidgetAccountData(app, user, stickerPickerUrl, false);\n \n-        await app.client.setAccountData(\"m.widgets\", {\n-            [STICKER_PICKER_WIDGET_ID]: {\n-                content: {\n-                    type: \"m.stickerpicker\",\n-                    name: STICKER_PICKER_WIDGET_NAME,\n-                    url: stickerPickerUrl,\n-                    // No creatorUserId\n-                },\n-                sender: user.userId,\n-                state_key: STICKER_PICKER_WIDGET_ID,\n-                type: \"m.widget\",\n-                id: STICKER_PICKER_WIDGET_ID,\n-            },\n+        await app.viewRoomByName(ROOM_NAME_1);\n+        await expect(page).toHaveURL(`/#/room/${room.roomId}`);\n+        await openStickerPicker(app);\n+        await sendStickerFromPicker(page);\n+        await expectTimelineSticker(page, room.roomId, contentUri);\n+    });\n+\n+    test(\"should render invalid mimetype as a file\", async ({ webserver, page, app, user, room }) => {\n+        const { content_uri: contentUri } = await app.client.uploadContent(STICKER_IMAGE, {\n+            type: \"application/octet-stream\",\n         });\n+        const widgetHtml = getWidgetHtml(contentUri, \"application/octet-stream\");\n+        stickerPickerUrl = webserver.start(widgetHtml);\n+        setWidgetAccountData(app, user, stickerPickerUrl);\n \n         await app.viewRoomByName(ROOM_NAME_1);\n-        await expect(page).toHaveURL(`/#/room/${roomId1}`);\n+        await expect(page).toHaveURL(`/#/room/${room.roomId}`);\n         await openStickerPicker(app);\n         await sendStickerFromPicker(page);\n-        await expectTimelineSticker(page, roomId1);\n+        await expectFileTile(page, room.roomId, contentUri);\n     });\n });"
        },
        {
          "filename": "src/components/views/messages/MessageEvent.tsx",
          "status": "modified",
          "additions": 107,
          "deletions": 0,
          "patch": "@@ -6,7 +6,9 @@ SPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only\n Please see LICENSE files in the repository root for full details.\n */\n \n+import mime from \"mime\";\n import React, { createRef } from \"react\";\n+import { logger } from \"matrix-js-sdk/src/logger\";\n import {\n     EventType,\n     MsgType,\n@@ -15,6 +17,7 @@ import {\n     M_LOCATION,\n     M_POLL_END,\n     M_POLL_START,\n+    IContent,\n } from \"matrix-js-sdk/src/matrix\";\n \n import SettingsStore from \"../../../settings/SettingsStore\";\n@@ -144,6 +147,103 @@ export default class MessageEvent extends React.Component<IProps> implements IMe\n         this.forceUpdate();\n     };\n \n+    /**\n+     *  Validates that the filename extension and advertised mimetype\n+     *  of the supplied image/file message content match and are actuallly video/image content.\n+     *  For image/video messages with a thumbnail it also validates the mimetype is an image.\n+     * @param content The mxEvent content of the message\n+     * @returns A boolean indicating whether the validation passed\n+     */\n+    private validateImageOrVideoMimetype = (content: IContent): boolean => {\n+        // As per the spec if filename is not present the body represents the filename\n+        const filename = content.filename ?? content.body;\n+        if (!filename) {\n+            logger.log(\"Failed to validate image/video content, filename null\");\n+            return false;\n+        }\n+        // Check mimetype of the thumbnail\n+        if (!this.validateThumbnailMimetype(content)) {\n+            logger.log(\"Failed to validate file/image thumbnail\");\n+            return false;\n+        }\n+\n+        // if there is no mimetype from the extesion or the mimetype is not image/video validation fails\n+        const typeFromExtension = mime.getType(filename) ?? undefined;\n+        const extensionMajorMimetype = this.parseMajorMimetype(typeFromExtension);\n+        if (!typeFromExtension || !this.validateAllowedMimetype(typeFromExtension, [\"image\", \"video\"])) {\n+            logger.log(\"Failed to validate image/video content, invalid or missing extension\");\n+            return false;\n+        }\n+\n+        // if the content mimetype is set check it is an image/video and that it matches the extesion mimetype otherwise validation fails\n+        const contentMimetype = content.info?.mimetype;\n+        if (contentMimetype) {\n+            const contentMajorMimetype = this.parseMajorMimetype(contentMimetype);\n+            if (\n+                !this.validateAllowedMimetype(contentMimetype, [\"image\", \"video\"]) ||\n+                extensionMajorMimetype !== contentMajorMimetype\n+            ) {\n+                logger.log(\"Failed to validate image/video content, invalid or missing mimetype\");\n+                return false;\n+            }\n+        }\n+        return true;\n+    };\n+\n+    /**\n+     *  Validates that the advertised mimetype of the sticker content\n+     *  is an image.\n+     *  For stickers with a thumbnail it also validates the mimetype is an image.\n+     * @param content The mxEvent content of the message\n+     * @returns A boolean indicating whether the validation passed\n+     */\n+    private validateStickerMimetype = (content: IContent): boolean => {\n+        // Validate mimetype of the thumbnail\n+        const thumbnailResult = this.validateThumbnailMimetype(content);\n+        if (!thumbnailResult) {\n+            logger.log(\"Failed to validate sticker thumbnail\");\n+            return false;\n+        }\n+        // Validate mimetype of the content info is valid if it is set\n+        const contentMimetype = content.info?.mimetype;\n+        if (contentMimetype && !this.validateAllowedMimetype(contentMimetype, [\"image\"])) {\n+            logger.log(\"Failed to validate image/video content, invalid or missing mimetype/extensions\");\n+            return false;\n+        }\n+        return true;\n+    };\n+\n+    /**\n+     *  For image/video messages or stickers that have a thumnail mimetype specified,\n+     *  validates that the major mimetime is image.\n+     * @param content The mxEvent content of the message\n+     * @returns A boolean indicating whether the validation passed\n+     */\n+    private validateThumbnailMimetype = (content: IContent): boolean => {\n+        const thumbnailMimetype = content.info?.thumbnail_info?.mimetype;\n+        return !thumbnailMimetype || this.validateAllowedMimetype(thumbnailMimetype, [\"image\"]);\n+    };\n+\n+    /**\n+     * Validates that the major part of a mimetime from an allowed list.\n+     * @param mimetype The mimetype to validate\n+     * @param allowedMajorMimeTypes The list of allowed major mimetimes\n+     * @returns A boolean indicating whether the validation passed\n+     */\n+    private validateAllowedMimetype = (mimetype: string, allowedMajorMimeTypes: string[]): boolean => {\n+        const majorMimetype = this.parseMajorMimetype(mimetype);\n+        return !!majorMimetype && allowedMajorMimeTypes.includes(majorMimetype);\n+    };\n+\n+    /**\n+     * Parses and returns the the major part of a mimetype(before the \"/\").\n+     * @param mimetype As optional mimetype string to parse\n+     * @returns The major part of the mimetype string or undefined\n+     */\n+    private parseMajorMimetype(mimetype?: string): string | undefined {\n+        return mimetype?.split(\"/\")[0];\n+    }\n+\n     public render(): React.ReactNode {\n         const content = this.props.mxEvent.getContent();\n         const type = this.props.mxEvent.getType();\n@@ -165,6 +265,13 @@ export default class MessageEvent extends React.Component<IProps> implements IMe\n                 BodyType = UnknownBody;\n             }\n \n+            if (\n+                ((BodyType === MImageBody || BodyType == MVideoBody) && !this.validateImageOrVideoMimetype(content)) ||\n+                (BodyType === MStickerBody && !this.validateStickerMimetype(content))\n+            ) {\n+                BodyType = this.bodyTypes.get(MsgType.File)!;\n+            }\n+\n             // TODO: move to eventTypes when location sharing spec stabilises\n             if (M_LOCATION.matches(type) || (type === EventType.RoomMessage && msgtype === MsgType.Location)) {\n                 BodyType = MLocationBody;"
        },
        {
          "filename": "test/unit-tests/components/views/messages/MessageEvent-test.tsx",
          "status": "modified",
          "additions": 47,
          "deletions": 7,
          "patch": "@@ -33,6 +33,16 @@ jest.mock(\"../../../../../src/components/views/messages/MImageBody\", () => ({\n     default: () => <div data-testid=\"image-body\" />,\n }));\n \n+jest.mock(\"../../../../../src/components/views/messages/MVideoBody\", () => ({\n+    __esModule: true,\n+    default: () => <div data-testid=\"video-body\" />,\n+}));\n+\n+jest.mock(\"../../../../../src/components/views/messages/MFileBody\", () => ({\n+    __esModule: true,\n+    default: () => <div data-testid=\"file-body\" />,\n+}));\n+\n jest.mock(\"../../../../../src/components/views/messages/MImageReplyBody\", () => ({\n     __esModule: true,\n     default: () => <div data-testid=\"image-reply-body\" />,\n@@ -95,8 +105,8 @@ describe(\"MessageEvent\", () => {\n     describe(\"when an image with a caption is sent\", () => {\n         let result: RenderResult;\n \n-        beforeEach(() => {\n-            event = mkEvent({\n+        function createEvent(mimetype: string, filename: string, msgtype: string) {\n+            return mkEvent({\n                 event: true,\n                 type: EventType.RoomMessage,\n                 user: client.getUserId()!,\n@@ -105,28 +115,58 @@ describe(\"MessageEvent\", () => {\n                     body: \"caption for a test image\",\n                     format: \"org.matrix.custom.html\",\n                     formatted_body: \"<strong>caption for a test image</strong>\",\n-                    msgtype: MsgType.Image,\n-                    filename: \"image.webp\",\n+                    msgtype: msgtype,\n+                    filename: filename,\n                     info: {\n                         w: 40,\n                         h: 50,\n+                        mimetype: mimetype,\n                     },\n                     url: \"mxc://server/image\",\n                 },\n             });\n-            result = renderMessageEvent();\n-        });\n+        }\n \n-        it(\"should render a TextualBody and an ImageBody\", () => {\n+        function mockMedia() {\n             fetchMock.getOnce(\n                 \"https://server/_matrix/media/v3/download/server/image\",\n                 {\n                     body: fs.readFileSync(path.resolve(__dirname, \"..\", \"..\", \"..\", \"images\", \"animated-logo.webp\")),\n                 },\n                 { sendAsJson: false },\n             );\n+        }\n+\n+        it(\"should render a TextualBody and an ImageBody\", () => {\n+            event = createEvent(\"image/webp\", \"image.webp\", MsgType.Image);\n+            result = renderMessageEvent();\n+            mockMedia();\n             result.getByTestId(\"image-body\");\n             result.getByTestId(\"textual-body\");\n         });\n+\n+        it(\"should render a TextualBody and a FileBody for mismatched extension\", () => {\n+            event = createEvent(\"image/webp\", \"image.exe\", MsgType.Image);\n+            result = renderMessageEvent();\n+            mockMedia();\n+            result.getByTestId(\"file-body\");\n+            result.getByTestId(\"textual-body\");\n+        });\n+\n+        it(\"should render a TextualBody and an VideoBody\", () => {\n+            event = createEvent(\"video/mp4\", \"video.mp4\", MsgType.Video);\n+            result = renderMessageEvent();\n+            mockMedia();\n+            result.getByTestId(\"video-body\");\n+            result.getByTestId(\"textual-body\");\n+        });\n+\n+        it(\"should render a TextualBody and a FileBody for non-video mimetype\", () => {\n+            event = createEvent(\"application/octet-stream\", \"video.mp4\", MsgType.Video);\n+            result = renderMessageEvent();\n+            mockMedia();\n+            result.getByTestId(\"file-body\");\n+            result.getByTestId(\"textual-body\");\n+        });\n     });\n });"
        },
        {
          "filename": "yarn.lock",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -8411,6 +8411,11 @@ mime@1.6.0:\n   resolved \"https://registry.yarnpkg.com/mime/-/mime-1.6.0.tgz#32cd9e5c64553bd58d19a568af452acff04981b1\"\n   integrity sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==\n \n+mime@^4.0.4:\n+  version \"4.0.4\"\n+  resolved \"https://registry.yarnpkg.com/mime/-/mime-4.0.4.tgz#9f851b0fc3c289d063b20a7a8055b3014b25664b\"\n+  integrity sha512-v8yqInVjhXyqP6+Kw4fV3ZzeMRqEW6FotRsKXjRS5VMTNIuXsdRoAvklpoRgSqXm6o9VNH4/C0mgedko9DdLsQ==\n+\n mimic-fn@^2.1.0:\n   version \"2.1.0\"\n   resolved \"https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-2.1.0.tgz#7ed2c2ccccaf84d3ffcb7a69b57711fc2083401b\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "dbce48b23d5c553836e064b49165397f638d28e7",
            "date": "2025-01-14T18:00:30Z",
            "author_login": "t3chguy"
          },
          {
            "sha": "bb41616d5f9fc6d47c735d4794de1fa46766cb7a",
            "date": "2025-01-14T14:18:55Z",
            "author_login": "RiotRobot"
          },
          {
            "sha": "c75f6dc3a1b7c6b93cb88ac38d695c237301ecbd",
            "date": "2025-01-14T14:18:36Z",
            "author_login": "RiotRobot"
          },
          {
            "sha": "880048d998aa170b73007f4b19508724530f367b",
            "date": "2025-01-14T14:13:47Z",
            "author_login": "RiotRobot"
          },
          {
            "sha": "24685dc7d17e1942255ed15c3e9696b0819523ff",
            "date": "2025-01-14T14:10:44Z",
            "author_login": "RiotRobot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-451",
    "description": "Element is a Matrix web client built using the Matrix React SDK. Versions of Element Web and Desktop earlier than 1.11.85 do not check if thumbnails for attachments, stickers and images are coherent. It is possible to add thumbnails to events trigger a file download once clicked. Fixed in element-web 1.11.85.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-12T17:15:09.910",
    "last_modified": "2024-11-13T17:01:58.603",
    "fix_date": "2024-11-12T09:07:39Z"
  },
  "references": [
    {
      "url": "https://github.com/element-hq/element-web/commit/a00c343435d633e64de2c0548217aa611c7bbef5",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/element-hq/element-web/security/advisories/GHSA-5486-384g-mcx2",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.286611",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "element-web",
    "owner": "element-hq",
    "created_at": "2015-07-22T05:32:15Z",
    "updated_at": "2025-01-14T18:13:28Z",
    "pushed_at": "2025-01-14T18:13:25Z",
    "size": 412456,
    "stars": 11362,
    "forks": 2056,
    "open_issues": 3368,
    "watchers": 11362,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "TypeScript": 12426920,
      "CSS": 846182,
      "HTML": 185989,
      "JavaScript": 160494,
      "Python": 12205,
      "Shell": 8743,
      "Perl": 8613,
      "Dockerfile": 1605
    },
    "commit_activity": {
      "total_commits_last_year": 2661,
      "avg_commits_per_week": 51.17307692307692,
      "days_active_last_year": 259
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T18:27:41.565517"
  }
}