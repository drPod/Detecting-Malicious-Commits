{
  "cve_id": "CVE-2024-51755",
  "github_data": {
    "repository": "twigphp/Twig",
    "fix_commit": "831c148e786178e5f2fde9db67266be3bf241c21",
    "related_commits": [
      "831c148e786178e5f2fde9db67266be3bf241c21"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "831c148e786178e5f2fde9db67266be3bf241c21",
      "commit_date": "2024-10-29T14:00:56Z",
      "author": {
        "login": "nicolas-grekas",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Sandbox ArrayAccess and do sandbox checks before isset() checks",
        "length": 63,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 172,
        "additions": 153,
        "deletions": 19
      },
      "files": [
        {
          "filename": "doc/api.rst",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -486,6 +486,15 @@ able to call the ``getTitle()`` and ``getBody()`` methods on ``Article``\n objects, and the ``title`` and ``body`` public properties. Everything else\n won't be allowed and will generate a ``\\Twig\\Sandbox\\SecurityError`` exception.\n \n+.. note::\n+\n+    As of Twig 1.14.1 (and on Twig 3.11.2), if the ``Article`` class implements\n+    the ``ArrayAccess`` interface, the templates will only be able to access\n+    the ``title`` and ``body`` attributes.\n+\n+    Note that native array-like classes (like ``ArrayObject``) are always\n+    allowed, you don't need to configure them.\n+\n .. caution::\n \n     The ``extends`` and ``use`` tags are always allowed in a sandboxed"
        },
        {
          "filename": "src/Extension/CoreExtension.php",
          "status": "modified",
          "additions": 56,
          "deletions": 8,
          "patch": "@@ -65,6 +65,8 @@\n use Twig\\Node\\Node;\n use Twig\\NodeVisitor\\MacroAutoImportNodeVisitor;\n use Twig\\Parser;\n+use Twig\\Sandbox\\SecurityNotAllowedMethodError;\n+use Twig\\Sandbox\\SecurityNotAllowedPropertyError;\n use Twig\\Source;\n use Twig\\Template;\n use Twig\\TemplateWrapper;\n@@ -92,6 +94,20 @@\n \n final class CoreExtension extends AbstractExtension\n {\n+    public const ARRAY_LIKE_CLASSES = [\n+        'ArrayIterator',\n+        'ArrayObject',\n+        'CachingIterator',\n+        'RecursiveArrayIterator',\n+        'RecursiveCachingIterator',\n+        'SplDoublyLinkedList',\n+        'SplFixedArray',\n+        'SplObjectStorage',\n+        'SplQueue',\n+        'SplStack',\n+        'WeakMap',\n+    ];\n+\n     private $dateFormats = ['F j, Y H:i', '%d days'];\n     private $numberFormat = [0, '.', ','];\n     private $timezone = null;\n@@ -1587,10 +1603,20 @@ public static function batch($items, $size, $fill = null, $preserveKeys = true):\n      */\n     public static function getAttribute(Environment $env, Source $source, $object, $item, array $arguments = [], $type = Template::ANY_CALL, $isDefinedTest = false, $ignoreStrictCheck = false, $sandboxed = false, int $lineno = -1)\n     {\n+        $propertyNotAllowedError = null;\n+\n         // array\n         if (Template::METHOD_CALL !== $type) {\n             $arrayItem = \\is_bool($item) || \\is_float($item) ? (int) $item : $item;\n \n+            if ($sandboxed && $object instanceof \\ArrayAccess && !\\in_array($object::class, self::ARRAY_LIKE_CLASSES, true)) {\n+                try {\n+                    $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $arrayItem, $lineno, $source);\n+                } catch (SecurityNotAllowedPropertyError $propertyNotAllowedError) {\n+                    goto methodCheck;\n+                }\n+            }\n+\n             if (((\\is_array($object) || $object instanceof \\ArrayObject) && (isset($object[$arrayItem]) || \\array_key_exists($arrayItem, (array) $object)))\n                 || ($object instanceof \\ArrayAccess && isset($object[$arrayItem]))\n             ) {\n@@ -1662,19 +1688,25 @@ public static function getAttribute(Environment $env, Source $source, $object, $\n \n         // object property\n         if (Template::METHOD_CALL !== $type) {\n+            if ($sandboxed) {\n+                try {\n+                    $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $item, $lineno, $source);\n+                } catch (SecurityNotAllowedPropertyError $propertyNotAllowedError) {\n+                    goto methodCheck;\n+                }\n+            }\n+\n             if (isset($object->$item) || \\array_key_exists((string) $item, (array) $object)) {\n                 if ($isDefinedTest) {\n                     return true;\n                 }\n \n-                if ($sandboxed) {\n-                    $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $item, $lineno, $source);\n-                }\n-\n                 return $object->$item;\n             }\n         }\n \n+        methodCheck:\n+\n         static $cache = [];\n \n         $class = \\get_class($object);\n@@ -1733,19 +1765,35 @@ public static function getAttribute(Environment $env, Source $source, $object, $\n                 return false;\n             }\n \n+            if ($propertyNotAllowedError) {\n+                throw $propertyNotAllowedError;\n+            }\n+\n             if ($ignoreStrictCheck || !$env->isStrictVariables()) {\n                 return;\n             }\n \n             throw new RuntimeError(\\sprintf('Neither the property \"%1$s\" nor one of the methods \"%1$s()\", \"get%1$s()\"/\"is%1$s()\"/\"has%1$s()\" or \"__call()\" exist and have public access in class \"%2$s\".', $item, $class), $lineno, $source);\n         }\n \n-        if ($isDefinedTest) {\n-            return true;\n+        if ($sandboxed) {\n+            try {\n+                $env->getExtension(SandboxExtension::class)->checkMethodAllowed($object, $method, $lineno, $source);\n+            } catch (SecurityNotAllowedMethodError $e) {\n+                if ($isDefinedTest) {\n+                    return false;\n+                }\n+\n+                if ($propertyNotAllowedError) {\n+                    throw $propertyNotAllowedError;\n+                }\n+\n+                throw $e;\n+            }\n         }\n \n-        if ($sandboxed) {\n-            $env->getExtension(SandboxExtension::class)->checkMethodAllowed($object, $method, $lineno, $source);\n+        if ($isDefinedTest) {\n+            return true;\n         }\n \n         // Some objects throw exceptions when they have __call, and the method we try"
        },
        {
          "filename": "src/Node/Expression/GetAttrExpression.php",
          "status": "modified",
          "additions": 28,
          "deletions": 5,
          "patch": "@@ -31,6 +31,7 @@ public function __construct(AbstractExpression $node, AbstractExpression $attrib\n     public function compile(Compiler $compiler): void\n     {\n         $env = $compiler->getEnvironment();\n+        $arrayAccessSandbox = false;\n \n         // optimize array calls\n         if (\n@@ -44,17 +45,35 @@ public function compile(Compiler $compiler): void\n                 ->raw('(('.$var.' = ')\n                 ->subcompile($this->getNode('node'))\n                 ->raw(') && is_array(')\n-                ->raw($var)\n+                ->raw($var);\n+\n+            if (!$env->hasExtension(SandboxExtension::class)) {\n+                $compiler\n+                    ->raw(') || ')\n+                    ->raw($var)\n+                    ->raw(' instanceof ArrayAccess ? (')\n+                    ->raw($var)\n+                    ->raw('[')\n+                    ->subcompile($this->getNode('attribute'))\n+                    ->raw('] ?? null) : null)')\n+                ;\n+\n+                return;\n+            }\n+\n+            $arrayAccessSandbox = true;\n+\n+            $compiler\n                 ->raw(') || ')\n                 ->raw($var)\n-                ->raw(' instanceof ArrayAccess ? (')\n+                ->raw(' instanceof ArrayAccess && in_array(')\n+                ->raw($var.'::class')\n+                ->raw(', CoreExtension::ARRAY_LIKE_CLASSES, true) ? (')\n                 ->raw($var)\n                 ->raw('[')\n                 ->subcompile($this->getNode('attribute'))\n-                ->raw('] ?? null) : null)')\n+                ->raw('] ?? null) : ')\n             ;\n-\n-            return;\n         }\n \n         $compiler->raw('CoreExtension::getAttribute($this->env, $this->source, ');\n@@ -83,5 +102,9 @@ public function compile(Compiler $compiler): void\n             ->raw(', ')->repr($this->getNode('node')->getTemplateLine())\n             ->raw(')')\n         ;\n+\n+        if ($arrayAccessSandbox) {\n+            $compiler->raw(')');\n+        }\n     }\n }"
        },
        {
          "filename": "tests/Extension/SandboxTest.php",
          "status": "modified",
          "additions": 60,
          "deletions": 6,
          "patch": "@@ -43,6 +43,8 @@ protected function setUp(): void\n             'arr' => ['obj' => new FooObject()],\n             'child_obj' => new ChildClass(),\n             'some_array' => [5, 6, 7, new FooObject()],\n+            'array_like' => new ArrayLikeObject(),\n+            'magic' => new MagicObject(),\n         ];\n \n         self::$templates = [\n@@ -66,6 +68,7 @@ protected function setUp(): void\n             '1_childobj_parentmethod' => '{{ child_obj.ParentMethod() }}',\n             '1_childobj_childmethod' => '{{ child_obj.ChildMethod() }}',\n             '1_empty' => '',\n+            '1_array_like' => '{{ array_like[\"foo\"] }}',\n         ];\n     }\n \n@@ -141,15 +144,31 @@ public function testSandboxGloballySet()\n         $this->assertEquals('FOO', $twig->load('1_basic')->render(self::$params), 'Sandbox does nothing if it is disabled globally');\n     }\n \n-    public function testSandboxUnallowedMethodAccessor()\n+    public function testSandboxUnallowedPropertyAccessor()\n     {\n         $twig = $this->getEnvironment(true, [], self::$templates);\n         try {\n-            $twig->load('1_basic1')->render(self::$params);\n+            $twig->load('1_basic1')->render(['obj' => new MagicObject()]);\n             $this->fail('Sandbox throws a SecurityError exception if an unallowed method is called');\n-        } catch (SecurityNotAllowedMethodError $e) {\n-            $this->assertEquals('Twig\\Tests\\Extension\\FooObject', $e->getClassName(), 'Exception should be raised on the \"Twig\\Tests\\Extension\\FooObject\" class');\n-            $this->assertEquals('foo', $e->getMethodName(), 'Exception should be raised on the \"foo\" method');\n+        } catch (SecurityNotAllowedPropertyError $e) {\n+            $this->assertEquals('Twig\\Tests\\Extension\\MagicObject', $e->getClassName(), 'Exception should be raised on the \"Twig\\Tests\\Extension\\MagicObject\" class');\n+            $this->assertEquals('foo', $e->getPropertyName(), 'Exception should be raised on the \"foo\" property');\n+        }\n+    }\n+\n+    public function testSandboxUnallowedArrayIndexAccessor()\n+    {\n+        $twig = $this->getEnvironment(true, [], self::$templates);\n+\n+        // ArrayObject and other internal array-like classes are exempted from sandbox restrictions\n+        $this->assertSame('bar', $twig->load('1_array_like')->render(['array_like' => new \\ArrayObject(['foo' => 'bar'])]));\n+\n+        try {\n+            $twig->load('1_array_like')->render(self::$params);\n+            $this->fail('Sandbox throws a SecurityError exception if an unallowed method is called');\n+        } catch (SecurityNotAllowedPropertyError $e) {\n+            $this->assertEquals('Twig\\Tests\\Extension\\ArrayLikeObject', $e->getClassName(), 'Exception should be raised on the \"Twig\\Tests\\Extension\\ArrayLikeObject\" class');\n+            $this->assertEquals('foo', $e->getPropertyName(), 'Exception should be raised on the \"foo\" property');\n         }\n     }\n \n@@ -300,7 +319,8 @@ public static function getSandboxAllowedToStringTests()\n         return [\n             'constant_test' => ['{{ obj is constant(\"PHP_INT_MAX\") }}', ''],\n             'set_object' => ['{% set a = obj.anotherFooObject %}{{ a.foo }}', 'foo'],\n-            'is_defined' => ['{{ obj.anotherFooObject is defined }}', '1'],\n+            'is_defined1' => ['{{ obj.anotherFooObject is defined }}', '1'],\n+            'is_defined2' => ['{{ magic.foo is defined }}', ''],\n             'is_null' => ['{{ obj is null }}', ''],\n             'is_sameas' => ['{{ obj is same as(obj) }}', '1'],\n             'is_sameas_no_brackets' => ['{{ obj is same as obj }}', '1'],\n@@ -610,3 +630,37 @@ public function getAnotherFooObject()\n         return new self();\n     }\n }\n+\n+class ArrayLikeObject extends \\ArrayObject\n+{\n+    public function offsetExists($offset): bool\n+    {\n+        throw new \\BadMethodCallException('Should not be called');\n+    }\n+\n+    public function offsetGet($offset): mixed\n+    {\n+        throw new \\BadMethodCallException('Should not be called');\n+    }\n+\n+    public function offsetSet($offset, $value): void\n+    {\n+    }\n+\n+    public function offsetUnset($offset): void\n+    {\n+    }\n+}\n+\n+class MagicObject\n+{\n+    public function __get($name): mixed\n+    {\n+        throw new \\BadMethodCallException('Should not be called');\n+    }\n+\n+    public function __isset($name): bool\n+    {\n+        throw new \\BadMethodCallException('Should not be called');\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fcd0332dca2a88e69a988ab7e4c603acc910b5e8",
            "date": "2025-01-25T15:41:44Z",
            "author_login": "fabpot"
          },
          {
            "sha": "11535e9058b289d55e5057bf9e701ba64af97ac6",
            "date": "2025-01-25T15:41:07Z",
            "author_login": "fabpot"
          },
          {
            "sha": "b680354bbb639bdf8019e2c488648d5dbbc501ef",
            "date": "2025-01-24T20:37:36Z",
            "author_login": "fabpot"
          },
          {
            "sha": "d76d2d7d260eeb4df2f2d96199c969b8b436a212",
            "date": "2025-01-24T20:36:20Z",
            "author_login": "fabpot"
          },
          {
            "sha": "18007078ba96eb8d208dbc59ad9df94eb984e405",
            "date": "2025-01-24T20:10:08Z",
            "author_login": "xabbuh"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-668",
    "description": "Twig is a template language for PHP. In a sandbox, an attacker can access attributes of Array-like objects as they were not checked by the security policy. They are now checked via the property policy and the `__isset()` method is now called after the security check. This is a BC break. This issue has been patched in versions 3.11.2 and 3.14.1. All users are advised to upgrade. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-11-06T20:15:06.077",
    "last_modified": "2024-11-08T19:01:25.633",
    "fix_date": "2024-10-29T14:00:56Z"
  },
  "references": [
    {
      "url": "https://github.com/twigphp/Twig/commit/831c148e786178e5f2fde9db67266be3bf241c21",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/twigphp/Twig/security/advisories/GHSA-jjxq-ff2g-95vh",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.225873",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "Twig",
    "owner": "twigphp",
    "created_at": "2009-10-07T21:23:38Z",
    "updated_at": "2025-01-14T10:54:36Z",
    "pushed_at": "2025-01-12T17:49:31Z",
    "size": 11930,
    "stars": 8222,
    "forks": 1259,
    "open_issues": 57,
    "watchers": 8222,
    "has_security_policy": false,
    "default_branch": "3.x",
    "protected_branches": [],
    "languages": {
      "PHP": 1085470,
      "Shell": 1690,
      "Twig": 641,
      "HTML": 286
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T16:15:22.367515"
  }
}