{
  "cve_id": "CVE-2024-51757",
  "github_data": {
    "repository": "capricorn86/happy-dom",
    "fix_commit": "5ee0b1676d4ce20cc2a70d1c9c8d6f1e3f57efac",
    "related_commits": [
      "5ee0b1676d4ce20cc2a70d1c9c8d6f1e3f57efac",
      "d23834c232f1cf5519c9418b073f1dcec6b2f0fd"
    ],
    "patch_url": "https://github.com/capricorn86/happy-dom/commit/5ee0b1676d4ce20cc2a70d1c9c8d6f1e3f57efac.patch",
    "fix_commit_details": {
      "sha": "5ee0b1676d4ce20cc2a70d1c9c8d6f1e3f57efac",
      "commit_date": "2024-11-06T00:31:29Z",
      "author": {
        "login": "capricorn86",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: [#1585] Fixes security vulnerability that allowed for server side code to be executed by a <script> tag (#1586)",
        "length": 264,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 69,
        "additions": 68,
        "deletions": 1
      },
      "files": [
        {
          "filename": "packages/happy-dom/src/fetch/utilities/SyncFetchScriptBuilder.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -23,6 +23,7 @@ export default class SyncFetchScriptBuilder {\n \t}): string {\n \t\tconst sortedHeaders = {};\n \t\tconst headerNames = Object.keys(request.headers).sort();\n+\n \t\tfor (const name of headerNames) {\n \t\t\tsortedHeaders[name] = request.headers[name];\n \t\t}\n@@ -43,7 +44,7 @@ export default class SyncFetchScriptBuilder {\n \t\t\t\t\t\t\t\t\tnull,\n \t\t\t\t\t\t\t\t\t4\n \t\t\t\t\t\t\t\t)};\n-                const request = sendRequest('${request.url.href}', options, (incomingMessage) => {\n+                const request = sendRequest(\\`${request.url.href}\\`, options, (incomingMessage) => {\n                     let data = Buffer.alloc(0);\n                     incomingMessage.on('data', (chunk) => {\n                         data = Buffer.concat([data, Buffer.from(chunk)]);"
        },
        {
          "filename": "packages/happy-dom/test/fetch/SyncFetch.test.ts",
          "status": "modified",
          "additions": 66,
          "deletions": 0,
          "patch": "@@ -249,6 +249,72 @@ describe('SyncFetch', () => {\n \t\t\texpect(response.body.toString()).toBe(responseText);\n \t\t});\n \n+\t\tit('Should not allow to inject code into scripts executed using child_process.execFileSync().', () => {\n+\t\t\tbrowserFrame.url = 'https://localhost:8080/';\n+\n+\t\t\tconst url =\n+\t\t\t\t\"https://localhost:8080/`+require('child_process').execSync('id')+`/'+require('child_process').execSync('id')+'\";\n+\t\t\tconst responseText = 'test';\n+\n+\t\t\tmockModule('child_process', {\n+\t\t\t\texecFileSync: (\n+\t\t\t\t\tcommand: string,\n+\t\t\t\t\targs: string[],\n+\t\t\t\t\toptions: { encoding: string; maxBuffer: number }\n+\t\t\t\t) => {\n+\t\t\t\t\texpect(command).toEqual(process.argv[0]);\n+\t\t\t\t\texpect(args[0]).toBe('-e');\n+\t\t\t\t\texpect(args[1]).toBe(\n+\t\t\t\t\t\tSyncFetchScriptBuilder.getScript({\n+\t\t\t\t\t\t\turl: new URL(\n+\t\t\t\t\t\t\t\t\"https://localhost:8080/%60+require('child_process').execSync('id')+%60/'+require('child_process').execSync('id')+'\"\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\tmethod: 'GET',\n+\t\t\t\t\t\t\theaders: {\n+\t\t\t\t\t\t\t\tAccept: '*/*',\n+\t\t\t\t\t\t\t\tConnection: 'close',\n+\t\t\t\t\t\t\t\tReferer: 'https://localhost:8080/',\n+\t\t\t\t\t\t\t\t'User-Agent': window.navigator.userAgent,\n+\t\t\t\t\t\t\t\t'Accept-Encoding': 'gzip, deflate, br'\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\tbody: null\n+\t\t\t\t\t\t})\n+\t\t\t\t\t);\n+\t\t\t\t\t// new URL() will convert ` into %60\n+\t\t\t\t\t// By using ` for the URL string within the script, we can prevent the script from being injected\n+\t\t\t\t\texpect(\n+\t\t\t\t\t\targs[1].includes(\n+\t\t\t\t\t\t\t`\\`https://localhost:8080/%60+require('child_process').execSync('id')+%60/'+require('child_process').execSync('id')+'\\``\n+\t\t\t\t\t\t)\n+\t\t\t\t\t).toBe(true);\n+\t\t\t\t\texpect(options).toEqual({\n+\t\t\t\t\t\tencoding: 'buffer',\n+\t\t\t\t\t\tmaxBuffer: 1024 * 1024 * 1024\n+\t\t\t\t\t});\n+\t\t\t\t\treturn JSON.stringify({\n+\t\t\t\t\t\terror: null,\n+\t\t\t\t\t\tincomingMessage: {\n+\t\t\t\t\t\t\tstatusCode: 200,\n+\t\t\t\t\t\t\tstatusMessage: 'OK',\n+\t\t\t\t\t\t\trawHeaders: [],\n+\t\t\t\t\t\t\tdata: Buffer.from(responseText).toString('base64')\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\t\t\t});\n+\n+\t\t\tconst response = new SyncFetch({\n+\t\t\t\tbrowserFrame,\n+\t\t\t\twindow,\n+\t\t\t\turl,\n+\t\t\t\tinit: {\n+\t\t\t\t\tmethod: 'GET'\n+\t\t\t\t}\n+\t\t\t}).send();\n+\n+\t\t\texpect(response.body.toString()).toBe(responseText);\n+\t\t});\n+\n \t\tit('Should send custom key/value object request headers.', () => {\n \t\t\tbrowserFrame.url = 'https://localhost:8080/';\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ecbf335658497b7bbc40f78422fc4feaa376429f",
            "date": "2025-01-08T23:34:22Z",
            "author_login": "capricorn86"
          },
          {
            "sha": "978dbfa87bda10c685d47cb7ea177a504a4384ac",
            "date": "2025-01-08T22:41:55Z",
            "author_login": "capricorn86"
          },
          {
            "sha": "3218bf9584ad4e2f5552cd0c51dd47c719a19f2a",
            "date": "2025-01-08T22:30:06Z",
            "author_login": "wojtekmaj"
          },
          {
            "sha": "8bf1f268cec9b5e59ebf179e01df3dc812db0ac8",
            "date": "2025-01-08T01:44:10Z",
            "author_login": "capricorn86"
          },
          {
            "sha": "f79188a14025faf14bbe375827c1274f93767db4",
            "date": "2025-01-08T00:24:32Z",
            "author_login": "capricorn86"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "happy-dom is a JavaScript implementation of a web browser without its graphical user interface. Versions of happy-dom prior to 15.10.2 may execute code on the host via a script tag. This would execute code in the user context of happy-dom. Users are advised to upgrade to version 15.10.2. There are no known workarounds for this vulnerability.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-11-06T20:15:06.337",
    "last_modified": "2024-11-08T19:01:25.633",
    "fix_date": "2024-11-06T00:31:29Z"
  },
  "references": [
    {
      "url": "https://github.com/capricorn86/happy-dom/commit/5ee0b1676d4ce20cc2a70d1c9c8d6f1e3f57efac",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/capricorn86/happy-dom/commit/d23834c232f1cf5519c9418b073f1dcec6b2f0fd",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/capricorn86/happy-dom/issues/1585",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/capricorn86/happy-dom/pull/1586",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/capricorn86/happy-dom/releases/tag/v15.10.2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/capricorn86/happy-dom/security/advisories/GHSA-96g7-g7g9-jxw8",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.226010",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "happy-dom",
    "owner": "capricorn86",
    "created_at": "2019-09-09T19:53:08Z",
    "updated_at": "2025-01-14T12:49:45Z",
    "pushed_at": "2025-01-08T23:54:32Z",
    "size": 10555,
    "stars": 3518,
    "forks": 211,
    "open_issues": 196,
    "watchers": 3518,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "TypeScript": 4693893,
      "JavaScript": 29710
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T19:00:51.269028"
  }
}