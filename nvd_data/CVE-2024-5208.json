{
  "cve_id": "CVE-2024-5208",
  "github_data": {
    "repository": "mintplex-labs/anything-llm",
    "fix_commit": "e2439c6d4c3cfdacd96cd1b7b92d1f89c3cc8459",
    "related_commits": [
      "e2439c6d4c3cfdacd96cd1b7b92d1f89c3cc8459",
      "e2439c6d4c3cfdacd96cd1b7b92d1f89c3cc8459"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "e2439c6d4c3cfdacd96cd1b7b92d1f89c3cc8459",
      "commit_date": "2024-05-22T16:34:15Z",
      "author": {
        "login": "timothycarambat",
        "type": "User",
        "stats": {
          "total_commits": 928,
          "average_weekly_commits": 10.545454545454545,
          "total_additions": 195202,
          "total_deletions": 87044,
          "weeks_active": 82
        }
      },
      "commit_message": {
        "title": "patch endpoint without exception handler",
        "length": 40,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 127,
        "additions": 69,
        "deletions": 58
      },
      "files": [
        {
          "filename": "server/endpoints/workspaces.js",
          "status": "modified",
          "additions": 69,
          "deletions": 58,
          "patch": "@@ -111,77 +111,88 @@ function workspaceEndpoints(app) {\n       handleFileUpload,\n     ],\n     async function (request, response) {\n-      const Collector = new CollectorApi();\n-      const { originalname } = request.file;\n-      const processingOnline = await Collector.online();\n+      try {\n+        const Collector = new CollectorApi();\n+        const { originalname } = request.file;\n+        const processingOnline = await Collector.online();\n+\n+        if (!processingOnline) {\n+          response\n+            .status(500)\n+            .json({\n+              success: false,\n+              error: `Document processing API is not online. Document ${originalname} will not be processed automatically.`,\n+            })\n+            .end();\n+          return;\n+        }\n \n-      if (!processingOnline) {\n-        response\n-          .status(500)\n-          .json({\n-            success: false,\n-            error: `Document processing API is not online. Document ${originalname} will not be processed automatically.`,\n-          })\n-          .end();\n-        return;\n-      }\n+        const { success, reason } =\n+          await Collector.processDocument(originalname);\n+        if (!success) {\n+          response.status(500).json({ success: false, error: reason }).end();\n+          return;\n+        }\n \n-      const { success, reason } = await Collector.processDocument(originalname);\n-      if (!success) {\n-        response.status(500).json({ success: false, error: reason }).end();\n-        return;\n+        Collector.log(\n+          `Document ${originalname} uploaded processed and successfully. It is now available in documents.`\n+        );\n+        await Telemetry.sendTelemetry(\"document_uploaded\");\n+        await EventLogs.logEvent(\n+          \"document_uploaded\",\n+          {\n+            documentName: originalname,\n+          },\n+          response.locals?.user?.id\n+        );\n+        response.status(200).json({ success: true, error: null });\n+      } catch (e) {\n+        console.log(e.message, e);\n+        response.sendStatus(500).end();\n       }\n-\n-      Collector.log(\n-        `Document ${originalname} uploaded processed and successfully. It is now available in documents.`\n-      );\n-      await Telemetry.sendTelemetry(\"document_uploaded\");\n-      await EventLogs.logEvent(\n-        \"document_uploaded\",\n-        {\n-          documentName: originalname,\n-        },\n-        response.locals?.user?.id\n-      );\n-      response.status(200).json({ success: true, error: null });\n     }\n   );\n \n   app.post(\n     \"/workspace/:slug/upload-link\",\n     [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n-      const Collector = new CollectorApi();\n-      const { link = \"\" } = reqBody(request);\n-      const processingOnline = await Collector.online();\n+      try {\n+        const Collector = new CollectorApi();\n+        const { link = \"\" } = reqBody(request);\n+        const processingOnline = await Collector.online();\n+\n+        if (!processingOnline) {\n+          response\n+            .status(500)\n+            .json({\n+              success: false,\n+              error: `Document processing API is not online. Link ${link} will not be processed automatically.`,\n+            })\n+            .end();\n+          return;\n+        }\n \n-      if (!processingOnline) {\n-        response\n-          .status(500)\n-          .json({\n-            success: false,\n-            error: `Document processing API is not online. Link ${link} will not be processed automatically.`,\n-          })\n-          .end();\n-        return;\n-      }\n+        const { success, reason } = await Collector.processLink(link);\n+        if (!success) {\n+          response.status(500).json({ success: false, error: reason }).end();\n+          return;\n+        }\n \n-      const { success, reason } = await Collector.processLink(link);\n-      if (!success) {\n-        response.status(500).json({ success: false, error: reason }).end();\n-        return;\n+        Collector.log(\n+          `Link ${link} uploaded processed and successfully. It is now available in documents.`\n+        );\n+        await Telemetry.sendTelemetry(\"link_uploaded\");\n+        await EventLogs.logEvent(\n+          \"link_uploaded\",\n+          { link },\n+          response.locals?.user?.id\n+        );\n+        response.status(200).json({ success: true, error: null });\n+      } catch (e) {\n+        console.log(e.message, e);\n+        response.sendStatus(500).end();\n       }\n-\n-      Collector.log(\n-        `Link ${link} uploaded processed and successfully. It is now available in documents.`\n-      );\n-      await Telemetry.sendTelemetry(\"link_uploaded\");\n-      await EventLogs.logEvent(\n-        \"link_uploaded\",\n-        { link },\n-        response.locals?.user?.id\n-      );\n-      response.status(200).json({ success: true, error: null });\n     }\n   );\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "22d5891cccfc85c0e8fe6a3bc053445d1bce4cd6",
            "date": "2025-01-24T22:17:52Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "2ca22abc9cb1736794d91989b408d95328ea2f79",
            "date": "2025-01-24T21:41:37Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "48dcb22b25612191aba79209fa3d5f08f2454f98",
            "date": "2025-01-24T19:06:59Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "273d116586693d36366022da143c1159d3cd4ffc",
            "date": "2025-01-24T00:43:18Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "57f4f46a39b737f850ab5cf5ac5c24af2344a3b4",
            "date": "2025-01-24T00:35:38Z",
            "author_login": "shatfield4"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-400",
    "description": "An uncontrolled resource consumption vulnerability exists in the `upload-link` endpoint of mintplex-labs/anything-llm. This vulnerability allows attackers to cause a denial of service (DOS) by shutting down the server through sending invalid upload requests. Specifically, the server can be made to shut down by sending an empty body with a 'Content-Length: 0' header or by sending a body with arbitrary content, such as 'asdasdasd', with a 'Content-Length: 9' header. The vulnerability is reproducible by users with at least a 'Manager' role, sending a crafted request to any workspace. This issue indicates that a previous fix was not effective in mitigating the vulnerability.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-06-19T06:15:11.420",
    "last_modified": "2024-11-21T09:47:11.387",
    "fix_date": "2024-05-22T16:34:15Z"
  },
  "references": [
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/e2439c6d4c3cfdacd96cd1b7b92d1f89c3cc8459",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/6c8bdfa1-ec56-4b02-bde9-cfc27470e6ca",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/e2439c6d4c3cfdacd96cd1b7b92d1f89c3cc8459",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/6c8bdfa1-ec56-4b02-bde9-cfc27470e6ca",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.842729",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "anything-llm",
    "owner": "mintplex-labs",
    "created_at": "2023-06-04T02:29:14Z",
    "updated_at": "2025-01-26T07:34:32Z",
    "pushed_at": "2025-01-25T00:53:07Z",
    "size": 43115,
    "stars": 30921,
    "forks": 3104,
    "open_issues": 214,
    "watchers": 30921,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 3082811,
      "CSS": 73785,
      "Dockerfile": 9030,
      "HTML": 3904,
      "Shell": 1382,
      "HCL": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:35:14.537302"
  }
}