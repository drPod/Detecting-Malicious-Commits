{
  "cve_id": "CVE-2024-5213",
  "github_data": {
    "repository": "mintplex-labs/anything-llm",
    "fix_commit": "9df4521113ddb9a3adb5d0e3941e7d494992629c",
    "related_commits": [
      "9df4521113ddb9a3adb5d0e3941e7d494992629c",
      "9df4521113ddb9a3adb5d0e3941e7d494992629c"
    ],
    "patch_url": "https://github.com/mintplex-labs/anything-llm/commit/9df4521113ddb9a3adb5d0e3941e7d494992629c.patch",
    "fix_commit_details": {
      "sha": "9df4521113ddb9a3adb5d0e3941e7d494992629c",
      "commit_date": "2024-05-22T17:31:04Z",
      "author": {
        "login": "timothycarambat",
        "type": "User",
        "stats": {
          "total_commits": 912,
          "average_weekly_commits": 10.604651162790697,
          "total_additions": 194015,
          "total_deletions": 85620,
          "weeks_active": 81
        }
      },
      "commit_message": {
        "title": "Limit return object of `user` when returned in some endpoints",
        "length": 61,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 37,
        "additions": 24,
        "deletions": 13
      },
      "files": [
        {
          "filename": "server/endpoints/admin.js",
          "status": "modified",
          "additions": 1,
          "deletions": 4,
          "patch": "@@ -33,10 +33,7 @@ function adminEndpoints(app) {\n     [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (_request, response) => {\n       try {\n-        const users = (await User.where()).map((user) => {\n-          const { password, ...rest } = user;\n-          return rest;\n-        });\n+        const users = await User.where();\n         response.status(200).json({ users });\n       } catch (e) {\n         console.error(e);"
        },
        {
          "filename": "server/endpoints/api/admin/index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 4,
          "patch": "@@ -73,10 +73,7 @@ function apiAdminEndpoints(app) {\n         return;\n       }\n \n-      const users = (await User.where()).map((user) => {\n-        const { password, ...rest } = user;\n-        return rest;\n-      });\n+      const users = await User.where();\n       response.status(200).json({ users });\n     } catch (e) {\n       console.error(e);"
        },
        {
          "filename": "server/endpoints/system.js",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -110,7 +110,7 @@ function systemEndpoints(app) {\n \n       if (await SystemSettings.isMultiUserMode()) {\n         const { username, password } = reqBody(request);\n-        const existingUser = await User.get({ username: String(username) });\n+        const existingUser = await User._get({ username: String(username) });\n \n         if (!existingUser) {\n           await EventLogs.logEvent(\n@@ -188,7 +188,7 @@ function systemEndpoints(app) {\n           // Return recovery codes to frontend\n           response.status(200).json({\n             valid: true,\n-            user: existingUser,\n+            user: User.filterFields(existingUser),\n             token: makeJWT(\n               { id: existingUser.id, username: existingUser.username },\n               \"30d\"\n@@ -201,7 +201,7 @@ function systemEndpoints(app) {\n \n         response.status(200).json({\n           valid: true,\n-          user: existingUser,\n+          user: User.filterFields(existingUser),\n           token: makeJWT(\n             { id: existingUser.id, username: existingUser.username },\n             \"30d\""
        },
        {
          "filename": "server/models/user.js",
          "status": "modified",
          "additions": 19,
          "deletions": 2,
          "patch": "@@ -19,6 +19,12 @@ const User = {\n         return String(value);\n     }\n   },\n+\n+  filterFields: function (user = {}) {\n+    const { password, ...rest } = user;\n+    return { ...rest };\n+  },\n+\n   create: async function ({ username, password, role = \"default\" }) {\n     const passwordCheck = this.checkPasswordComplexity(password);\n     if (!passwordCheck.checkedOK) {\n@@ -35,7 +41,7 @@ const User = {\n           role,\n         },\n       });\n-      return { user, error: null };\n+      return { user: this.filterFields(user), error: null };\n     } catch (error) {\n       console.error(\"FAILED TO CREATE USER.\", error.message);\n       return { user: null, error: error.message };\n@@ -127,6 +133,17 @@ const User = {\n   },\n \n   get: async function (clause = {}) {\n+    try {\n+      const user = await prisma.users.findFirst({ where: clause });\n+      return user ? this.filterFields({ ...user }) : null;\n+    } catch (error) {\n+      console.error(error.message);\n+      return null;\n+    }\n+  },\n+\n+  // Returns user object with all fields\n+  _get: async function (clause = {}) {\n     try {\n       const user = await prisma.users.findFirst({ where: clause });\n       return user ? { ...user } : null;\n@@ -162,7 +179,7 @@ const User = {\n         where: clause,\n         ...(limit !== null ? { take: limit } : {}),\n       });\n-      return users;\n+      return users.map((usr) => this.filterFields(usr));\n     } catch (error) {\n       console.error(error.message);\n       return [];"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4d5d8d4dec0e62662c8ec46537038353f45e0e66",
            "date": "2025-01-14T16:20:57Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "21af81085aeb049750942ac5f3b84775cb461693",
            "date": "2025-01-13T21:12:03Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "665e8e5bfe431ad93bed6736d0b450592617d042",
            "date": "2025-01-09T23:39:56Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "865f7eea296e544b2eb1ab8c1f322208eaf5eb05",
            "date": "2025-01-09T21:32:54Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "be886f7d61296a30d5b8a095ca8329f58a0c5a0a",
            "date": "2025-01-09T01:21:30Z",
            "author_login": "root-reindeer-flotilla"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-1230",
    "description": "In mintplex-labs/anything-llm versions up to and including 1.5.3, an issue was discovered where the password hash of a user is returned in the response after login (`POST /api/request-token`) and after account creations (`POST /api/admin/users/new`). This exposure occurs because the entire User object, including the bcrypt password hash, is included in the response sent to the frontend. This practice could potentially lead to sensitive information exposure despite the use of bcrypt, a strong hashing algorithm. It is recommended not to expose any clues about passwords to the frontend. ",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-20T03:15:09.067",
    "last_modified": "2024-11-21T09:47:11.893",
    "fix_date": "2024-05-22T17:31:04Z"
  },
  "references": [
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/9df4521113ddb9a3adb5d0e3941e7d494992629c",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/8794fb65-50aa-40e3-b348-a29838dbf63d",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/9df4521113ddb9a3adb5d0e3941e7d494992629c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/8794fb65-50aa-40e3-b348-a29838dbf63d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.846528",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "anything-llm",
    "owner": "mintplex-labs",
    "created_at": "2023-06-04T02:29:14Z",
    "updated_at": "2025-01-14T13:49:57Z",
    "pushed_at": "2025-01-13T21:12:06Z",
    "size": 42916,
    "stars": 30237,
    "forks": 3030,
    "open_issues": 206,
    "watchers": 30237,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 3056909,
      "CSS": 73785,
      "Dockerfile": 9030,
      "HTML": 3904,
      "Shell": 1382,
      "HCL": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:04:33.088245"
  }
}