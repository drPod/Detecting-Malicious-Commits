{
  "cve_id": "CVE-2024-52304",
  "github_data": {
    "repository": "aio-libs/aiohttp",
    "fix_commit": "259edc369075de63e6f3a4eaade058c62af0df71",
    "related_commits": [
      "259edc369075de63e6f3a4eaade058c62af0df71"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "259edc369075de63e6f3a4eaade058c62af0df71",
      "commit_date": "2024-11-13T14:50:36Z",
      "author": {
        "login": "bdraco",
        "type": "User",
        "stats": {
          "total_commits": 875,
          "average_weekly_commits": 1.4780405405405406,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 46
        }
      },
      "commit_message": {
        "title": "[PR #9851/541d86d backport][3.10] Fix incorrect parsing of chunk extensions with the pure Python parser (#9853)",
        "length": 111,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 59,
        "additions": 58,
        "deletions": 1
      },
      "files": [
        {
          "filename": "CHANGES/9851.bugfix.rst",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Fixed incorrect parsing of chunk extensions with the pure Python parser -- by :user:`bdraco`."
        },
        {
          "filename": "aiohttp/http_parser.py",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -845,6 +845,13 @@ def feed_data(\n                         i = chunk.find(CHUNK_EXT, 0, pos)\n                         if i >= 0:\n                             size_b = chunk[:i]  # strip chunk-extensions\n+                            # Verify no LF in the chunk-extension\n+                            if b\"\\n\" in (ext := chunk[i:pos]):\n+                                exc = BadHttpMessage(\n+                                    f\"Unexpected LF in chunk-extension: {ext!r}\"\n+                                )\n+                                set_exception(self.payload, exc)\n+                                raise exc\n                         else:\n                             size_b = chunk[:pos]\n "
        },
        {
          "filename": "tests/test_http_parser.py",
          "status": "modified",
          "additions": 50,
          "deletions": 1,
          "patch": "@@ -13,6 +13,7 @@\n \n import aiohttp\n from aiohttp import http_exceptions, streams\n+from aiohttp.base_protocol import BaseProtocol\n from aiohttp.http_parser import (\n     NO_EXTENSIONS,\n     DeflateBuffer,\n@@ -1477,7 +1478,55 @@ async def test_parse_chunked_payload_split_chunks(response: Any) -> None:\n     assert await reader.read() == b\"firstsecond\"\n \n \n-def test_partial_url(parser: Any) -> None:\n+@pytest.mark.skipif(NO_EXTENSIONS, reason=\"Only tests C parser.\")\n+async def test_parse_chunked_payload_with_lf_in_extensions_c_parser(\n+    loop: asyncio.AbstractEventLoop, protocol: BaseProtocol\n+) -> None:\n+    \"\"\"Test the C-parser with a chunked payload that has a LF in the chunk extensions.\"\"\"\n+    # The C parser will raise a BadHttpMessage from feed_data\n+    parser = HttpRequestParserC(\n+        protocol,\n+        loop,\n+        2**16,\n+        max_line_size=8190,\n+        max_field_size=8190,\n+    )\n+    payload = (\n+        b\"GET / HTTP/1.1\\r\\nHost: localhost:5001\\r\\n\"\n+        b\"Transfer-Encoding: chunked\\r\\n\\r\\n2;\\nxx\\r\\n4c\\r\\n0\\r\\n\\r\\n\"\n+        b\"GET /admin HTTP/1.1\\r\\nHost: localhost:5001\\r\\n\"\n+        b\"Transfer-Encoding: chunked\\r\\n\\r\\n0\\r\\n\\r\\n\"\n+    )\n+    with pytest.raises(http_exceptions.BadHttpMessage, match=\"\\\\\\\\nxx\"):\n+        parser.feed_data(payload)\n+\n+\n+async def test_parse_chunked_payload_with_lf_in_extensions_py_parser(\n+    loop: asyncio.AbstractEventLoop, protocol: BaseProtocol\n+) -> None:\n+    \"\"\"Test the py-parser with a chunked payload that has a LF in the chunk extensions.\"\"\"\n+    # The py parser will not raise the BadHttpMessage directly, but instead\n+    # it will set the exception on the StreamReader.\n+    parser = HttpRequestParserPy(\n+        protocol,\n+        loop,\n+        2**16,\n+        max_line_size=8190,\n+        max_field_size=8190,\n+    )\n+    payload = (\n+        b\"GET / HTTP/1.1\\r\\nHost: localhost:5001\\r\\n\"\n+        b\"Transfer-Encoding: chunked\\r\\n\\r\\n2;\\nxx\\r\\n4c\\r\\n0\\r\\n\\r\\n\"\n+        b\"GET /admin HTTP/1.1\\r\\nHost: localhost:5001\\r\\n\"\n+        b\"Transfer-Encoding: chunked\\r\\n\\r\\n0\\r\\n\\r\\n\"\n+    )\n+    messages, _, _ = parser.feed_data(payload)\n+    reader = messages[0][1]\n+    assert isinstance(reader.exception(), http_exceptions.BadHttpMessage)\n+    assert \"\\\\nxx\" in str(reader.exception())\n+\n+\n+def test_partial_url(parser: HttpRequestParser) -> None:\n     messages, upgrade, tail = parser.feed_data(b\"GET /te\")\n     assert len(messages) == 0\n     messages, upgrade, tail = parser.feed_data(b\"st HTTP/1.1\\r\\n\\r\\n\")"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "24913d732d390139d15a582dafa9e0876c3c42bf",
            "date": "2025-01-24T10:32:27Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "d3dc087b8e9aa665d47045550e5d9f2eddf8f512",
            "date": "2025-01-22T13:53:25Z",
            "author_login": "eshattow"
          },
          {
            "sha": "2532d7b95d010e21c7432b4531a9ee33a721012e",
            "date": "2025-01-22T11:10:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "ec095601914f7a0892cfdee2635c48d341ec492c",
            "date": "2025-01-21T11:10:14Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0c279a4888a87df6f24b302460733fd1ac63a855",
            "date": "2025-01-21T10:59:55Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-444",
    "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Prior to version 3.10.11, the Python parser parses newlines in chunk extensions incorrectly which can lead to request smuggling vulnerabilities under certain conditions. If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or `AIOHTTP_NO_EXTENSIONS` is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections. Version 3.10.11 fixes the issue.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-11-18T21:15:06.500",
    "last_modified": "2024-11-21T14:15:17.813",
    "fix_date": "2024-11-13T14:50:36Z"
  },
  "references": [
    {
      "url": "https://github.com/aio-libs/aiohttp/commit/259edc369075de63e6f3a4eaade058c62af0df71",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/aio-libs/aiohttp/security/advisories/GHSA-8495-4g3g-x7pr",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:31.263609",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "aiohttp",
    "owner": "aio-libs",
    "created_at": "2013-10-01T23:04:01Z",
    "updated_at": "2025-01-25T20:35:41Z",
    "pushed_at": "2025-01-24T10:32:29Z",
    "size": 31764,
    "stars": 15355,
    "forks": 2057,
    "open_issues": 249,
    "watchers": 15355,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "3.8",
      "3.9",
      "3.10",
      "3.11",
      "3.12",
      "master"
    ],
    "languages": {
      "Python": 2241959,
      "Cython": 41302,
      "Makefile": 5839,
      "Gherkin": 1248,
      "Dockerfile": 298,
      "C": 170,
      "Shell": 148
    },
    "commit_activity": {
      "total_commits_last_year": 2306,
      "avg_commits_per_week": 44.34615384615385,
      "days_active_last_year": 223
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:28:47.959138"
  }
}