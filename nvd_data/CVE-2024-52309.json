{
  "cve_id": "CVE-2024-52309",
  "github_data": {
    "repository": "drakkan/sftpgo",
    "fix_commit": "88b1850b5806eee81150873d4e565144b21021fb",
    "related_commits": [
      "88b1850b5806eee81150873d4e565144b21021fb",
      "b524da11e9466d05fe03304713ee1c61bb276ec4"
    ],
    "patch_url": "https://github.com/drakkan/sftpgo/commit/88b1850b5806eee81150873d4e565144b21021fb.patch",
    "fix_commit_details": {
      "sha": "88b1850b5806eee81150873d4e565144b21021fb",
      "commit_date": "2024-11-01T10:37:33Z",
      "author": {
        "login": "drakkan",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "EventManager: allow to define the allowed system commands",
        "length": 113,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 276,
        "additions": 259,
        "deletions": 17
      },
      "files": [
        {
          "filename": "internal/common/common.go",
          "status": "modified",
          "additions": 24,
          "deletions": 1,
          "patch": "@@ -239,6 +239,9 @@ func Initialize(c Configuration, isShared int) error {\n \tif err := c.initializeProxyProtocol(); err != nil {\n \t\treturn err\n \t}\n+\tif err := c.EventManager.validate(); err != nil {\n+\t\treturn err\n+\t}\n \tvfs.SetTempPath(c.TempPath)\n \tdataprovider.SetTempPath(c.TempPath)\n \tvfs.SetAllowSelfConnections(c.AllowSelfConnections)\n@@ -247,6 +250,7 @@ func Initialize(c Configuration, isShared int) error {\n \tvfs.SetResumeMaxSize(c.ResumeMaxSize)\n \tvfs.SetUploadMode(c.UploadMode)\n \tdataprovider.SetAllowSelfConnections(c.AllowSelfConnections)\n+\tdataprovider.EnabledActionCommands = c.EventManager.EnabledCommands\n \ttransfersChecker = getTransfersChecker(isShared)\n \treturn nil\n }\n@@ -512,6 +516,23 @@ type ConnectionTransfer struct {\n \tDLSize        int64  `json:\"-\"`\n }\n \n+// EventManagerConfig defines the configuration for the EventManager\n+type EventManagerConfig struct {\n+\t// EnabledCommands defines the system commands that can be executed via EventManager,\n+\t// an empty list means that any command is allowed to be executed.\n+\t// Commands must be set as an absolute path\n+\tEnabledCommands []string `json:\"enabled_commands\" mapstructure:\"enabled_commands\"`\n+}\n+\n+func (c *EventManagerConfig) validate() error {\n+\tfor _, c := range c.EnabledCommands {\n+\t\tif !filepath.IsAbs(c) {\n+\t\t\treturn fmt.Errorf(\"invalid command %q: it must be an absolute path\", c)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n // MetadataConfig defines how to handle metadata for cloud storage backends\n type MetadataConfig struct {\n \t// If not zero the metadata will be read before downloads and will be\n@@ -621,7 +642,9 @@ type Configuration struct {\n \t// server's local time, otherwise UTC will be used.\n \tTZ string `json:\"tz\" mapstructure:\"tz\"`\n \t// Metadata configuration\n-\tMetadata              MetadataConfig `json:\"metadata\" mapstructure:\"metadata\"`\n+\tMetadata MetadataConfig `json:\"metadata\" mapstructure:\"metadata\"`\n+\t// EventManager configuration\n+\tEventManager          EventManagerConfig `json:\"event_manager\" mapstructure:\"event_manager\"`\n \tidleTimeoutAsDuration time.Duration\n \tidleLoginTimeout      time.Duration\n \tdefender              Defender"
        },
        {
          "filename": "internal/common/common_test.go",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -217,6 +217,33 @@ func TestConnections(t *testing.T) {\n \tConnections.RUnlock()\n }\n \n+func TestEventManagerCommandsInitialization(t *testing.T) {\n+\tconfigCopy := Config\n+\n+\tc := Configuration{\n+\t\tEventManager: EventManagerConfig{\n+\t\t\tEnabledCommands: []string{\"ls\"}, // not an absolute path\n+\t\t},\n+\t}\n+\terr := Initialize(c, 0)\n+\tassert.ErrorContains(t, err, \"invalid command\")\n+\n+\tvar commands []string\n+\tif runtime.GOOS == osWindows {\n+\t\tcommands = []string{\"C:\\\\command\"}\n+\t} else {\n+\t\tcommands = []string{\"/bin/ls\"}\n+\t}\n+\n+\tc.EventManager.EnabledCommands = commands\n+\terr = Initialize(c, 0)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, commands, dataprovider.EnabledActionCommands)\n+\n+\tdataprovider.EnabledActionCommands = configCopy.EventManager.EnabledCommands\n+\tConfig = configCopy\n+}\n+\n func TestInitializationProxyErrors(t *testing.T) {\n \tconfigCopy := Config\n "
        },
        {
          "filename": "internal/common/eventmanager.go",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1484,6 +1484,9 @@ func executeHTTPRuleAction(c dataprovider.EventActionHTTPConfig, params *EventPa\n }\n \n func executeCommandRuleAction(c dataprovider.EventActionCommandConfig, params *EventParams) error {\n+\tif !dataprovider.IsActionCommandAllowed(c.Cmd) {\n+\t\treturn fmt.Errorf(\"command %q is not allowed\", c.Cmd)\n+\t}\n \taddObjectData := false\n \tif params.Object != nil {\n \t\tfor _, k := range c.EnvVars {"
        },
        {
          "filename": "internal/common/protocol_test.go",
          "status": "modified",
          "additions": 142,
          "deletions": 0,
          "patch": "@@ -4208,6 +4208,148 @@ func TestEventRuleStatues(t *testing.T) {\n \trequire.NoError(t, err)\n }\n \n+func TestEventRuleDisabledCommand(t *testing.T) {\n+\tif runtime.GOOS == osWindows {\n+\t\tt.Skip(\"this test is not available on Windows\")\n+\t}\n+\tsmtpCfg := smtp.Config{\n+\t\tHost:          \"127.0.0.1\",\n+\t\tPort:          2525,\n+\t\tFrom:          \"notification@example.com\",\n+\t\tTemplatesPath: \"templates\",\n+\t}\n+\terr := smtpCfg.Initialize(configDir, true)\n+\trequire.NoError(t, err)\n+\n+\tsaveObjectScriptPath := filepath.Join(os.TempDir(), \"provider.sh\")\n+\toutPath := filepath.Join(os.TempDir(), \"provider_out.json\")\n+\terr = os.WriteFile(saveObjectScriptPath, getSaveProviderObjectScriptContent(outPath, 0), 0755)\n+\tassert.NoError(t, err)\n+\n+\ta1 := dataprovider.BaseEventAction{\n+\t\tName: \"a1\",\n+\t\tType: dataprovider.ActionTypeCommand,\n+\t\tOptions: dataprovider.BaseEventActionOptions{\n+\t\t\tCmdConfig: dataprovider.EventActionCommandConfig{\n+\t\t\t\tCmd:     saveObjectScriptPath,\n+\t\t\t\tTimeout: 10,\n+\t\t\t\tEnvVars: []dataprovider.KeyValue{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tKey:   \"SFTPGO_OBJECT_DATA\",\n+\t\t\t\t\t\tValue: \"{{ObjectData}}\",\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\ta2 := dataprovider.BaseEventAction{\n+\t\tName: \"a2\",\n+\t\tType: dataprovider.ActionTypeEmail,\n+\t\tOptions: dataprovider.BaseEventActionOptions{\n+\t\t\tEmailConfig: dataprovider.EventActionEmailConfig{\n+\t\t\t\tRecipients: []string{\"test3@example.com\"},\n+\t\t\t\tSubject:    `New \"{{Event}}\" from \"{{Name}}\"`,\n+\t\t\t\tBody:       \"Object name: {{ObjectName}} object type: {{ObjectType}} Data: {{ObjectData}}\",\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\ta3 := dataprovider.BaseEventAction{\n+\t\tName: \"a3\",\n+\t\tType: dataprovider.ActionTypeEmail,\n+\t\tOptions: dataprovider.BaseEventActionOptions{\n+\t\t\tEmailConfig: dataprovider.EventActionEmailConfig{\n+\t\t\t\tRecipients: []string{\"failure@example.com\"},\n+\t\t\t\tSubject:    `Failed \"{{Event}}\" from \"{{Name}}\"`,\n+\t\t\t\tBody:       \"Object name: {{ObjectName}} object type: {{ObjectType}}, IP: {{IP}}\",\n+\t\t\t},\n+\t\t},\n+\t}\n+\taction1, _, err := httpdtest.AddEventAction(a1, http.StatusCreated)\n+\tassert.NoError(t, err)\n+\taction2, _, err := httpdtest.AddEventAction(a2, http.StatusCreated)\n+\tassert.NoError(t, err)\n+\taction3, _, err := httpdtest.AddEventAction(a3, http.StatusCreated)\n+\tassert.NoError(t, err)\n+\n+\tr := dataprovider.EventRule{\n+\t\tName:    \"rule\",\n+\t\tStatus:  1,\n+\t\tTrigger: dataprovider.EventTriggerProviderEvent,\n+\t\tConditions: dataprovider.EventConditions{\n+\t\t\tProviderEvents: []string{\"add\"},\n+\t\t\tOptions: dataprovider.ConditionOptions{\n+\t\t\t\tProviderObjects: []string{\"folder\"},\n+\t\t\t},\n+\t\t},\n+\t\tActions: []dataprovider.EventAction{\n+\t\t\t{\n+\t\t\t\tBaseEventAction: dataprovider.BaseEventAction{\n+\t\t\t\t\tName: action1.Name,\n+\t\t\t\t},\n+\t\t\t\tOrder: 1,\n+\t\t\t\tOptions: dataprovider.EventActionOptions{\n+\t\t\t\t\tStopOnFailure: true,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tBaseEventAction: dataprovider.BaseEventAction{\n+\t\t\t\t\tName: action2.Name,\n+\t\t\t\t},\n+\t\t\t\tOrder: 2,\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tBaseEventAction: dataprovider.BaseEventAction{\n+\t\t\t\t\tName: action3.Name,\n+\t\t\t\t},\n+\t\t\t\tOrder: 3,\n+\t\t\t\tOptions: dataprovider.EventActionOptions{\n+\t\t\t\t\tIsFailureAction: true,\n+\t\t\t\t\tStopOnFailure:   true,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\trule, _, err := httpdtest.AddEventRule(r, http.StatusCreated)\n+\tassert.NoError(t, err)\n+\t// restrit command execution\n+\tdataprovider.EnabledActionCommands = []string{\"/bin/ls\"}\n+\n+\tlastReceivedEmail.reset()\n+\t// create a folder to trigger the rule\n+\tfolder := vfs.BaseVirtualFolder{\n+\t\tName:       \"ftest failed command\",\n+\t\tMappedPath: filepath.Join(os.TempDir(), \"p\"),\n+\t}\n+\tfolder, _, err = httpdtest.AddFolder(folder, http.StatusCreated)\n+\tassert.NoError(t, err)\n+\n+\tassert.NoFileExists(t, outPath)\n+\tassert.Eventually(t, func() bool {\n+\t\treturn lastReceivedEmail.get().From != \"\"\n+\t}, 3000*time.Millisecond, 100*time.Millisecond)\n+\temail := lastReceivedEmail.get()\n+\tassert.Len(t, email.To, 1)\n+\tassert.True(t, slices.Contains(email.To, \"failure@example.com\"))\n+\tassert.Contains(t, email.Data, `Subject: Failed \"add\" from \"admin\"`)\n+\tassert.Contains(t, email.Data, fmt.Sprintf(\"Object name: %s object type: folder\", folder.Name))\n+\tlastReceivedEmail.reset()\n+\n+\tdataprovider.EnabledActionCommands = nil\n+\n+\t_, err = httpdtest.RemoveFolder(folder, http.StatusOK)\n+\tassert.NoError(t, err)\n+\n+\t_, err = httpdtest.RemoveEventRule(rule, http.StatusOK)\n+\tassert.NoError(t, err)\n+\t_, err = httpdtest.RemoveEventAction(action1, http.StatusOK)\n+\tassert.NoError(t, err)\n+\t_, err = httpdtest.RemoveEventAction(action2, http.StatusOK)\n+\tassert.NoError(t, err)\n+\t_, err = httpdtest.RemoveEventAction(action3, http.StatusOK)\n+\tassert.NoError(t, err)\n+}\n+\n func TestEventRuleProviderEvents(t *testing.T) {\n \tif runtime.GOOS == osWindows {\n \t\tt.Skip(\"this test is not available on Windows\")"
        },
        {
          "filename": "internal/config/config.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -242,6 +242,9 @@ func Init() {\n \t\t\tMetadata: common.MetadataConfig{\n \t\t\t\tRead: 0,\n \t\t\t},\n+\t\t\tEventManager: common.EventManagerConfig{\n+\t\t\t\tEnabledCommands: []string{},\n+\t\t\t},\n \t\t},\n \t\tACME: acme.Configuration{\n \t\t\tEmail:      \"\",\n@@ -2032,6 +2035,7 @@ func setViperDefaults() {\n \tviper.SetDefault(\"common.server_version\", globalConf.Common.ServerVersion)\n \tviper.SetDefault(\"common.tz\", globalConf.Common.TZ)\n \tviper.SetDefault(\"common.metadata.read\", globalConf.Common.Metadata.Read)\n+\tviper.SetDefault(\"common.event_manager.enabled_commands\", globalConf.Common.EventManager.EnabledCommands)\n \tviper.SetDefault(\"acme.email\", globalConf.ACME.Email)\n \tviper.SetDefault(\"acme.key_type\", globalConf.ACME.KeyType)\n \tviper.SetDefault(\"acme.certs_path\", globalConf.ACME.CertsPath)"
        },
        {
          "filename": "internal/dataprovider/eventrule.go",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -58,6 +58,9 @@ var (\n \t\tActionTypeBackup, ActionTypeUserQuotaReset, ActionTypeFolderQuotaReset, ActionTypeTransferQuotaReset,\n \t\tActionTypeDataRetentionCheck, ActionTypePasswordExpirationCheck, ActionTypeUserExpirationCheck,\n \t\tActionTypeUserInactivityCheck, ActionTypeIDPAccountCheck, ActionTypeRotateLogs}\n+\t// EnabledActionCommands defines the system commands that can be executed via EventManager,\n+\t// an empty list means that any command is allowed to be executed.\n+\tEnabledActionCommands []string\n )\n \n func isActionTypeValid(action int) bool {\n@@ -450,6 +453,14 @@ func (c *EventActionHTTPConfig) GetHTTPClient() *http.Client {\n \treturn client\n }\n \n+// IsActionCommandAllowed returns true if the specified command is allowed\n+func IsActionCommandAllowed(cmd string) bool {\n+\tif len(EnabledActionCommands) == 0 {\n+\t\treturn true\n+\t}\n+\treturn slices.Contains(EnabledActionCommands, cmd)\n+}\n+\n // EventActionCommandConfig defines the configuration for a command event target\n type EventActionCommandConfig struct {\n \tCmd     string     `json:\"cmd,omitempty\"`\n@@ -462,6 +473,9 @@ func (c *EventActionCommandConfig) validate() error {\n \tif c.Cmd == \"\" {\n \t\treturn util.NewI18nError(util.NewValidationError(\"command is required\"), util.I18nErrorCommandRequired)\n \t}\n+\tif !IsActionCommandAllowed(c.Cmd) {\n+\t\treturn util.NewValidationError(fmt.Sprintf(\"command %q is not allowed\", c.Cmd))\n+\t}\n \tif !filepath.IsAbs(c.Cmd) {\n \t\treturn util.NewI18nError(\n \t\t\tutil.NewValidationError(\"invalid command, it must be an absolute path\"),"
        },
        {
          "filename": "internal/httpd/httpd_test.go",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -2395,6 +2395,17 @@ func TestEventActionValidation(t *testing.T) {\n \t_, resp, err = httpdtest.AddEventAction(action, http.StatusBadRequest)\n \tassert.NoError(t, err)\n \tassert.Contains(t, string(resp), \"invalid command args\")\n+\taction.Options.CmdConfig.Args = nil\n+\t// restrict commands\n+\tif runtime.GOOS == osWindows {\n+\t\tdataprovider.EnabledActionCommands = []string{\"C:\\\\cmd.exe\"}\n+\t} else {\n+\t\tdataprovider.EnabledActionCommands = []string{\"/bin/sh\"}\n+\t}\n+\t_, resp, err = httpdtest.AddEventAction(action, http.StatusBadRequest)\n+\tassert.NoError(t, err)\n+\tassert.Contains(t, string(resp), \"is not allowed\")\n+\tdataprovider.EnabledActionCommands = nil\n \n \taction.Type = dataprovider.ActionTypeEmail\n \t_, resp, err = httpdtest.AddEventAction(action, http.StatusBadRequest)"
        },
        {
          "filename": "internal/httpd/webadmin.go",
          "status": "modified",
          "additions": 17,
          "deletions": 15,
          "patch": "@@ -297,13 +297,14 @@ type rolePage struct {\n \n type eventActionPage struct {\n \tbasePage\n-\tAction         dataprovider.BaseEventAction\n-\tActionTypes    []dataprovider.EnumMapping\n-\tFsActions      []dataprovider.EnumMapping\n-\tHTTPMethods    []string\n-\tRedactedSecret string\n-\tError          *util.I18nError\n-\tMode           genericPageMode\n+\tAction          dataprovider.BaseEventAction\n+\tActionTypes     []dataprovider.EnumMapping\n+\tFsActions       []dataprovider.EnumMapping\n+\tHTTPMethods     []string\n+\tEnabledCommands []string\n+\tRedactedSecret  string\n+\tError           *util.I18nError\n+\tMode            genericPageMode\n }\n \n type eventRulePage struct {\n@@ -1088,14 +1089,15 @@ func (s *httpdServer) renderEventActionPage(w http.ResponseWriter, r *http.Reque\n \t}\n \n \tdata := eventActionPage{\n-\t\tbasePage:       s.getBasePageData(title, currentURL, w, r),\n-\t\tAction:         action,\n-\t\tActionTypes:    dataprovider.EventActionTypes,\n-\t\tFsActions:      dataprovider.FsActionTypes,\n-\t\tHTTPMethods:    dataprovider.SupportedHTTPActionMethods,\n-\t\tRedactedSecret: redactedSecret,\n-\t\tError:          getI18nError(err),\n-\t\tMode:           mode,\n+\t\tbasePage:        s.getBasePageData(title, currentURL, w, r),\n+\t\tAction:          action,\n+\t\tActionTypes:     dataprovider.EventActionTypes,\n+\t\tFsActions:       dataprovider.FsActionTypes,\n+\t\tHTTPMethods:     dataprovider.SupportedHTTPActionMethods,\n+\t\tEnabledCommands: dataprovider.EnabledActionCommands,\n+\t\tRedactedSecret:  redactedSecret,\n+\t\tError:           getI18nError(err),\n+\t\tMode:            mode,\n \t}\n \trenderAdminTemplate(w, templateEventAction, data)\n }"
        },
        {
          "filename": "sftpgo.json",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -62,7 +62,10 @@\n         \"entries_soft_limit\": 100,\n         \"entries_hard_limit\": 150\n       }\n-    ]\n+    ],\n+    \"event_manager\": {\n+      \"enabled_commands\": []\n+    }\n   },\n   \"acme\": {\n     \"domains\": [],"
        },
        {
          "filename": "templates/webadmin/eventaction.html",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -396,13 +396,26 @@ <h3 data-i18n=\"actions.multipart_body\" class=\"card-title section-title-inner\">Mu\n                 </div>\n             </div>\n \n+            {{ if .EnabledCommands}}\n+            <div class=\"form-group row action-type action-cmd mt-10\">\n+                <label for=\"idCmdPath\" data-i18n=\"actions.types.command\" class=\"col-md-3 col-form-label\">Command</label>\n+                <div class=\"col-md-9\">\n+                    <select id=\"idCmdPath\" name=\"cmd_path\" class=\"form-select\" data-control=\"i18n-select2\" data-hide-search=\"true\">\n+                        {{- range .EnabledCommands}}\n+                        <option value=\"{{.}}\" {{if eq $.Action.Options.CmdConfig.Cmd . }}selected{{end}}>{{.}}</option>\n+                        {{- end}}\n+                    </select>\n+                </div>\n+            </div>\n+            {{- else}}\n             <div class=\"form-group row action-type action-cmd mt-10\">\n                 <label for=\"idCmdPath\" data-i18n=\"actions.types.command\" class=\"col-md-3 col-form-label\">Command</label>\n                 <div class=\"col-md-9\">\n                     <input id=\"idCmdPath\" type=\"text\" class=\"form-control\" name=\"cmd_path\" value=\"{{.Action.Options.CmdConfig.Cmd}}\" aria-describedby=\"idCmdPathHelp\" />\n                     <div id=\"idCmdPathHelp\" class=\"form-text\" data-i18n=\"actions.command_help\"></div>\n                 </div>\n             </div>\n+            {{- end}}\n \n             <div class=\"form-group row action-type action-cmd mt-10\">\n                 <label for=\"idCommandArgs\" data-i18n=\"actions.command_args\" class=\"col-md-3 col-form-label\">Arguments</label>"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 6,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a759789454e470f6f9760939360488c8f8c26ad9",
            "date": "2025-01-11T10:48:07Z",
            "author_login": "drakkan"
          },
          {
            "sha": "da68cf3e9d43ee0d7b56e7044f1bbc553417cc8a",
            "date": "2025-01-11T10:42:57Z",
            "author_login": "drakkan"
          },
          {
            "sha": "5febcdca435c46797084b392cb3ca8e7fc674e47",
            "date": "2025-01-11T10:29:35Z",
            "author_login": "drakkan"
          },
          {
            "sha": "b2e99350492962df182dd695ff1896aae6dd824f",
            "date": "2025-01-11T10:24:35Z",
            "author_login": "drakkan"
          },
          {
            "sha": "1f4cb7077a147aa63cf9485d3e0a4f6aa0ed7caf",
            "date": "2025-01-06T08:25:41Z",
            "author_login": "drakkan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-20",
    "description": "SFTPGo is a full-featured and highly configurable SFTP, HTTP/S, FTP/S and WebDAV server - S3, Google Cloud Storage, Azure Blob. One powerful feature of SFTPGo is the ability to have the EventManager execute scripts or run applications in response to certain events. This feature is very common in all software similar to SFTPGo and is generally unrestricted. However, any SFTPGo administrator with permission to run a script has access to the underlying OS/container with the same permissions as the user running SFTPGo. This is unexpected for some SFTPGo administrators who think that there is a clear distinction between accessing the system shell and accessing the SFTPGo WebAdmin UI. To avoid this confusion, running system commands is disabled by default in 2.6.3, and an allow list has been added so that system administrators configuring SFTPGo must explicitly define which commands are allowed to be configured from the WebAdmin UI.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-11-21T18:15:12.800",
    "last_modified": "2024-11-21T18:15:12.800",
    "fix_date": "2024-11-01T10:37:33Z"
  },
  "references": [
    {
      "url": "https://github.com/drakkan/sftpgo/commit/88b1850b5806eee81150873d4e565144b21021fb",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/drakkan/sftpgo/commit/b524da11e9466d05fe03304713ee1c61bb276ec4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/drakkan/sftpgo/security/advisories/GHSA-49cc-xrjf-9qf7",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:31.277876",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sftpgo",
    "owner": "drakkan",
    "created_at": "2019-07-20T10:18:31Z",
    "updated_at": "2025-01-14T12:39:44Z",
    "pushed_at": "2025-01-13T05:15:22Z",
    "size": 36199,
    "stars": 9795,
    "forks": 761,
    "open_issues": 67,
    "watchers": 9795,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 5935794,
      "HTML": 998235,
      "Shell": 8480,
      "Inno Setup": 5460,
      "Dockerfile": 2719,
      "JavaScript": 2387,
      "PowerShell": 1982,
      "CSS": 202,
      "Makefile": 157
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T16:10:35.564321"
  }
}