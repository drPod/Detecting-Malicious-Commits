{
  "cve_id": "CVE-2024-52507",
  "github_data": {
    "repository": "nextcloud/tables",
    "fix_commit": "13ca45f1b9f70f694aea81b78bc7416ec840c332",
    "related_commits": [
      "13ca45f1b9f70f694aea81b78bc7416ec840c332"
    ],
    "patch_url": "https://github.com/nextcloud/tables/commit/13ca45f1b9f70f694aea81b78bc7416ec840c332.patch",
    "fix_commit_details": {
      "sha": "13ca45f1b9f70f694aea81b78bc7416ec840c332",
      "commit_date": "2024-10-08T11:45:02Z",
      "author": {
        "login": "blizzz",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #1406 from nextcloud/enh/noid/perm-mw-read",
        "length": 158,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 588,
        "additions": 258,
        "deletions": 330
      },
      "files": [
        {
          "filename": "lib/Controller/Api1Controller.php",
          "status": "modified",
          "additions": 128,
          "deletions": 149,
          "patch": "@@ -30,6 +30,9 @@\n use OCP\\AppFramework\\Db\\DoesNotExistException;\n use OCP\\AppFramework\\Db\\MultipleObjectsReturnedException;\n use OCP\\AppFramework\\Http;\n+use OCP\\AppFramework\\Http\\Attribute\\CORS;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n+use OCP\\AppFramework\\Http\\Attribute\\NoCSRFRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\IL10N;\n use OCP\\IRequest;\n@@ -96,14 +99,13 @@ public function __construct(\n \t/**\n \t * Returns all Tables\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @return DataResponse<Http::STATUS_OK, TablesTable[], array{}>|DataResponse<Http::STATUS_INTERNAL_SERVER_ERROR, array{message: string}, array{}>\n \t *\n \t * 200: Tables returned\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function index(): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->tableService->formatTables($this->tableService->findAll($this->userId)));\n@@ -117,10 +119,6 @@ public function index(): DataResponse {\n \t/**\n \t * Create a new table and return it\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param string $title Title of the table\n \t * @param string|null $emoji Emoji for the table\n \t * @param string $template Template to use if wanted\n@@ -129,6 +127,9 @@ public function index(): DataResponse {\n \t *\n \t * 200: Tables returned\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function createTable(string $title, ?string $emoji, string $template = 'custom'): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->tableService->create($title, $template, $emoji)->jsonSerialize());\n@@ -142,17 +143,17 @@ public function createTable(string $title, ?string $emoji, string $template = 'c\n \t/**\n \t * returns table scheme\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @return DataResponse<Http::STATUS_OK, TablesTable, array{'Content-Disposition'?:string,'Content-Type'?:string}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Table returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function showScheme(int $tableId): DataResponse {\n \t\ttry {\n \t\t\t$scheme = $this->tableService->getScheme($tableId);\n@@ -175,17 +176,17 @@ public function showScheme(int $tableId): DataResponse {\n \t/**\n \t * Get a table object\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @return DataResponse<Http::STATUS_OK, TablesTable, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Table returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function getTable(int $tableId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->tableService->find($tableId)->jsonSerialize());\n@@ -207,10 +208,6 @@ public function getTable(int $tableId): DataResponse {\n \t/**\n \t * Update tables properties\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @param string|null $title New table title\n \t * @param string|null $emoji New table emoji\n@@ -221,6 +218,10 @@ public function getTable(int $tableId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function updateTable(int $tableId, ?string $title = null, ?string $emoji = null, ?bool $archived = false): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->tableService->update($tableId, $title, $emoji, null, $archived, $this->userId)->jsonSerialize());\n@@ -242,17 +243,17 @@ public function updateTable(int $tableId, ?string $title = null, ?string $emoji\n \t/**\n \t * Delete a table\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @return DataResponse<Http::STATUS_OK, TablesTable, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Deleted table returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function deleteTable(int $tableId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->tableService->delete($tableId)->jsonSerialize());\n@@ -276,17 +277,17 @@ public function deleteTable(int $tableId): DataResponse {\n \t/**\n \t * Get all views for a table\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @return DataResponse<Http::STATUS_OK, TablesView[], array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Views returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function indexViews(int $tableId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->viewService->formatViews($this->viewService->findAll($this->tableService->find($tableId))));\n@@ -308,10 +309,6 @@ public function indexViews(int $tableId): DataResponse {\n \t/**\n \t * Create a new view for a table\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID that will hold the view\n \t * @param string $title Title for the view\n \t * @param string|null $emoji Emoji for the view\n@@ -322,6 +319,10 @@ public function indexViews(int $tableId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function createView(int $tableId, string $title, ?string $emoji): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->viewService->create($title, $emoji, $this->tableService->find($tableId))->jsonSerialize());\n@@ -339,17 +340,17 @@ public function createView(int $tableId, string $title, ?string $emoji): DataRes\n \t/**\n \t * Get a view object\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $viewId View ID\n \t * @return DataResponse<Http::STATUS_OK, TablesView, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: View returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function getView(int $viewId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->viewService->find($viewId)->jsonSerialize());\n@@ -371,10 +372,6 @@ public function getView(int $viewId): DataResponse {\n \t/**\n \t * Update a view via key-value sets\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $viewId View ID\n \t * @param array{key: 'title'|'emoji'|'description', value: string}|array{key: 'columns', value: int[]}|array{key: 'sort', value: array{columnId: int, mode: 'ASC'|'DESC'}}|array{key: 'filter', value: array{columnId: int, operator: 'begins-with'|'ends-with'|'contains'|'is-equal'|'is-greater-than'|'is-greater-than-or-equal'|'is-lower-than'|'is-lower-than-or-equal'|'is-empty', value: string|int|float}} $data key-value pairs\n \t * @return DataResponse<Http::STATUS_OK, TablesView, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_BAD_REQUEST|Http::STATUS_INTERNAL_SERVER_ERROR, array{message: string}, array{}>\n@@ -384,6 +381,10 @@ public function getView(int $viewId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function updateView(int $viewId, array $data): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->viewService->update($viewId, $data)->jsonSerialize());\n@@ -405,17 +406,17 @@ public function updateView(int $viewId, array $data): DataResponse {\n \t/**\n \t * Delete a view\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $viewId View ID\n \t * @return DataResponse<Http::STATUS_OK, TablesView, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: View deleted\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function deleteView(int $viewId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->viewService->delete($viewId)->jsonSerialize());\n@@ -439,17 +440,16 @@ public function deleteView(int $viewId): DataResponse {\n \t/**\n \t * Get a share object\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $shareId Share ID\n \t * @return DataResponse<Http::STATUS_OK, TablesShare, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Share returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function getShare(int $shareId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->shareService->find($shareId)->jsonSerialize());\n@@ -472,15 +472,14 @@ public function getShare(int $shareId): DataResponse {\n \t * Get all shares for a view\n \t * Will be empty if view does not exist\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $viewId View ID\n \t * @return DataResponse<Http::STATUS_OK, TablesShare[], array{}>|DataResponse<Http::STATUS_INTERNAL_SERVER_ERROR, array{message: string}, array{}>\n \t *\n \t * 200: Shares returned\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function indexViewShares(int $viewId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->shareService->formatShares($this->shareService->findAll('view', $viewId)));\n@@ -495,15 +494,14 @@ public function indexViewShares(int $viewId): DataResponse {\n \t * Get all shares for a table\n \t * Will be empty if table does not exist\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @return DataResponse<Http::STATUS_OK, TablesShare[], array{}>|DataResponse<Http::STATUS_INTERNAL_SERVER_ERROR, array{message: string}, array{}>\n \t *\n \t * 200: Shares returned\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function indexTableShares(int $tableId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->shareService->formatShares($this->shareService->findAll('table', $tableId)));\n@@ -517,10 +515,6 @@ public function indexTableShares(int $tableId): DataResponse {\n \t/**\n \t * Create a new share\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $nodeId Node ID\n \t * @param 'table'|'view'|'context' $nodeType Node type\n \t * @param string $receiver Receiver ID\n@@ -537,6 +531,9 @@ public function indexTableShares(int $tableId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \t#[RequirePermission(permission: Application::PERMISSION_MANAGE)]\n \tpublic function createShare(\n \t\tint $nodeId,\n@@ -570,17 +567,16 @@ public function createShare(\n \t/**\n \t * Delete a share\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $shareId Share ID\n \t * @return DataResponse<Http::STATUS_OK, TablesShare, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: View deleted\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function deleteShare(int $shareId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->shareService->delete($shareId)->jsonSerialize());\n@@ -602,10 +598,6 @@ public function deleteShare(int $shareId): DataResponse {\n \t/**\n \t * Update a share permission\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $shareId Share ID\n \t * @param string $permissionType Permission type that should be changed\n \t * @param bool $permissionValue New permission value\n@@ -615,6 +607,9 @@ public function deleteShare(int $shareId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function updateSharePermissions(int $shareId, string $permissionType, bool $permissionValue): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->shareService->updatePermission($shareId, $permissionType, $permissionValue)->jsonSerialize());\n@@ -636,10 +631,6 @@ public function updateSharePermissions(int $shareId, string $permissionType, boo\n \t/**\n \t * Updates the display mode of a context share\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $shareId Share ID\n \t * @param int $displayMode The new value for the display mode of the nav bar icon. 0: hidden, 1: visible for recipients, 2: visible for all\n \t * @param string $target \"default\" to set the default, \"self\" to set an override for the authenticated user\n@@ -653,6 +644,9 @@ public function updateSharePermissions(int $shareId, string $permissionType, boo\n \t * @psalm-param int<0, 2> $displayMode\n \t * @psalm-param (\"default\"|\"self\") $target\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function updateShareDisplayMode(int $shareId, int $displayMode, string $target = 'default'): DataResponse {\n \t\tif ($target === 'default') {\n \t\t\t$userId = '';\n@@ -688,10 +682,6 @@ public function updateShareDisplayMode(int $shareId, int $displayMode, string $t\n \t * Get all columns for a table or a underlying view\n \t * Return an empty array if no columns were found\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @param int|null $viewId View ID\n \t * @return DataResponse<Http::STATUS_OK, TablesColumn[], array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n@@ -700,6 +690,9 @@ public function updateShareDisplayMode(int $shareId, int $displayMode, string $t\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function indexTableColumns(int $tableId, ?int $viewId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->columnService->formatColumns($this->columnService->findAllByTable($tableId, $viewId)));\n@@ -718,17 +711,17 @@ public function indexTableColumns(int $tableId, ?int $viewId): DataResponse {\n \t * Get all columns for a view\n \t * Return an empty array if no columns were found\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $viewId View ID\n \t * @return DataResponse<Http::STATUS_OK, TablesColumn[], array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: View deleted\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function indexViewColumns(int $viewId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->columnService->formatColumns($this->columnService->findAllByView($viewId)));\n@@ -750,10 +743,6 @@ public function indexViewColumns(int $viewId): DataResponse {\n \t/**\n \t * Create a column\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int|null $tableId Table ID\n \t * @param int|null $viewId View ID\n \t * @param string $title Title\n@@ -786,6 +775,9 @@ public function indexViewColumns(int $viewId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function createColumn(\n \t\t?int $tableId,\n \t\t?int $viewId,\n@@ -867,10 +859,6 @@ public function createColumn(\n \t/**\n \t * Update a column\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $columnId Column ID that will be updated\n \t * @param string|null $title Title\n \t * @param string|null $subtype Column sub type\n@@ -898,6 +886,9 @@ public function createColumn(\n \t *\n \t * 200: Updated column\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function updateColumn(\n \t\tint $columnId,\n \t\t?string $title,\n@@ -968,17 +959,16 @@ public function updateColumn(\n \t/**\n \t * Returns a column object\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $columnId Wanted Column ID\n \t * @return DataResponse<Http::STATUS_OK, TablesColumn, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Column returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function getColumn(int $columnId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->columnService->find($columnId)->jsonSerialize());\n@@ -1000,17 +990,16 @@ public function getColumn(int $columnId): DataResponse {\n \t/**\n \t * Delete a column\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $columnId Wanted Column ID\n \t * @return DataResponse<Http::STATUS_OK, TablesColumn, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Deleted column returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function deleteColumn(int $columnId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->columnService->delete($columnId)->jsonSerialize());\n@@ -1032,10 +1021,6 @@ public function deleteColumn(int $columnId): DataResponse {\n \t/**\n \t * List all rows values for a table, first row are the column titles\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @param int|null $limit Limit\n \t * @param int|null $offset Offset\n@@ -1045,6 +1030,10 @@ public function deleteColumn(int $columnId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function indexTableRowsSimple(int $tableId, ?int $limit, ?int $offset): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->v1Api->getData($tableId, $limit, $offset, $this->userId));\n@@ -1062,10 +1051,6 @@ public function indexTableRowsSimple(int $tableId, ?int $limit, ?int $offset): D\n \t/**\n \t * List all rows for a table\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @param int|null $limit Limit\n \t * @param int|null $offset Offset\n@@ -1075,6 +1060,10 @@ public function indexTableRowsSimple(int $tableId, ?int $limit, ?int $offset): D\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function indexTableRows(int $tableId, ?int $limit, ?int $offset): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->rowService->formatRows($this->rowService->findAllByTable($tableId, $this->userId, $limit, $offset)));\n@@ -1092,10 +1081,6 @@ public function indexTableRows(int $tableId, ?int $limit, ?int $offset): DataRes\n \t/**\n \t * List all rows for a view\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $viewId View ID\n \t * @param int|null $limit Limit\n \t * @param int|null $offset Offset\n@@ -1105,6 +1090,10 @@ public function indexTableRows(int $tableId, ?int $limit, ?int $offset): DataRes\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function indexViewRows(int $viewId, ?int $limit, ?int $offset): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->rowService->formatRows($this->rowService->findAllByView($viewId, $this->userId, $limit, $offset)));\n@@ -1122,17 +1111,16 @@ public function indexViewRows(int $viewId, ?int $limit, ?int $offset): DataRespo\n \t/**\n \t * Create a row within a view\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $viewId View ID\n \t * @param string|array<string, mixed> $data Data as key - value store\n \t * @return DataResponse<Http::STATUS_OK, TablesRow, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR, array{message: string}, array{}>\n \t *\n \t * 200: Row returned\n \t * 403: No permissions\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function createRowInView(int $viewId, $data): DataResponse {\n \t\tif(is_string($data)) {\n@@ -1168,10 +1156,6 @@ public function createRowInView(int $viewId, $data): DataResponse {\n \t/**\n \t * Create a row within a table\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @param string|array<string, mixed> $data Data as key - value store\n \t * @return DataResponse<Http::STATUS_OK, TablesRow, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR, array{message: string}, array{}>\n@@ -1180,6 +1164,9 @@ public function createRowInView(int $viewId, $data): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function createRowInTable(int $tableId, $data): DataResponse {\n \t\tif(is_string($data)) {\n@@ -1215,17 +1202,16 @@ public function createRowInTable(int $tableId, $data): DataResponse {\n \t/**\n \t * Get a row\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $rowId Row ID\n \t * @return DataResponse<Http::STATUS_OK, TablesRow, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Row returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function getRow(int $rowId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->rowService->find($rowId)->jsonSerialize());\n@@ -1247,10 +1233,6 @@ public function getRow(int $rowId): DataResponse {\n \t/**\n \t * Update a row\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $rowId Row ID\n \t * @param int|null $viewId View ID\n \t * @param string|array<string, mixed> $data Data as key - value store\n@@ -1261,6 +1243,9 @@ public function getRow(int $rowId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function updateRow(int $rowId, ?int $viewId, $data): DataResponse {\n \t\tif(is_string($data)) {\n \t\t\t$data = json_decode($data, true);\n@@ -1290,10 +1275,6 @@ public function updateRow(int $rowId, ?int $viewId, $data): DataResponse {\n \t/**\n \t * Delete a row\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $rowId Row ID\n \t *\n \t * @return DataResponse<Http::STATUS_OK, TablesRow, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n@@ -1302,6 +1283,9 @@ public function updateRow(int $rowId, ?int $viewId, $data): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function deleteRow(int $rowId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->rowService->delete($rowId, null, $this->userId)->jsonSerialize());\n@@ -1323,10 +1307,6 @@ public function deleteRow(int $rowId): DataResponse {\n \t/**\n \t * Delete a row within a view\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $rowId Row ID\n \t * @param int $viewId View ID\n \t * @return DataResponse<Http::STATUS_OK, TablesRow, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n@@ -1335,6 +1315,9 @@ public function deleteRow(int $rowId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \tpublic function deleteRowByView(int $rowId, int $viewId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->rowService->delete($rowId, $viewId, $this->userId)->jsonSerialize());\n@@ -1356,9 +1339,6 @@ public function deleteRowByView(int $rowId, int $viewId): DataResponse {\n \t/**\n \t * Import from file in to a table\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n \t * @param int $tableId Table ID\n \t * @param string $path Path to file\n \t * @param bool $createMissingColumns Create missing columns\n@@ -1368,6 +1348,9 @@ public function deleteRowByView(int $rowId, int $viewId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function importInTable(int $tableId, string $path, bool $createMissingColumns = true): DataResponse {\n \t\ttry {\n@@ -1391,9 +1374,6 @@ public function importInTable(int $tableId, string $path, bool $createMissingCol\n \t/**\n \t * Import from file in to a table\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n \t * @param int $viewId View ID\n \t * @param string $path Path to file\n \t * @param bool $createMissingColumns Create missing columns\n@@ -1403,6 +1383,9 @@ public function importInTable(int $tableId, string $path, bool $createMissingCol\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function importInView(int $viewId, string $path, bool $createMissingColumns = true): DataResponse {\n \t\ttry {\n@@ -1428,10 +1411,6 @@ public function importInView(int $viewId, string $path, bool $createMissingColum\n \t/**\n \t * Create a share for a table\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @param string $receiver Receiver ID\n \t * @param 'user'|'group' $receiverType Receiver type\n@@ -1446,6 +1425,9 @@ public function importInView(int $viewId, string $path, bool $createMissingColum\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n \t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function createTableShare(int $tableId, string $receiver, string $receiverType, bool $permissionRead, bool $permissionCreate, bool $permissionUpdate, bool $permissionDelete, bool $permissionManage): DataResponse {\n \t\ttry {\n@@ -1468,10 +1450,6 @@ public function createTableShare(int $tableId, string $receiver, string $receive\n \t/**\n \t * Create a new column for a table\n \t *\n-\t * @NoAdminRequired\n-\t * @CORS\n-\t * @NoCSRFRequired\n-\t *\n \t * @param int $tableId Table ID\n \t * @param string $title Title\n \t * @param 'text'|'number'|'datetime'|'select'|'usergroup' $type Column main type\n@@ -1503,6 +1481,10 @@ public function createTableShare(int $tableId, string $receiver, string $receive\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[CORS]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function createTableColumn(\n \t\tint $tableId,\n \t\tstring $title,\n@@ -1579,8 +1561,5 @@ public function createTableColumn(\n \t\t\t$message = ['message' => $e->getMessage()];\n \t\t\treturn new DataResponse($message, Http::STATUS_NOT_FOUND);\n \t\t}\n-\n-\n-\n \t}\n }"
        },
        {
          "filename": "lib/Controller/ApiColumnsController.php",
          "status": "modified",
          "additions": 16,
          "deletions": 14,
          "patch": "@@ -6,13 +6,16 @@\n  */\n namespace OCA\\Tables\\Controller;\n \n+use OCA\\Tables\\AppInfo\\Application;\n use OCA\\Tables\\Dto\\Column as ColumnDto;\n use OCA\\Tables\\Errors\\InternalError;\n use OCA\\Tables\\Errors\\NotFoundError;\n use OCA\\Tables\\Errors\\PermissionError;\n+use OCA\\Tables\\Middleware\\Attribute\\RequirePermission;\n use OCA\\Tables\\ResponseDefinitions;\n use OCA\\Tables\\Service\\ColumnService;\n use OCP\\AppFramework\\Http;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\IL10N;\n use OCP\\IRequest;\n@@ -39,8 +42,6 @@ public function __construct(\n \t *\n \t * Return an empty array if no columns were found\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $nodeId Node ID\n \t * @param 'table'|'view' $nodeType Node type\n \t * @return DataResponse<Http::STATUS_OK, TablesColumn[], array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n@@ -49,6 +50,8 @@ public function __construct(\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ)]\n \tpublic function index(int $nodeId, string $nodeType): DataResponse {\n \t\ttry {\n \t\t\tif($nodeType === 'table') {\n@@ -71,15 +74,14 @@ public function index(int $nodeId, string $nodeType): DataResponse {\n \t/**\n \t * [api v2] Get a column object\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $id Column ID\n \t * @return DataResponse<Http::STATUS_OK, TablesColumn, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Column returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n \tpublic function show(int $id): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->service->find($id)->jsonSerialize());\n@@ -97,8 +99,6 @@ public function show(int $id): DataResponse {\n \t *\n \t * Specify a subtype to use any special numbered column\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $baseNodeId Context of the column creation\n \t * @param string $title Title\n \t * @param boolean $mandatory Is mandatory\n@@ -121,6 +121,8 @@ public function show(int $id): DataResponse {\n \t * @throws NotFoundError\n \t * @throws PermissionError\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, typeParam: 'baseNodeType', idParam: 'baseNodeId')]\n \tpublic function createNumberColumn(int $baseNodeId, string $title, ?float $numberDefault, ?int $numberDecimals, ?string $numberPrefix, ?string $numberSuffix, ?float $numberMin, ?float $numberMax, ?string $subtype = null, ?string $description = null, ?array $selectedViewIds = [], bool $mandatory = false, string $baseNodeType = 'table'): DataResponse {\n \t\t$tableId = $baseNodeType === 'table' ? $baseNodeId : null;\n \t\t$viewId = $baseNodeType === 'view' ? $baseNodeId : null;\n@@ -151,8 +153,6 @@ public function createNumberColumn(int $baseNodeId, string $title, ?float $numbe\n \t *\n \t * Specify a subtype to use any special text column\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $baseNodeId Context of the column creation\n \t * @param string $title Title\n \t * @param string|null $textDefault Default\n@@ -172,6 +172,8 @@ public function createNumberColumn(int $baseNodeId, string $title, ?float $numbe\n \t * @throws NotFoundError\n \t * @throws PermissionError\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, typeParam: 'baseNodeType', idParam: 'baseNodeId')]\n \tpublic function createTextColumn(int $baseNodeId, string $title, ?string $textDefault, ?string $textAllowedPattern, ?int $textMaxLength, ?string $subtype = null, ?string $description = null, ?array $selectedViewIds = [], bool $mandatory = false, string $baseNodeType = 'table'): DataResponse {\n \t\t$tableId = $baseNodeType === 'table' ? $baseNodeId : null;\n \t\t$viewId = $baseNodeType === 'view' ? $baseNodeId : null;\n@@ -199,8 +201,6 @@ public function createTextColumn(int $baseNodeId, string $title, ?string $textDe\n \t *\n \t * Specify a subtype to use any special selection column\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $baseNodeId Context of the column creation\n \t * @param string $title Title\n \t * @param string $selectionOptions Json array{id: int, label: string} with options that can be selected, eg [{\"id\": 1, \"label\": \"first\"},{\"id\": 2, \"label\": \"second\"}]\n@@ -219,6 +219,8 @@ public function createTextColumn(int $baseNodeId, string $title, ?string $textDe\n \t * @throws NotFoundError\n \t * @throws PermissionError\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, typeParam: 'baseNodeType', idParam: 'baseNodeId')]\n \tpublic function createSelectionColumn(int $baseNodeId, string $title, string $selectionOptions, ?string $selectionDefault, ?string $subtype = null, ?string $description = null, ?array $selectedViewIds = [], bool $mandatory = false, string $baseNodeType = 'table'): DataResponse {\n \t\t$tableId = $baseNodeType === 'table' ? $baseNodeId : null;\n \t\t$viewId = $baseNodeType === 'view' ? $baseNodeId : null;\n@@ -245,8 +247,6 @@ public function createSelectionColumn(int $baseNodeId, string $title, string $se\n \t *\n \t * Specify a subtype to use any special datetime column\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $baseNodeId Context of the column creation\n \t * @param string $title Title\n \t * @param 'today'|'now'|null $datetimeDefault For a subtype 'date' you can set 'today'. For a main type or subtype 'time' you can set to 'now'.\n@@ -264,6 +264,8 @@ public function createSelectionColumn(int $baseNodeId, string $title, string $se\n \t * @throws NotFoundError\n \t * @throws PermissionError\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, typeParam: 'baseNodeType', idParam: 'baseNodeId')]\n \tpublic function createDatetimeColumn(int $baseNodeId, string $title, ?string $datetimeDefault, ?string $subtype = null, ?string $description = null, ?array $selectedViewIds = [], bool $mandatory = false, string $baseNodeType = 'table'): DataResponse {\n \t\t$tableId = $baseNodeType === 'table' ? $baseNodeId : null;\n \t\t$viewId = $baseNodeType === 'view' ? $baseNodeId : null;\n@@ -287,8 +289,6 @@ public function createDatetimeColumn(int $baseNodeId, string $title, ?string $da\n \t/**\n \t * [api v2] Create new usergroup column\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $baseNodeId Context of the column creation\n \t * @param string $title Title\n \t * @param string|null $usergroupDefault Json array{id: string, type: int}, eg [{\"id\": \"admin\", \"type\": 0}, {\"id\": \"user1\", \"type\": 0}]\n@@ -309,6 +309,8 @@ public function createDatetimeColumn(int $baseNodeId, string $title, ?string $da\n \t * @throws NotFoundError\n \t * @throws PermissionError\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, typeParam: 'baseNodeType', idParam: 'baseNodeId')]\n \tpublic function createUsergroupColumn(int $baseNodeId, string $title, ?string $usergroupDefault, bool $usergroupMultipleItems = null, bool $usergroupSelectUsers = null, bool $usergroupSelectGroups = null, bool $showUserStatus = null, string $description = null, ?array $selectedViewIds = [], bool $mandatory = false, string $baseNodeType = 'table'): DataResponse {\n \t\t$tableId = $baseNodeType === 'table' ? $baseNodeId : null;\n \t\t$viewId = $baseNodeType === 'view' ? $baseNodeId : null;"
        },
        {
          "filename": "lib/Controller/ApiFavoriteController.php",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -8,12 +8,15 @@\n namespace OCA\\Tables\\Controller;\n \n use Exception;\n+use OCA\\Tables\\AppInfo\\Application;\n use OCA\\Tables\\Errors\\InternalError;\n use OCA\\Tables\\Errors\\NotFoundError;\n use OCA\\Tables\\Errors\\PermissionError;\n+use OCA\\Tables\\Middleware\\Attribute\\RequirePermission;\n use OCA\\Tables\\ResponseDefinitions;\n use OCA\\Tables\\Service\\FavoritesService;\n use OCP\\AppFramework\\Http;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\DB\\Exception as DBException;\n use OCP\\IL10N;\n@@ -39,8 +42,6 @@ public function __construct(\n \t/**\n \t * [api v2] Add a node (table or view) to user favorites\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $nodeType any Application::NODE_TYPE_* constant\n \t * @param int $nodeId identifier of the node\n \t * @return DataResponse<Http::STATUS_OK, array{}, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n@@ -49,6 +50,8 @@ public function __construct(\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ)]\n \tpublic function create(int $nodeType, int $nodeId): DataResponse {\n \t\ttry {\n \t\t\t$this->service->addFavorite($nodeType, $nodeId);\n@@ -66,8 +69,6 @@ public function create(int $nodeType, int $nodeId): DataResponse {\n \t/**\n \t * [api v2] Remove a node (table or view) to from favorites\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $nodeType any Application::NODE_TYPE_* constant\n \t * @param int $nodeId identifier of the node\n \t * @return DataResponse<Http::STATUS_OK, array{}, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n@@ -76,6 +77,8 @@ public function create(int $nodeType, int $nodeId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ)]\n \tpublic function destroy(int $nodeType, int $nodeId): DataResponse {\n \t\ttry {\n \t\t\t$this->service->removeFavorite($nodeType, $nodeId);"
        },
        {
          "filename": "lib/Controller/ApiGeneralController.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -15,6 +15,7 @@\n use OCA\\Tables\\Service\\TableService;\n use OCA\\Tables\\Service\\ViewService;\n use OCP\\AppFramework\\Http;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\IL10N;\n use OCP\\IRequest;\n@@ -46,12 +47,11 @@ public function __construct(\n \t *\n \t * Tables and views incl. shares\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @return DataResponse<Http::STATUS_OK, TablesIndex, array{}>|DataResponse<Http::STATUS_INTERNAL_SERVER_ERROR, array{message: string}, array{}>\n \t *\n \t * 200: Index returned\n \t */\n+\t#[NoAdminRequired]\n \tpublic function index(): DataResponse {\n \t\ttry {\n \t\t\t$tables = $this->tableService->formatTables($this->tableService->findAll($this->userId));"
        },
        {
          "filename": "lib/Controller/ApiTablesController.php",
          "status": "modified",
          "additions": 15,
          "deletions": 16,
          "patch": "@@ -8,16 +8,19 @@\n namespace OCA\\Tables\\Controller;\n \n use Exception;\n+use OCA\\Tables\\AppInfo\\Application;\n use OCA\\Tables\\Dto\\Column as ColumnDto;\n use OCA\\Tables\\Errors\\InternalError;\n use OCA\\Tables\\Errors\\NotFoundError;\n use OCA\\Tables\\Errors\\PermissionError;\n+use OCA\\Tables\\Middleware\\Attribute\\RequirePermission;\n use OCA\\Tables\\ResponseDefinitions;\n use OCA\\Tables\\Service\\ColumnService;\n use OCA\\Tables\\Service\\TableService;\n use OCA\\Tables\\Service\\ViewService;\n use OCP\\App\\IAppManager;\n use OCP\\AppFramework\\Http;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\IDBConnection;\n use OCP\\IL10N;\n@@ -57,12 +60,11 @@ public function __construct(\n \t/**\n \t * [api v2] Returns all Tables\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @return DataResponse<Http::STATUS_OK, TablesTable[], array{}>|DataResponse<Http::STATUS_INTERNAL_SERVER_ERROR, array{message: string}, array{}>\n \t *\n \t * 200: Tables returned\n \t */\n+\t#[NoAdminRequired]\n \tpublic function index(): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->service->formatTables($this->service->findAll($this->userId)));\n@@ -74,15 +76,15 @@ public function index(): DataResponse {\n \t/**\n \t * [api v2] Get a table object\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $id Table ID\n \t * @return DataResponse<Http::STATUS_OK, TablesTable, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Table returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'id')]\n \tpublic function show(int $id): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->service->find($id)->jsonSerialize());\n@@ -98,15 +100,15 @@ public function show(int $id): DataResponse {\n \t/**\n \t * [api v2] Get a table Scheme\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $id Table ID\n \t * @return DataResponse<Http::STATUS_OK, TablesTable, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Scheme returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'id')]\n \tpublic function showScheme(int $id): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->service->getScheme($id)->jsonSerialize());\n@@ -120,8 +122,6 @@ public function showScheme(int $id): DataResponse {\n \t}\n \n \t/**\n-\t * @NoAdminRequired\n-\t *\n \t * creates table from scheme\n \t *\n \t * @param string $title title of new table\n@@ -133,6 +133,7 @@ public function showScheme(int $id): DataResponse {\n \t *\n \t * 200: Tables returned\n \t */\n+\t#[NoAdminRequired]\n \tpublic function createFromScheme(string $title, string $emoji, string $description, array $columns, array $views): DataResponse {\n \t\ttry {\n \t\t\t$this->db->beginTransaction();\n@@ -191,8 +192,6 @@ public function createFromScheme(string $title, string $emoji, string $descripti\n \t/**\n \t * [api v2] Create a new table and return it\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param string $title Title of the table\n \t * @param string|null $emoji Emoji for the table\n \t * @param string|null $description Description for the table\n@@ -202,6 +201,7 @@ public function createFromScheme(string $title, string $emoji, string $descripti\n \t *\n \t * 200: Tables returned\n \t */\n+\t#[NoAdminRequired]\n \tpublic function create(string $title, ?string $emoji, ?string $description, string $template = 'custom'): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->service->create($title, $template, $emoji, $description)->jsonSerialize());\n@@ -213,8 +213,6 @@ public function create(string $title, ?string $emoji, ?string $description, stri\n \t/**\n \t * [api v2] Update tables properties\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $id Table ID\n \t * @param string|null $title New table title\n \t * @param string|null $emoji New table emoji\n@@ -226,6 +224,8 @@ public function create(string $title, ?string $emoji, ?string $description, stri\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_TABLE, idParam: 'id')]\n \tpublic function update(int $id, ?string $title = null, ?string $emoji = null, ?string $description = null, ?bool $archived = null): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->service->update($id, $title, $emoji, $description, $archived, $this->userId)->jsonSerialize());\n@@ -241,15 +241,15 @@ public function update(int $id, ?string $title = null, ?string $emoji = null, ?s\n \t/**\n \t * [api v2] Delete a table\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $id Table ID\n \t * @return DataResponse<Http::STATUS_OK, TablesTable, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND, array{message: string}, array{}>\n \t *\n \t * 200: Deleted table returned\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_TABLE, idParam: 'id')]\n \tpublic function destroy(int $id): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->service->delete($id)->jsonSerialize());\n@@ -267,8 +267,6 @@ public function destroy(int $id): DataResponse {\n \t *\n \t * Transfer table from one user to another\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param int $id Table ID\n \t * @param string $newOwnerUserId New user ID\n \t *\n@@ -278,6 +276,7 @@ public function destroy(int $id): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n \tpublic function transfer(int $id, string $newOwnerUserId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->service->setOwner($id, $newOwnerUserId)->jsonSerialize());"
        },
        {
          "filename": "lib/Controller/ColumnController.php",
          "status": "modified",
          "additions": 10,
          "deletions": 21,
          "patch": "@@ -9,8 +9,10 @@\n \n use OCA\\Tables\\AppInfo\\Application;\n use OCA\\Tables\\Dto\\Column as ColumnDto;\n+use OCA\\Tables\\Middleware\\Attribute\\RequirePermission;\n use OCA\\Tables\\Service\\ColumnService;\n use OCP\\AppFramework\\Controller;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\IRequest;\n use Psr\\Log\\LoggerInterface;\n@@ -35,45 +37,36 @@ public function __construct(\n \t\t$this->userId = $userId;\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function index(int $tableId, ?int $viewId): DataResponse {\n \t\treturn $this->handleError(function () use ($tableId, $viewId) {\n \t\t\treturn $this->service->findAllByTable($tableId, $viewId);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function indexTableByView(int $tableId, ?int $viewId): DataResponse {\n \t\treturn $this->handleError(function () use ($tableId, $viewId) {\n \t\t\treturn $this->service->findAllByTable($tableId, $viewId);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function indexView(int $viewId): DataResponse {\n \t\treturn $this->handleError(function () use ($viewId) {\n \t\t\treturn $this->service->findAllByView($viewId);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function show(int $id): DataResponse {\n \t\treturn $this->handleError(function () use ($id) {\n \t\t\treturn $this->service->find($id);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function create(\n \t\t?int $tableId,\n \t\t?int $viewId,\n@@ -172,9 +165,7 @@ public function create(\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function update(\n \t\tint $id,\n \t\t?int $tableId,\n@@ -269,9 +260,7 @@ public function update(\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function destroy(int $id): DataResponse {\n \t\treturn $this->handleError(function () use ($id) {\n \t\t\treturn $this->service->delete($id, false, $this->userId);"
        },
        {
          "filename": "lib/Controller/ContextController.php",
          "status": "modified",
          "additions": 8,
          "deletions": 9,
          "patch": "@@ -18,6 +18,7 @@\n use OCP\\AppFramework\\Db\\DoesNotExistException;\n use OCP\\AppFramework\\Db\\MultipleObjectsReturnedException;\n use OCP\\AppFramework\\Http;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\DB\\Exception;\n use OCP\\IL10N;\n@@ -51,9 +52,8 @@ public function __construct(\n \t * @return DataResponse<Http::STATUS_OK, TablesContext[], array{}>|DataResponse<Http::STATUS_INTERNAL_SERVER_ERROR, array{message: string}, array{}>\n \t *\n \t * 200: reporting in available contexts\n-\t *\n-\t * @NoAdminRequired\n \t */\n+\t#[NoAdminRequired]\n \tpublic function index(): DataResponse {\n \t\ttry {\n \t\t\t$contexts = $this->contextService->findAll($this->userId);\n@@ -72,8 +72,8 @@ public function index(): DataResponse {\n \t * 200: returning the full context information\n \t * 404: context not found or not available anymore\n \t *\n-\t * @NoAdminRequired\n \t */\n+\t#[NoAdminRequired]\n \tpublic function show(int $contextId): DataResponse {\n \t\ttry {\n \t\t\t$context = $this->contextService->findById($contextId, $this->userId);\n@@ -88,8 +88,6 @@ public function show(int $contextId): DataResponse {\n \t/**\n \t * [api v2] Create a new context and return it\n \t *\n-\t * @NoAdminRequired\n-\t *\n \t * @param string $name Name of the context\n \t * @param string $iconName Material design icon name of the context\n \t * @param string $description Descriptive text of the context\n@@ -101,6 +99,7 @@ public function show(int $contextId): DataResponse {\n \t * 400: invalid parameters were supplied\n \t * 403: lacking permissions on a resource\n \t */\n+\t#[NoAdminRequired]\n \tpublic function create(string $name, string $iconName, string $description = '', array $nodes = []): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->contextService->create(\n@@ -135,9 +134,9 @@ public function create(string $name, string $iconName, string $description = '',\n \t * 403: No permissions\n \t * 404: Not found\n \t *\n-\t * @NoAdminRequired\n \t * @CanManageContext\n \t */\n+\t#[NoAdminRequired]\n \tpublic function update(int $contextId, ?string $name, ?string $iconName, ?string $description, ?array $nodes): DataResponse {\n \t\ttry {\n \t\t\t$nodes = $nodes !== null ? $this->sanitizeInputNodes($nodes) : null;\n@@ -195,9 +194,9 @@ protected function sanitizeInputNodes(array $nodes): array {\n \t * 403: No permissions\n \t * 404: Not found\n \t *\n-\t * @NoAdminRequired\n \t * @CanManageContext\n \t */\n+\t#[NoAdminRequired]\n \tpublic function destroy(int $contextId): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->contextService->delete($contextId, $this->userId)->jsonSerialize());\n@@ -222,12 +221,12 @@ public function destroy(int $contextId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t *\n-\t * @NoAdminRequired\n \t * @CanManageContext\n \t *\n \t * @psalm-param int<0, max> $contextId\n \t * @psalm-param int<0, 0> $newOwnerType\n \t */\n+\t#[NoAdminRequired]\n \tpublic function transfer(int $contextId, string $newOwnerId, int $newOwnerType = 0): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->contextService->transfer($contextId, $newOwnerId, $newOwnerType)->jsonSerialize());\n@@ -249,14 +248,14 @@ public function transfer(int $contextId, string $newOwnerId, int $newOwnerType =\n \t *\n \t * @return DataResponse<Http::STATUS_OK, TablesContext, array{}>|DataResponse<Http::STATUS_INTERNAL_SERVER_ERROR|Http::STATUS_NOT_FOUND|Http::STATUS_BAD_REQUEST, array{message: string}, array{}>\n \t *\n-\t * @NoAdminRequired\n \t * @CanManageContext\n \t *\n \t * 200: content updated successfully\n \t * 400: Invalid request\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[NoAdminRequired]\n \tpublic function updateContentOrder(int $contextId, int $pageId, array $content): DataResponse {\n \t\ttry {\n \t\t\t$context = $this->contextService->findById($contextId, $this->userId);"
        },
        {
          "filename": "lib/Controller/ImportController.php",
          "status": "modified",
          "additions": 13,
          "deletions": 24,
          "patch": "@@ -13,6 +13,7 @@\n use OCA\\Tables\\UploadException;\n use OCP\\AppFramework\\Controller;\n use OCP\\AppFramework\\Http;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\Files\\NotPermittedException;\n use OCP\\IL10N;\n@@ -54,18 +55,15 @@ public function __construct(\n \t\t$this->l10n = $l10n;\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function previewImportTable(int $tableId, String $path): DataResponse {\n \t\treturn $this->handleError(function () use ($tableId, $path) {\n \t\t\treturn $this->service->previewImport($tableId, null, $path);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function importInTable(int $tableId, String $path, bool $createMissingColumns = true, array $columnsConfig = []): DataResponse {\n \t\treturn $this->handleError(function () use ($tableId, $path, $createMissingColumns, $columnsConfig) {\n@@ -74,18 +72,15 @@ public function importInTable(int $tableId, String $path, bool $createMissingCol\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function previewImportView(int $viewId, String $path): DataResponse {\n \t\treturn $this->handleError(function () use ($viewId, $path) {\n \t\t\treturn $this->service->previewImport(null, $viewId, $path);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function importInView(int $viewId, String $path, bool $createMissingColumns = true, array $columnsConfig = []): DataResponse {\n \t\treturn $this->handleError(function () use ($viewId, $path, $createMissingColumns, $columnsConfig) {\n@@ -94,9 +89,8 @@ public function importInView(int $viewId, String $path, bool $createMissingColum\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function previewUploadImportTable(int $tableId): DataResponse {\n \t\ttry {\n \t\t\t$file = $this->getUploadedFile('uploadfile');\n@@ -109,9 +103,7 @@ public function previewUploadImportTable(int $tableId): DataResponse {\n \t\t}\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function importUploadInTable(int $tableId, bool $createMissingColumns = true, string $columnsConfig = ''): DataResponse {\n \t\ttry {\n@@ -127,9 +119,8 @@ public function importUploadInTable(int $tableId, bool $createMissingColumns = t\n \t\t}\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function previewUploadImportView(int $viewId): DataResponse {\n \t\ttry {\n \t\t\t$file = $this->getUploadedFile('uploadfile');\n@@ -142,9 +133,7 @@ public function previewUploadImportView(int $viewId): DataResponse {\n \t\t}\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function importUploadInView(int $viewId, bool $createMissingColumns = true, string $columnsConfig = ''): DataResponse {\n \t\ttry {"
        },
        {
          "filename": "lib/Controller/PageController.php",
          "status": "modified",
          "additions": 9,
          "deletions": 8,
          "patch": "@@ -10,6 +10,9 @@\n use OCA\\Tables\\AppInfo\\Application;\n use OCA\\Text\\Event\\LoadEditor;\n use OCP\\AppFramework\\Controller;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n+use OCP\\AppFramework\\Http\\Attribute\\NoCSRFRequired;\n+use OCP\\AppFramework\\Http\\Attribute\\OpenAPI;\n use OCP\\AppFramework\\Http\\TemplateResponse;\n use OCP\\AppFramework\\Services\\IInitialState;\n use OCP\\EventDispatcher\\IEventDispatcher;\n@@ -29,12 +32,11 @@ public function __construct(\n \t}\n \n \t/**\n-\t * @NoAdminRequired\n-\t * @NoCSRFRequired\n-\t * @IgnoreOpenAPI\n-\t *\n \t * Render default template\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[OpenAPI(scope: OpenAPI::SCOPE_IGNORE)]\n \tpublic function index(): TemplateResponse {\n \t\tUtil::addScript(Application::APP_ID, 'tables-main');\n \t\tUtil::addStyle(Application::APP_ID, 'grid');\n@@ -49,14 +51,13 @@ public function index(): TemplateResponse {\n \t}\n \n \t/**\n-\t * @NoAdminRequired\n-\t * @NoCSRFRequired\n-\t * @IgnoreOpenAPI\n-\t *\n \t * Render default template\n \t *\n \t * @psalm-param int<0, max> $appId\n \t */\n+\t#[NoAdminRequired]\n+\t#[NoCSRFRequired]\n+\t#[OpenAPI(scope: OpenAPI::SCOPE_IGNORE)]\n \tpublic function context(int $contextId): TemplateResponse {\n \t\t$navId = Application::APP_ID . '_application_' . $contextId;\n \t\t$this->navigationManager->setActiveEntry($navId);"
        },
        {
          "filename": "lib/Controller/RowController.php",
          "status": "modified",
          "additions": 11,
          "deletions": 21,
          "patch": "@@ -8,8 +8,10 @@\n namespace OCA\\Tables\\Controller;\n \n use OCA\\Tables\\AppInfo\\Application;\n+use OCA\\Tables\\Middleware\\Attribute\\RequirePermission;\n use OCA\\Tables\\Service\\RowService;\n use OCP\\AppFramework\\Controller;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\IRequest;\n use Psr\\Log\\LoggerInterface;\n@@ -36,36 +38,30 @@ public function __construct(\n \t\t$this->userId = $userId;\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function index(int $tableId): DataResponse {\n \t\treturn $this->handleError(function () use ($tableId) {\n \t\t\treturn $this->service->findAllByTable($tableId, $this->userId);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function indexView(int $viewId): DataResponse {\n \t\treturn $this->handleError(function () use ($viewId) {\n \t\t\treturn $this->service->findAllByView($viewId, $this->userId);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function show(int $id): DataResponse {\n \t\treturn $this->handleError(function () use ($id) {\n \t\t\treturn $this->service->find($id);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function update(\n \t\tint $id,\n \t\tint $columnId,\n@@ -84,9 +80,7 @@ public function update(\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function updateSet(\n \t\tint $id,\n \t\t?int $viewId,\n@@ -106,17 +100,13 @@ public function updateSet(\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function destroy(int $id): DataResponse {\n \t\treturn $this->handleError(function () use ($id) {\n \t\t\treturn $this->service->delete($id, null, $this->userId);\n \t\t});\n \t}\n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function destroyByView(int $id, int $viewId): DataResponse {\n \t\treturn $this->handleError(function () use ($id, $viewId) {\n \t\t\treturn $this->service->delete($id, $viewId, $this->userId);"
        },
        {
          "filename": "lib/Controller/SearchController.php",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -10,6 +10,7 @@\n use OCA\\Tables\\AppInfo\\Application;\n use OCA\\Tables\\Service\\SearchService;\n use OCP\\AppFramework\\Controller;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\IRequest;\n use Psr\\Log\\LoggerInterface;\n@@ -34,9 +35,7 @@ public function __construct(\n \t}\n \n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function all(string $term = ''): DataResponse {\n \t\treturn $this->handleError(function () use ($term) {\n \t\t\treturn $this->service->all($term);"
        },
        {
          "filename": "lib/Controller/ShareController.php",
          "status": "modified",
          "additions": 10,
          "deletions": 19,
          "patch": "@@ -11,6 +11,7 @@\n use OCA\\Tables\\Middleware\\Attribute\\RequirePermission;\n use OCA\\Tables\\Service\\ShareService;\n use OCP\\AppFramework\\Controller;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\IRequest;\n use Psr\\Log\\LoggerInterface;\n@@ -37,36 +38,30 @@ public function __construct(\n \t}\n \n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function index(int $tableId): DataResponse {\n \t\treturn $this->handleError(function () use ($tableId) {\n \t\t\treturn $this->service->findAll('table', $tableId);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function indexView(int $viewId): DataResponse {\n \t\treturn $this->handleError(function () use ($viewId) {\n \t\t\treturn $this->service->findAll('view', $viewId);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function show(int $id): DataResponse {\n \t\treturn $this->handleError(function () use ($id) {\n \t\t\treturn $this->service->find($id);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \t#[RequirePermission(permission: Application::PERMISSION_MANAGE)]\n \tpublic function create(\n \t\tint $nodeId,\n@@ -85,20 +80,18 @@ public function create(\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function updatePermission(int $id, string $permission, bool $value): DataResponse {\n \t\treturn $this->handleError(function () use ($id, $permission, $value) {\n \t\t\treturn $this->service->updatePermission($id, $permission, $value);\n \t\t});\n \t}\n \n \t/**\n-\t * @NoAdminRequired\n \t * @psalm-param int<0, 2> $displayMode\n \t * @psalm-param (\"default\"|\"self\") $target\n \t */\n+\t#[NoAdminRequired]\n \tpublic function updateDisplayMode(int $id, int $displayMode, string $target = 'default') {\n \t\treturn $this->handleError(function () use ($id, $displayMode, $target) {\n \t\t\tif ($target === 'default') {\n@@ -113,9 +106,7 @@ public function updateDisplayMode(int $id, int $displayMode, string $target = 'd\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function destroy(int $id): DataResponse {\n \t\treturn $this->handleError(function () use ($id) {\n \t\t\treturn $this->service->delete($id);"
        },
        {
          "filename": "lib/Controller/TableController.php",
          "status": "modified",
          "additions": 10,
          "deletions": 15,
          "patch": "@@ -8,8 +8,10 @@\n namespace OCA\\Tables\\Controller;\n \n use OCA\\Tables\\AppInfo\\Application;\n+use OCA\\Tables\\Middleware\\Attribute\\RequirePermission;\n use OCA\\Tables\\Service\\TableService;\n use OCP\\AppFramework\\Controller;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\IRequest;\n use Psr\\Log\\LoggerInterface;\n@@ -36,45 +38,38 @@ public function __construct(\n \t}\n \n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function index(): DataResponse {\n \t\treturn $this->handleError(function () {\n \t\t\treturn $this->service->findAll($this->userId);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'id')]\n \tpublic function show(int $id): DataResponse {\n \t\treturn $this->handleError(function () use ($id) {\n \t\t\treturn $this->service->find($id);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function create(string $title, string $template, string $emoji): DataResponse {\n \t\treturn $this->handleError(function () use ($title, $template, $emoji) {\n \t\t\treturn $this->service->create($title, $template, $emoji);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_TABLE, idParam: 'id')]\n \tpublic function destroy(int $id): DataResponse {\n \t\treturn $this->handleError(function () use ($id) {\n \t\t\treturn $this->service->delete($id);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_TABLE, idParam: 'id')]\n \tpublic function update(int $id, ?string $title = null, ?string $emoji = null, ?bool $archived = null): DataResponse {\n \t\treturn $this->handleError(function () use ($id, $title, $emoji, $archived) {\n \t\t\treturn $this->service->update($id, $title, $emoji, null, $archived, $this->userId);"
        },
        {
          "filename": "lib/Controller/TableTemplateController.php",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -10,6 +10,7 @@\n use OCA\\Tables\\AppInfo\\Application;\n use OCA\\Tables\\Service\\TableTemplateService;\n use OCP\\AppFramework\\Controller;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\IRequest;\n use Psr\\Log\\LoggerInterface;\n@@ -30,9 +31,7 @@ public function __construct(\n \t\t$this->service = $service;\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function list(): DataResponse {\n \t\treturn $this->handleError(function () {\n \t\t\treturn $this->service->getTemplateList();"
        },
        {
          "filename": "lib/Controller/ViewController.php",
          "status": "modified",
          "additions": 13,
          "deletions": 19,
          "patch": "@@ -13,9 +13,11 @@\n use OCA\\Tables\\Errors\\InternalError;\n use OCA\\Tables\\Errors\\NotFoundError;\n use OCA\\Tables\\Errors\\PermissionError;\n+use OCA\\Tables\\Middleware\\Attribute\\RequirePermission;\n use OCA\\Tables\\Service\\TableService;\n use OCA\\Tables\\Service\\ViewService;\n use OCP\\AppFramework\\Controller;\n+use OCP\\AppFramework\\Http\\Attribute\\NoAdminRequired;\n use OCP\\AppFramework\\Http\\DataResponse;\n use OCP\\IRequest;\n use Psr\\Log\\LoggerInterface;\n@@ -50,61 +52,53 @@ public function __construct(\n \t}\n \n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function index(int $tableId): DataResponse {\n \t\treturn $this->handleError(function () use ($tableId) {\n \t\t\treturn $this->service->findAll($this->getTable($tableId), $this->userId);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n \tpublic function indexSharedWithMe(): DataResponse {\n \t\treturn $this->handleError(function () {\n \t\t\treturn $this->service->findSharedViewsWithMe($this->userId);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_READ, type: Application::NODE_TYPE_VIEW, idParam: 'id')]\n \tpublic function show(int $id): DataResponse {\n \t\treturn $this->handleError(function () use ($id) {\n \t\t\treturn $this->service->find($id);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function create(int $tableId, string $title, ?string $emoji): DataResponse {\n \t\treturn $this->handleError(function () use ($tableId, $title, $emoji) {\n \t\t\treturn $this->service->create($title, $emoji, $this->getTable($tableId, true));\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_VIEW, idParam: 'id')]\n \tpublic function update(int $id, array $data): DataResponse {\n \t\treturn $this->handleError(function () use ($id, $data) {\n \t\t\treturn $this->service->update($id, $data, $this->userId);\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n+\t#[NoAdminRequired]\n+\t#[RequirePermission(permission: Application::PERMISSION_MANAGE, type: Application::NODE_TYPE_VIEW, idParam: 'id')]\n \tpublic function destroy(int $id): DataResponse {\n \t\treturn $this->handleError(function () use ($id) {\n \t\t\treturn $this->service->delete($id);\n \t\t});\n \t}\n \n-\n \t/**\n \t * @param int $tableId\n \t * @param bool $skipTableEnhancement"
        },
        {
          "filename": "lib/Middleware/PermissionMiddleware.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -106,6 +106,7 @@ protected function checkPermission(RequirePermission $attribute): void {\n \t\t}\n \n \t\tmatch ($attribute->getPermission()) {\n+\t\t\tApplication::PERMISSION_READ => true, // this is guaranteed in the pre-test ^\n \t\t\tApplication::PERMISSION_MANAGE => $this->assertManagePermission($isContext, $nodeType, $nodeId),\n \t\t\tApplication::PERMISSION_CREATE => $this->assertCreatePermissions($nodeType, $nodeId),\n \t\t\tApplication::PERMISSION_UPDATE => $this->assertUpdatePermissions($nodeType, $nodeId),"
        },
        {
          "filename": "tests/integration/features/APIv2.feature",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -45,9 +45,7 @@ Feature: APIv2\n     And user \"participant1-v2\" sees the following table attributes on table \"t1\"\n       | favorite | 0 |\n     When user \"participant3-v2\" adds the table \"t1\" to favorites\n-    Then the last response should have a \"403\" status code\n-\n-\n+    Then the last response should have a \"404\" status code\n \n   @api2\n   Scenario: Basic column actions"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cb9ea974e4a0aa103fbdbcaae32e68b5bd08cdfa",
            "date": "2025-01-14T00:26:19Z",
            "author_login": "nextcloud-bot"
          },
          {
            "sha": "add3b2b1bdbefbc4a6f416b7b8944a5b10e5ce12",
            "date": "2025-01-13T19:06:48Z",
            "author_login": "blizzz"
          },
          {
            "sha": "9e483ef283087b7eb7c7cdf279ca5af824935259",
            "date": "2025-01-13T12:27:07Z",
            "author_login": "blizzz"
          },
          {
            "sha": "97e78b36527da28840db43f3c8fa5c3735fe2e9d",
            "date": "2025-01-13T01:44:43Z",
            "author_login": "nextcloud-bot"
          },
          {
            "sha": "0a52be9102660d65115a83f29556aba7cde5d265",
            "date": "2025-01-12T01:52:40Z",
            "author_login": "nextcloud-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-639",
    "description": "Nextcloud Tables allows users to to create tables with individual columns. The information which Table (numeric ID) is shared with which groups and users and the respective permissions was not limited to affected users. It is recommended that the Nextcloud Tables app is upgraded to 0.8.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-15T18:15:28.847",
    "last_modified": "2024-11-18T17:11:56.587",
    "fix_date": "2024-10-08T11:45:02Z"
  },
  "references": [
    {
      "url": "https://github.com/nextcloud/security-advisories/security/advisories/GHSA-rgvc-xr2w-qq45",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nextcloud/tables/commit/13ca45f1b9f70f694aea81b78bc7416ec840c332",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nextcloud/tables/pull/1406",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://hackerone.com/reports/2705507",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.312218",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tables",
    "owner": "nextcloud",
    "created_at": "2021-09-22T14:37:22Z",
    "updated_at": "2025-01-14T00:26:24Z",
    "pushed_at": "2025-01-14T00:26:21Z",
    "size": 15237,
    "stars": 153,
    "forks": 25,
    "open_issues": 254,
    "watchers": 153,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 1434486,
      "PHP": 752418,
      "Vue": 456329,
      "TypeScript": 199544,
      "Gherkin": 91500,
      "CSS": 10266,
      "Shell": 6162,
      "Makefile": 3005,
      "HTML": 421
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T16:56:44.209638"
  }
}