{
  "cve_id": "CVE-2024-52511",
  "github_data": {
    "repository": "nextcloud/tables",
    "fix_commit": "52846ad81fe192ee977f14c82a229b0d9cdc406c",
    "related_commits": [
      "52846ad81fe192ee977f14c82a229b0d9cdc406c"
    ],
    "patch_url": "https://github.com/nextcloud/tables/commit/52846ad81fe192ee977f14c82a229b0d9cdc406c.patch",
    "fix_commit_details": {
      "sha": "52846ad81fe192ee977f14c82a229b0d9cdc406c",
      "commit_date": "2024-09-12T15:47:07Z",
      "author": {
        "login": "blizzz",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #1351 from nextcloud/fix/use-ocs-row-create",
        "length": 115,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 272,
        "additions": 226,
        "deletions": 46
      },
      "files": [
        {
          "filename": "appinfo/routes.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -93,7 +93,6 @@\n \t\t['name' => 'row#index', 'url' => '/row/table/{tableId}', 'verb' => 'GET'],\n \t\t['name' => 'row#show', 'url' => '/row/{id}', 'verb' => 'GET'],\n \t\t['name' => 'row#indexView', 'url' => '/row/view/{viewId}', 'verb' => 'GET'],\n-\t\t['name' => 'row#create', 'url' => '/row', 'verb' => 'POST'],\n \t\t['name' => 'row#update', 'url' => '/row/{id}/column/{columnId}', 'verb' => 'PUT'],\n \t\t['name' => 'row#updateSet', 'url' => '/row/{id}', 'verb' => 'PUT'],\n \t\t['name' => 'row#destroyByView', 'url' => '/view/{viewId}/row/{id}', 'verb' => 'DELETE'],"
        },
        {
          "filename": "lib/Controller/Api1Controller.php",
          "status": "modified",
          "additions": 14,
          "deletions": 2,
          "patch": "@@ -10,6 +10,7 @@\n namespace OCA\\Tables\\Controller;\n \n use Exception;\n+use InvalidArgumentException;\n use OCA\\Tables\\Api\\V1Api;\n use OCA\\Tables\\AppInfo\\Application;\n use OCA\\Tables\\Db\\ViewMapper;\n@@ -376,19 +377,24 @@ public function getView(int $viewId): DataResponse {\n \t *\n \t * @param int $viewId View ID\n \t * @param array{key: 'title'|'emoji'|'description', value: string}|array{key: 'columns', value: int[]}|array{key: 'sort', value: array{columnId: int, mode: 'ASC'|'DESC'}}|array{key: 'filter', value: array{columnId: int, operator: 'begins-with'|'ends-with'|'contains'|'is-equal'|'is-greater-than'|'is-greater-than-or-equal'|'is-lower-than'|'is-lower-than-or-equal'|'is-empty', value: string|int|float}} $data key-value pairs\n-\t * @return DataResponse<Http::STATUS_OK, TablesView, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_INTERNAL_SERVER_ERROR, array{message: string}, array{}>\n+\t * @return DataResponse<Http::STATUS_OK, TablesView, array{}>|DataResponse<Http::STATUS_FORBIDDEN|Http::STATUS_BAD_REQUEST|Http::STATUS_INTERNAL_SERVER_ERROR, array{message: string}, array{}>\n \t *\n \t * 200: View updated\n+\t * 400: Invalid data\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n \tpublic function updateView(int $viewId, array $data): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($this->viewService->update($viewId, $data)->jsonSerialize());\n \t\t} catch (PermissionError $e) {\n-\t\t\t$this->logger->warning('A permission error occurred: '.$e->getMessage(), ['exception' => $e]);\n+\t\t\t$this->logger->warning('A permission error occurred: ' . $e->getMessage(), ['exception' => $e]);\n \t\t\t$message = ['message' => $e->getMessage()];\n \t\t\treturn new DataResponse($message, Http::STATUS_FORBIDDEN);\n+\t\t} catch (InvalidArgumentException $e) {\n+\t\t\t$this->logger->warning('An invalid request occurred: ' . $e->getMessage(), ['exception' => $e]);\n+\t\t\t$message = ['message' => $e->getMessage()];\n+\t\t\treturn new DataResponse($message, Http::STATUS_BAD_REQUEST);\n \t\t} catch (InternalError|Exception $e) {\n \t\t\t$this->logger->error('An internal error or exception occurred: '.$e->getMessage(), ['exception' => $e]);\n \t\t\t$message = ['message' => $e->getMessage()];\n@@ -1127,6 +1133,7 @@ public function indexViewRows(int $viewId, ?int $limit, ?int $offset): DataRespo\n \t * 200: Row returned\n \t * 403: No permissions\n \t */\n+\t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function createRowInView(int $viewId, $data): DataResponse {\n \t\tif(is_string($data)) {\n \t\t\t$data = json_decode($data, true);\n@@ -1173,6 +1180,7 @@ public function createRowInView(int $viewId, $data): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function createRowInTable(int $tableId, $data): DataResponse {\n \t\tif(is_string($data)) {\n \t\t\t$data = json_decode($data, true);\n@@ -1360,8 +1368,10 @@ public function deleteRowByView(int $rowId, int $viewId): DataResponse {\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function importInTable(int $tableId, string $path, bool $createMissingColumns = true): DataResponse {\n \t\ttry {\n+\t\t\t// minimal permission is checked, creating columns requires MANAGE permissions - currently tested on service layer\n \t\t\treturn new DataResponse($this->importService->import($tableId, null, $path, $createMissingColumns));\n \t\t} catch (PermissionError $e) {\n \t\t\t$this->logger->warning('A permission error occurred: ' . $e->getMessage(), ['exception' => $e]);\n@@ -1393,8 +1403,10 @@ public function importInTable(int $tableId, string $path, bool $createMissingCol\n \t * 403: No permissions\n \t * 404: Not found\n \t */\n+\t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function importInView(int $viewId, string $path, bool $createMissingColumns = true): DataResponse {\n \t\ttry {\n+\t\t\t// minimal permission is checked, creating columns requires MANAGE permissions - currently tested on service layer\n \t\t\treturn new DataResponse($this->importService->import(null, $viewId, $path, $createMissingColumns));\n \t\t} catch (PermissionError $e) {\n \t\t\t$this->logger->warning('A permission error occurred: ' . $e->getMessage(), ['exception' => $e]);"
        },
        {
          "filename": "lib/Controller/Errors.php",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -8,6 +8,7 @@\n namespace OCA\\Tables\\Controller;\n \n use Closure;\n+use InvalidArgumentException;\n use OCA\\Tables\\Errors\\InternalError;\n use OCA\\Tables\\Errors\\NotFoundError;\n use OCA\\Tables\\Errors\\PermissionError;\n@@ -20,13 +21,17 @@ protected function handleError(Closure $callback): DataResponse {\n \t\ttry {\n \t\t\treturn new DataResponse($callback());\n \t\t} catch (PermissionError $e) {\n-\t\t\t$this->logger->warning('A permission error accured: '.$e->getMessage(), ['exception' => $e]);\n+\t\t\t$this->logger->warning('A permission error occurred: '.$e->getMessage(), ['exception' => $e]);\n \t\t\t$message = ['message' => $e->getMessage()];\n \t\t\treturn new DataResponse($message, Http::STATUS_FORBIDDEN);\n \t\t} catch (NotFoundError $e) {\n-\t\t\t$this->logger->warning('A not found error accured: '.$e->getMessage(), ['exception' => $e]);\n+\t\t\t$this->logger->warning('A not found error occurred: ' . $e->getMessage(), ['exception' => $e]);\n \t\t\t$message = ['message' => $e->getMessage()];\n \t\t\treturn new DataResponse($message, Http::STATUS_NOT_FOUND);\n+\t\t} catch (InvalidArgumentException $e) {\n+\t\t\t$this->logger->warning('An invalid request occurred: ' . $e->getMessage(), ['exception' => $e]);\n+\t\t\t$message = ['message' => $e->getMessage()];\n+\t\t\treturn new DataResponse($message, Http::STATUS_BAD_REQUEST);\n \t\t} catch (InternalError|\\Exception $e) {\n \t\t\t$this->logger->error('An internal error or exception occurred: '.$e->getMessage(), ['exception' => $e]);\n \t\t\t$message = ['message' => $e->getMessage()];"
        },
        {
          "filename": "lib/Controller/ImportController.php",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -8,6 +8,7 @@\n namespace OCA\\Tables\\Controller;\n \n use OCA\\Tables\\AppInfo\\Application;\n+use OCA\\Tables\\Middleware\\Attribute\\RequirePermission;\n use OCA\\Tables\\Service\\ImportService;\n use OCA\\Tables\\UploadException;\n use OCP\\AppFramework\\Controller;\n@@ -65,8 +66,10 @@ public function previewImportTable(int $tableId, String $path): DataResponse {\n \t/**\n \t * @NoAdminRequired\n \t */\n+\t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function importInTable(int $tableId, String $path, bool $createMissingColumns = true, array $columnsConfig = []): DataResponse {\n \t\treturn $this->handleError(function () use ($tableId, $path, $createMissingColumns, $columnsConfig) {\n+\t\t\t// minimal permission is checked, creating columns requires MANAGE permissions - currently tested on service layer\n \t\t\treturn $this->service->import($tableId, null, $path, $createMissingColumns, $columnsConfig);\n \t\t});\n \t}\n@@ -83,8 +86,10 @@ public function previewImportView(int $viewId, String $path): DataResponse {\n \t/**\n \t * @NoAdminRequired\n \t */\n+\t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function importInView(int $viewId, String $path, bool $createMissingColumns = true, array $columnsConfig = []): DataResponse {\n \t\treturn $this->handleError(function () use ($viewId, $path, $createMissingColumns, $columnsConfig) {\n+\t\t\t// minimal permission is checked, creating columns requires MANAGE permissions - currently tested on service layer\n \t\t\treturn $this->service->import(null, $viewId, $path, $createMissingColumns, $columnsConfig);\n \t\t});\n \t}\n@@ -107,11 +112,13 @@ public function previewUploadImportTable(int $tableId): DataResponse {\n \t/**\n \t * @NoAdminRequired\n \t */\n+\t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_TABLE, idParam: 'tableId')]\n \tpublic function importUploadInTable(int $tableId, bool $createMissingColumns = true, string $columnsConfig = ''): DataResponse {\n \t\ttry {\n \t\t\t$columnsConfigArray = json_decode($columnsConfig, true);\n \t\t\t$file = $this->getUploadedFile('uploadfile');\n \t\t\treturn $this->handleError(function () use ($tableId, $file, $createMissingColumns, $columnsConfigArray) {\n+\t\t\t\t// minimal permission is checked, creating columns requires MANAGE permissions - currently tested on service layer\n \t\t\t\treturn $this->service->import($tableId, null, $file['tmp_name'], $createMissingColumns, $columnsConfigArray);\n \t\t\t});\n \t\t} catch (UploadException | NotPermittedException $e) {\n@@ -138,11 +145,13 @@ public function previewUploadImportView(int $viewId): DataResponse {\n \t/**\n \t * @NoAdminRequired\n \t */\n+\t#[RequirePermission(permission: Application::PERMISSION_CREATE, type: Application::NODE_TYPE_VIEW, idParam: 'viewId')]\n \tpublic function importUploadInView(int $viewId, bool $createMissingColumns = true, string $columnsConfig = ''): DataResponse {\n \t\ttry {\n \t\t\t$columnsConfigArray = json_decode($columnsConfig, true);\n \t\t\t$file = $this->getUploadedFile('uploadfile');\n \t\t\treturn $this->handleError(function () use ($viewId, $file, $createMissingColumns, $columnsConfigArray) {\n+\t\t\t\t// minimal permission is checked, creating columns requires MANAGE permissions - currently tested on service layer\n \t\t\t\treturn $this->service->import(null, $viewId, $file['tmp_name'], $createMissingColumns, $columnsConfigArray);\n \t\t\t});\n \t\t} catch (UploadException | NotPermittedException $e) {"
        },
        {
          "filename": "lib/Controller/RowController.php",
          "status": "modified",
          "additions": 0,
          "deletions": 16,
          "patch": "@@ -63,22 +63,6 @@ public function show(int $id): DataResponse {\n \t\t});\n \t}\n \n-\t/**\n-\t * @NoAdminRequired\n-\t */\n-\tpublic function create(\n-\t\t?int $tableId,\n-\t\t?int $viewId,\n-\t\tarray $data\n-\t): DataResponse {\n-\t\treturn $this->handleError(function () use ($tableId, $viewId, $data) {\n-\t\t\treturn $this->service->create(\n-\t\t\t\t$tableId,\n-\t\t\t\t$viewId,\n-\t\t\t\t$data);\n-\t\t});\n-\t}\n-\n \t/**\n \t * @NoAdminRequired\n \t */"
        },
        {
          "filename": "lib/Model/RowDataInput.php",
          "status": "modified",
          "additions": 28,
          "deletions": 2,
          "patch": "@@ -8,17 +8,23 @@\n namespace OCA\\Tables\\Model;\n \n use ArrayAccess;\n+use Iterator;\n+use function current;\n+use function key;\n+use function next;\n+use function reset;\n \n /**\n  * @template-implements ArrayAccess<mixed, array{'columnId': int, 'value': mixed}>\n+ * @template-implements Iterator<mixed, array{'columnId': int, 'value': mixed}>\n  */\n-class RowDataInput implements ArrayAccess {\n+class RowDataInput implements ArrayAccess, Iterator {\n \tprotected const DATA_KEY = 'columnId';\n \tprotected const DATA_VAL = 'value';\n \t/** @psalm-var array<array{'columnId': int, 'value': mixed}> */\n \tprotected array $data = [];\n \n-\tpublic function add(int $columnId, string $value): self {\n+\tpublic function add(int $columnId, string|array $value): self {\n \t\t$this->data[] = [self::DATA_KEY => $columnId, self::DATA_VAL => $value];\n \t\treturn $this;\n \t}\n@@ -45,4 +51,24 @@ public function offsetUnset(mixed $offset): void {\n \t\t\tunset($this->data[$offset]);\n \t\t}\n \t}\n+\n+\tpublic function current(): mixed {\n+\t\treturn current($this->data);\n+\t}\n+\n+\tpublic function next(): void {\n+\t\tnext($this->data);\n+\t}\n+\n+\tpublic function key(): mixed {\n+\t\treturn key($this->data);\n+\t}\n+\n+\tpublic function valid(): bool {\n+\t\treturn $this->key() !== null;\n+\t}\n+\n+\tpublic function rewind(): void {\n+\t\treset($this->data);\n+\t}\n }"
        },
        {
          "filename": "lib/Service/ImportService.php",
          "status": "modified",
          "additions": 11,
          "deletions": 4,
          "patch": "@@ -187,8 +187,8 @@ private function getPreviewData(Worksheet $worksheet): array {\n \t}\n \n \t/**\n-\t * @param int|null $tableId\n-\t * @param int|null $viewId\n+\t * @param ?int $tableId\n+\t * @param ?int $viewId\n \t * @param string $path\n \t * @param bool $createMissingColumns\n \t * @return array\n@@ -208,7 +208,8 @@ public function import(?int $tableId, ?int $viewId, string $path, bool $createMi\n \t\t\t\tthrow new PermissionError('create columns at the view id = '.$viewId.' is not allowed.');\n \t\t\t}\n \t\t\t$this->viewId = $viewId;\n-\t\t} elseif ($tableId) {\n+\t\t}\n+\t\tif ($tableId) {\n \t\t\t$table = $this->tableService->find($tableId);\n \t\t\tif (!$this->permissionsService->canCreateRows($table, 'table')) {\n \t\t\t\tthrow new PermissionError('create row at the view id = '. (string) $viewId .' is not allowed.');\n@@ -217,11 +218,17 @@ public function import(?int $tableId, ?int $viewId, string $path, bool $createMi\n \t\t\t\tthrow new PermissionError('create columns at the view id = '. (string) $viewId .' is not allowed.');\n \t\t\t}\n \t\t\t$this->tableId = $tableId;\n-\t\t} else {\n+\t\t}\n+\t\tif (!$this->tableId && !$this->viewId) {\n \t\t\t$e = new \\Exception('Neither tableId nor viewId is given.');\n \t\t\t$this->logger->error($e->getMessage(), ['exception' => $e]);\n \t\t\tthrow new InternalError(get_class($this) . ' - ' . __FUNCTION__ . ': '.$e->getMessage());\n \t\t}\n+\t\tif ($this->tableId && $this->viewId) {\n+\t\t\t$e = new \\LogicException('Both table ID and view ID are provided, but only one of them is allowed');\n+\t\t\t$this->logger->error($e->getMessage(), ['exception' => $e]);\n+\t\t\tthrow new InternalError(get_class($this) . ' - ' . __FUNCTION__ . ': '.$e->getMessage());\n+\t\t}\n \n \t\tif ($this->userId === null || $this->userManager->get($this->userId) === null) {\n \t\t\t$error = 'No user in context, can not import data. Cancel.';"
        },
        {
          "filename": "lib/Service/RowService.php",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -11,7 +11,6 @@\n use OCA\\Tables\\Db\\ColumnMapper;\n use OCA\\Tables\\Db\\Row2;\n use OCA\\Tables\\Db\\Row2Mapper;\n-use OCA\\Tables\\Db\\Table;\n use OCA\\Tables\\Db\\TableMapper;\n use OCA\\Tables\\Db\\View;\n use OCA\\Tables\\Db\\ViewMapper;\n@@ -192,7 +191,8 @@ public function create(?int $tableId, ?int $viewId, RowDataInput|array $data): R\n \t\t\t}\n \n \t\t\t$columns = $this->columnMapper->findMultiple($view->getColumnsArray());\n-\t\t} elseif ($tableId) {\n+\t\t}\n+\t\tif ($tableId) {\n \t\t\ttry {\n \t\t\t\t$table = $this->tableMapper->find($tableId);\n \t\t\t} catch (DoesNotExistException $e) {\n@@ -209,7 +209,9 @@ public function create(?int $tableId, ?int $viewId, RowDataInput|array $data): R\n \t\t\t}\n \n \t\t\t$columns = $this->columnMapper->findAllByTable($tableId);\n-\t\t} else {\n+\t\t}\n+\n+\t\tif (!$viewId && !$tableId) {\n \t\t\tthrow new InternalError('Cannot create row without table or view in context');\n \t\t}\n "
        },
        {
          "filename": "lib/Service/ViewService.php",
          "status": "modified",
          "additions": 23,
          "deletions": 8,
          "patch": "@@ -11,13 +11,12 @@\n \n use DateTime;\n use Exception;\n-\n+use InvalidArgumentException;\n use OCA\\Tables\\AppInfo\\Application;\n+use OCA\\Tables\\Db\\Column;\n use OCA\\Tables\\Db\\Table;\n use OCA\\Tables\\Db\\View;\n use OCA\\Tables\\Db\\ViewMapper;\n-\n-\n use OCA\\Tables\\Errors\\InternalError;\n use OCA\\Tables\\Errors\\NotFoundError;\n use OCA\\Tables\\Errors\\PermissionError;\n@@ -74,7 +73,6 @@ public function __construct(\n \t\t$this->contextService = $contextService;\n \t}\n \n-\n \t/**\n \t * @param Table $table\n \t * @param string|null $userId\n@@ -246,6 +244,7 @@ public function updateSingle(int $id, string $key, ?string $value, ?string $user\n \t * @return View\n \t * @throws InternalError\n \t * @throws PermissionError\n+\t * @throws InvalidArgumentException\n \t */\n \tpublic function update(int $id, array $data, ?string $userId = null, bool $skipTableEnhancement = false): View {\n \t\t$userId = $this->permissionsService->preCheckUserId($userId);\n@@ -255,26 +254,42 @@ public function update(int $id, array $data, ?string $userId = null, bool $skipT\n \n \t\t\t// security\n \t\t\tif (!$this->permissionsService->canManageView($view, $userId)) {\n-\t\t\t\tthrow new PermissionError('PermissionError: can not update view with id '.$id);\n+\t\t\t\tthrow new PermissionError('PermissionError: can not update view with id ' . $id);\n \t\t\t}\n \n \t\t\t$updatableParameter = ['title', 'emoji', 'description', 'columns', 'sort', 'filter'];\n \n \t\t\tforeach ($data as $key => $value) {\n \t\t\t\tif (!in_array($key, $updatableParameter)) {\n-\t\t\t\t\tthrow new InternalError('View parameter '.$key.' can not be updated.');\n+\t\t\t\t\tthrow new InternalError('View parameter ' . $key . ' can not be updated.');\n \t\t\t\t}\n-\t\t\t\t$setterMethod = 'set'.ucfirst($key);\n+\n+\t\t\t\tif ($key === 'columns') {\n+\t\t\t\t\t// we have to fetch the service here as ColumnService already depends on the ViewService, i.e. no DI\n+\t\t\t\t\t$columnService = \\OCP\\Server::get(ColumnService::class);\n+\t\t\t\t\t$columnIds = \\json_decode($value, true);\n+\t\t\t\t\t$availableColumns = $columnService->findAllByTable($view->getTableId(), $view->getId(), $this->userId);\n+\t\t\t\t\t$availableColumns = array_map(static fn (Column $column) => $column->getId(), $availableColumns);\n+\t\t\t\t\tforeach ($columnIds as $columnId) {\n+\t\t\t\t\t\tif (!in_array($columnId, $availableColumns, true)) {\n+\t\t\t\t\t\t\tthrow new InvalidArgumentException('Invalid column ID provided');\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\t$setterMethod = 'set' . ucfirst($key);\n \t\t\t\t$view->$setterMethod($value);\n \t\t\t}\n \t\t\t$time = new DateTime();\n \t\t\t$view->setLastEditBy($userId);\n \t\t\t$view->setLastEditAt($time->format('Y-m-d H:i:s'));\n \t\t\t$view = $this->mapper->update($view);\n-\t\t\tif(!$skipTableEnhancement) {\n+\t\t\tif (!$skipTableEnhancement) {\n \t\t\t\t$this->enhanceView($view, $userId);\n \t\t\t}\n \t\t\treturn $view;\n+\t\t} catch (InvalidArgumentException $e) {\n+\t\t\tthrow $e;\n \t\t} catch (Exception $e) {\n \t\t\t$this->logger->error($e->getMessage(), ['exception' => $e]);\n \t\t\tthrow new InternalError($e->getMessage());"
        },
        {
          "filename": "openapi.json",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -1769,6 +1769,24 @@\n                             }\n                         }\n                     },\n+                    \"400\": {\n+                        \"description\": \"Invalid data\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"type\": \"object\",\n+                                    \"required\": [\n+                                        \"message\"\n+                                    ],\n+                                    \"properties\": {\n+                                        \"message\": {\n+                                            \"type\": \"string\"\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    },\n                     \"500\": {\n                         \"description\": \"\",\n                         \"content\": {"
        },
        {
          "filename": "src/modules/modals/CreateRow.vue",
          "status": "modified",
          "additions": 2,
          "deletions": 5,
          "patch": "@@ -118,12 +118,9 @@ export default {\n \t\t\t}\n \n \t\t\ttry {\n-\t\t\t\tconst data = []\n+\t\t\t\tconst data = {}\n \t\t\t\tfor (const [key, value] of Object.entries(this.row)) {\n-\t\t\t\t\tdata.push({\n-\t\t\t\t\t\tcolumnId: key,\n-\t\t\t\t\t\tvalue,\n-\t\t\t\t\t})\n+\t\t\t\t\tdata[key] = value\n \t\t\t\t}\n \t\t\t\tawait this.$store.dispatch('insertNewRow', {\n \t\t\t\t\tviewId: this.isView ? this.elementId : null,"
        },
        {
          "filename": "src/store/data.js",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -3,7 +3,7 @@\n  * SPDX-License-Identifier: AGPL-3.0-or-later\n  */\n import axios from '@nextcloud/axios'\n-import { generateUrl } from '@nextcloud/router'\n+import { generateUrl, generateOcsUrl } from '@nextcloud/router'\n import displayError from '../shared/utils/displayError.js'\n import { parseCol } from '../shared/components/ncTable/mixins/columnParser.js'\n import { MetaColumns } from '../shared/components/ncTable/mixins/metaColumns.js'\n@@ -209,15 +209,17 @@ export default {\n \t\t\tlet res = null\n \n \t\t\ttry {\n-\t\t\t\tres = await axios.post(generateUrl('/apps/tables/row'), { viewId, tableId, data })\n+\t\t\t\tconst collection = viewId == null ? 'tables' : 'views'\n+\t\t\t\tconst nodeId = viewId == null ? tableId : viewId\n+\t\t\t\tres = await axios.post(generateOcsUrl('/apps/tables/api/2/' + collection + '/' + nodeId + '/rows'), { data })\n \t\t\t} catch (e) {\n \t\t\t\tdisplayError(e, t('tables', 'Could not insert row.'))\n \t\t\t\treturn false\n \t\t\t}\n \n \t\t\tconst stateId = genStateKey(!!(viewId), viewId ?? tableId)\n \t\t\tif (stateId) {\n-\t\t\t\tconst row = res.data\n+\t\t\t\tconst row = res?.data?.ocs?.data\n \t\t\t\tconst rows = state.rows[stateId]\n \t\t\t\trows.push(row)\n \t\t\t\tcommit('setRows', { stateId, rows: [...rows] })"
        },
        {
          "filename": "src/types/openapi/openapi.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -1476,6 +1476,17 @@ export interface operations {\n                     readonly \"application/json\": components[\"schemas\"][\"View\"];\n                 };\n             };\n+            /** @description Invalid data */\n+            readonly 400: {\n+                headers: {\n+                    readonly [name: string]: unknown;\n+                };\n+                content: {\n+                    readonly \"application/json\": {\n+                        readonly message: string;\n+                    };\n+                };\n+            };\n             /** @description No permissions */\n             readonly 403: {\n                 headers: {"
        },
        {
          "filename": "tests/integration/features/APIv1.feature",
          "status": "modified",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -229,6 +229,31 @@ Feature: APIv1\n     When user \"participant1\" deletes view \"first-view\"\n     Then table \"view-test\" has the following views for user \"participant1\"\n \n+  @api1 @views\n+  Scenario: Column can be added to a view\n+    Given table \"Private One\" with emoji \"\ud83e\udd2b\" exists for user \"participant1\" as \"table_p1\"\n+    Then column \"Volatile Notes\" exists with following properties\n+      | type          | text            |\n+      | subtype       | line            |\n+      | mandatory     | 0               |\n+      | description   | Note me a thing |\n+    And user \"participant1\" create view \"Simple View\" with emoji \"\ud83d\ude43\" for \"table_p1\" as \"simple-view\"\n+    When user \"participant1\" sets columns \"Volatile Notes\" to view \"simple-view\"\n+    Then the reported status is \"200\"\n+\n+  @api1 @views\n+  Scenario: Foreign or nonexistent columns cannot be added to a view\n+    Given table \"Private One\" with emoji \"\ud83e\udd2b\" exists for user \"participant1\" as \"table_p1\"\n+    Then column \"Volatile Notes\" exists with following properties\n+      | type          | text            |\n+      | subtype       | line            |\n+      | mandatory     | 0               |\n+      | description   | Note me a thing |\n+    And table \"Private Two\" with emoji \"\ud83e\udd76\" exists for user \"participant2\" as \"table_p2\"\n+    And user \"participant2\" create view \"Sneaky View\" with emoji \"\ud83e\udee3\" for \"table_p2\" as \"sneaky-view\"\n+    When user \"participant2\" sets columns \"Volatile Notes\" to view \"sneaky-view\"\n+    Then the reported status is \"400\"\n+\n   @api1 @contexts @contexts-sharing\n   Scenario: Share an owned context\n     Given table \"Table 1 via api v2\" with emoji \"\ud83d\udc4b\" exists for user \"participant1\" as \"t1\" via v2"
        },
        {
          "filename": "tests/integration/features/APIv2.feature",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -786,13 +786,20 @@ Feature: APIv2\n       | usergroupSelectUsers    | true          |\n       | usergroupSelectGroups   | false         |\n     And user \"participant1-v2\" create view \"v1\" with emoji \"\u26a1\ufe0f\" for \"t1\" as \"v1\"\n+    And user \"participant1-v2\" sets columns \"one,two,three,four,five\" to view \"v1\"\n     When user \"participant1-v2\" tries to create a row using v2 on \"view\" \"v1\" with following values\n       | one           | AHA                     |\n       | two           | 161                     |\n       | three         | true                    |\n       | four          | 2023-12-24              |\n       | five          | [{\"id\": \"admin\", \"type\": 0}] |\n     Then the reported status is 200\n+    And the inserted row has the following values\n+      | one           | AHA                     |\n+      | two           | 161                     |\n+      | three         | true                    |\n+      | four          | 2023-12-24              |\n+      | five          | [{\"id\": \"admin\", \"type\": 0}] |\n \n   @api2 @rows @views\n   Scenario: Create rows on a view via v2 with permissions\n@@ -825,6 +832,7 @@ Feature: APIv2\n       | usergroupSelectUsers    | true          |\n       | usergroupSelectGroups   | false         |\n     And user \"participant1-v2\" create view \"v1\" with emoji \"\u26a1\ufe0f\" for \"t1\" as \"v1\"\n+    And user \"participant1-v2\" sets columns \"one,two,three,four,five\" to view \"v1\"\n     And user \"participant1-v2\" shares view \"v1\" with \"participant2-v2\"\n     When user \"participant2-v2\" tries to create a row using v2 on \"view\" \"v1\" with following values\n       | one           | AHA                     |\n@@ -833,6 +841,12 @@ Feature: APIv2\n       | four          | 2023-12-24              |\n       | five          | [{\"id\": \"admin\", \"type\": 0}] |\n     Then the reported status is 200\n+    And the inserted row has the following values\n+      | one           | AHA                     |\n+      | two           | 161                     |\n+      | three         | true                    |\n+      | four          | 2023-12-24              |\n+      | five          | [{\"id\": \"admin\", \"type\": 0}] |\n \n   @api2 @rows @views\n   Scenario: Create rows on a view via v2 without permissions\n@@ -865,6 +879,7 @@ Feature: APIv2\n       | usergroupSelectUsers    | true          |\n       | usergroupSelectGroups   | false         |\n     And user \"participant1-v2\" create view \"v1\" with emoji \"\u26a1\ufe0f\" for \"t1\" as \"v1\"\n+    And user \"participant1-v2\" sets columns \"one,two,three,four,five\" to view \"v1\"\n     And user \"participant1-v2\" shares view \"v1\" with \"participant2-v2\"\n     And user \"participant1-v2\" sets permission \"create\" to 0\n     When user \"participant2-v2\" tries to create a row using v2 on \"view\" \"v1\" with following values\n@@ -906,6 +921,7 @@ Feature: APIv2\n       | usergroupSelectUsers    | true          |\n       | usergroupSelectGroups   | false         |\n     And user \"participant1-v2\" create view \"v1\" with emoji \"\u26a1\ufe0f\" for \"t1\" as \"v1\"\n+    And user \"participant1-v2\" sets columns \"one,two,three,four,five\" to view \"v1\"\n     When user \"participant2-v2\" tries to create a row using v2 on \"view\" \"v1\" with following values\n       | one           | AHA                     |\n       | two           | 161                     |"
        },
        {
          "filename": "tests/integration/features/bootstrap/FeatureContext.php",
          "status": "modified",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -832,6 +832,27 @@ public function updateView(string $user, string $viewName, string $title, ?strin\n \t\tAssert::assertEquals($itemToVerify['emoji'], $emoji);\n \t}\n \n+\t/**\n+\t * @When user :user sets columns :columnList to view :viewAlias\n+\t */\n+\tpublic function applyColumnsToView(string $user, string $columnList, string $viewAlias) {\n+\t\t$this->setCurrentUser($user);\n+\n+\t\t$columns = explode(',', $columnList);\n+\t\t$columns = array_map(function (string $columnAlias) {\n+\t\t\t$col = $this->collectionManager->getByAlias('column', $columnAlias);\n+\t\t\treturn $col['id'];\n+\t\t}, $columns);\n+\n+\t\t$view = $this->collectionManager->getByAlias('view', $viewAlias);\n+\n+\t\t$this->sendRequest(\n+\t\t\t'PUT',\n+\t\t\t'/apps/tables/api/1/views/' . $view['id'],\n+\t\t\t[ 'data' => ['columns' => json_encode($columns)] ]\n+\t\t);\n+\t}\n+\n \t/**\n \t * @When user :user deletes view :viewName\n \t *\n@@ -1120,6 +1141,8 @@ public function createColumn(string $title, ?TableNode $properties = null): void\n \t\t$columnToVerify = $this->getDataFromResponse($this->response);\n \t\tAssert::assertEquals(200, $this->response->getStatusCode());\n \t\tAssert::assertEquals($columnToVerify['title'], $title);\n+\n+\t\t$this->collectionManager->register($newColumn, 'column', $newColumn['id'], $title);\n \t}\n \n \t/**\n@@ -2368,4 +2391,33 @@ public function shareViewWithUser(string $initiator, string $viewAlias, string $\n \t\t\t$this->shareId = $share['id'];\n \t\t}\n \t}\n+\n+\t/**\n+\t * @Given the inserted row has the following values\n+\t */\n+\tpublic function theInsertedRowHasTheFollowingValues(TableNode $columnValues) {\n+\t\t$jsonBody = json_decode($this->response->getBody()->getContents(), true);\n+\t\t$insertedRow = $jsonBody['ocs']['data'];\n+\n+\t\t$expected = [];\n+\t\tforeach ($columnValues->getRows() as $row) {\n+\t\t\t$columnId = $this->tableColumns[$row[0]];\n+\t\t\t$expected[$columnId] = $row[1];\n+\t\t}\n+\n+\t\tforeach ($insertedRow['data'] as $entry) {\n+\t\t\tif (!isset($expected[$entry['columnId']])) {\n+\t\t\t\tthrow new \\Exception(sprintf('Unexpected column with ID %d was returned', $entry['columnId']));\n+\t\t\t}\n+\t\t\t// intentional weak comparison\n+\t\t\tif ($expected[$entry['columnId']] != $entry['value']) {\n+\t\t\t\tthrow new \\Exception(sprintf('Unexpected value %s for column with ID %d was returned', $entry['value'], $entry['columnId']));\n+\t\t\t}\n+\t\t\tunset($expected[$entry['columnId']]);\n+\t\t}\n+\n+\t\tif (!empty($expected)) {\n+\t\t\tthrow new \\Exception(sprintf('Some expected columns were not returned: %s ', print_r($expected, true)));\n+\t\t}\n+\t}\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 10,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cb9ea974e4a0aa103fbdbcaae32e68b5bd08cdfa",
            "date": "2025-01-14T00:26:19Z",
            "author_login": "nextcloud-bot"
          },
          {
            "sha": "add3b2b1bdbefbc4a6f416b7b8944a5b10e5ce12",
            "date": "2025-01-13T19:06:48Z",
            "author_login": "blizzz"
          },
          {
            "sha": "9e483ef283087b7eb7c7cdf279ca5af824935259",
            "date": "2025-01-13T12:27:07Z",
            "author_login": "blizzz"
          },
          {
            "sha": "97e78b36527da28840db43f3c8fa5c3735fe2e9d",
            "date": "2025-01-13T01:44:43Z",
            "author_login": "nextcloud-bot"
          },
          {
            "sha": "0a52be9102660d65115a83f29556aba7cde5d265",
            "date": "2025-01-12T01:52:40Z",
            "author_login": "nextcloud-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:H/A:N",
    "cwe_id": "CWE-639",
    "description": "Nextcloud Tables allows users to to create tables with individual columns. By directly specifying the ID of a table or view, a malicious user could blindly insert new rows into tables they have no access to. It is recommended that the Nextcloud Tables is upgraded to 0.8.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-15T18:15:29.717",
    "last_modified": "2024-11-18T17:11:56.587",
    "fix_date": "2024-09-12T15:47:07Z"
  },
  "references": [
    {
      "url": "https://github.com/nextcloud/security-advisories/security/advisories/GHSA-4qqp-9h2g-7qg7",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nextcloud/tables/commit/52846ad81fe192ee977f14c82a229b0d9cdc406c",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nextcloud/tables/pull/1351",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://hackerone.com/reports/2671404",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.312898",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tables",
    "owner": "nextcloud",
    "created_at": "2021-09-22T14:37:22Z",
    "updated_at": "2025-01-14T00:26:24Z",
    "pushed_at": "2025-01-14T00:26:21Z",
    "size": 15237,
    "stars": 153,
    "forks": 25,
    "open_issues": 254,
    "watchers": 153,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 1434486,
      "PHP": 752418,
      "Vue": 456329,
      "TypeScript": 199544,
      "Gherkin": 91500,
      "CSS": 10266,
      "Shell": 6162,
      "Makefile": 3005,
      "HTML": 421
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T16:56:44.209638"
  }
}