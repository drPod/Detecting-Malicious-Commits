{
  "cve_id": "CVE-2024-52516",
  "github_data": {
    "repository": "nextcloud/server",
    "fix_commit": "142b6e313ffa9d3b950bcd23cb58850d3ae7cf34",
    "related_commits": [
      "142b6e313ffa9d3b950bcd23cb58850d3ae7cf34"
    ],
    "patch_url": "https://github.com/nextcloud/server/commit/142b6e313ffa9d3b950bcd23cb58850d3ae7cf34.patch",
    "fix_commit_details": {
      "sha": "142b6e313ffa9d3b950bcd23cb58850d3ae7cf34",
      "commit_date": "2024-08-13T10:20:48Z",
      "author": {
        "login": "come-nc",
        "type": "User",
        "stats": {
          "total_commits": 1449,
          "average_weekly_commits": 1.8965968586387434,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 150
        }
      },
      "commit_message": {
        "title": "Merge pull request #47180 from nextcloud/fix/apply-group-limit-on-remove-from-group",
        "length": 123,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 175,
        "additions": 167,
        "deletions": 8
      },
      "files": [
        {
          "filename": "cypress/e2e/files_sharing/limit_to_same_group.cy.ts",
          "status": "added",
          "additions": 107,
          "deletions": 0,
          "patch": "@@ -0,0 +1,107 @@\n+/**\n+ * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n+ * SPDX-License-Identifier: AGPL-3.0-or-later\n+ */\n+\n+import { User } from \"@nextcloud/cypress\"\n+import { createShare } from \"./FilesSharingUtils.ts\"\n+\n+describe('Limit to sharing to people in the same group', () => {\n+\tlet alice: User\n+\tlet bob: User\n+\tlet randomFileName1 = ''\n+\tlet randomFileName2 = ''\n+\tlet randomGroupName = ''\n+\tlet randomGroupName2 = ''\n+\tlet randomGroupName3 = ''\n+\n+\tbefore(() => {\n+\t\trandomFileName1 = Math.random().toString(36).replace(/[^a-z]+/g, '').substring(0, 10) + '.txt'\n+\t\trandomFileName2 = Math.random().toString(36).replace(/[^a-z]+/g, '').substring(0, 10) + '.txt'\n+\t\trandomGroupName = Math.random().toString(36).replace(/[^a-z]+/g, '').substring(0, 10)\n+\t\trandomGroupName2 = Math.random().toString(36).replace(/[^a-z]+/g, '').substring(0, 10)\n+\t\trandomGroupName3 = Math.random().toString(36).replace(/[^a-z]+/g, '').substring(0, 10)\n+\n+\t\tcy.runOccCommand('config:app:set core shareapi_only_share_with_group_members --value yes')\n+\n+\t\tcy.createRandomUser()\n+\t\t\t.then(user => {\n+\t\t\t\talice = user\n+\t\t\t\tcy.createRandomUser()\n+\t\t\t})\n+\t\t\t.then(user => {\n+\t\t\t\tbob = user\n+\n+\t\t\t\tcy.runOccCommand(`group:add ${randomGroupName}`)\n+\t\t\t\tcy.runOccCommand(`group:add ${randomGroupName2}`)\n+\t\t\t\tcy.runOccCommand(`group:add ${randomGroupName3}`)\n+\t\t\t\tcy.runOccCommand(`group:adduser ${randomGroupName} ${alice.userId}`)\n+\t\t\t\tcy.runOccCommand(`group:adduser ${randomGroupName} ${bob.userId}`)\n+\t\t\t\tcy.runOccCommand(`group:adduser ${randomGroupName2} ${alice.userId}`)\n+\t\t\t\tcy.runOccCommand(`group:adduser ${randomGroupName2} ${bob.userId}`)\n+\t\t\t\tcy.runOccCommand(`group:adduser ${randomGroupName3} ${bob.userId}`)\n+\n+\t\t\t\tcy.uploadContent(alice, new Blob(['share to bob'], { type: 'text/plain' }), 'text/plain', `/${randomFileName1}`)\n+\t\t\t\tcy.uploadContent(bob, new Blob(['share by bob'], { type: 'text/plain' }), 'text/plain', `/${randomFileName2}`)\n+\n+\t\t\t\tcy.login(alice)\n+\t\t\t\tcy.visit('/apps/files')\n+\t\t\t\tcreateShare(randomFileName1, bob.userId)\n+\t\t\t\tcy.login(bob)\n+\t\t\t\tcy.visit('/apps/files')\n+\t\t\t\tcreateShare(randomFileName2, alice.userId)\n+\t\t\t})\n+\t})\n+\n+\tafter(() => {\n+\t\tcy.runOccCommand('config:app:set core shareapi_only_share_with_group_members --value no')\n+\t})\n+\n+\tit('Alice can see the shared file', () => {\n+\t\tcy.login(alice)\n+\t\tcy.visit('/apps/files')\n+\t\tcy.get(`[data-cy-files-list] [data-cy-files-list-row-name=\"${randomFileName2}\"]`).should('exist')\n+\t})\n+\n+\tit('Bob can see the shared file', () => {\n+\t\tcy.login(alice)\n+\t\tcy.visit('/apps/files')\n+\t\tcy.get(`[data-cy-files-list] [data-cy-files-list-row-name=\"${randomFileName1}\"]`).should('exist')\n+\t})\n+\n+\tcontext('Bob is removed from the first group', () => {\n+\t\tbefore(() => {\n+\t\t\tcy.runOccCommand(`group:removeuser ${randomGroupName} ${bob.userId}`)\n+\t\t})\n+\n+\t\tit('Alice can see the shared file', () => {\n+\t\t\tcy.login(alice)\n+\t\t\tcy.visit('/apps/files')\n+\t\t\tcy.get(`[data-cy-files-list] [data-cy-files-list-row-name=\"${randomFileName2}\"]`).should('exist')\n+\t\t})\n+\n+\t\tit('Bob can see the shared file', () => {\n+\t\t\tcy.login(alice)\n+\t\t\tcy.visit('/apps/files')\n+\t\t\tcy.get(`[data-cy-files-list] [data-cy-files-list-row-name=\"${randomFileName1}\"]`).should('exist')\n+\t\t})\n+\t})\n+\n+\tcontext('Bob is removed from the second group', () => {\n+\t\tbefore(() => {\n+\t\t\tcy.runOccCommand(`group:removeuser ${randomGroupName2} ${bob.userId}`)\n+\t\t})\n+\n+\t\tit('Alice cannot see the shared file', () => {\n+\t\t\tcy.login(alice)\n+\t\t\tcy.visit('/apps/files')\n+\t\tcy.get(`[data-cy-files-list] [data-cy-files-list-row-name=\"${randomFileName2}\"]`).should('not.exist')\n+\t\t})\n+\n+\t\tit('Bob cannot see the shared file', () => {\n+\t\t\tcy.login(alice)\n+\t\t\tcy.visit('/apps/files')\n+\t\tcy.get(`[data-cy-files-list] [data-cy-files-list-row-name=\"${randomFileName1}\"]`).should('not.exist')\n+\t\t})\n+\t})\n+})"
        },
        {
          "filename": "lib/private/Share20/DefaultShareProvider.php",
          "status": "modified",
          "additions": 44,
          "deletions": 2,
          "patch": "@@ -28,6 +28,7 @@\n use OCP\\Mail\\IMailer;\n use OCP\\Share\\Exceptions\\ShareNotFound;\n use OCP\\Share\\IAttributes;\n+use OCP\\Share\\IManager;\n use OCP\\Share\\IShare;\n use OCP\\Share\\IShareProviderSupportsAccept;\n use OCP\\Share\\IShareProviderWithNotification;\n@@ -54,6 +55,7 @@ public function __construct(\n \t\tprivate IURLGenerator $urlGenerator,\n \t\tprivate ITimeFactory $timeFactory,\n \t\tprivate LoggerInterface $logger,\n+\t\tprivate IManager $shareManager,\n \t) {\n \t}\n \n@@ -1223,6 +1225,7 @@ public function groupDeleted($gid) {\n \t *\n \t * @param string $uid\n \t * @param string $gid\n+\t * @return void\n \t */\n \tpublic function userDeletedFromGroup($uid, $gid) {\n \t\t/*\n@@ -1234,7 +1237,7 @@ public function userDeletedFromGroup($uid, $gid) {\n \t\t\t->where($qb->expr()->eq('share_type', $qb->createNamedParameter(IShare::TYPE_GROUP)))\n \t\t\t->andWhere($qb->expr()->eq('share_with', $qb->createNamedParameter($gid)));\n \n-\t\t$cursor = $qb->execute();\n+\t\t$cursor = $qb->executeQuery();\n \t\t$ids = [];\n \t\twhile ($row = $cursor->fetch()) {\n \t\t\t$ids[] = (int)$row['id'];\n@@ -1251,7 +1254,46 @@ public function userDeletedFromGroup($uid, $gid) {\n \t\t\t\t\t->where($qb->expr()->eq('share_type', $qb->createNamedParameter(IShare::TYPE_USERGROUP)))\n \t\t\t\t\t->andWhere($qb->expr()->eq('share_with', $qb->createNamedParameter($uid)))\n \t\t\t\t\t->andWhere($qb->expr()->in('parent', $qb->createNamedParameter($chunk, IQueryBuilder::PARAM_INT_ARRAY)));\n-\t\t\t\t$qb->execute();\n+\t\t\t\t$qb->executeStatement();\n+\t\t\t}\n+\t\t}\n+\n+\t\tif ($this->shareManager->shareWithGroupMembersOnly()) {\n+\t\t\t$user = $this->userManager->get($uid);\n+\t\t\tif ($user === null) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t$userGroups = $this->groupManager->getUserGroupIds($user);\n+\t\t\t$userGroups = array_diff($userGroups, $this->shareManager->shareWithGroupMembersOnlyExcludeGroupsList());\n+\n+\t\t\t// Delete user shares received by the user from users in the group.\n+\t\t\t$userReceivedShares = $this->shareManager->getSharedWith($uid, IShare::TYPE_USER, null, -1);\n+\t\t\tforeach ($userReceivedShares as $share) {\n+\t\t\t\t$owner = $this->userManager->get($share->getSharedBy());\n+\t\t\t\tif ($owner === null) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\t$ownerGroups = $this->groupManager->getUserGroupIds($owner);\n+\t\t\t\t$mutualGroups = array_intersect($userGroups, $ownerGroups);\n+\n+\t\t\t\tif (count($mutualGroups) === 0) {\n+\t\t\t\t\t$this->shareManager->deleteShare($share);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t// Delete user shares from the user to users in the group.\n+\t\t\t$userEmittedShares = $this->shareManager->getSharesBy($uid, IShare::TYPE_USER, null, true, -1);\n+\t\t\tforeach ($userEmittedShares as $share) {\n+\t\t\t\t$recipient = $this->userManager->get($share->getSharedWith());\n+\t\t\t\tif ($recipient === null) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\t$recipientGroups = $this->groupManager->getUserGroupIds($recipient);\n+\t\t\t\t$mutualGroups = array_intersect($userGroups, $recipientGroups);\n+\n+\t\t\t\tif (count($mutualGroups) === 0) {\n+\t\t\t\t\t$this->shareManager->deleteShare($share);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}"
        },
        {
          "filename": "lib/private/Share20/ProviderFactory.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -88,6 +88,7 @@ protected function defaultShareProvider() {\n \t\t\t\t$this->serverContainer->getURLGenerator(),\n \t\t\t\t$this->serverContainer->query(ITimeFactory::class),\n \t\t\t\t$this->serverContainer->get(LoggerInterface::class),\n+\t\t\t\t$this->serverContainer->get(IManager::class),\n \t\t\t);\n \t\t}\n "
        },
        {
          "filename": "tests/lib/Share20/DefaultShareProviderTest.php",
          "status": "modified",
          "additions": 15,
          "deletions": 6,
          "patch": "@@ -72,6 +72,8 @@ class DefaultShareProviderTest extends \\Test\\TestCase {\n \t/** @var LoggerInterface|MockObject */\n \tprotected $logger;\n \n+\tprotected IShareManager&MockObject $shareManager;\n+\n \tprotected function setUp(): void {\n \t\t$this->dbConn = \\OC::$server->getDatabaseConnection();\n \t\t$this->userManager = $this->createMock(IUserManager::class);\n@@ -84,6 +86,7 @@ protected function setUp(): void {\n \t\t$this->urlGenerator = $this->createMock(IURLGenerator::class);\n \t\t$this->timeFactory = $this->createMock(ITimeFactory::class);\n \t\t$this->logger = $this->createMock(LoggerInterface::class);\n+\t\t$this->shareManager = $this->createMock(IShareManager::class);\n \n \t\t$this->userManager->expects($this->any())->method('userExists')->willReturn(true);\n \t\t$this->timeFactory->expects($this->any())->method('now')->willReturn(new \\DateTimeImmutable(\"2023-05-04 00:00 Europe/Berlin\"));\n@@ -101,7 +104,8 @@ protected function setUp(): void {\n \t\t\t$this->l10nFactory,\n \t\t\t$this->urlGenerator,\n \t\t\t$this->timeFactory,\n-\t\t\t$this->logger\n+\t\t\t$this->logger,\n+\t\t\t$this->shareManager,\n \t\t);\n \t}\n \n@@ -464,7 +468,8 @@ public function testDeleteSingleShare() {\n \t\t\t\t$this->l10nFactory,\n \t\t\t\t$this->urlGenerator,\n \t\t\t\t$this->timeFactory,\n-\t\t\t\t$this->logger\n+\t\t\t\t$this->logger,\n+\t\t\t\t$this->shareManager,\n \t\t\t])\n \t\t\t->setMethods(['getShareById'])\n \t\t\t->getMock();\n@@ -560,7 +565,8 @@ public function testDeleteGroupShareWithUserGroupShares() {\n \t\t\t\t$this->l10nFactory,\n \t\t\t\t$this->urlGenerator,\n \t\t\t\t$this->timeFactory,\n-\t\t\t\t$this->logger\n+\t\t\t\t$this->logger,\n+\t\t\t\t$this->shareManager,\n \t\t\t])\n \t\t\t->setMethods(['getShareById'])\n \t\t\t->getMock();\n@@ -2529,7 +2535,8 @@ public function testGetSharesInFolder() {\n \t\t\t$this->l10nFactory,\n \t\t\t$this->urlGenerator,\n \t\t\t$this->timeFactory,\n-\t\t\t$this->logger\n+\t\t\t$this->logger,\n+\t\t\t$this->shareManager,\n \t\t);\n \n \t\t$password = md5(time());\n@@ -2628,7 +2635,8 @@ public function testGetAccessListNoCurrentAccessRequired() {\n \t\t\t$this->l10nFactory,\n \t\t\t$this->urlGenerator,\n \t\t\t$this->timeFactory,\n-\t\t\t$this->logger\n+\t\t\t$this->logger,\n+\t\t\t$this->shareManager,\n \t\t);\n \n \t\t$u1 = $userManager->createUser('testShare1', 'test');\n@@ -2725,7 +2733,8 @@ public function testGetAccessListCurrentAccessRequired() {\n \t\t\t$this->l10nFactory,\n \t\t\t$this->urlGenerator,\n \t\t\t$this->timeFactory,\n-\t\t\t$this->logger\n+\t\t\t$this->logger,\n+\t\t\t$this->shareManager,\n \t\t);\n \n \t\t$u1 = $userManager->createUser('testShare1', 'test');"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "dd36163bb030efbc2772f0cc7bb350dd6a7d1070",
            "date": "2025-01-14T16:42:35Z",
            "author_login": "Pytal"
          },
          {
            "sha": "93a64d67b58c4def5281c62e97760ae191fd664e",
            "date": "2025-01-14T16:12:36Z",
            "author_login": "ArtificialOwl"
          },
          {
            "sha": "f44f122456205975f3080028b13a7151e815d6bc",
            "date": "2025-01-14T15:42:15Z",
            "author_login": "skjnldsv"
          },
          {
            "sha": "ce5cbd8d364d44a424401d46506c1e007ab3eb6f",
            "date": "2025-01-14T15:25:36Z",
            "author_login": "skjnldsv"
          },
          {
            "sha": "a9a43f3df4f2e56f4d95c62a4577ea2ff663cc19",
            "date": "2025-01-06T07:24:56Z",
            "author_login": "provokateurin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-269",
    "description": "Nextcloud Server is a self hosted personal cloud system. When a server is configured to only allow sharing with users that are in ones own groups, after a user was removed from a group, previously shared items were not unshared. It is recommended that the Nextcloud Server is upgraded to 22.2.11 or 23.0.11 or 24.0.6 and Nextcloud Enterprise Server is upgraded to 22.2.11 or 23.0.11 or 24.0.6.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-11-15T17:15:21.070",
    "last_modified": "2025-01-06T20:51:23.237",
    "fix_date": "2024-08-13T10:20:48Z"
  },
  "references": [
    {
      "url": "https://github.com/nextcloud/security-advisories/security/advisories/GHSA-35gc-jc6x-29cm",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/nextcloud/server/commit/142b6e313ffa9d3b950bcd23cb58850d3ae7cf34",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nextcloud/server/pull/47180",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.310035",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "server",
    "owner": "nextcloud",
    "created_at": "2016-06-02T07:44:14Z",
    "updated_at": "2025-01-14T12:13:57Z",
    "pushed_at": "2025-01-14T12:17:20Z",
    "size": 4884750,
    "stars": 27939,
    "forks": 4113,
    "open_issues": 2572,
    "watchers": 27939,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 22391764,
      "JavaScript": 14448704,
      "Vue": 1226343,
      "TypeScript": 861776,
      "Gherkin": 433358,
      "SCSS": 158244,
      "Shell": 81434,
      "HTML": 64175,
      "CSS": 25415,
      "Handlebars": 3817,
      "Dockerfile": 2908,
      "Makefile": 1649
    },
    "commit_activity": {
      "total_commits_last_year": 6549,
      "avg_commits_per_week": 125.9423076923077,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:06:55.727793"
  }
}