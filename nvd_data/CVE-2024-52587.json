{
  "cve_id": "CVE-2024-52587",
  "github_data": {
    "repository": "step-security/harden-runner",
    "fix_commit": "0080882f6c36860b6ba35c610c98ce87d4e2f26f",
    "related_commits": [
      "0080882f6c36860b6ba35c610c98ce87d4e2f26f"
    ],
    "patch_url": "https://github.com/step-security/harden-runner/commit/0080882f6c36860b6ba35c610c98ce87d4e2f26f.patch",
    "fix_commit_details": {
      "sha": "0080882f6c36860b6ba35c610c98ce87d4e2f26f",
      "commit_date": "2024-11-18T20:58:05Z",
      "author": {
        "login": "varunsh-coder",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #476 from step-security/rc-16",
        "length": 65,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 246,
        "additions": 149,
        "deletions": 97
      },
      "files": [
        {
          "filename": "dist/index.js",
          "status": "modified",
          "additions": 46,
          "deletions": 2,
          "patch": "@@ -2838,7 +2838,7 @@ var lib_core = __nccwpck_require__(186);\n var external_fs_ = __nccwpck_require__(747);\n ;// CONCATENATED MODULE: ./src/configs.ts\n const STEPSECURITY_ENV = \"agent\"; // agent or int\n-const STEPSECURITY_API_URL = `https://${STEPSECURITY_ENV}.api.stepsecurity.io/v1`;\n+const configs_STEPSECURITY_API_URL = `https://${STEPSECURITY_ENV}.api.stepsecurity.io/v1`;\n const configs_STEPSECURITY_WEB_URL = \"https://app.stepsecurity.io\";\n \n ;// CONCATENATED MODULE: ./src/common.ts\n@@ -3014,6 +3014,49 @@ function isDocker() {\n \treturn isDockerCached;\n }\n \n+// EXTERNAL MODULE: ./node_modules/@actions/http-client/lib/index.js\n+var lib = __nccwpck_require__(255);\n+;// CONCATENATED MODULE: ./src/tls-inspect.ts\n+var tls_inspect_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n+    return new (P || (P = Promise))(function (resolve, reject) {\n+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n+        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n+        step((generator = generator.apply(thisArg, _arguments || [])).next());\n+    });\n+};\n+\n+\n+\n+function isTLSEnabled(owner) {\n+    return tls_inspect_awaiter(this, void 0, void 0, function* () {\n+        let tlsStatusEndpoint = `${STEPSECURITY_API_URL}/github/${owner}/actions/tls-inspection-status`;\n+        let httpClient = new HttpClient();\n+        httpClient.requestOptions = { socketTimeout: 3 * 1000 };\n+        core.info(`[!] Checking TLS_STATUS: ${owner}`);\n+        let isEnabled = false;\n+        try {\n+            let resp = yield httpClient.get(tlsStatusEndpoint);\n+            if (resp.message.statusCode === 200) {\n+                isEnabled = true;\n+                core.info(`[!] TLS_ENABLED: ${owner}`);\n+            }\n+            else {\n+                core.info(`[!] TLS_NOT_ENABLED: ${owner}`);\n+            }\n+        }\n+        catch (e) {\n+            core.info(`[!] Unable to check TLS_STATUS`);\n+        }\n+        return isEnabled;\n+    });\n+}\n+function isGithubHosted() {\n+    const runnerEnvironment = process.env.RUNNER_ENVIRONMENT || \"\";\n+    return runnerEnvironment === \"github-hosted\";\n+}\n+\n ;// CONCATENATED MODULE: ./src/index.ts\n var src_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n@@ -3028,13 +3071,14 @@ var src_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _argu\n \n \n \n+\n (() => src_awaiter(void 0, void 0, void 0, function* () {\n     console.log(\"[harden-runner] main-step\");\n     if (process.platform !== \"linux\") {\n         console.log(UBUNTU_MESSAGE);\n         return;\n     }\n-    if (isDocker()) {\n+    if (isGithubHosted() && isDocker()) {\n         console.log(CONTAINER_MESSAGE);\n         return;\n     }"
        },
        {
          "filename": "dist/index.js.map",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": null
        },
        {
          "filename": "dist/post/index.js",
          "status": "modified",
          "additions": 61,
          "deletions": 28,
          "patch": "@@ -139,7 +139,7 @@ const command_1 = __nccwpck_require__(351);\n const file_command_1 = __nccwpck_require__(717);\n const utils_1 = __nccwpck_require__(278);\n const os = __importStar(__nccwpck_require__(87));\n-const path = __importStar(__nccwpck_require__(277));\n+const path = __importStar(__nccwpck_require__(622));\n const oidc_utils_1 = __nccwpck_require__(41);\n /**\n  * The code to exit an action\n@@ -618,7 +618,7 @@ var __importStar = (this && this.__importStar) || function (mod) {\n };\n Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;\n-const path = __importStar(__nccwpck_require__(277));\n+const path = __importStar(__nccwpck_require__(622));\n /**\n  * toPosixPath converts the given path to the posix form. On Windows, \\\\ will be\n  * replaced with /.\n@@ -2752,7 +2752,7 @@ module.exports = require(\"os\");\n \n /***/ }),\n \n-/***/ 277:\n+/***/ 622:\n /***/ ((module) => {\n \n \"use strict\";\n@@ -2837,10 +2837,10 @@ var external_fs_ = __nccwpck_require__(747);\n ;// CONCATENATED MODULE: external \"child_process\"\n const external_child_process_namespaceObject = require(\"child_process\");\n // EXTERNAL MODULE: ./node_modules/@actions/core/lib/core.js\n-var core = __nccwpck_require__(186);\n+var lib_core = __nccwpck_require__(186);\n ;// CONCATENATED MODULE: ./src/configs.ts\n const STEPSECURITY_ENV = \"agent\"; // agent or int\n-const STEPSECURITY_API_URL = `https://${STEPSECURITY_ENV}.api.stepsecurity.io/v1`;\n+const configs_STEPSECURITY_API_URL = `https://${STEPSECURITY_ENV}.api.stepsecurity.io/v1`;\n const STEPSECURITY_WEB_URL = \"https://app.stepsecurity.io\";\n \n ;// CONCATENATED MODULE: ./src/common.ts\n@@ -2905,9 +2905,9 @@ function addSummary() {\n             //console.error(err);\n         }\n         if (needsSubscription) {\n-            yield core.summary.addSeparator()\n+            yield lib_core.summary.addSeparator()\n                 .addRaw(`<h2>\u26a0\ufe0f Your GitHub Actions Runtime Security is currently disabled!</h2>`);\n-            yield core.summary.addRaw(`\n+            yield lib_core.summary.addRaw(`\n <p>It appears that you're using the <a href=\"https://github.com/step-security/harden-runner\">Harden-Runner GitHub Action</a> by StepSecurity within a private repository. However, runtime security is not enabled as your organization hasn't signed up for a free trial or a paid subscription yet.</p>\n <p>To enable runtime security, start a free trial today by installing the <a href=\"https://github.com/apps/stepsecurity-actions-security\">StepSecurity Actions Security GitHub App</a>. For more information or assistance, feel free to reach out to us through our <a href=\"https://www.stepsecurity.io/contact\">contact form</a>.</p>\n `)\n@@ -2925,7 +2925,7 @@ function addSummary() {\n             return;\n         }\n         const insightsRow = `<p><b><a href=\"${insights_url}\">\ud83d\udcc4 View Full Report</a></b></p>`;\n-        yield core.summary.addSeparator().addRaw(`<h2>\ud83d\udee1 StepSecurity Report</h2>`);\n+        yield lib_core.summary.addSeparator().addRaw(`<h2>\ud83d\udee1 StepSecurity Report</h2>`);\n         tableEntries.sort((a, b) => {\n             if (a.status === \"\u274c Blocked\" && b.status !== \"\u274c Blocked\") {\n                 return -1;\n@@ -2938,7 +2938,7 @@ function addSummary() {\n             }\n         });\n         tableEntries = tableEntries.slice(0, 3);\n-        yield core.summary.addRaw(`\n+        yield lib_core.summary.addRaw(`\n   <blockquote>\n   <p>Preview of the outbound network calls during this workflow run.</p></blockquote>\n   <h3>Network Calls</h3>\n@@ -2967,7 +2967,7 @@ function addSummary() {\n   </table>\n   ${insightsRow}\n `);\n-        yield core.summary.addRaw(`<p><i>Markdown generated by the <a href=\"https://github.com/step-security/harden-runner\">Harden-Runner GitHub Action</a>.</i></p>`)\n+        yield lib_core.summary.addRaw(`<p><i>Markdown generated by the <a href=\"https://github.com/step-security/harden-runner\">Harden-Runner GitHub Action</a>.</i></p>`)\n             .addSeparator()\n             .write();\n     });\n@@ -3031,34 +3031,68 @@ function isSecondaryPod() {\n     const workDir = \"/__w\";\n     return external_fs_.existsSync(workDir);\n }\n-function getRunnerTempDir() {\n-    const isTest = process.env[\"isTest\"];\n-    if (isTest === \"1\") {\n-        return \"/tmp\";\n-    }\n-    return process.env[\"RUNNER_TEMP\"] || \"/tmp\";\n-}\n function sendAllowedEndpoints(endpoints) {\n     const allowedEndpoints = endpoints.split(\" \"); // endpoints are space separated\n     for (const endpoint of allowedEndpoints) {\n         if (endpoint) {\n-            const encodedEndpoint = Buffer.from(endpoint).toString(\"base64\");\n-            cp.execSync(`echo \"${endpoint}\" > \"${getRunnerTempDir()}/step_policy_endpoint_${encodedEndpoint}\"`);\n+            let encodedEndpoint = Buffer.from(endpoint).toString(\"base64\");\n+            let endpointPolicyStr = `step_policy_endpoint_${encodedEndpoint}`;\n+            echo(endpointPolicyStr);\n         }\n     }\n     if (allowedEndpoints.length > 0) {\n         applyPolicy(allowedEndpoints.length);\n     }\n }\n function applyPolicy(count) {\n-    const fileName = `step_policy_apply_${count}`;\n-    cp.execSync(`echo \"${fileName}\" > \"${getRunnerTempDir()}/${fileName}\"`);\n+    let applyPolicyStr = `step_policy_apply_${count}`;\n+    echo(applyPolicyStr);\n }\n-function removeStepPolicyFiles() {\n-    external_child_process_namespaceObject.execSync(`rm ${getRunnerTempDir()}/step_policy_*`);\n+function echo(content) {\n+    cp.execFileSync(\"echo\", [content]);\n }\n-function arcCleanUp() {\n-    external_child_process_namespaceObject.execSync(`echo \"cleanup\" > \"${getRunnerTempDir()}/step_policy_cleanup\"`);\n+\n+// EXTERNAL MODULE: ./node_modules/@actions/http-client/lib/index.js\n+var lib = __nccwpck_require__(255);\n+;// CONCATENATED MODULE: ./src/tls-inspect.ts\n+var tls_inspect_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n+    return new (P || (P = Promise))(function (resolve, reject) {\n+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n+        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n+        step((generator = generator.apply(thisArg, _arguments || [])).next());\n+    });\n+};\n+\n+\n+\n+function isTLSEnabled(owner) {\n+    return tls_inspect_awaiter(this, void 0, void 0, function* () {\n+        let tlsStatusEndpoint = `${STEPSECURITY_API_URL}/github/${owner}/actions/tls-inspection-status`;\n+        let httpClient = new HttpClient();\n+        httpClient.requestOptions = { socketTimeout: 3 * 1000 };\n+        core.info(`[!] Checking TLS_STATUS: ${owner}`);\n+        let isEnabled = false;\n+        try {\n+            let resp = yield httpClient.get(tlsStatusEndpoint);\n+            if (resp.message.statusCode === 200) {\n+                isEnabled = true;\n+                core.info(`[!] TLS_ENABLED: ${owner}`);\n+            }\n+            else {\n+                core.info(`[!] TLS_NOT_ENABLED: ${owner}`);\n+            }\n+        }\n+        catch (e) {\n+            core.info(`[!] Unable to check TLS_STATUS`);\n+        }\n+        return isEnabled;\n+    });\n+}\n+function isGithubHosted() {\n+    const runnerEnvironment = process.env.RUNNER_ENVIRONMENT || \"\";\n+    return runnerEnvironment === \"github-hosted\";\n }\n \n ;// CONCATENATED MODULE: ./src/cleanup.ts\n@@ -3076,20 +3110,19 @@ var cleanup_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _\n \n \n \n+\n (() => cleanup_awaiter(void 0, void 0, void 0, function* () {\n     console.log(\"[harden-runner] post-step\");\n     if (process.platform !== \"linux\") {\n         console.log(UBUNTU_MESSAGE);\n         return;\n     }\n-    if (isDocker()) {\n+    if (isGithubHosted() && isDocker()) {\n         console.log(CONTAINER_MESSAGE);\n         return;\n     }\n     if (isArcRunner()) {\n         console.log(`[!] ${ARC_RUNNER_MESSAGE}`);\n-        arcCleanUp();\n-        removeStepPolicyFiles();\n         return;\n     }\n     if (process.env.STATE_selfHosted === \"true\") {"
        },
        {
          "filename": "dist/post/index.js.map",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": null
        },
        {
          "filename": "dist/pre/index.js",
          "status": "modified",
          "additions": 15,
          "deletions": 19,
          "patch": "@@ -71535,34 +71535,25 @@ function isSecondaryPod() {\n     const workDir = \"/__w\";\n     return external_fs_.existsSync(workDir);\n }\n-function getRunnerTempDir() {\n-    const isTest = process.env[\"isTest\"];\n-    if (isTest === \"1\") {\n-        return \"/tmp\";\n-    }\n-    return process.env[\"RUNNER_TEMP\"] || \"/tmp\";\n-}\n function sendAllowedEndpoints(endpoints) {\n     const allowedEndpoints = endpoints.split(\" \"); // endpoints are space separated\n     for (const endpoint of allowedEndpoints) {\n         if (endpoint) {\n-            const encodedEndpoint = Buffer.from(endpoint).toString(\"base64\");\n-            external_child_process_.execSync(`echo \"${endpoint}\" > \"${getRunnerTempDir()}/step_policy_endpoint_${encodedEndpoint}\"`);\n+            let encodedEndpoint = Buffer.from(endpoint).toString(\"base64\");\n+            let endpointPolicyStr = `step_policy_endpoint_${encodedEndpoint}`;\n+            echo(endpointPolicyStr);\n         }\n     }\n     if (allowedEndpoints.length > 0) {\n         applyPolicy(allowedEndpoints.length);\n     }\n }\n function applyPolicy(count) {\n-    const fileName = `step_policy_apply_${count}`;\n-    external_child_process_.execSync(`echo \"${fileName}\" > \"${getRunnerTempDir()}/${fileName}\"`);\n+    let applyPolicyStr = `step_policy_apply_${count}`;\n+    echo(applyPolicyStr);\n }\n-function removeStepPolicyFiles() {\n-    cp.execSync(`rm ${getRunnerTempDir()}/step_policy_*`);\n-}\n-function arcCleanUp() {\n-    cp.execSync(`echo \"cleanup\" > \"${getRunnerTempDir()}/step_policy_cleanup\"`);\n+function echo(content) {\n+    external_child_process_.execFileSync(\"echo\", [content]);\n }\n \n ;// CONCATENATED MODULE: ./src/tls-inspect.ts\n@@ -71735,7 +71726,7 @@ var setup_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _ar\n             console.log(UBUNTU_MESSAGE);\n             return;\n         }\n-        if (isDocker()) {\n+        if (isGithubHosted() && isDocker()) {\n             console.log(CONTAINER_MESSAGE);\n             return;\n         }\n@@ -71836,7 +71827,7 @@ var setup_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _ar\n             if (confg.egress_policy === \"block\") {\n                 try {\n                     if (process.env.USER) {\n-                        external_child_process_.execSync(`sudo chown -R ${process.env.USER} /home/agent`);\n+                        chownForFolder(process.env.USER, \"/home/agent\");\n                     }\n                     const confgStr = JSON.stringify(confg);\n                     external_fs_.writeFileSync(\"/home/agent/block_event.json\", confgStr);\n@@ -71882,7 +71873,7 @@ var setup_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _ar\n         }\n         const confgStr = JSON.stringify(confg);\n         external_child_process_.execSync(\"sudo mkdir -p /home/agent\");\n-        external_child_process_.execSync(\"sudo chown -R $USER /home/agent\");\n+        chownForFolder(process.env.USER, \"/home/agent\");\n         let isTLS = yield isTLSEnabled(github.context.repo.owner);\n         const agentInstalled = yield installAgent(isTLS, confgStr);\n         if (agentInstalled) {\n@@ -71923,6 +71914,11 @@ function setup_sleep(ms) {\n         setTimeout(resolve, ms);\n     });\n }\n+function chownForFolder(newOwner, target) {\n+    let cmd = \"sudo\";\n+    let args = [\"chown\", \"-R\", newOwner, target];\n+    external_child_process_.execFileSync(cmd, args);\n+}\n \n })();\n "
        },
        {
          "filename": "dist/pre/index.js.map",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": null
        },
        {
          "filename": "src/arc-runner.test.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 12,
          "patch": "@@ -1,20 +1,9 @@\n import { isArcRunner, sendAllowedEndpoints } from \"./arc-runner\";\n \n-\n it(\"should correctly recognize arc based runner\", async () => {\n   process.env[\"GITHUB_ACTIONS_RUNNER_EXTRA_USER_AGENT\"] =\n     \"actions-runner-controller/2.0.1\";\n \n-  let isArc: boolean =  await isArcRunner();\n+  let isArc: boolean = await isArcRunner();\n   expect(isArc).toBe(true);\n-\n });\n-\n-\n-it(\"should write endpoint files\", ()=>{\n-  process.env[\"isTest\"] = \"1\"\n-\n-  let allowed_endpoints = [\"github.com:443\", \"*.google.com:443\", \"youtube.com\"].join(\" \");\n-  sendAllowedEndpoints(allowed_endpoints);\n-\n-})"
        },
        {
          "filename": "src/arc-runner.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 23,
          "patch": "@@ -1,6 +1,6 @@\n import * as cp from \"child_process\";\n import * as fs from \"fs\";\n-import { sleep } from \"./setup\";\n+import path from \"path\";\n \n export function isArcRunner(): boolean {\n   const runnerUserAgent = process.env[\"GITHUB_ACTIONS_RUNNER_EXTRA_USER_AGENT\"];\n@@ -21,25 +21,14 @@ function isSecondaryPod(): boolean {\n   return fs.existsSync(workDir);\n }\n \n-function getRunnerTempDir(): string {\n-  const isTest = process.env[\"isTest\"];\n-\n-  if (isTest === \"1\") {\n-    return \"/tmp\";\n-  }\n-\n-  return process.env[\"RUNNER_TEMP\"] || \"/tmp\";\n-}\n-\n export function sendAllowedEndpoints(endpoints: string): void {\n   const allowedEndpoints = endpoints.split(\" \"); // endpoints are space separated\n \n   for (const endpoint of allowedEndpoints) {\n     if (endpoint) {\n-      const encodedEndpoint = Buffer.from(endpoint).toString(\"base64\");\n-      cp.execSync(\n-        `echo \"${endpoint}\" > \"${getRunnerTempDir()}/step_policy_endpoint_${encodedEndpoint}\"`\n-      );\n+      let encodedEndpoint = Buffer.from(endpoint).toString(\"base64\");\n+      let endpointPolicyStr = `step_policy_endpoint_${encodedEndpoint}`;\n+      echo(endpointPolicyStr);\n     }\n   }\n \n@@ -49,14 +38,10 @@ export function sendAllowedEndpoints(endpoints: string): void {\n }\n \n function applyPolicy(count: number): void {\n-  const fileName = `step_policy_apply_${count}`;\n-  cp.execSync(`echo \"${fileName}\" > \"${getRunnerTempDir()}/${fileName}\"`);\n-}\n-\n-export function removeStepPolicyFiles() {\n-  cp.execSync(`rm ${getRunnerTempDir()}/step_policy_*`);\n+  let applyPolicyStr = `step_policy_apply_${count}`;\n+  echo(applyPolicyStr);\n }\n \n-export function arcCleanUp() {\n-  cp.execSync(`echo \"cleanup\" > \"${getRunnerTempDir()}/step_policy_cleanup\"`);\n+function echo(content: string) {\n+  cp.execFileSync(\"echo\", [content]);\n }"
        },
        {
          "filename": "src/cleanup.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 5,
          "patch": "@@ -2,24 +2,22 @@ import * as fs from \"fs\";\n import * as cp from \"child_process\";\n import * as common from \"./common\";\n import isDocker from \"is-docker\";\n-import { arcCleanUp, isArcRunner, removeStepPolicyFiles } from \"./arc-runner\";\n-\n+import { isArcRunner } from \"./arc-runner\";\n+import { isGithubHosted } from \"./tls-inspect\";\n (async () => {\n   console.log(\"[harden-runner] post-step\");\n \n   if (process.platform !== \"linux\") {\n     console.log(common.UBUNTU_MESSAGE);\n     return;\n   }\n-  if (isDocker()) {\n+  if (isGithubHosted() && isDocker()) {\n     console.log(common.CONTAINER_MESSAGE);\n     return;\n   }\n \n   if (isArcRunner()) {\n     console.log(`[!] ${common.ARC_RUNNER_MESSAGE}`);\n-    arcCleanUp();\n-    removeStepPolicyFiles();\n     return;\n   }\n "
        },
        {
          "filename": "src/index.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -2,15 +2,15 @@ import * as common from \"./common\";\n import * as core from \"@actions/core\";\n import isDocker from \"is-docker\";\n import { STEPSECURITY_WEB_URL } from \"./configs\";\n-\n+import { isGithubHosted } from \"./tls-inspect\";\n (async () => {\n   console.log(\"[harden-runner] main-step\");\n \n   if (process.platform !== \"linux\") {\n     console.log(common.UBUNTU_MESSAGE);\n     return;\n   }\n-  if (isDocker()) {\n+  if (isGithubHosted() && isDocker()) {\n     console.log(common.CONTAINER_MESSAGE);\n     return;\n   }"
        },
        {
          "filename": "src/setup.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 3,
          "patch": "@@ -39,7 +39,7 @@ interface MonitorResponse {\n       console.log(common.UBUNTU_MESSAGE);\n       return;\n     }\n-    if (isDocker()) {\n+    if (isGithubHosted() && isDocker()) {\n       console.log(common.CONTAINER_MESSAGE);\n       return;\n     }\n@@ -165,8 +165,9 @@ interface MonitorResponse {\n       if (confg.egress_policy === \"block\") {\n         try {\n           if (process.env.USER) {\n-            cp.execSync(`sudo chown -R ${process.env.USER} /home/agent`);\n+            chownForFolder(process.env.USER, \"/home/agent\");\n           }\n+\n           const confgStr = JSON.stringify(confg);\n           fs.writeFileSync(\"/home/agent/block_event.json\", confgStr);\n           await sleep(5000);\n@@ -225,7 +226,7 @@ interface MonitorResponse {\n \n     const confgStr = JSON.stringify(confg);\n     cp.execSync(\"sudo mkdir -p /home/agent\");\n-    cp.execSync(\"sudo chown -R $USER /home/agent\");\n+    chownForFolder(process.env.USER, \"/home/agent\");\n \n     let isTLS = await isTLSEnabled(context.repo.owner);\n \n@@ -269,3 +270,9 @@ export function sleep(ms) {\n     setTimeout(resolve, ms);\n   });\n }\n+\n+function chownForFolder(newOwner: string, target: string) {\n+  let cmd = \"sudo\";\n+  let args = [\"chown\", \"-R\", newOwner, target];\n+  cp.execFileSync(cmd, args);\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c95a14d0e5bab51a9f56296a4eb0e416910cd350",
            "date": "2025-01-09T20:45:26Z",
            "author_login": "varunsh-coder"
          },
          {
            "sha": "b78ba6a1b7647e945771426d4d0ae89a76aa5e81",
            "date": "2025-01-04T13:22:12Z",
            "author_login": "varunsh-coder"
          },
          {
            "sha": "0080882f6c36860b6ba35c610c98ce87d4e2f26f",
            "date": "2024-11-18T20:58:05Z",
            "author_login": "varunsh-coder"
          },
          {
            "sha": "4a3a88bbf8f2e304f84e1042472c02dce37eba82",
            "date": "2024-10-26T16:47:44Z",
            "author_login": "varunsh-coder"
          },
          {
            "sha": "556aae632a6c1f630efa52e90d706218618e5f2f",
            "date": "2024-10-26T16:46:19Z",
            "author_login": "varunsh-coder"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "StepSecurity's Harden-Runner provides network egress filtering and runtime security for GitHub-hosted and self-hosted runners. Versions of step-security/harden-runner prior to v2.10.2 contain multiple command injection weaknesses via environment variables that could potentially be exploited under specific conditions. However, due to the current execution order of pre-steps in GitHub Actions and the placement of harden-runner as the first step in a job, the likelihood of exploitation is low as the Harden-Runner action reads the environment variable during the pre-step stage. There are no known exploits at this time. Version 2.10.2 contains a patch.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-18T22:15:09.557",
    "last_modified": "2024-11-19T21:57:32.967",
    "fix_date": "2024-11-18T20:58:05Z"
  },
  "references": [
    {
      "url": "https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L40-L44",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L53",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L57",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L61",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/setup.ts#L169",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/setup.ts#L229",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/step-security/harden-runner/commit/0080882f6c36860b6ba35c610c98ce87d4e2f26f",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/step-security/harden-runner/security/advisories/GHSA-g85v-wf27-67xc",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:31.264654",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "harden-runner",
    "owner": "step-security",
    "created_at": "2021-10-28T16:58:46Z",
    "updated_at": "2025-01-14T07:44:52Z",
    "pushed_at": "2025-01-09T21:00:01Z",
    "size": 27168,
    "stars": 645,
    "forks": 52,
    "open_issues": 28,
    "watchers": 645,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "TypeScript": 30715,
      "JavaScript": 672
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T21:36:17.250457"
  }
}