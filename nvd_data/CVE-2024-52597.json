{
  "cve_id": "CVE-2024-52597",
  "github_data": {
    "repository": "Bubka/2FAuth",
    "fix_commit": "93c508e118f483f3c93ac36e1f91face95af642d",
    "related_commits": [
      "93c508e118f483f3c93ac36e1f91face95af642d"
    ],
    "patch_url": "https://github.com/Bubka/2FAuth/commit/93c508e118f483f3c93ac36e1f91face95af642d.patch",
    "fix_commit_details": {
      "sha": "93c508e118f483f3c93ac36e1f91face95af642d",
      "commit_date": "2024-11-15T09:39:29Z",
      "author": {
        "login": "Bubka",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Sanitize svg icons before storing them",
        "length": 38,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 215,
        "additions": 206,
        "deletions": 9
      },
      "files": [
        {
          "filename": "app/Providers/TwoFAuthServiceProvider.php",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -9,6 +9,7 @@\n use App\\Services\\ReleaseRadarService;\n use App\\Services\\SettingService;\n use App\\Services\\TwoFAccountService;\n+use enshrined\\svgSanitize\\Sanitizer;\n use Illuminate\\Contracts\\Support\\DeferrableProvider;\n use Illuminate\\Support\\ServiceProvider;\n use Zxing\\QrReader;\n@@ -30,8 +31,8 @@ public function register()\n             return new SettingService;\n         });\n \n-        $this->app->singleton(IconStoreService::class, function () {\n-            return new IconStoreService;\n+        $this->app->singleton(IconStoreService::class, function ($app) {\n+            return new IconStoreService($app->make(Sanitizer::class));\n         });\n \n         $this->app->singleton(LogoService::class, function ($app) {"
        },
        {
          "filename": "app/Services/IconStoreService.php",
          "status": "modified",
          "additions": 33,
          "deletions": 1,
          "patch": "@@ -6,6 +6,7 @@\n use App\\Facades\\Settings;\n use App\\Models\\Icon;\n use App\\Models\\TwoFAccount;\n+use enshrined\\svgSanitize\\Sanitizer;\n use Illuminate\\Contracts\\Filesystem\\Filesystem;\n use Illuminate\\Support\\Arr;\n use Illuminate\\Support\\Collection;\n@@ -26,13 +27,21 @@ class IconStoreService\n      */\n     protected bool $usesDatabase;\n \n+    /**\n+     * The SVG sanitizer\n+     */\n+    protected Sanitizer $svgSanitizer;\n+\n     /**\n      * \n      */\n-    public function __construct()\n+    public function __construct(Sanitizer $svgSanitizer)\n     {\n         $this->usesDatabase = Settings::get('storeIconsInDatabase');\n         $this->setDisk();\n+\n+        $this->svgSanitizer = $svgSanitizer;\n+        $this->svgSanitizer->removeRemoteReferences(true);\n     }\n \n     /**\n@@ -207,13 +216,36 @@ public function store(string $name, string $content) : bool\n     {\n         $storedToDisk = $this->storeToDisk($name, $content);\n \n+        if ($this->mimeType($name) == 'image/svg+xml') {\n+            $sanitized = $this->sanitize($content);\n+\n+            if (! $sanitized) {\n+                $this->delete($name);\n+\n+                return false;\n+            }\n+\n+            if ($content != $sanitized) {\n+                $content = $sanitized;\n+                $storedToDisk = $this->storeToDisk($name, $content);\n+            }\n+        }\n+\n         if ($this->usesDatabase) {\n             return $this->storeToDatabase($name, $content);\n         }\n \n         return $storedToDisk;\n     }\n \n+    /**\n+     * Sanitize the given content (when icon is an svg image)\n+     */\n+    protected function sanitize(string $content) : string\n+    {\n+        return $this->svgSanitizer->sanitize($content);\n+    }\n+\n     /**\n      * Create the given icon in the disk\n      */"
        },
        {
          "filename": "composer.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@\n         \"ext-xml\": \"*\",\n         \"chillerlan/php-qrcode\": \"^5.0\",\n         \"doctormckay/steam-totp\": \"^1.0\",\n+        \"enshrined/svg-sanitize\": \"^0.20.0\",\n         \"google/protobuf\": \"^4.26\",\n         \"jackiedo/dotenv-editor\": \"dev-master\",\n         \"jenssegers/agent\": \"^2.6\","
        },
        {
          "filename": "composer.lock",
          "status": "modified",
          "additions": 46,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@\n         \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n         \"This file is @generated automatically\"\n     ],\n-    \"content-hash\": \"bff445ed39877e4dfccfb5b451e0d96a\",\n+    \"content-hash\": \"da7b7e586a5f017685b05bf7189d8c5e\",\n     \"packages\": [\n         {\n             \"name\": \"brick/math\",\n@@ -770,6 +770,51 @@\n             ],\n             \"time\": \"2023-10-06T06:47:41+00:00\"\n         },\n+        {\n+            \"name\": \"enshrined/svg-sanitize\",\n+            \"version\": \"0.20.0\",\n+            \"source\": {\n+                \"type\": \"git\",\n+                \"url\": \"https://github.com/darylldoyle/svg-sanitizer.git\",\n+                \"reference\": \"068d9fcf912c88a0471d101d95a2caa87c50aee7\"\n+            },\n+            \"dist\": {\n+                \"type\": \"zip\",\n+                \"url\": \"https://api.github.com/repos/darylldoyle/svg-sanitizer/zipball/068d9fcf912c88a0471d101d95a2caa87c50aee7\",\n+                \"reference\": \"068d9fcf912c88a0471d101d95a2caa87c50aee7\",\n+                \"shasum\": \"\"\n+            },\n+            \"require\": {\n+                \"ext-dom\": \"*\",\n+                \"ext-libxml\": \"*\",\n+                \"php\": \"^7.1 || ^8.0\"\n+            },\n+            \"require-dev\": {\n+                \"phpunit/phpunit\": \"^6.5 || ^8.5\"\n+            },\n+            \"type\": \"library\",\n+            \"autoload\": {\n+                \"psr-4\": {\n+                    \"enshrined\\\\svgSanitize\\\\\": \"src\"\n+                }\n+            },\n+            \"notification-url\": \"https://packagist.org/downloads/\",\n+            \"license\": [\n+                \"GPL-2.0-or-later\"\n+            ],\n+            \"authors\": [\n+                {\n+                    \"name\": \"Daryll Doyle\",\n+                    \"email\": \"daryll@enshrined.co.uk\"\n+                }\n+            ],\n+            \"description\": \"An SVG sanitizer for PHP\",\n+            \"support\": {\n+                \"issues\": \"https://github.com/darylldoyle/svg-sanitizer/issues\",\n+                \"source\": \"https://github.com/darylldoyle/svg-sanitizer/tree/0.20.0\"\n+            },\n+            \"time\": \"2024-09-05T10:18:12+00:00\"\n+        },\n         {\n             \"name\": \"firebase/php-jwt\",\n             \"version\": \"v6.10.1\","
        },
        {
          "filename": "tests/Api/v1/Controllers/IconControllerTest.php",
          "status": "modified",
          "additions": 33,
          "deletions": 1,
          "patch": "@@ -13,6 +13,7 @@\n use Illuminate\\Support\\Facades\\Storage;\n use PHPUnit\\Framework\\Attributes\\CoversClass;\n use PHPUnit\\Framework\\Attributes\\Test;\n+use Tests\\Classes\\LocalFile;\n use Tests\\Data\\HttpRequestTestData;\n use Tests\\Data\\OtpTestData;\n use Tests\\FeatureTestCase;\n@@ -41,7 +42,7 @@ public function setUp() : void\n             LogoService::TFA_URL           => Http::response(HttpRequestTestData::TFA_JSON_BODY, 200),\n         ]);\n         Http::fake([\n-            OtpTestData::EXTERNAL_IMAGE_URL_DECODED => Http::response((new FileFactory)->image('file.png', 10, 10)->tempFile, 200),\n+            OtpTestData::EXTERNAL_IMAGE_URL_DECODED          => Http::response((new FileFactory)->image('file.png', 10, 10)->tempFile, 200),\n         ]);\n \n         $this->user = User::factory()->create();\n@@ -84,6 +85,21 @@ public function test_upload_with_invalid_data_returns_validation_error()\n             ->assertStatus(422);\n     }\n \n+    #[Test]\n+    public function test_upload_infected_svg_data_stores_stores_sanitized_svg_content()\n+    {\n+        $file = LocalFile::fake()->infectedSvgIconFile();\n+\n+        $response = $this->actingAs($this->user, 'api-guard')\n+            ->json('POST', '/api/v1/icons', [\n+                'icon' => $file,\n+            ])\n+            ->assertCreated();\n+\n+        $svgContent = IconStore::get($response->getData()->filename);\n+        $this->assertStringNotContainsString(OtpTestData::ICON_SVG_MALICIOUS_CODE, $svgContent);\n+    }\n+\n     #[Test]\n     public function test_fetch_logo_returns_filename()\n     {\n@@ -97,6 +113,22 @@ public function test_fetch_logo_returns_filename()\n             ]);\n     }\n \n+    #[Test]\n+    public function test_fetch_logo_with_infected_svg_data_stores_sanitized_svg_content()\n+    {\n+        $response = $this->actingAs($this->user, 'api-guard')\n+            ->json('POST', '/api/v1/icons/default', [\n+                'service' => 'service',\n+            ])\n+            ->assertStatus(201)\n+            ->assertJsonStructure([\n+                'filename',\n+            ]);\n+\n+        $svgContent = IconStore::get($response->getData()->filename);\n+        $this->assertStringNotContainsString(OtpTestData::ICON_SVG_MALICIOUS_CODE, $svgContent);\n+    }\n+\n     #[Test]\n     public function test_fetch_unknown_logo_returns_nothing()\n     {"
        },
        {
          "filename": "tests/Api/v1/Controllers/TwoFAccountControllerTest.php",
          "status": "modified",
          "additions": 17,
          "deletions": 4,
          "patch": "@@ -8,6 +8,7 @@\n use App\\Api\\v1\\Resources\\TwoFAccountExportResource;\n use App\\Api\\v1\\Resources\\TwoFAccountReadResource;\n use App\\Api\\v1\\Resources\\TwoFAccountStoreResource;\n+use App\\Facades\\IconStore;\n use App\\Facades\\Settings;\n use App\\Models\\Group;\n use App\\Models\\TwoFAccount;\n@@ -242,11 +243,8 @@ public function setUp() : void\n         Http::fake([\n             LogoService::TFA_IMG_URL . '*' => Http::response(HttpRequestTestData::SVG_LOGO_BODY, 200),\n             LogoService::TFA_URL           => Http::response(HttpRequestTestData::TFA_JSON_BODY, 200),\n-        ]);\n-        Http::fake([\n             OtpTestData::EXTERNAL_IMAGE_URL_DECODED => Http::response((new FileFactory)->image('file.png', 10, 10)->tempFile, 200),\n-        ]);\n-        Http::fake([\n+            OtpTestData::EXTERNAL_INFECTED_IMAGE_URL_DECODED => Http::response((new FileFactory)->createWithContent('infected.svg', OtpTestData::ICON_SVG_DATA_INFECTED)->tempFile, 200),\n             'example.com/*' => Http::response(null, 400),\n         ]);\n \n@@ -1218,6 +1216,21 @@ public function test_preview_with_unreachable_image_returns_success_with_no_icon\n             ]);\n     }\n \n+    #[Test]\n+    public function test_preview_with_infected_svg_image_stores_sanitized_image()\n+    {\n+        $this->user['preferences->getOfficialIcons'] = true;\n+\n+        $response = $this->actingAs($this->user, 'api-guard')\n+            ->json('POST', '/api/v1/twofaccounts/preview', [\n+                'uri' => OtpTestData::TOTP_URI_WITH_INFECTED_SVG_IMAGE,\n+            ])\n+            ->assertOk();\n+\n+        $svgContent = IconStore::get($response->getData()->icon);\n+        $this->assertStringNotContainsString(OtpTestData::ICON_SVG_MALICIOUS_CODE, $svgContent);\n+    }\n+\n     #[Test]\n     public function test_export_returns_json_migration_resource()\n     {"
        },
        {
          "filename": "tests/Classes/LocalFileFactory.php",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -215,4 +215,20 @@ public function invalidPlainTextFileEmpty()\n             fwrite($temp, ob_get_clean());\n         }));\n     }\n+\n+    /**\n+     * Create a new local infected SVG file.\n+     *\n+     * @return \\Illuminate\\Http\\Testing\\File\n+     */\n+    public function infectedSvgIconFile()\n+    {\n+        return new File('infectedSvgIcon.svg', tap(tmpfile(), function ($temp) {\n+            ob_start();\n+\n+            echo OtpTestData::ICON_SVG_DATA_INFECTED;\n+\n+            fwrite($temp, ob_get_clean());\n+        }));\n+    }\n }"
        },
        {
          "filename": "tests/Data/OtpTestData.php",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -36,6 +36,10 @@ class OtpTestData\n \n     const EXTERNAL_IMAGE_URL_ENCODED = 'https%3A%2F%2Fen.opensuse.org%2Fimages%2F4%2F44%2FButton-filled-colour.png';\n \n+    const EXTERNAL_INFECTED_IMAGE_URL_DECODED = 'https://image.com/infected.svg';\n+\n+    const EXTERNAL_INFECTED_IMAGE_URL_ENCODED = 'https%3A%2F%2Fimage.com%2Finfected.svg';\n+\n     const ICON_PNG = 'test.png';\n \n     const ICON_PNG_DATA = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAC0lEQVQImWP4DwQACfsD/eNV8pwAAAAASUVORK5CYII=';\n@@ -58,6 +62,10 @@ class OtpTestData\n \n     const ICON_SVG_DATA_ENCODED = 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxMDI0IDEwMjQiPg0KICAgPGNpcmNsZSBjeD0iNTEyIiBjeT0iNTEyIiByPSI1MTIiIHN0eWxlPSJmaWxsOiMwMDBlOWMiLz4NCiAgIDxwYXRoIGQ9Im03MDAuMiA0NjYuNSA2MS4yLTEwNi4zYzIzLjYgNDEuNiAzNy4yIDg5LjggMzcuMiAxNDEuMSAwIDY4LjgtMjQuMyAxMzEuOS02NC43IDE4MS40SDU3NS44bDQ4LjctODQuNmgtNjQuNGw3NS44LTEzMS43IDY0LjMuMXptLTU1LjQtMTI1LjJMNDQ4LjMgNjgyLjVsLjEuMkgyOTAuMWMtNDAuNS00OS41LTY0LjctMTEyLjYtNjQuNy0xODEuNCAwLTUxLjQgMTMuNi05OS42IDM3LjMtMTQxLjNsMTAyLjUgMTc4LjIgMTEzLjMtMTk3aDE2Ni4zeiIgc3R5bGU9ImZpbGw6I2ZmZiIvPg0KPC9zdmc+DQo=';\n \n+    const ICON_SVG_MALICIOUS_CODE = '<script>alert(\"XSS\");</script>';\n+\n+    const ICON_SVG_DATA_INFECTED = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"><svg width=\"100\" height=\"100\" version=\"1.1\" xmlns=\"http://www..w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">' . self::ICON_SVG_MALICIOUS_CODE . '</svg>';\n+\n     const ICON_GIF = 'test.gif';\n \n     const ICON_GIF_DATA = 'R0lGODlhAQACAPcAAAAAAAAAMwAAZgAAmQAAzAAA/wArAAArMwArZgArmQArzAAr/wBVAABVMwBVZgBVmQBVzABV/wCAAACAMwCAZgCAmQCAzACA/wCqAACqMwCqZgCqmQCqzACq/wDVAADVMwDVZgDVmQDVzADV/wD/AAD/MwD/ZgD/mQD/zAD//zMAADMAMzMAZjMAmTMAzDMA/zMrADMrMzMrZjMrmTMrzDMr/zNVADNVMzNVZjNVmTNVzDNV/zOAADOAMzOAZjOAmTOAzDOA/zOqADOqMzOqZjOqmTOqzDOq/zPVADPVMzPVZjPVmTPVzDPV/zP/ADP/MzP/ZjP/mTP/zDP//2YAAGYAM2YAZmYAmWYAzGYA/2YrAGYrM2YrZmYrmWYrzGYr/2ZVAGZVM2ZVZmZVmWZVzGZV/2aAAGaAM2aAZmaAmWaAzGaA/2aqAGaqM2aqZmaqmWaqzGaq/2bVAGbVM2bVZmbVmWbVzGbV/2b/AGb/M2b/Zmb/mWb/zGb//5kAAJkAM5kAZpkAmZkAzJkA/5krAJkrM5krZpkrmZkrzJkr/5lVAJlVM5lVZplVmZlVzJlV/5mAAJmAM5mAZpmAmZmAzJmA/5mqAJmqM5mqZpmqmZmqzJmq/5nVAJnVM5nVZpnVmZnVzJnV/5n/AJn/M5n/Zpn/mZn/zJn//8wAAMwAM8wAZswAmcwAzMwA/8wrAMwrM8wrZswrmcwrzMwr/8xVAMxVM8xVZsxVmcxVzMxV/8yAAMyAM8yAZsyAmcyAzMyA/8yqAMyqM8yqZsyqmcyqzMyq/8zVAMzVM8zVZszVmczVzMzV/8z/AMz/M8z/Zsz/mcz/zMz///8AAP8AM/8AZv8Amf8AzP8A//8rAP8rM/8rZv8rmf8rzP8r//9VAP9VM/9VZv9Vmf9VzP9V//+AAP+AM/+AZv+Amf+AzP+A//+qAP+qM/+qZv+qmf+qzP+q///VAP/VM//VZv/Vmf/VzP/V////AP//M///Zv//mf//zP///wAAAAAAAAAAAAAAACH5BAEAAPwALAAAAAABAAIAAAgFAPftCwgAOw==';\n@@ -86,6 +94,8 @@ class OtpTestData\n \n     const TOTP_URI_WITH_UNREACHABLE_IMAGE = 'otpauth://totp/service:account?secret=A4GRFHVVRBGY7UIW&image=' . self::UNREACHABLE_IMAGE_URL;\n \n+    const TOTP_URI_WITH_INFECTED_SVG_IMAGE = 'otpauth://totp/service:account?secret=A4GRFHVVRBGY7UIW&image=' . self::EXTERNAL_INFECTED_IMAGE_URL_ENCODED;\n+\n     const INVALID_OTPAUTH_URI = 'otpauth://Xotp/' . self::ACCOUNT . '?secret=' . self::SECRET;\n \n     const INVALID_OTPAUTH_URI_MISMATCHING_ISSUER = 'otpauth://totp/' . self::MICROSOFT . ':' . self::ACCOUNT . '?secret=' . self::SECRET . '&issuer=' . self::SERVICE;"
        },
        {
          "filename": "tests/Feature/Services/IconStoreServiceTest.php",
          "status": "modified",
          "additions": 47,
          "deletions": 0,
          "patch": "@@ -482,11 +482,58 @@ public function test_store_returns_false_when_it_fails()\n             ->with($iconName, $iconContent)\n             ->andReturn(false);\n \n+        Storage::shouldReceive('disk->mimeType')\n+            ->with($iconName)\n+            ->andReturn('image/png');\n+\n         $result = $this->iconStore->store($iconName, $iconContent);\n \n         $this->assertFalse($result);\n     }\n \n+    #[Test]\n+    public function test_store_stores_sanitized_svg_content()\n+    {\n+        Settings::set('storeIconsInDatabase', true);\n+        \n+        $result = $this->iconStore->store(OtpTestData::ICON_SVG, OtpTestData::ICON_SVG_DATA_INFECTED);\n+\n+        $this->assertTrue($result);\n+\n+        $this->assertStringNotContainsString(\n+            OtpTestData::ICON_SVG_MALICIOUS_CODE,\n+            Storage::disk('icons')->get(OtpTestData::ICON_SVG)\n+        );\n+        \n+        $dbRecord = DB::table('icons')->where('name', OtpTestData::ICON_SVG)->first();\n+        \n+        $this->assertStringNotContainsString(\n+            OtpTestData::ICON_SVG_MALICIOUS_CODE,\n+            $dbRecord->content,\n+        );\n+    }\n+\n+    #[Test]\n+    public function test_store_returns_false_when_svg_sanitize_failed()\n+    {\n+        $result = $this->iconStore->store(OtpTestData::ICON_SVG, 'this_will_make_svg_data_invalid' . OtpTestData::ICON_SVG_DATA);\n+\n+        $this->assertFalse($result);\n+    }\n+\n+    #[Test]\n+    public function test_store_deletes_svg_icon_that_cannot_be_sanitized()\n+    {\n+        Settings::set('storeIconsInDatabase', true);\n+        \n+        $result = $this->iconStore->store(OtpTestData::ICON_SVG, 'this_will_make_svg_data_invalid' . OtpTestData::ICON_SVG_DATA);\n+\n+        Storage::disk('icons')->assertMissing(OtpTestData::ICON_SVG);\n+        $this->assertDatabaseMissing('icons', [\n+            'name' => OtpTestData::ICON_SVG,\n+        ]);\n+    }\n+\n     #[Test]\n     public function test_exists_returns_true()\n     {"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 7,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "23a0ae31e5a9fd59f9fdbcd4dfed416ce92bd6bb",
            "date": "2024-11-27T13:53:52Z",
            "author_login": "Bubka"
          },
          {
            "sha": "c38f3cfef74b25c3bd1a2788524162951a63d620",
            "date": "2024-11-27T13:37:06Z",
            "author_login": "Bubka"
          },
          {
            "sha": "5bca296cfa6296529d7525f1171b4e94b2a2e142",
            "date": "2024-11-27T12:19:46Z",
            "author_login": "Bubka"
          },
          {
            "sha": "2b9a18e6ead38ed0453465d4df129d002ae60cf8",
            "date": "2024-11-27T10:38:41Z",
            "author_login": "Bubka"
          },
          {
            "sha": "1fdedddd6ba01ee1eeedce930f342a7fbb0efabb",
            "date": "2024-11-27T10:37:14Z",
            "author_login": "Bubka"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "2FAuth is a web app to manage Two-Factor Authentication (2FA) accounts and generate their security codes. Versions prior to 5.4.1 are vulnerable to stored cross-site scripting due to improper headers in direct access to uploaded SVGs. The application allows uploading images in several places. One of the accepted types of image is SVG, which allows JS scripting. Therefore, by uploading a malicious SVG which contains JS code, an attacker which is able to drive a victim to the uploaded image could compromise that victim's session and access to their tokens. Version 5.4.1 contains a patch for the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-20T14:15:17.967",
    "last_modified": "2024-11-21T13:57:24.187",
    "fix_date": "2024-11-15T09:39:29Z"
  },
  "references": [
    {
      "url": "https://github.com/Bubka/2FAuth/commit/93c508e118f483f3c93ac36e1f91face95af642d",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Bubka/2FAuth/security/advisories/GHSA-q5p4-6q4v-gqg3",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:31.269673",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "2FAuth",
    "owner": "Bubka",
    "created_at": "2019-05-15T16:32:56Z",
    "updated_at": "2025-01-14T14:20:06Z",
    "pushed_at": "2024-11-27T16:00:33Z",
    "size": 17538,
    "stars": 2448,
    "forks": 159,
    "open_issues": 34,
    "watchers": 2448,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 3755876,
      "Vue": 285400,
      "RobotFramework": 77622,
      "Procfile": 146
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T15:14:56.286768"
  }
}