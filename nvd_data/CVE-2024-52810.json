{
  "cve_id": "CVE-2024-52810",
  "github_data": {
    "repository": "intlify/vue-i18n",
    "fix_commit": "9f20909ef8c9232a1072d7818e12ed6d6451024d",
    "related_commits": [
      "9f20909ef8c9232a1072d7818e12ed6d6451024d"
    ],
    "patch_url": "https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d.patch",
    "fix_commit_details": {
      "sha": "9f20909ef8c9232a1072d7818e12ed6d6451024d",
      "commit_date": "2024-11-28T04:27:36Z",
      "author": {
        "login": "kazupon",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 318,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 369,
        "additions": 210,
        "deletions": 159
      },
      "files": [
        {
          "filename": "packages/core-base/src/compilation.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -4,6 +4,7 @@ import {\n   detectHtmlTag\n } from '@intlify/message-compiler'\n import {\n+  create,\n   format,\n   hasOwn,\n   isBoolean,\n@@ -32,10 +33,10 @@ function checkHtmlMessage(source: string, warnHtmlMessage?: boolean): void {\n }\n \n const defaultOnCacheKey = (message: string): string => message\n-let compileCache: unknown = Object.create(null)\n+let compileCache: unknown = create()\n \n export function clearCompileCache(): void {\n-  compileCache = Object.create(null)\n+  compileCache = create()\n }\n \n export function isMessageAST(val: unknown): val is ResourceNode {"
        },
        {
          "filename": "packages/core-base/src/context.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 8,
          "patch": "@@ -2,6 +2,7 @@\n \n import {\n   assign,\n+  create,\n   isArray,\n   isBoolean,\n   isFunction,\n@@ -507,23 +508,23 @@ export function createCoreContext<Message = string>(options: any = {}): any {\n       : _locale\n   const messages = isPlainObject(options.messages)\n     ? options.messages\n-    : { [_locale]: {} }\n+    : createResources(_locale)\n   const datetimeFormats = !__LITE__\n     ? isPlainObject(options.datetimeFormats)\n       ? options.datetimeFormats\n-      : { [_locale]: {} }\n-    : { [_locale]: {} }\n+      : createResources(_locale)\n+    : createResources(_locale)\n   const numberFormats = !__LITE__\n     ? isPlainObject(options.numberFormats)\n       ? options.numberFormats\n-      : { [_locale]: {} }\n-    : { [_locale]: {} }\n+      : createResources(_locale)\n+    : createResources(_locale)\n   const modifiers = assign(\n-    {},\n-    options.modifiers || {},\n+    create(),\n+    options.modifiers,\n     getDefaultLinkedModifiers<Message>()\n   )\n-  const pluralRules = options.pluralRules || {}\n+  const pluralRules = options.pluralRules || create()\n   const missing = isFunction(options.missing) ? options.missing : null\n   const missingWarn =\n     isBoolean(options.missingWarn) || isRegExp(options.missingWarn)\n@@ -628,6 +629,8 @@ export function createCoreContext<Message = string>(options: any = {}): any {\n   return context\n }\n \n+const createResources = (locale: Locale) => ({ [locale]: create() })\n+\n /** @internal */\n export function isTranslateFallbackWarn(\n   fallback: boolean | RegExp,"
        },
        {
          "filename": "packages/core-base/src/datetime.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -1,5 +1,6 @@\n import {\n   assign,\n+  create,\n   isBoolean,\n   isDate,\n   isEmptyObject,\n@@ -322,8 +323,8 @@ export function parseDateTimeArgs(\n   ...args: unknown[]\n ): [string, number | Date, DateTimeOptions, Intl.DateTimeFormatOptions] {\n   const [arg1, arg2, arg3, arg4] = args\n-  const options = {} as DateTimeOptions\n-  let overrides = {} as Intl.DateTimeFormatOptions\n+  const options = create() as DateTimeOptions\n+  let overrides = create() as Intl.DateTimeFormatOptions\n \n   let value: number | Date\n   if (isString(arg1)) {"
        },
        {
          "filename": "packages/core-base/src/number.ts",
          "status": "modified",
          "additions": 15,
          "deletions": 14,
          "patch": "@@ -1,31 +1,32 @@\n import {\n-  isString,\n+  assign,\n+  create,\n   isBoolean,\n-  isPlainObject,\n-  isNumber,\n   isEmptyObject,\n-  assign\n+  isNumber,\n+  isPlainObject,\n+  isString\n } from '@intlify/shared'\n import {\n   handleMissing,\n   isTranslateFallbackWarn,\n-  NOT_REOSLVED,\n-  MISSING_RESOLVE_VALUE\n+  MISSING_RESOLVE_VALUE,\n+  NOT_REOSLVED\n } from './context'\n-import { CoreWarnCodes, getWarnMessage } from './warnings'\n import { CoreErrorCodes, createCoreError } from './errors'\n-import { Availabilities } from './intl'\n import { getLocale } from './fallbacker'\n+import { Availabilities } from './intl'\n+import { CoreWarnCodes, getWarnMessage } from './warnings'\n \n-import type { Locale, FallbackLocale } from './runtime'\n+import type { CoreContext, CoreInternalContext } from './context'\n+import type { LocaleOptions } from './fallbacker'\n+import type { FallbackLocale, Locale } from './runtime'\n import type {\n   NumberFormat,\n-  NumberFormats as NumberFormatsType,\n   NumberFormatOptions,\n+  NumberFormats as NumberFormatsType,\n   PickupFormatKeys\n } from './types'\n-import type { LocaleOptions } from './fallbacker'\n-import type { CoreContext, CoreInternalContext } from './context'\n \n /**\n  *  # number\n@@ -317,8 +318,8 @@ export function parseNumberArgs(\n   ...args: unknown[]\n ): [string, number, NumberOptions, Intl.NumberFormatOptions] {\n   const [arg1, arg2, arg3, arg4] = args\n-  const options = {} as NumberOptions\n-  let overrides = {} as Intl.NumberFormatOptions\n+  const options = create() as NumberOptions\n+  let overrides = create() as Intl.NumberFormatOptions\n \n   if (!isNumber(arg1)) {\n     throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT)"
        },
        {
          "filename": "packages/core-base/src/runtime.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -1,6 +1,7 @@\n import { HelperNameMap } from '@intlify/message-compiler'\n import {\n   assign,\n+  create,\n   isArray,\n   isFunction,\n   isNumber,\n@@ -360,7 +361,7 @@ export function createMessageContext<T = string, N = {}>(\n   const list = (index: number): unknown => _list[index]\n \n   // eslint-disable-next-line @typescript-eslint/no-explicit-any\n-  const _named = options.named || ({} as any)\n+  const _named = options.named || (create() as any)\n \n   isNumber(options.pluralIndex) && normalizeNamed(pluralIndex, _named)\n   const named = (key: string): unknown => _named[key]\n@@ -437,7 +438,7 @@ export function createMessageContext<T = string, N = {}>(\n     [HelperNameMap.TYPE]: type,\n     [HelperNameMap.INTERPOLATE]: interpolate,\n     [HelperNameMap.NORMALIZE]: normalize,\n-    [HelperNameMap.VALUES]: assign({}, _list, _named)\n+    [HelperNameMap.VALUES]: assign(create(), _list, _named)\n   }\n \n   return ctx"
        },
        {
          "filename": "packages/core-base/src/translate.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -1,5 +1,6 @@\n import {\n   assign,\n+  create,\n   escapeHtml,\n   generateCodeFrame,\n   generateFormatCacheKey,\n@@ -677,7 +678,7 @@ export function translate<\n     : [\n         key,\n         locale,\n-        (messages as unknown as LocaleMessages<Message>)[locale] || {}\n+        (messages as unknown as LocaleMessages<Message>)[locale] || create()\n       ]\n   // NOTE:\n   //  Fix to work around `ssrTransfrom` bug in Vite.\n@@ -830,7 +831,7 @@ function resolveMessageFormat<Messages, Message>(\n   } = context\n   const locales = localeFallbacker(context as any, fallbackLocale, locale) // eslint-disable-line @typescript-eslint/no-explicit-any\n \n-  let message: LocaleMessageValue<Message> = {}\n+  let message: LocaleMessageValue<Message> = create()\n   let targetLocale: Locale | undefined\n   let format: PathValue = null\n   let from: Locale = locale\n@@ -869,7 +870,7 @@ function resolveMessageFormat<Messages, Message>(\n     }\n \n     message =\n-      (messages as unknown as LocaleMessages<Message>)[targetLocale] || {}\n+      (messages as unknown as LocaleMessages<Message>)[targetLocale] || create()\n \n     // for vue-devtools timeline event\n     let start: number | null = null\n@@ -1044,7 +1045,7 @@ export function parseTranslateArgs<Message = string>(\n   ...args: unknown[]\n ): [Path | MessageFunction<Message> | ResourceNode, TranslateOptions] {\n   const [arg1, arg2, arg3] = args\n-  const options = {} as TranslateOptions\n+  const options = create() as TranslateOptions\n \n   if (\n     !isString(arg1) &&"
        },
        {
          "filename": "packages/message-compiler/src/tokenizer.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -1,10 +1,10 @@\n-import { createScanner, CHAR_SP as SPACE, CHAR_LF as NEW_LINE } from './scanner'\n+import { CompileErrorCodes, createCompileError } from './errors'\n import { createLocation, createPosition } from './location'\n-import { createCompileError, CompileErrorCodes } from './errors'\n+import { createScanner, CHAR_LF as NEW_LINE, CHAR_SP as SPACE } from './scanner'\n \n-import type { Scanner } from './scanner'\n-import type { SourceLocation, Position } from './location'\n+import type { Position, SourceLocation } from './location'\n import type { TokenizeOptions } from './options'\n+import type { Scanner } from './scanner'\n \n export const enum TokenTypes {\n   Text, // 0\n@@ -447,6 +447,7 @@ export function createTokenizer(\n   function readText(scnr: Scanner): string {\n     let buf = ''\n \n+     \n     while (true) {\n       const ch = scnr.currentChar()\n       if ("
        },
        {
          "filename": "packages/shared/src/messages.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -1,4 +1,4 @@\n-import { isArray, isObject } from './utils'\n+import { create, isArray, isObject } from './utils'\n \n const isNotObjectOrIsArray = (val: unknown) => !isObject(val) || isArray(val)\n // eslint-disable-next-line @typescript-eslint/no-explicit-any\n@@ -14,10 +14,13 @@ export function deepCopy(src: any, des: any): void {\n \n     // using `Object.keys` which skips prototype properties\n     Object.keys(src).forEach(key => {\n+      if (key === '__proto__') {\n+        return\n+      }\n       // if src[key] is an object/array, set des[key]\n       // to empty object/array to prevent setting by reference\n       if (isObject(src[key]) && !isObject(des[key])) {\n-        des[key] = Array.isArray(src[key]) ? [] : {}\n+        des[key] = Array.isArray(src[key]) ? [] : create()\n       }\n \n       if (isNotObjectOrIsArray(des[key]) || isNotObjectOrIsArray(src[key])) {"
        },
        {
          "filename": "packages/shared/src/utils.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -81,6 +81,9 @@ export const isEmptyObject = (val: unknown): val is boolean =>\n \n export const assign = Object.assign\n \n+const _create = Object.create\n+export const create = (obj: object | null = null): object => _create(obj)\n+\n let _globalThis: any\n export const getGlobalThis = (): any => {\n   // prettier-ignore\n@@ -95,7 +98,7 @@ export const getGlobalThis = (): any => {\n             ? window\n             : typeof global !== 'undefined'\n               ? global\n-              : {})\n+              : create())\n   )\n }\n "
        },
        {
          "filename": "packages/shared/test/messages.test.ts",
          "status": "modified",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -48,3 +48,34 @@ test('deepCopy merges without mutating src argument', () => {\n   // should not mutate source object\n   expect(msg1).toStrictEqual(copy1)\n })\n+\n+describe('CVE-2024-52810', () => {\n+  test('__proto__', () => {\n+    const source = '{ \"__proto__\": { \"pollutedKey\": 123 } }'\n+    const dest = {}\n+\n+    deepCopy(JSON.parse(source), dest)\n+    expect(dest).toEqual({})\n+    // @ts-ignore -- initialize polluted property\n+    expect(JSON.parse(JSON.stringify({}.__proto__))).toEqual({})\n+  })\n+\n+  test('nest __proto__', () => {\n+    const source = '{ \"foo\": { \"__proto__\": { \"pollutedKey\": 123 } } }'\n+    const dest = {}\n+\n+    deepCopy(JSON.parse(source), dest)\n+    expect(dest).toEqual({ foo: {} })\n+    // @ts-ignore -- initialize polluted property\n+    expect(JSON.parse(JSON.stringify({}.__proto__))).toEqual({})\n+  })\n+\n+  test('constructor prototype', () => {\n+    const source = '{ \"constructor\": { \"prototype\": { \"polluted\": 1 } } }'\n+    const dest = {}\n+\n+    deepCopy(JSON.parse(source), dest)\n+    // @ts-ignore -- initialize polluted property\n+    expect({}.polluted).toBeUndefined()\n+  })\n+})"
        },
        {
          "filename": "packages/vue-i18n-core/src/components/DatetimeFormat.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -1,16 +1,16 @@\n-import { defineComponent } from 'vue'\n-import { assign } from '@intlify/shared'\n import { DATETIME_FORMAT_OPTIONS_KEYS } from '@intlify/core-base'\n+import { assign } from '@intlify/shared'\n+import { defineComponent } from 'vue'\n import { useI18n } from '../i18n'\n import { DatetimePartsSymbol } from '../symbols'\n-import { renderFormatter } from './formatRenderer'\n import { baseFormatProps } from './base'\n+import { renderFormatter } from './formatRenderer'\n \n-import type { VNodeProps } from 'vue'\n import type { DateTimeOptions } from '@intlify/core-base'\n+import type { VNodeProps } from 'vue'\n import type { Composer, ComposerInternal } from '../composer'\n-import type { FormattableProps } from './formatRenderer'\n import type { BaseFormatProps } from './base'\n+import type { FormattableProps } from './formatRenderer'\n \n /**\n  * DatetimeFormat Component Props"
        },
        {
          "filename": "packages/vue-i18n-core/src/components/NumberFormat.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -1,16 +1,16 @@\n-import { defineComponent } from 'vue'\n-import { assign } from '@intlify/shared'\n import { NUMBER_FORMAT_OPTIONS_KEYS } from '@intlify/core-base'\n+import { assign } from '@intlify/shared'\n+import { defineComponent } from 'vue'\n import { useI18n } from '../i18n'\n import { NumberPartsSymbol } from '../symbols'\n-import { renderFormatter } from './formatRenderer'\n import { baseFormatProps } from './base'\n+import { renderFormatter } from './formatRenderer'\n \n-import type { VNodeProps } from 'vue'\n import type { NumberOptions } from '@intlify/core-base'\n+import type { VNodeProps } from 'vue'\n import type { Composer, ComposerInternal } from '../composer'\n-import type { FormattableProps } from './formatRenderer'\n import type { BaseFormatProps } from './base'\n+import type { FormattableProps } from './formatRenderer'\n \n /**\n  * NumberFormat Component Props"
        },
        {
          "filename": "packages/vue-i18n-core/src/components/Translation.ts",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -1,12 +1,12 @@\n-import { h, defineComponent } from 'vue'\n-import { isNumber, isString, isObject, assign } from '@intlify/shared'\n-import { TranslateVNodeSymbol } from '../symbols'\n+import { assign, create, isNumber, isObject, isString } from '@intlify/shared'\n+import { defineComponent, h } from 'vue'\n import { useI18n } from '../i18n'\n+import { TranslateVNodeSymbol } from '../symbols'\n import { baseFormatProps } from './base'\n-import { getInterpolateArg, getFragmentableTag } from './utils'\n+import { getFragmentableTag, getInterpolateArg } from './utils'\n \n-import type { VNodeChild, VNodeProps } from 'vue'\n import type { TranslateOptions } from '@intlify/core-base'\n+import type { VNodeChild, VNodeProps } from 'vue'\n import type { Composer, ComposerInternal } from '../composer'\n import type { BaseFormatProps } from './base'\n \n@@ -59,7 +59,7 @@ export const TranslationImpl = /*#__PURE__*/ defineComponent({\n \n     return (): VNodeChild => {\n       const keys = Object.keys(slots).filter(key => key !== '_')\n-      const options = {} as TranslateOptions\n+      const options = create() as TranslateOptions\n       if (props.locale) {\n         options.locale = props.locale\n       }\n@@ -73,7 +73,7 @@ export const TranslationImpl = /*#__PURE__*/ defineComponent({\n         arg,\n         options\n       )\n-      const assignedAttrs = assign({}, attrs)\n+      const assignedAttrs = assign(create(), attrs)\n       const tag =\n         isString(props.tag) || isObject(props.tag)\n           ? props.tag"
        },
        {
          "filename": "packages/vue-i18n-core/src/components/base.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,7 +1,7 @@\n import { Composer } from '../composer'\n \n-import type { I18nScope } from '../i18n'\n import type { Locale } from '@intlify/core-base'\n+import type { I18nScope } from '../i18n'\n \n export type ComponentI18nScope = Exclude<I18nScope, 'local'>\n "
        },
        {
          "filename": "packages/vue-i18n-core/src/components/formatRenderer.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -1,15 +1,15 @@\n+import { assign, create, isArray, isObject, isString } from '@intlify/shared'\n import { h } from 'vue'\n import { getFragmentableTag } from './utils'\n-import { isString, isObject, isArray, assign } from '@intlify/shared'\n \n+import type { DateTimeOptions, NumberOptions } from '@intlify/core-base'\n import type {\n   RenderFunction,\n   SetupContext,\n   VNode,\n-  VNodeChild,\n-  VNodeArrayChildren\n+  VNodeArrayChildren,\n+  VNodeChild\n } from 'vue'\n-import type { NumberOptions, DateTimeOptions } from '@intlify/core-base'\n import type { BaseFormatProps } from './base'\n \n /**\n@@ -61,7 +61,7 @@ export function renderFormatter<\n \n   return (): VNodeChild => {\n     const options = { part: true } as Arg\n-    let overrides = {} as FormatOverrideOptions\n+    let overrides = create() as FormatOverrideOptions\n \n     if (props.locale) {\n       options.locale = props.locale\n@@ -78,9 +78,9 @@ export function renderFormatter<\n       // Filter out number format options only\n       overrides = Object.keys(props.format).reduce((options, prop) => {\n         return slotKeys.includes(prop)\n-          ? assign({}, options, { [prop]: (props.format as any)[prop] }) // eslint-disable-line @typescript-eslint/no-explicit-any\n+          ? assign(create(), options, { [prop]: (props.format as any)[prop] }) // eslint-disable-line @typescript-eslint/no-explicit-any\n           : options\n-      }, {})\n+      }, create())\n     }\n \n     const parts = partFormatter(...[props.value, options, overrides])\n@@ -100,7 +100,7 @@ export function renderFormatter<\n       children = [parts]\n     }\n \n-    const assignedAttrs = assign({}, attrs)\n+    const assignedAttrs = assign(create(), attrs)\n     const tag =\n       isString(props.tag) || isObject(props.tag)\n         ? props.tag"
        },
        {
          "filename": "packages/vue-i18n-core/src/components/index.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -1,5 +1,5 @@\n-export { ComponentI18nScope, BaseFormatProps } from './base'\n+export { BaseFormatProps, ComponentI18nScope } from './base'\n+export { DatetimeFormat, DatetimeFormatProps, I18nD } from './DatetimeFormat'\n export { FormattableProps } from './formatRenderer'\n-export { Translation, I18nT, TranslationProps } from './Translation'\n-export { NumberFormat, I18nN, NumberFormatProps } from './NumberFormat'\n-export { DatetimeFormat, I18nD, DatetimeFormatProps } from './DatetimeFormat'\n+export { I18nN, NumberFormat, NumberFormatProps } from './NumberFormat'\n+export { I18nT, Translation, TranslationProps } from './Translation'"
        },
        {
          "filename": "packages/vue-i18n-core/src/components/utils.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,3 +1,4 @@\n+import { create } from '@intlify/shared'\n import { Fragment } from 'vue'\n \n import type { NamedValue } from '@intlify/core-base'\n@@ -27,7 +28,7 @@ export function getInterpolateArg(\n         arg[key] = slot()\n       }\n       return arg\n-    }, {} as NamedValue)\n+    }, create() as NamedValue)\n   }\n }\n "
        },
        {
          "filename": "packages/vue-i18n-core/src/index.ts",
          "status": "modified",
          "additions": 83,
          "deletions": 83,
          "patch": "@@ -1,120 +1,120 @@\n-import { getGlobalThis } from '@intlify/shared'\n import { setDevToolsHook } from '@intlify/core-base'\n+import { getGlobalThis } from '@intlify/shared'\n import { initDev, initFeatureFlags } from './misc'\n \n export {\n-  SchemaParams,\n-  LocaleParams,\n-  Path,\n-  PathValue,\n-  NamedValue,\n-  Locale,\n+  CompileError,\n+  DateTimeOptions,\n   FallbackLocale,\n-  LocaleMessageValue,\n-  LocaleMessageDictionary,\n-  LocaleMessageType,\n-  LocaleMessages,\n-  LocaleMessage,\n-  NumberFormat as IntlNumberFormat,\n   DateTimeFormat as IntlDateTimeFormat,\n   DateTimeFormats as IntlDateTimeFormats,\n-  NumberFormats as IntlNumberFormats,\n-  LocaleMatcher as IntlLocaleMatcher,\n   FormatMatcher as IntlFormatMatcher,\n-  MessageFunction,\n-  MessageFunctions,\n-  PluralizationRule,\n+  LocaleMatcher as IntlLocaleMatcher,\n+  NumberFormat as IntlNumberFormat,\n+  NumberFormats as IntlNumberFormats,\n   LinkedModifiers,\n-  TranslateOptions,\n-  DateTimeOptions,\n-  NumberOptions,\n-  PostTranslationHandler,\n-  MessageResolver,\n+  Locale,\n+  LocaleMessage,\n+  LocaleMessageDictionary,\n+  LocaleMessages,\n+  LocaleMessageType,\n+  LocaleMessageValue,\n+  LocaleParams,\n   MessageCompiler,\n   MessageCompilerContext,\n-  CompileError,\n   MessageContext,\n-  RemovedIndexResources\n+  MessageFunction,\n+  MessageFunctions,\n+  MessageResolver,\n+  NamedValue,\n+  NumberOptions,\n+  Path,\n+  PathValue,\n+  PluralizationRule,\n+  PostTranslationHandler,\n+  RemovedIndexResources,\n+  SchemaParams,\n+  TranslateOptions\n } from '@intlify/core-base'\n export {\n-  VueMessageType,\n-  DefineLocaleMessage,\n-  DefaultLocaleMessageSchema,\n-  DefineDateTimeFormat,\n-  DefaultDateTimeFormatSchema,\n-  DefineNumberFormat,\n-  DefaultNumberFormatSchema,\n-  MissingHandler,\n-  ComposerOptions,\n+  BaseFormatProps,\n+  ComponentI18nScope,\n+  DatetimeFormat,\n+  DatetimeFormatProps,\n+  FormattableProps,\n+  I18nD,\n+  I18nN,\n+  I18nT,\n+  NumberFormat,\n+  NumberFormatProps,\n+  Translation,\n+  TranslationProps\n+} from './components'\n+export {\n   Composer,\n   ComposerCustom,\n-  CustomBlock,\n-  CustomBlocks,\n-  ComposerTranslation,\n   ComposerDateTimeFormatting,\n   ComposerNumberFormatting,\n-  ComposerResolveLocaleMessageTranslation\n+  ComposerOptions,\n+  ComposerResolveLocaleMessageTranslation,\n+  ComposerTranslation,\n+  CustomBlock,\n+  CustomBlocks,\n+  DefaultDateTimeFormatSchema,\n+  DefaultLocaleMessageSchema,\n+  DefaultNumberFormatSchema,\n+  DefineDateTimeFormat,\n+  DefineLocaleMessage,\n+  DefineNumberFormat,\n+  MissingHandler,\n+  VueMessageType\n } from './composer'\n export {\n-  TranslateResult,\n+  TranslationDirective,\n+  vTDirective,\n+  VTDirectiveValue\n+} from './directive'\n+export {\n+  ComposerAdditionalOptions,\n+  ComposerExtender,\n+  createI18n,\n+  ExportedGlobalComposer,\n+  I18n,\n+  I18nAdditionalOptions,\n+  I18nInjectionKey,\n+  I18nMode,\n+  I18nOptions,\n+  I18nScope,\n+  useI18n,\n+  UseI18nOptions\n+} from './i18n'\n+export {\n   Choice,\n-  LocaleMessageObject,\n-  PluralizationRulesMap,\n-  WarnHtmlInMessageLevel,\n   DateTimeFormatResult,\n+  LocaleMessageObject,\n   NumberFormatResult,\n-  VueI18nOptions,\n+  PluralizationRulesMap,\n+  TranslateResult,\n   VueI18n,\n-  VueI18nTranslation,\n-  VueI18nTranslationChoice,\n   VueI18nDateTimeFormatting,\n+  VueI18nExtender,\n   VueI18nNumberFormatting,\n+  VueI18nOptions,\n   VueI18nResolveLocaleMessageTranslation,\n-  VueI18nExtender\n+  VueI18nTranslation,\n+  VueI18nTranslationChoice,\n+  WarnHtmlInMessageLevel\n } from './legacy'\n-export {\n-  createI18n,\n-  useI18n,\n-  I18nInjectionKey,\n-  I18nOptions,\n-  I18nAdditionalOptions,\n-  I18n,\n-  I18nMode,\n-  I18nScope,\n-  ComposerAdditionalOptions,\n-  UseI18nOptions,\n-  ExportedGlobalComposer,\n-  ComposerExtender\n-} from './i18n'\n-export {\n-  Translation,\n-  I18nT,\n-  NumberFormat,\n-  I18nN,\n-  DatetimeFormat,\n-  I18nD,\n-  TranslationProps,\n-  NumberFormatProps,\n-  DatetimeFormatProps,\n-  FormattableProps,\n-  BaseFormatProps,\n-  ComponentI18nScope\n-} from './components'\n-export {\n-  vTDirective,\n-  VTDirectiveValue,\n-  TranslationDirective\n-} from './directive'\n-export { I18nPluginOptions } from './plugin'\n export { VERSION } from './misc'\n+export { I18nPluginOptions } from './plugin'\n export { Disposer } from './types'\n \n export type {\n-  IsNever,\n   IsEmptyObject,\n-  PickupPaths,\n+  IsNever,\n+  PickupFormatPathKeys,\n   PickupKeys,\n-  PickupFormatPathKeys\n+  PickupPaths\n } from '@intlify/core-base'\n \n if (__ESM_BUNDLER__ && !__TEST__) {"
        },
        {
          "filename": "packages/vue-i18n-core/src/utils.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 5,
          "patch": "@@ -1,5 +1,6 @@\n /* eslint-disable @typescript-eslint/no-explicit-any */\n import {\n+  create,\n   deepCopy,\n   hasOwn,\n   isArray,\n@@ -69,7 +70,7 @@ export function handleFlatJson(obj: unknown): unknown {\n       let hasStringValue = false\n       for (let i = 0; i < lastIndex; i++) {\n         if (!(subKeys[i] in currentObj)) {\n-          currentObj[subKeys[i]] = {}\n+          currentObj[subKeys[i]] = create()\n         }\n         if (!isObject(currentObj[subKeys[i]])) {\n           __DEV__ &&\n@@ -108,16 +109,16 @@ export function getLocaleMessages<Messages = {}>(\n   const ret = (isPlainObject(messages)\n     ? messages\n     : isArray(__i18n)\n-      ? {}\n-      : { [locale]: {} }) as Record<string, any>\n+      ? create()\n+      : { [locale]: create() }) as Record<string, any>\n \n   // merge locale messages of i18n custom block\n   if (isArray(__i18n)) {\n     __i18n.forEach(custom => {\n       if ('locale' in custom && 'resource' in custom) {\n         const { locale, resource } = custom\n         if (locale) {\n-          ret[locale] = ret[locale] || {}\n+          ret[locale] = ret[locale] || create()\n           deepCopy(resource, ret[locale])\n         } else {\n           deepCopy(resource, ret)\n@@ -149,7 +150,10 @@ export function adjustI18nResources(\n   options: ComposerOptions,\n   componentOptions: any\n ): void {\n-  let messages = isObject(options.messages) ? options.messages : {}\n+  // prettier-ignore\n+  let messages = isObject(options.messages)\n+    ? options.messages\n+    : create() as NonNullable<ComposerOptions['messages']>\n   if ('__i18nGlobal' in componentOptions) {\n     messages = getLocaleMessages(gl.locale.value as Locale, {\n       messages,"
        },
        {
          "filename": "packages/vue-i18n-core/src/warnings.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,5 +1,5 @@\n-import { format } from '@intlify/shared'\n import { CORE_WARN_CODES_EXTEND_POINT } from '@intlify/core-base'\n+import { format } from '@intlify/shared'\n \n export const I18nWarnCodes = {\n   FALLBACK_TO_ROOT: CORE_WARN_CODES_EXTEND_POINT, // 8"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ea48c465bcb7e43ac0aad097c87345d151c27d97",
            "date": "2025-01-07T15:18:51Z",
            "author_login": "kazupon"
          },
          {
            "sha": "255ae031490695b2325af916de773ed9c494fdf5",
            "date": "2025-01-07T15:08:35Z",
            "author_login": "kazupon"
          },
          {
            "sha": "453f50b2855b13b072f3bd31df17ce0d89e19a4e",
            "date": "2025-01-07T03:15:38Z",
            "author_login": "kazupon"
          },
          {
            "sha": "71b36cad4de462d3ca4d95f50b90ee9a09a12a41",
            "date": "2025-01-07T03:09:54Z",
            "author_login": "kazupon"
          },
          {
            "sha": "2d5a6ba2bfe1980552a368ceddadd4166b9432f1",
            "date": "2025-01-07T01:10:34Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-1321",
    "description": "@intlify/shared is a shared library for the intlify project. The latest version of @intlify/shared (10.0.4) is vulnerable to Prototype Pollution through the entry function(s) lib.deepCopy. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) as the minimum consequence. Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context. This issue has been addressed in versions 9.14.2, and 10.0.5. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-11-29T19:15:09.163",
    "last_modified": "2024-11-29T19:15:09.163",
    "fix_date": "2024-11-28T04:27:36Z"
  },
  "references": [
    {
      "url": "https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:31.317841",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vue-i18n",
    "owner": "intlify",
    "created_at": "2020-01-05T17:38:06Z",
    "updated_at": "2025-01-10T07:51:31Z",
    "pushed_at": "2025-01-14T13:00:02Z",
    "size": 27606,
    "stars": 2265,
    "forks": 342,
    "open_issues": 142,
    "watchers": 2265,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "TypeScript": 1000975,
      "JavaScript": 59192,
      "Vue": 15341,
      "HTML": 3408,
      "Shell": 1228
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:32:07.407428"
  }
}