{
  "cve_id": "CVE-2024-53261",
  "github_data": {
    "repository": "sveltejs/kit",
    "fix_commit": "d338d4635a7fd947ba5112df6ee632c4a0979438",
    "related_commits": [
      "d338d4635a7fd947ba5112df6ee632c4a0979438"
    ],
    "patch_url": "https://github.com/sveltejs/kit/commit/d338d4635a7fd947ba5112df6ee632c4a0979438.patch",
    "fix_commit_details": {
      "sha": "d338d4635a7fd947ba5112df6ee632c4a0979438",
      "commit_date": "2024-11-25T03:03:15Z",
      "author": {
        "login": "benmccann",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: escape values included in dev 404 page (#13039)",
        "length": 52,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 109,
        "additions": 69,
        "deletions": 40
      },
      "files": [
        {
          "filename": ".changeset/five-maps-yawn.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+'@sveltejs/kit': patch\n+---\n+\n+fix: escape values included in dev 404 page"
        },
        {
          "filename": "packages/kit/src/core/postbuild/prerender.js",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -4,7 +4,7 @@ import { pathToFileURL } from 'node:url';\n import { installPolyfills } from '../../exports/node/polyfills.js';\n import { mkdirp, posixify, walk } from '../../utils/filesystem.js';\n import { decode_uri, is_root_relative, resolve } from '../../utils/url.js';\n-import { escape_html_attr } from '../../utils/escape.js';\n+import { escape_html } from '../../utils/escape.js';\n import { logger } from '../utils.js';\n import { load_config } from '../config/index.js';\n import { get_route_segments } from '../../utils/routing.js';\n@@ -359,9 +359,10 @@ async function prerender({ out, manifest_path, metadata, verbose, env }) {\n \t\t\t\t\t\tdest,\n \t\t\t\t\t\t`<script>location.href=${devalue.uneval(\n \t\t\t\t\t\t\tlocation\n-\t\t\t\t\t\t)};</script><meta http-equiv=\"refresh\" content=${escape_html_attr(\n-\t\t\t\t\t\t\t`0;url=${location}`\n-\t\t\t\t\t\t)}>`\n+\t\t\t\t\t\t)};</script><meta http-equiv=\"refresh\" content=\"${escape_html(\n+\t\t\t\t\t\t\t`0;url=${location}`,\n+\t\t\t\t\t\t\ttrue\n+\t\t\t\t\t\t)}\">`\n \t\t\t\t\t);\n \n \t\t\t\t\twritten.add(file);"
        },
        {
          "filename": "packages/kit/src/exports/vite/utils.js",
          "status": "modified",
          "additions": 9,
          "deletions": 2,
          "patch": "@@ -3,6 +3,7 @@ import { loadEnv } from 'vite';\n import { posixify } from '../../utils/filesystem.js';\n import { negotiate } from '../../utils/http.js';\n import { filter_private_env, filter_public_env } from '../../utils/env.js';\n+import { escape_html } from '../../utils/escape.js';\n \n /**\n  * Transforms kit.alias to a valid vite.resolve.alias array.\n@@ -89,11 +90,17 @@ export function not_found(req, res, base) {\n \tif (type === 'text/html') {\n \t\tres.setHeader('Content-Type', 'text/html');\n \t\tres.end(\n-\t\t\t`The server is configured with a public base URL of ${base} - did you mean to visit <a href=\"${prefixed}\">${prefixed}</a> instead?`\n+\t\t\t`The server is configured with a public base URL of ${escape_html(\n+\t\t\t\tbase\n+\t\t\t)} - did you mean to visit <a href=\"${escape_html(prefixed, true)}\">${escape_html(\n+\t\t\t\tprefixed\n+\t\t\t)}</a> instead?`\n \t\t);\n \t} else {\n \t\tres.end(\n-\t\t\t`The server is configured with a public base URL of ${base} - did you mean to visit ${prefixed} instead?`\n+\t\t\t`The server is configured with a public base URL of ${escape_html(\n+\t\t\t\tbase\n+\t\t\t)} - did you mean to visit ${escape_html(prefixed)} instead?`\n \t\t);\n \t}\n }"
        },
        {
          "filename": "packages/kit/src/runtime/server/page/csp.js",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,4 +1,4 @@\n-import { escape_html_attr } from '../../../utils/escape.js';\n+import { escape_html } from '../../../utils/escape.js';\n import { base64, sha256 } from './crypto.js';\n \n const array = new Uint8Array(16);\n@@ -300,7 +300,7 @@ class CspProvider extends BaseProvider {\n \t\t\treturn;\n \t\t}\n \n-\t\treturn `<meta http-equiv=\"content-security-policy\" content=${escape_html_attr(content)}>`;\n+\t\treturn `<meta http-equiv=\"content-security-policy\" content=\"${escape_html(content, true)}\">`;\n \t}\n }\n "
        },
        {
          "filename": "packages/kit/src/runtime/server/page/serialize_data.js",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,4 +1,4 @@\n-import { escape_html_attr } from '../../../utils/escape.js';\n+import { escape_html } from '../../../utils/escape.js';\n import { hash } from '../../hash.js';\n \n /**\n@@ -70,7 +70,7 @@ export function serialize_data(fetched, filter, prerendering = false) {\n \tconst attrs = [\n \t\t'type=\"application/json\"',\n \t\t'data-sveltekit-fetched',\n-\t\t`data-url=${escape_html_attr(fetched.url)}`\n+\t\t`data-url=\"${escape_html(fetched.url, true)}\"`\n \t];\n \n \tif (fetched.is_b64) {"
        },
        {
          "filename": "packages/kit/src/utils/escape.js",
          "status": "modified",
          "additions": 36,
          "deletions": 20,
          "patch": "@@ -6,41 +6,57 @@\n const escape_html_attr_dict = {\n \t'&': '&amp;',\n \t'\"': '&quot;'\n+\t// Svelte also escapes < because the escape function could be called inside a `noscript` there\n+\t// https://github.com/sveltejs/svelte/security/advisories/GHSA-8266-84wp-wv5c\n+\t// However, that doesn't apply in SvelteKit\n };\n \n+/**\n+ * @type {Record<string, string>}\n+ */\n+const escape_html_dict = {\n+\t'&': '&amp;',\n+\t'<': '&lt;'\n+};\n+\n+const surrogates = // high surrogate without paired low surrogate\n+\t'[\\\\ud800-\\\\udbff](?![\\\\udc00-\\\\udfff])|' +\n+\t// a valid surrogate pair, the only match with 2 code units\n+\t// we match it so that we can match unpaired low surrogates in the same pass\n+\t// TODO: use lookbehind assertions once they are widely supported: (?<![\\ud800-udbff])[\\udc00-\\udfff]\n+\t'[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]|' +\n+\t// unpaired low surrogate (see previous match)\n+\t'[\\\\udc00-\\\\udfff]';\n+\n const escape_html_attr_regex = new RegExp(\n-\t// special characters\n-\t`[${Object.keys(escape_html_attr_dict).join('')}]|` +\n-\t\t// high surrogate without paired low surrogate\n-\t\t'[\\\\ud800-\\\\udbff](?![\\\\udc00-\\\\udfff])|' +\n-\t\t// a valid surrogate pair, the only match with 2 code units\n-\t\t// we match it so that we can match unpaired low surrogates in the same pass\n-\t\t// TODO: use lookbehind assertions once they are widely supported: (?<![\\ud800-udbff])[\\udc00-\\udfff]\n-\t\t'[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]|' +\n-\t\t// unpaired low surrogate (see previous match)\n-\t\t'[\\\\udc00-\\\\udfff]',\n+\t`[${Object.keys(escape_html_attr_dict).join('')}]|` + surrogates,\n+\t'g'\n+);\n+\n+const escape_html_regex = new RegExp(\n+\t`[${Object.keys(escape_html_dict).join('')}]|` + surrogates,\n \t'g'\n );\n \n /**\n- * Formats a string to be used as an attribute's value in raw HTML.\n- *\n- * It escapes unpaired surrogates (which are allowed in js strings but invalid in HTML), escapes\n- * characters that are special in attributes, and surrounds the whole string in double-quotes.\n+ * Escapes unpaired surrogates (which are allowed in js strings but invalid in HTML) and\n+ * escapes characters that are special.\n  *\n  * @param {string} str\n- * @returns {string} Escaped string surrounded by double-quotes.\n- * @example const html = `<tag data-value=${escape_html_attr('value')}>...</tag>`;\n+ * @param {boolean} [is_attr]\n+ * @returns {string} escaped string\n+ * @example const html = `<tag data-value=\"${escape_html('value', true)}\">...</tag>`;\n  */\n-export function escape_html_attr(str) {\n-\tconst escaped_str = str.replace(escape_html_attr_regex, (match) => {\n+export function escape_html(str, is_attr) {\n+\tconst dict = is_attr ? escape_html_attr_dict : escape_html_dict;\n+\tconst escaped_str = str.replace(is_attr ? escape_html_attr_regex : escape_html_regex, (match) => {\n \t\tif (match.length === 2) {\n \t\t\t// valid surrogate pair\n \t\t\treturn match;\n \t\t}\n \n-\t\treturn escape_html_attr_dict[match] ?? `&#${match.charCodeAt(0)};`;\n+\t\treturn dict[match] ?? `&#${match.charCodeAt(0)};`;\n \t});\n \n-\treturn `\"${escaped_str}\"`;\n+\treturn escaped_str;\n }"
        },
        {
          "filename": "packages/kit/src/utils/escape.spec.js",
          "status": "modified",
          "additions": 10,
          "deletions": 10,
          "patch": "@@ -1,19 +1,19 @@\n import { assert, test } from 'vitest';\n-import { escape_html_attr } from './escape.js';\n+import { escape_html } from './escape.js';\n \n test('escape_html_attr escapes special attribute characters', () => {\n \tassert.equal(\n-\t\tescape_html_attr('some \"values\" are &special here, <others> aren\\'t.'),\n-\t\t'\"some &quot;values&quot; are &amp;special here, <others> aren\\'t.\"'\n+\t\tescape_html('some \"values\" are &special here, <others> aren\\'t.', true),\n+\t\t\"some &quot;values&quot; are &amp;special here, <others> aren't.\"\n \t);\n });\n \n test('escape_html_attr escapes invalid surrogates', () => {\n-\tassert.equal(escape_html_attr('\\ud800\\udc00'), '\"\\ud800\\udc00\"');\n-\tassert.equal(escape_html_attr('\\ud800'), '\"&#55296;\"');\n-\tassert.equal(escape_html_attr('\\udc00'), '\"&#56320;\"');\n-\tassert.equal(escape_html_attr('\\udc00\\ud800'), '\"&#56320;&#55296;\"');\n-\tassert.equal(escape_html_attr('\\ud800\\ud800\\udc00'), '\"&#55296;\\ud800\\udc00\"');\n-\tassert.equal(escape_html_attr('\\ud800\\udc00\\udc00'), '\"\\ud800\\udc00&#56320;\"');\n-\tassert.equal(escape_html_attr('\\ud800\\ud800\\udc00\\udc00'), '\"&#55296;\\ud800\\udc00&#56320;\"');\n+\tassert.equal(escape_html('\\ud800\\udc00', true), '\\ud800\\udc00');\n+\tassert.equal(escape_html('\\ud800', true), '&#55296;');\n+\tassert.equal(escape_html('\\udc00', true), '&#56320;');\n+\tassert.equal(escape_html('\\udc00\\ud800', true), '&#56320;&#55296;');\n+\tassert.equal(escape_html('\\ud800\\ud800\\udc00', true), '&#55296;\\ud800\\udc00');\n+\tassert.equal(escape_html('\\ud800\\udc00\\udc00', true), '\\ud800\\udc00&#56320;');\n+\tassert.equal(escape_html('\\ud800\\ud800\\udc00\\udc00', true), '&#55296;\\ud800\\udc00&#56320;');\n });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c8164ad17d4472d5b3eb0d0eef5fd34dd0ae60a1",
            "date": "2025-01-14T16:51:37Z",
            "author_login": "aeons"
          },
          {
            "sha": "226db42d08d3be3dfbb25750c5cc55f81bd6d722",
            "date": "2025-01-14T00:10:25Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "1bedcc1cfc1f2d85946c1423f60faa8a2a56148b",
            "date": "2025-01-13T19:50:42Z",
            "author_login": "aloisklink"
          },
          {
            "sha": "e201fa9380a00e072a80a2dcab56de3d77e5b67c",
            "date": "2025-01-13T19:26:22Z",
            "author_login": "janabimustafa"
          },
          {
            "sha": "c2ffdcfd73a4159267b4b01878ce71ca3c456a2d",
            "date": "2025-01-13T15:37:16Z",
            "author_login": "Rich-Harris"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "SvelteKit is a framework for rapidly developing robust, performant web applications using Svelte. \"Unsanitized input from *the request URL* flows into `end`, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).\" The files `packages/kit/src/exports/vite/dev/index.js` and `packages/kit/src/exports/vite/utils.js` both contain user controllable data which under specific conditions may flow to dev mode pages. There is little to no expected impact. The Vite development is not exposed to the network by default and even if someone were able to trick a developer into executing an XSS against themselves, a development database should not have any sensitive data. None the less this issue has been addressed in version 2.8.3 and all users are advised to upgrade.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-11-25T20:15:10.217",
    "last_modified": "2024-11-25T20:15:10.217",
    "fix_date": "2024-11-25T03:03:15Z"
  },
  "references": [
    {
      "url": "https://github.com/sveltejs/kit/commit/d338d4635a7fd947ba5112df6ee632c4a0979438",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/sveltejs/kit/security/advisories/GHSA-rjjv-87mx-6x3h",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:31.302997",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "kit",
    "owner": "sveltejs",
    "created_at": "2020-10-15T14:00:23Z",
    "updated_at": "2025-01-14T16:51:49Z",
    "pushed_at": "2025-01-14T17:03:30Z",
    "size": 27341,
    "stars": 18915,
    "forks": 1996,
    "open_issues": 814,
    "watchers": 18915,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "JavaScript": 801855,
      "HTML": 1710,
      "Svelte": 1223,
      "TypeScript": 445,
      "Shell": 71
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T17:29:47.085872"
  }
}