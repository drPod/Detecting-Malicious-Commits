{
  "cve_id": "CVE-2024-53979",
  "github_data": {
    "repository": "zhmcclient/zhmc-ansible-modules",
    "fix_commit": "f5579f07da5f02d2496c41a313d4ae7a0a459b1d",
    "related_commits": [
      "f5579f07da5f02d2496c41a313d4ae7a0a459b1d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f5579f07da5f02d2496c41a313d4ae7a0a459b1d",
      "commit_date": "2024-11-28T18:47:58Z",
      "author": {
        "login": "andy-maier",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fixed return and logging of password-like props in clear text",
        "length": 1250,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 823,
        "additions": 635,
        "deletions": 188
      },
      "files": [
        {
          "filename": "docs/source/modules/zhmc_ldap_server_definition.rst",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -228,7 +228,7 @@ ldap_server_definition\n     | **type**: str\n \n   {property}\n-    Additional properties of the LDAP Server Definition, as described in the data model of the 'LDAP Server Definition' object in the :ref:`HMC API <HMC API>` book. The property names have hyphens (-) as described in that book.\n+    Additional properties of the LDAP Server Definition, as described in the data model of the 'LDAP Server Definition' object in the :ref:`HMC API <HMC API>` book. Write-only properties in the data model are not included. The property names have hyphens (-) as described in that book.\n \n     | **type**: raw\n "
        },
        {
          "filename": "docs/source/modules/zhmc_lpar.rst",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -560,7 +560,7 @@ lpar\n     | **type**: str\n \n   {property}\n-    Additional properties of the LPAR, as described in the data model of the 'Logical Partition' object in the :ref:`HMC API <HMC API>` book. The property names have hyphens (-) as described in that book.\n+    Additional properties of the LPAR, as described in the data model of the 'Logical Partition' object in the :ref:`HMC API <HMC API>` book. Write-only properties in the data model are not included. The property names have hyphens (-) as described in that book.\n \n     | **type**: raw\n "
        },
        {
          "filename": "docs/source/modules/zhmc_partition.rst",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -515,7 +515,7 @@ partition\n     | **type**: str\n \n   {property}\n-    Additional properties of the partition, as described in the data model of the 'Partition' object in the :ref:`HMC API <HMC API>` book. The property names have hyphens (-) as described in that book.\n+    Additional properties of the partition, as described in the data model of the 'Partition' object in the :ref:`HMC API <HMC API>` book. Write-only properties in the data model are not included. The property names have hyphens (-) as described in that book.\n \n     | **type**: raw\n "
        },
        {
          "filename": "docs/source/modules/zhmc_user.rst",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -277,7 +277,7 @@ user\n     | **type**: str\n \n   {property}\n-    Additional properties of the user, as described in the data model of the 'User' object in the :ref:`HMC API <HMC API>` book. The property names have hyphens (-) as described in that book.\n+    Additional properties of the user, as described in the data model of the 'User' object in the :ref:`HMC API <HMC API>` book. Write-only properties in the data model are not included. The property names have hyphens (-) as described in that book.\n \n     | **type**: raw\n \n@@ -348,7 +348,7 @@ user\n     | **type**: dict\n \n     {property}\n-      Properties of the LDAP server definition, as described in the data model of the 'LDAP Server Definition' object in the :ref:`HMC API <HMC API>` book. The property names have hyphens (-) as described in that book.\n+      Properties of the LDAP server definition, as described in the data model of the 'LDAP Server Definition' object in the :ref:`HMC API <HMC API>` book. Write-only properties in the data model are not included. The property names have hyphens (-) as described in that book.\n \n       | **type**: raw\n "
        },
        {
          "filename": "docs/source/release_notes.rst",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -33,6 +33,17 @@ Availability: `AutomationHub`_, `Galaxy`_, `GitHub`_\n \n **Bug fixes:**\n \n+* Increased zhmcclient version to 1.18.2 to pick up fixes. (issue #1074)\n+\n+* Fixed that all password-like input parameters that were written in clear text\n+  to the module entry log are now blanked out. This affected the following\n+  modules: zhmc_ldap_server_definition, zhmc_lpar, zhmc_partition, zhmc_user.\n+\n+* Fixed that all password-like input parameters that were added to the\n+  module return value in clear text for 'state' values that created or updated\n+  the resource are now removed from the return value. This affected the\n+  following modules: zhmc_ldap_server_definition, zhmc_lpar, zhmc_partition.\n+\n * Docs: Ignored www.ansible.com in linkcheck, because it occasionally times out.\n \n **Enhancements:**\n@@ -70,6 +81,10 @@ Availability: `AutomationHub`_, `Galaxy`_, `GitHub`_\n \n * Support for ansible-core 2.18, by adding an ignore file for the sanity tests.\n \n+* The 'hmc_auth' input parameter is no longer completely removed from the\n+  module entry log, but instead its sensitive items 'password' and 'session_id'\n+  are now blanked out.\n+\n \n Version 1.9.1\n -------------"
        },
        {
          "filename": "minimum-constraints-develop.txt",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -122,7 +122,7 @@ pip-check-reqs==2.5.3; python_version >= '3.12'\n # Indirect dependencies for development that are not in requirements-develop.txt\n \n alabaster==0.7.9\n-attrs==19.2.0\n+attrs==22.2.0\n bleach==3.3.0\n certifi==2024.07.04\n chardet==3.0.3"
        },
        {
          "filename": "minimum-constraints-install.txt",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -38,7 +38,7 @@ requests==2.32.2\n \n pytz==2019.1\n \n-zhmcclient==1.17.0\n+zhmcclient==1.18.2\n \n \n # Indirect dependencies for install that are needed for some reason (must be consistent with requirements.txt)\n@@ -54,10 +54,10 @@ cryptography==43.0.1\n importlib-metadata==4.8.3\n \n packaging==22.0\n-PyYAML==6.0.1\n+PyYAML==6.0.2\n \n python-dateutil==2.8.2\n-jsonschema==4.10.0\n+jsonschema==4.18.2\n urllib3==1.26.19\n \n "
        },
        {
          "filename": "plugins/module_utils/common.py",
          "status": "modified",
          "additions": 77,
          "deletions": 1,
          "patch": "@@ -1423,7 +1423,7 @@ def params_deepcopy(params):\n     an optional '_faked_session' item with a value that cannot be copied.\n \n     Parameters:\n-      params (dict): Module input parameters.\n+      params (dict): Module input parameters. Must not be None.\n \n     Returns:\n       dict: Deep copy of params, where possible.\n@@ -1435,3 +1435,79 @@ def params_deepcopy(params):\n         except TypeError:\n             copy_params[key] = value\n     return copy_params\n+\n+\n+def blanked_params(params, blanked_properties=None):\n+    \"\"\"\n+    Return a copy of the module input parameters, with the following items\n+    blanked out:\n+\n+    * params['properties'][...] according to the blanked_properties list\n+    * params['hmc_auth']['password']\n+    * params['hmc_auth']['session_id']\n+\n+    Parameters:\n+      params (dict): Module input parameters. Must not be None.\n+      blanked_properties (Sequence): List of property names that will be\n+        blanked out in the 'properties' item of the module input parameters.\n+        Property names that are not in the input properties will be ignored.\n+\n+    Returns:\n+      dict: Deep copy of the input parameters, with blanked out values.\n+    \"\"\"\n+    # The params['properties'] dict and the params['hmc_auth'] dict in the\n+    # return value will be copies of the corresponding input items, and\n+    # therefore it is sufficient to make a shallow copy of params.\n+    copied_params = dict(params)\n+    if 'properties' in copied_params and copied_params['properties'] \\\n+            and blanked_properties:\n+        copied_params['properties'] = \\\n+            blanked_dict(copied_params['properties'], blanked_properties)\n+    if 'hmc_auth' in copied_params:\n+        copied_params['hmc_auth'] = \\\n+            blanked_dict(copied_params['hmc_auth'], ['password', 'session_id'])\n+    return copied_params\n+\n+\n+def blanked_dict(properties, blanked_properties):\n+    \"\"\"\n+    Return a shallow copy of the input properties, where the values of the\n+    specified properties have been blanked out.\n+\n+    Parameters:\n+      properties (Mapping): Input properties. Must not be None.\n+      blanked_properties (Sequence): List of property names that will be\n+        blanked out. Property names that are not in the input properties\n+        will be ignored. Must not be None.\n+\n+    Returns:\n+      dict: Shallow copy of the input properties, with blanked out values.\n+    \"\"\"\n+    copied_properties = dict(properties)\n+    for pname in blanked_properties:\n+        if pname in copied_properties:\n+            copied_properties[pname] = BLANKED_OUT\n+    return copied_properties\n+\n+\n+def removed_dict(properties, removed_properties):\n+    \"\"\"\n+    Return a shallow copy of the input properties, where the specified\n+    properties have been removed.\n+\n+    Parameters:\n+      properties (Mapping): Input properties. Must not be None.\n+      removed_properties (Sequence): List of property names that will be\n+        removed. Property names that are not in the input properties\n+        will be ignored. Must not be None.\n+\n+    Returns:\n+      dict: Shallow copy of the input properties, with removed properties.\n+    \"\"\"\n+    copied_properties = dict(properties)\n+    for pname in removed_properties:\n+        try:\n+            del copied_properties[pname]\n+        except KeyError:\n+            pass\n+    return copied_properties"
        },
        {
          "filename": "plugins/modules/zhmc_adapter.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -350,7 +350,7 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, to_unicode, \\\n     process_normal_property, eq_hex, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -966,9 +966,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_adapter_list.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -279,7 +279,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, \\\n-    missing_required_lib, parse_hmc_host  # noqa: E402\n+    missing_required_lib, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -474,9 +474,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_console.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -237,7 +237,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -413,9 +413,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_cpc.py",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -416,7 +416,8 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, StatusError, ParameterError, to_unicode, \\\n     process_normal_property, missing_required_lib, \\\n-    common_fail_on_import_errors, pull_properties, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, pull_properties, parse_hmc_host, \\\n+    blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -899,9 +900,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_cpc_capacity.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -451,7 +451,7 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n     common_fail_on_import_errors, parse_hmc_host, \\\n-    underscore_properties  # noqa: E402\n+    underscore_properties, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -835,9 +835,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_cpc_list.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -222,7 +222,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -330,9 +330,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_crypto_attachment.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -374,7 +374,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n \n try:\n@@ -1091,9 +1091,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_hba.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -246,7 +246,7 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, wait_for_transition_completion, \\\n     eq_hex, to_unicode, process_normal_property, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -627,9 +627,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_ldap_server_definition.py",
          "status": "modified",
          "additions": 18,
          "deletions": 7,
          "patch": "@@ -212,6 +212,7 @@\n       description: \"Additional properties of the LDAP Server Definition, as\n         described in the data model of the 'LDAP Server Definition' object in\n         the R(HMC API,HMC API) book.\n+        Write-only properties in the data model are not included.\n         The property names have hyphens (-) as described in that book.\"\n       type: raw\n   sample:\n@@ -244,7 +245,8 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, to_unicode, \\\n     process_normal_property, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params, \\\n+    blanked_dict, removed_dict  # noqa: E402\n \n try:\n     import urllib3\n@@ -325,6 +327,11 @@ def casefold(txt):\n     'class': (False, False, False, None, None, None),\n }\n \n+# Write-only properties (blanked out in logs and removed in output)\n+WRITEONLY_PROPERTIES_USCORE = ['bind_password']\n+WRITEONLY_PROPERTIES_HYPHEN = [p.replace('_', '-')\n+                               for p in WRITEONLY_PROPERTIES_USCORE]\n+\n \n def process_properties(lsd, params):\n     \"\"\"\n@@ -521,9 +528,11 @@ def ensure_present(params, check_mode):\n                 raise AssertionError(\"Unexpected \"\n                                      \"create_props: %r\" % create_props)\n             if update_props:\n-                LOGGER.debug(\n-                    \"Existing LDAP Server Definition %r needs to get \"\n-                    \"properties updated: %r\", lsd_name, update_props)\n+                if LOGGER.isEnabledFor(logging.DEBUG):\n+                    LOGGER.debug(\n+                        \"Existing LDAP Server Definition %r needs to get \"\n+                        \"properties updated: %r\", lsd_name,\n+                        blanked_dict(update_props, WRITEONLY_PROPERTIES_USCORE))\n                 if not check_mode:\n                     lsd.update_properties(update_props)\n                     # We refresh the properties after the update, in case an\n@@ -539,6 +548,8 @@ def ensure_present(params, check_mode):\n         if not lsd:\n             raise AssertionError()\n \n+        result = removed_dict(result, WRITEONLY_PROPERTIES_HYPHEN)\n+\n         return changed, result\n \n     finally:\n@@ -669,9 +680,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params, WRITEONLY_PROPERTIES_USCORE))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_ldap_server_definition_list.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -162,7 +162,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -246,9 +246,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_lpar.py",
          "status": "modified",
          "additions": 17,
          "deletions": 4,
          "patch": "@@ -454,6 +454,7 @@\n       description: \"Additional properties of the LPAR, as described in\n         the data model of the 'Logical Partition' object in the\n         R(HMC API,HMC API) book.\n+        Write-only properties in the data model are not included.\n         The property names have hyphens (-) as described in that book.\"\n       type: raw\n   sample:\n@@ -620,7 +621,8 @@\n     hmc_auth_parameter, Error, ParameterError, StatusError, \\\n     ensure_lpar_inactive, ensure_lpar_active, ensure_lpar_loaded, to_unicode, \\\n     process_normal_property, missing_required_lib, \\\n-    common_fail_on_import_errors, pull_properties, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, pull_properties, parse_hmc_host, \\\n+    blanked_params, removed_dict  # noqa: E402\n \n try:\n     import urllib3\n@@ -781,6 +783,11 @@\n     'request_origin': (False, False, False, None, None, None),\n }\n \n+# Write-only properties (blanked out in logs and removed in output)\n+WRITEONLY_PROPERTIES_USCORE = ['ssc_master_pw', 'zaware_master_pw']\n+WRITEONLY_PROPERTIES_HYPHEN = [p.replace('_', '-')\n+                               for p in WRITEONLY_PROPERTIES_USCORE]\n+\n \n def process_properties(lpar, params):\n     \"\"\"\n@@ -1094,6 +1101,9 @@ def ensure_active(params, check_mode):\n \n         add_artificial_properties(lpar_properties, lpar)\n \n+        lpar_properties = removed_dict(\n+            lpar_properties, WRITEONLY_PROPERTIES_HYPHEN)\n+\n         return changed, lpar_properties\n \n     finally:\n@@ -1153,6 +1163,9 @@ def ensure_loaded(params, check_mode):\n \n         add_artificial_properties(lpar_properties, lpar)\n \n+        lpar_properties = removed_dict(\n+            lpar_properties, WRITEONLY_PROPERTIES_HYPHEN)\n+\n         return changed, lpar_properties\n \n     finally:\n@@ -1323,9 +1336,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params, WRITEONLY_PROPERTIES_USCORE))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_lpar_command.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -211,7 +211,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, NotificationThread, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -424,9 +424,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = True\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_lpar_list.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -237,7 +237,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -422,9 +422,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_lpar_messages.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -286,7 +286,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -448,9 +448,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_nic.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -279,7 +279,7 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, wait_for_transition_completion, \\\n     eq_hex, eq_mac, to_unicode, process_normal_property, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -753,9 +753,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_nic_list.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -196,7 +196,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -302,9 +302,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_partition.py",
          "status": "modified",
          "additions": 15,
          "deletions": 4,
          "patch": "@@ -414,6 +414,7 @@\n     \"{property}\":\n       description: \"Additional properties of the partition, as described in\n         the data model of the 'Partition' object in the R(HMC API,HMC API) book.\n+        Write-only properties in the data model are not included.\n         The property names have hyphens (-) as described in that book.\"\n       type: raw\n     hbas:\n@@ -625,7 +626,8 @@\n     hmc_auth_parameter, Error, ParameterError, StatusError, stop_partition, \\\n     start_partition, wait_for_transition_completion, eq_hex, to_unicode, \\\n     process_normal_property, missing_required_lib, ImageError, \\\n-    common_fail_on_import_errors, pull_properties, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, pull_properties, parse_hmc_host, \\\n+    blanked_params, removed_dict  # noqa: E402\n \n try:\n     import urllib3\n@@ -1042,6 +1044,11 @@ def required_type_ssc(partition_properties):\n         False, []),\n }\n \n+# Write-only properties (blanked out in logs and removed in output)\n+WRITEONLY_PROPERTIES_USCORE = ['boot_ftp_password', 'ssc_master_pw']\n+WRITEONLY_PROPERTIES_HYPHEN = [p.replace('_', '-')\n+                               for p in WRITEONLY_PROPERTIES_USCORE]\n+\n \n def storage_mgmt_enabled(cpc):\n     \"\"\"\n@@ -1876,6 +1883,8 @@ def ensure_active(params, check_mode):\n         add_artificial_properties(\n             result, partition, expand_storage_groups, expand_crypto_adapters)\n \n+        result = removed_dict(result, WRITEONLY_PROPERTIES_HYPHEN)\n+\n         return changed, result\n \n     finally:\n@@ -1974,6 +1983,8 @@ def ensure_stopped(params, check_mode):\n         add_artificial_properties(\n             result, partition, expand_storage_groups, expand_crypto_adapters)\n \n+        result = removed_dict(result, WRITEONLY_PROPERTIES_HYPHEN)\n+\n         return changed, result\n \n     finally:\n@@ -2231,9 +2242,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params, WRITEONLY_PROPERTIES_USCORE))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_partition_command.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -211,7 +211,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, NotificationThread, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -425,9 +425,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = True\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_partition_list.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -234,7 +234,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -415,9 +415,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_partition_messages.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -261,7 +261,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -413,9 +413,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_password_rule.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -263,7 +263,7 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, to_unicode, \\\n     process_normal_property, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -671,9 +671,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_password_rule_list.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -176,7 +176,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -266,9 +266,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_session.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -221,7 +221,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, \\\n-    missing_required_lib, parse_hmc_host  # noqa: E402\n+    missing_required_lib, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -353,9 +353,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     # We do not count session creation or deletion as a change\n     changed = False"
        },
        {
          "filename": "plugins/modules/zhmc_storage_group.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -580,7 +580,7 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, to_unicode, \\\n     process_normal_property, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -1142,9 +1142,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_storage_group_attachment.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -227,7 +227,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -455,9 +455,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_storage_volume.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -278,7 +278,7 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, eq_hex, to_unicode, \\\n     process_normal_property, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -704,9 +704,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_user.py",
          "status": "modified",
          "additions": 18,
          "deletions": 24,
          "patch": "@@ -249,6 +249,7 @@\n     \"{property}\":\n       description: \"Additional properties of the user, as described in the\n         data model of the 'User' object in the R(HMC API,HMC API) book.\n+        Write-only properties in the data model are not included.\n         The property names have hyphens (-) as described in that book.\"\n       type: raw\n     user-role-names:\n@@ -324,6 +325,7 @@\n           description: \"Properties of the LDAP server definition, as described\n             in the data model of the 'LDAP Server Definition' object in the\n             R(HMC API,HMC API) book.\n+            Write-only properties in the data model are not included.\n             The property names have hyphens (-) as described in that book.\"\n           type: raw\n   sample:\n@@ -380,8 +382,8 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, to_unicode, \\\n     process_normal_property, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host, BLANKED_OUT, \\\n-    params_deepcopy  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params, \\\n+    blanked_dict, removed_dict  # noqa: E402\n \n try:\n     import urllib3\n@@ -493,6 +495,11 @@\n     'user_role_objects': (False, False, False, None, None, None),\n }\n \n+# Write-only properties (blanked out in logs and removed in output)\n+WRITEONLY_PROPERTIES_USCORE = ['password']\n+WRITEONLY_PROPERTIES_HYPHEN = [p.replace('_', '-')\n+                               for p in WRITEONLY_PROPERTIES_USCORE]\n+\n \n def process_properties(console, user, params):\n     \"\"\"\n@@ -986,14 +993,11 @@ def ensure_present(params, check_mode):\n                 raise AssertionError(\"Unexpected \"\n                                      \"create_props: %r\" % create_props)\n             if update_props:\n-                logged_props = dict(update_props)\n-                if 'password' in logged_props:\n-                    # This is not a hard-coded password. Added # nosec to avoid\n-                    # generating false positive in bandit\n-                    logged_props['password'] = BLANKED_OUT    # nosec\n-                LOGGER.debug(\n-                    \"Existing user %r needs to get properties updated: %r\",\n-                    user_name, logged_props)\n+                if LOGGER.isEnabledFor(logging.DEBUG):\n+                    LOGGER.debug(\n+                        \"Existing user %r needs to get properties updated: %r\",\n+                        user_name,\n+                        blanked_dict(update_props, WRITEONLY_PROPERTIES_USCORE))\n                 if not check_mode:\n                     user.update_properties(update_props)\n                     # We refresh the properties after the update, in case an\n@@ -1030,10 +1034,7 @@ def ensure_present(params, check_mode):\n \n         add_artificial_properties(result, console, user, expand)\n \n-        if 'password' in result:\n-            # This is not a hard-coded password. Added # nosec to avoid\n-            # generating false positive in bandit\n-            result['password'] = BLANKED_OUT    # nosec\n+        result = removed_dict(result, WRITEONLY_PROPERTIES_HYPHEN)\n \n         return changed, result\n \n@@ -1168,16 +1169,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    # We need to deepcopy the input parameters, because the dict in which we\n-    # blank out the password is at the second level. With a shallow copy,\n-    # that would blank out the password in the original params.\n-    _params = params_deepcopy(module.params)\n-    del _params['hmc_auth']\n-    if _params['properties'] and 'password' in _params['properties']:\n-        # This is not a hard-coded password. Added # nosec to avoid\n-        # generating false positive in bandit\n-        _params['properties']['password'] = BLANKED_OUT    # nosec\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params, WRITEONLY_PROPERTIES_USCORE))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_user_list.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -181,7 +181,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -271,9 +271,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_user_pattern.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -291,7 +291,7 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, to_unicode, \\\n     process_normal_property, missing_required_lib, underscore_properties, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -944,9 +944,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_user_pattern_list.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -197,7 +197,7 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n     underscore_properties_list, common_fail_on_import_errors, \\\n-    parse_hmc_host  # noqa: E402\n+    parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -276,9 +276,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_user_role.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -452,7 +452,7 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, to_unicode, \\\n     process_normal_property, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -1321,9 +1321,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_user_role_list.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -181,7 +181,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -271,9 +271,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     changed = False\n     try:"
        },
        {
          "filename": "plugins/modules/zhmc_versions.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -245,7 +245,7 @@\n \n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -368,9 +368,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "plugins/modules/zhmc_virtual_function.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -241,7 +241,7 @@\n from ..module_utils.common import log_init, open_session, close_session, \\\n     hmc_auth_parameter, Error, ParameterError, wait_for_transition_completion, \\\n     eq_hex, to_unicode, process_normal_property, missing_required_lib, \\\n-    common_fail_on_import_errors, parse_hmc_host  # noqa: E402\n+    common_fail_on_import_errors, parse_hmc_host, blanked_params  # noqa: E402\n \n try:\n     import urllib3\n@@ -605,9 +605,9 @@ def main():\n \n     module.params['hmc_host'] = parse_hmc_host(module.params['hmc_host'])\n \n-    _params = dict(module.params)\n-    del _params['hmc_auth']\n-    LOGGER.debug(\"Module entry: params: %r\", _params)\n+    if LOGGER.isEnabledFor(logging.DEBUG):\n+        LOGGER.debug(\"Module entry: params: %r\",\n+                     blanked_params(module.params))\n \n     try:\n "
        },
        {
          "filename": "requirements.txt",
          "status": "modified",
          "additions": 5,
          "deletions": 6,
          "patch": "@@ -40,7 +40,7 @@ requests>=2.32.2\n pytz>=2019.1\n \n # zhmcclient @ git+https://github.com/zhmcclient/python-zhmcclient.git@master\n-zhmcclient>=1.17.0\n+zhmcclient>=1.18.2\n \n \n # Indirect dependencies for install that are needed for some reason (must be consistent with minimum-constraints-install.txt)\n@@ -69,14 +69,13 @@ packaging>=22.0\n # PyYAML 6.0 has wheel archives for Python 3.6 - 3.11\n # PyYAML 5.4 and 6.0.0 fails install since Cython 3 was released, see issue\n #   https://github.com/yaml/pyyaml/issues/724.\n-PyYAML>=6.0.1\n+PyYAML>=6.0.2\n \n python-dateutil>=2.8.2\n \n # jsonschema\n-jsonschema>=4.10.0,!=4.18.1; python_version <= '3.12'\n-# TODO: Remove temporary circumvention to pin jsonschema to <4.18.0 when pyo3-ffi\n-#       supports Python 3.13 (see https://github.com/PyO3/pyo3/issues/4038#issuecomment-2156363013)\n-jsonschema>=4.10.0,<4.18.0; python_version >= '3.13'\n+jsonschema>=4.18.2\n+# TODO: Python 3.13 support requires pyo3-ffi fixing its issue with Python 3.13\n+#       (see https://github.com/PyO3/pyo3/issues/4038#issuecomment-2156363013)\n \n urllib3>=1.26.19"
        },
        {
          "filename": "tests/end2end/test_zhmc_ldap_server_definition.py",
          "status": "modified",
          "additions": 37,
          "deletions": 5,
          "patch": "@@ -57,7 +57,6 @@\n     'search_distinguished_name': 'test_user{0}',\n }\n \n-\n # A standard test LDAP server definition, as the input properties for\n # LDAPServerDefinitionManager.create() (i.e. using dashes, and limited to valid\n # input parameters)\n@@ -67,6 +66,16 @@\n     'primary-hostname-ipaddr': '10.11.12.13',\n     'search-distinguished-name': 'test_user{0}',\n }\n+STD_LSD_HMC_EXP_PROPS = dict(STD_LSD_HMC_INPUT_PROPS)\n+\n+# LDAP server definition with bind data\n+STD_LSD_MODULE_INPUT_PROPS_WITH_BIND = dict(STD_LSD_MODULE_INPUT_PROPS)\n+STD_LSD_MODULE_INPUT_PROPS_WITH_BIND['bind_password'] = \"Bumerang9x\"\n+STD_LSD_MODULE_INPUT_PROPS_WITH_BIND['bind_distinguished_name'] = \"bind_dn\"\n+STD_LSD_HMC_INPUT_PROPS_WITH_BIND = dict(STD_LSD_HMC_INPUT_PROPS)\n+STD_LSD_HMC_INPUT_PROPS_WITH_BIND['bind-distinguished-name'] = \"bind_dn\"\n+STD_LSD_HMC_EXP_PROPS_WITH_BIND = dict(STD_LSD_HMC_INPUT_PROPS_WITH_BIND)\n+STD_LSD_HMC_INPUT_PROPS_WITH_BIND['bind-password'] = \"Bumerang9x\"\n \n \n def new_lsd_name():\n@@ -135,6 +144,10 @@ def assert_lsd_props(lsd_props, exp_lsd_props, where):\n         where_prop = where + f\", property {prop_name!r}\"\n         assert act_value == exp_value, where_prop\n \n+    # Assert that none of the write-only properties is in the output object\n+    for prop_name in zhmc_ldap_server_definition.WRITEONLY_PROPERTIES_HYPHEN:\n+        assert prop_name not in lsd_props, where\n+\n \n @pytest.mark.parametrize(\n     \"diff_case\", [\n@@ -220,19 +233,27 @@ def test_zhmc_lsd_facts(\n     # - exp_changed (bool): Boolean for expected 'changed' flag.\n \n     (\n-        \"Present with non-existing LDAP server definition\",\n+        \"Present with non-existing LDAP server definition, without password\",\n         None,\n         'present',\n         STD_LSD_MODULE_INPUT_PROPS,\n-        STD_LSD_HMC_INPUT_PROPS,\n+        STD_LSD_HMC_EXP_PROPS,\n+        True,\n+    ),\n+    (\n+        \"Present with non-existing LDAP server definition, with password\",\n+        None,\n+        'present',\n+        STD_LSD_MODULE_INPUT_PROPS_WITH_BIND,\n+        STD_LSD_HMC_EXP_PROPS_WITH_BIND,\n         True,\n     ),\n     (\n         \"Present with existing LDAP server definition, no properties changed\",\n         {},\n         'present',\n         None,\n-        STD_LSD_HMC_INPUT_PROPS,\n+        STD_LSD_HMC_EXP_PROPS,\n         False,\n     ),\n     (\n@@ -242,7 +263,18 @@ def test_zhmc_lsd_facts(\n         },\n         'present',\n         STD_LSD_MODULE_INPUT_PROPS,\n-        STD_LSD_HMC_INPUT_PROPS,\n+        STD_LSD_HMC_EXP_PROPS,\n+        True,\n+    ),\n+    (\n+        \"Present with existing LDAP server definition, some properties \"\n+        \"changed, with password\",\n+        {\n+            'description': 'bla',\n+        },\n+        'present',\n+        STD_LSD_MODULE_INPUT_PROPS_WITH_BIND,\n+        STD_LSD_HMC_EXP_PROPS_WITH_BIND,\n         True,\n     ),\n     ("
        },
        {
          "filename": "tests/end2end/test_zhmc_lpar.py",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -172,6 +172,10 @@ def assert_lpar_props(act_props, exp_props, where):\n                               f\"Actual: {act_value!r}\")\n         assert act_value == exp_value, where_prop\n \n+    # Assert that none of the write-only properties is in the output object\n+    for prop_name in zhmc_lpar.WRITEONLY_PROPERTIES_HYPHEN:\n+        assert prop_name not in act_props, where\n+\n \n def ensure_lpar_status(logger, lpar, iap, status):\n     \"\"\""
        },
        {
          "filename": "tests/end2end/test_zhmc_partition.py",
          "status": "modified",
          "additions": 15,
          "deletions": 8,
          "patch": "@@ -115,6 +115,7 @@\n     'initial-memory': MIN_MEMORY,\n     'maximum-memory': MIN_MEMORY,\n }\n+STD_LINUX_PARTITION_HMC_EXP_PROPS = dict(STD_LINUX_PARTITION_HMC_INPUT_PROPS)\n STD_SSC_PARTITION_HMC_INPUT_PROPS = {\n     # 'name': updated upon use\n     'description': \"zhmc test partition\",\n@@ -126,6 +127,8 @@\n     'ssc-master-userid': 'sscuser',\n     'ssc-master-pw': 'Need2ChangeSoon!',\n }\n+STD_SSC_PARTITION_HMC_EXP_PROPS = dict(STD_SSC_PARTITION_HMC_INPUT_PROPS)\n+del STD_SSC_PARTITION_HMC_EXP_PROPS['ssc-master-pw']\n \n \n def storage_mgmt_enabled(cpc):\n@@ -499,6 +502,10 @@ def assert_partition_props(act_props, exp_props, where):\n         exp_boot_sv_name = exp_props['boot-storage-volume-name']\n         assert act_props['boot-storage-volume-name'] == exp_boot_sv_name\n \n+    # Assert that none of the write-only properties is in the output object\n+    for prop_name in zhmc_partition.WRITEONLY_PROPERTIES_HYPHEN:\n+        assert prop_name not in act_props, where\n+\n \n PARTITION_FACTS_TESTCASES = [\n     # The list items are tuples with the following items:\n@@ -727,7 +734,7 @@ def test_zhmc_partition_facts(\n         'stopped',\n         STD_LINUX_PARTITION_MODULE_INPUT_PROPS,\n         None,\n-        STD_LINUX_PARTITION_HMC_INPUT_PROPS,\n+        STD_LINUX_PARTITION_HMC_EXP_PROPS,\n         True,\n         True,\n     ),\n@@ -739,7 +746,7 @@ def test_zhmc_partition_facts(\n         'stopped',\n         None,\n         None,\n-        STD_LINUX_PARTITION_HMC_INPUT_PROPS,\n+        STD_LINUX_PARTITION_HMC_EXP_PROPS,\n         False,\n         True,\n     ),\n@@ -751,7 +758,7 @@ def test_zhmc_partition_facts(\n         'stopped',\n         None,\n         None,\n-        STD_LINUX_PARTITION_HMC_INPUT_PROPS,\n+        STD_LINUX_PARTITION_HMC_EXP_PROPS,\n         True,\n         True,\n     ),\n@@ -791,7 +798,7 @@ def test_zhmc_partition_facts(\n         'stopped',\n         STD_LINUX_PARTITION_MODULE_INPUT_PROPS,\n         None,\n-        STD_LINUX_PARTITION_HMC_INPUT_PROPS,\n+        STD_LINUX_PARTITION_HMC_EXP_PROPS,\n         True,\n         True,\n     ),\n@@ -802,7 +809,7 @@ def test_zhmc_partition_facts(\n         'stopped',\n         STD_SSC_PARTITION_MODULE_INPUT_PROPS,\n         None,\n-        STD_SSC_PARTITION_HMC_INPUT_PROPS,\n+        STD_SSC_PARTITION_HMC_EXP_PROPS,\n         True,\n         True,\n     ),\n@@ -818,7 +825,7 @@ def test_zhmc_partition_facts(\n         'stopped',\n         None,\n         None,\n-        STD_SSC_PARTITION_HMC_INPUT_PROPS,\n+        STD_SSC_PARTITION_HMC_EXP_PROPS,\n         False,\n         True,\n     ),\n@@ -830,7 +837,7 @@ def test_zhmc_partition_facts(\n         'active',\n         None,\n         None,  # Code ignores \"HTTPError: 409,131\"\n-        STD_SSC_PARTITION_HMC_INPUT_PROPS,\n+        STD_SSC_PARTITION_HMC_EXP_PROPS,\n         True,\n         True,\n     ),\n@@ -844,7 +851,7 @@ def test_zhmc_partition_facts(\n         'stopped',\n         STD_SSC_PARTITION_MODULE_INPUT_PROPS,\n         None,\n-        STD_SSC_PARTITION_HMC_INPUT_PROPS,\n+        STD_SSC_PARTITION_HMC_EXP_PROPS,\n         True,\n         True,\n     ),"
        },
        {
          "filename": "tests/end2end/test_zhmc_user.py",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -224,6 +224,10 @@ def assert_user_props(user_props, expand, where):\n     if expand:\n         assert 'user-role-objects' in user_props, where\n \n+    # Assert that none of the write-only properties is in the output object\n+    for prop_name in zhmc_user.WRITEONLY_PROPERTIES_HYPHEN:\n+        assert prop_name not in user_props, where\n+\n \n @pytest.mark.parametrize(\n     \"check_mode\", ["
        },
        {
          "filename": "tests/unit/test_common.py",
          "status": "modified",
          "additions": 280,
          "deletions": 0,
          "patch": "@@ -21,6 +21,7 @@\n __metaclass__ = type\n \n import re\n+from copy import deepcopy\n from collections.abc import Sequence, Mapping, Set\n from types import ModuleType\n import pytest\n@@ -548,3 +549,282 @@ def test_common_params_deepcopy(desc, in_params):\n     params = common.params_deepcopy(in_params)\n \n     assert_disparate_equal(params, in_params)\n+\n+\n+COMMON_BLANKED_PARAMS_TESTCASES = [\n+    # Testcases for test_common_blanked_params()\n+    # The list items are tuples with the following items:\n+    # - desc (string): description of the testcase.\n+    # - in_params (dict): Input params. Must not be None\n+    # - blanked_properties (list): Properties to be blanked out, may be None\n+\n+    (\n+        \"Params without hmc_auth or properties\",\n+        {\n+            'state': 'bla',\n+        },\n+        None\n+    ),\n+    (\n+        \"Params with hmc_auth that does not have sensitive items\",\n+        {\n+            'state': 'bla',\n+            'hmc_auth': {'userid': 'user'},\n+        },\n+        None\n+    ),\n+    (\n+        \"Params with hmc_auth that does have all sensitive items\",\n+        {\n+            'state': 'bla',\n+            'hmc_auth': {\n+                'userid': 'user',\n+                'password': 'pass',\n+                'session_id': 'sid',\n+            },\n+        },\n+        None\n+    ),\n+    (\n+        \"Params with properties but without blanked props specified\",\n+        {\n+            'state': 'bla',\n+            'properties': {\n+                'name': 'foo',\n+            },\n+        },\n+        None\n+    ),\n+    (\n+        \"Params with properties being None\",\n+        {\n+            'state': 'bla',\n+            'properties': None,\n+        },\n+        None\n+    ),\n+    (\n+        \"Params with properties with different blanked props specified\",\n+        {\n+            'state': 'bla',\n+            'properties': {\n+                'name': 'foo',\n+            },\n+        },\n+        ['password']\n+    ),\n+    (\n+        \"Params with properties with one blanked props specified\",\n+        {\n+            'state': 'bla',\n+            'properties': {\n+                'name': 'foo',\n+                'password': 'pass',\n+            },\n+        },\n+        ['password']\n+    ),\n+    (\n+        \"Params with properties with one blanked prop and excess blanked prop\",\n+        {\n+            'state': 'bla',\n+            'properties': {\n+                'name': 'foo',\n+                'password': 'pass',\n+            },\n+        },\n+        ['password', 'extra']\n+    ),\n+]\n+\n+BLANKED_PROPS_HMC_AUTH = ['password', 'session_id']\n+\n+\n+@pytest.mark.parametrize(\n+    \"desc, in_params, blanked_properties\",\n+    COMMON_BLANKED_PARAMS_TESTCASES)\n+def test_common_blanked_params(desc, in_params, blanked_properties):\n+    # pylint: disable=unused-argument\n+    \"\"\"\n+    Test the blanked_params() function.\n+    \"\"\"\n+\n+    saved_params = common.params_deepcopy(in_params)\n+\n+    # The code to be tested\n+    act_params = common.blanked_params(in_params, blanked_properties)\n+\n+    # Check that the input parameters have not been changed\n+    assert_disparate_equal(in_params, saved_params)\n+\n+    # Check that all dict items are still there.\n+    in_keys = sorted(in_params.keys())\n+    act_keys = sorted(act_params.keys())\n+    assert act_keys == in_keys\n+\n+    # Check that the 'hmc_auth' item, if present, has its sensitive items\n+    # blanked out.\n+    if 'hmc_auth' in act_params:\n+        hmc_auth = act_params['hmc_auth']\n+        for pname in BLANKED_PROPS_HMC_AUTH:\n+            if pname in hmc_auth:\n+                assert hmc_auth[pname] == common.BLANKED_OUT\n+\n+    # Check that the 'properties' item, if present, has its sensitive items\n+    # blanked out.\n+    if 'properties' in act_params and act_params['properties'] and \\\n+            blanked_properties:\n+        properties = act_params['properties']\n+        for pname in blanked_properties:\n+            if pname in properties:\n+                assert properties[pname] == common.BLANKED_OUT\n+\n+\n+COMMON_BLANKED_DICT_TESTCASES = [\n+    # Testcases for test_common_blanked_dict()\n+    # The list items are tuples with the following items:\n+    # - desc (string): description of the testcase.\n+    # - in_dict (dict): Input dict. Must not be None\n+    # - blanked_properties (list): Prop to be blanked out. Must not be None\n+\n+    (\n+        \"Empty dict and empty blanked props\",\n+        {},\n+        []\n+    ),\n+    (\n+        \"Empty dict and one excess blanked prop\",\n+        {},\n+        ['foo']\n+    ),\n+    (\n+        \"Dict and empty blanked props\",\n+        {\n+            'p1': 'v1',\n+            'p2': None,\n+        },\n+        []\n+    ),\n+    (\n+        \"Dict and one matching blanked prop\",\n+        {\n+            'p1': 'v1',\n+            'p2': None,\n+        },\n+        ['p1']\n+    ),\n+    (\n+        \"Dict and one matching and one excess blanked prop\",\n+        {\n+            'p1': 'v1',\n+            'p2': None,\n+        },\n+        ['p1', 'foo']\n+    ),\n+]\n+\n+\n+@pytest.mark.parametrize(\n+    \"desc, in_dict, blanked_properties\",\n+    COMMON_BLANKED_DICT_TESTCASES)\n+def test_common_blanked_dict(desc, in_dict, blanked_properties):\n+    # pylint: disable=unused-argument\n+    \"\"\"\n+    Test the blanked_dict() function.\n+    \"\"\"\n+\n+    saved_dict = deepcopy(in_dict)\n+\n+    # The code to be tested\n+    act_dict = common.blanked_dict(in_dict, blanked_properties)\n+\n+    # Check that the input dict has not been changed\n+    assert_disparate_equal(in_dict, saved_dict)\n+\n+    # Check that the returned dict did not get additional keys\n+    for pname in act_dict.keys():\n+        assert pname in in_dict\n+\n+    # Check that the specified items have been blanked out, and that all other\n+    # items have unchanged values.\n+    for pname, in_value in in_dict.items():\n+        assert pname in act_dict\n+        act_value = act_dict[pname]\n+        if pname in blanked_properties:\n+            assert act_value == common.BLANKED_OUT\n+        else:\n+            assert act_value == in_value\n+\n+\n+COMMON_REMOVED_DICT_TESTCASES = [\n+    # Testcases for test_common_removed_dict()\n+    # The list items are tuples with the following items:\n+    # - desc (string): description of the testcase.\n+    # - in_dict (dict): Input dict. Must not be None\n+    # - removed_properties (list): Properties to be removed. Must not be None\n+\n+    (\n+        \"Empty dict and empty removed props\",\n+        {},\n+        []\n+    ),\n+    (\n+        \"Empty dict and one excess removed prop\",\n+        {},\n+        ['foo']\n+    ),\n+    (\n+        \"Dict and empty removed props\",\n+        {\n+            'p1': 'v1',\n+            'p2': None,\n+        },\n+        []\n+    ),\n+    (\n+        \"Dict and one matching removed prop\",\n+        {\n+            'p1': 'v1',\n+            'p2': None,\n+        },\n+        ['p1']\n+    ),\n+    (\n+        \"Dict and one matching and one excess removed prop\",\n+        {\n+            'p1': 'v1',\n+            'p2': None,\n+        },\n+        ['p1', 'foo']\n+    ),\n+]\n+\n+\n+@pytest.mark.parametrize(\n+    \"desc, in_dict, removed_properties\",\n+    COMMON_REMOVED_DICT_TESTCASES)\n+def test_common_removed_dict(desc, in_dict, removed_properties):\n+    # pylint: disable=unused-argument\n+    \"\"\"\n+    Test the removed_dict() function.\n+    \"\"\"\n+\n+    saved_dict = deepcopy(in_dict)\n+\n+    # The code to be tested\n+    act_dict = common.removed_dict(in_dict, removed_properties)\n+\n+    # Check that the input dict has not been changed\n+    assert_disparate_equal(in_dict, saved_dict)\n+\n+    # Check that the returned dict did not get additional keys\n+    for pname in act_dict.keys():\n+        assert pname in in_dict\n+\n+    # Check that the specified items have been removed, and that all other\n+    # items have unchanged values.\n+    for pname, in_value in in_dict.items():\n+        if pname in removed_properties:\n+            assert pname not in act_dict\n+        else:\n+            assert act_dict[pname] == in_value"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 0,
        "dependency_files": 1,
        "test_files": 5,
        "unique_directories": 7,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "dc05dd65bab2483d1d1b70dd3dd83cfb1248242f",
            "date": "2025-01-19T18:05:49Z",
            "author_login": "andy-maier"
          },
          {
            "sha": "bbf611bae70edcf42113a588c02a1d763414e386",
            "date": "2024-12-29T11:59:11Z",
            "author_login": "andy-maier"
          },
          {
            "sha": "d5fc041a6d38ce68a8f08f96a92d2ae84dd044ff",
            "date": "2024-12-12T13:27:33Z",
            "author_login": "andy-maier"
          },
          {
            "sha": "2a3ff6b9b054a139622ff6ca9923b80bbc8cee7f",
            "date": "2024-11-29T10:23:02Z",
            "author_login": "andy-maier"
          },
          {
            "sha": "848d51f9f371749cc530150591c98dedf897fb02",
            "date": "2024-11-28T18:47:58Z",
            "author_login": "andy-maier"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.2,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-312",
    "description": "ibm.ibm_zhmc is an Ansible collection for the IBM Z HMC. The Ansible collection \"ibm.ibm_zhmc\" writes password-like properties in clear text into its log file and into the output returned by some of its Ansible module in the following cases: 1. The 'boot_ftp_password' and 'ssc_master_pw' properties are passed as input to the zhmc_partition Ansible module. 2. The 'ssc_master_pw' and 'zaware_master_pw' properties are passed as input to the zhmc_lpar Ansible module. 3. The 'password' property is passed as input to the zhmc_user Ansible module (just in log file, not in module output). 4. The 'bind_password' property is passed as input to the zhmc_ldap_server_definition Ansible module. These properties appear in the module output only when they were specified in the module input and when creating or updating the corresponding resources. They do not appear in the output when retrieving facts for the corresponding resources. These properties appear in the log file only when the \"log_file\" module input parameter is used. By default, no log file is created. This issue has been fixed in ibm.ibm_zhmc version 1.9.3. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-29T19:15:09.847",
    "last_modified": "2024-11-29T19:15:09.847",
    "fix_date": "2024-11-28T18:47:58Z"
  },
  "references": [
    {
      "url": "https://github.com/zhmcclient/zhmc-ansible-modules/commit/f5579f07da5f02d2496c41a313d4ae7a0a459b1d",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/zhmcclient/zhmc-ansible-modules/security/advisories/GHSA-mw6c-f428-jx4f",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:31.318497",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "zhmc-ansible-modules",
    "owner": "zhmcclient",
    "created_at": "2017-07-19T21:50:30Z",
    "updated_at": "2025-01-19T20:36:36Z",
    "pushed_at": "2025-01-19T20:36:43Z",
    "size": 15311,
    "stars": 12,
    "forks": 9,
    "open_issues": 39,
    "watchers": 12,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "stable_0.5",
      "stable_0.6",
      "stable_0.7",
      "stable_0.8",
      "stable_0.9",
      "stable_0.10",
      "stable_1.0",
      "stable_1.1",
      "stable_1.2",
      "stable_1.3",
      "stable_1.4",
      "stable_1.5",
      "stable_1.6",
      "stable_1.7",
      "stable_1.8",
      "stable_1.9"
    ],
    "languages": {
      "Python": 1435003,
      "Makefile": 25466,
      "Shell": 2269
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:43:04.683254"
  }
}