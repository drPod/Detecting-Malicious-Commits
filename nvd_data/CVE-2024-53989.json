{
  "cve_id": "CVE-2024-53989",
  "github_data": {
    "repository": "rails/rails-html-sanitizer",
    "fix_commit": "16251735e36ebdc302e2f90f2a39cad56879414f",
    "related_commits": [
      "16251735e36ebdc302e2f90f2a39cad56879414f"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "16251735e36ebdc302e2f90f2a39cad56879414f",
      "commit_date": "2024-11-30T21:16:29Z",
      "author": {
        "login": "flavorjones",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: disallow 'noscript' from safe lists",
        "length": 79,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 49,
        "additions": 49,
        "deletions": 0
      },
      "files": [
        {
          "filename": "lib/rails/html/scrubbers.rb",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -134,6 +134,12 @@ def validate!(var, name)\n           if var && !var.is_a?(Enumerable)\n             raise ArgumentError, \"You should pass :#{name} as an Enumerable\"\n           end\n+\n+          if var && name == :tags && var.include?(\"noscript\")\n+            warn(\"WARNING: 'noscript' tags cannot be allowed by the PermitScrubber and will be scrubbed\")\n+            var.delete(\"noscript\")\n+          end\n+\n           var\n         end\n "
        },
        {
          "filename": "test/sanitizer_test.rb",
          "status": "modified",
          "additions": 35,
          "deletions": 0,
          "patch": "@@ -1026,6 +1026,24 @@ def test_should_sanitize_across_newlines\n       assert_equal \"\", sanitize_css(raw)\n     end\n \n+    def test_should_prune_noscript\n+      # https://hackerone.com/reports/2509647\n+      input, tags = \"<div><noscript><p id='</noscript><script>alert(1)</script>'></noscript>\", [\"p\", \"div\", \"noscript\"]\n+      actual = nil\n+      assert_output(nil, /WARNING: 'noscript' tags cannot be allowed by the PermitScrubber/) do\n+        actual = safe_list_sanitize(input, tags: tags, attributes: %w(id))\n+      end\n+\n+      acceptable_results = [\n+        # libxml2\n+        \"<div><p id=\\\"&lt;/noscript&gt;&lt;script&gt;alert(1)&lt;/script&gt;\\\"></p></div>\",\n+        # libgumbo\n+        \"<div><p id=\\\"</noscript><script>alert(1)</script>\\\"></p></div>\",\n+      ]\n+\n+      assert_includes(acceptable_results, actual)\n+    end\n+\n     protected\n       def safe_list_sanitize(input, options = {})\n         module_under_test::SafeListSanitizer.new.sanitize(input, options)\n@@ -1075,5 +1093,22 @@ class HTML4SafeListSanitizerTest < Minitest::Test\n   class HTML5SafeListSanitizerTest < Minitest::Test\n     @module_under_test = Rails::HTML5\n     include SafeListSanitizerTest\n+\n+    def test_should_not_be_vulnerable_to_noscript_attacks\n+      # https://hackerone.com/reports/2509647\n+      skip(\"browser assertion requires parse_noscript_content_as_text\") unless Nokogiri::VERSION >= \"1.17\"\n+\n+      input = '<noscript><p id=\"</noscript><script>alert(1)</script>\"></noscript>'\n+\n+      result = nil\n+      assert_output(nil, /WARNING/) do\n+        result = Rails::HTML5::SafeListSanitizer.new.sanitize(input, tags: %w(p div noscript), attributes: %w(id class style))\n+      end\n+\n+      browser = Nokogiri::HTML5::Document.parse(result, parse_noscript_content_as_text: true)\n+      xss = browser.at_xpath(\"//script\")\n+\n+      assert_nil(xss)\n+    end\n   end if loofah_html5_support?\n end"
        },
        {
          "filename": "test/scrubbers_test.rb",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -121,6 +121,14 @@ def test_leaves_only_supplied_tags_and_attributes\n     assert_scrubbed html, '<tag></tag><tag cooler=\"\"></tag>'\n   end\n \n+  def test_does_not_allow_safelisted_noscript\n+    # https://hackerone.com/reports/2509647\n+    assert_output(nil, /WARNING: 'noscript' tags cannot be allowed by the PermitScrubber/) do\n+      @scrubber.tags = [\"div\", \"noscript\", \"span\"]\n+    end\n+    assert_equal([\"div\", \"span\"], @scrubber.tags)\n+  end\n+\n   def test_leaves_text\n     assert_scrubbed(\"some text\")\n   end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "08e39d99059c1179efd5e50fdb3bc60a262973f8",
            "date": "2024-12-12T21:05:18Z",
            "author_login": "flavorjones"
          },
          {
            "sha": "694d98195b90ba29e57ed650dac43e2b026582b2",
            "date": "2024-12-12T20:54:53Z",
            "author_login": "flavorjones"
          },
          {
            "sha": "9a1e3761b42f0f7f49021a185df480dc4aabf423",
            "date": "2024-12-12T20:45:59Z",
            "author_login": "flavorjones"
          },
          {
            "sha": "9d5b3989a661b82c3407bb38594345b5f363da2b",
            "date": "2024-12-04T13:36:24Z",
            "author_login": "flavorjones"
          },
          {
            "sha": "5e96b19bbb934284e675109851bd82429622bb6e",
            "date": "2024-12-02T20:50:58Z",
            "author_login": "flavorjones"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "rails-html-sanitizer is responsible for sanitizing HTML fragments in Rails applications. There is a possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer 1.6.0 when used with Rails >= 7.1.0. A possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer may allow an attacker to inject content if HTML5 sanitization is enabled and the application developer has overridden the sanitizer's allowed tags for the the \"noscript\" element. This vulnerability is fixed in 1.6.1.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-12-02T21:15:11.433",
    "last_modified": "2024-12-02T22:15:11.740",
    "fix_date": "2024-11-30T21:16:29Z"
  },
  "references": [
    {
      "url": "https://github.com/rails/rails-html-sanitizer/commit/16251735e36ebdc302e2f90f2a39cad56879414f",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-rxv5-gxqc-xx8g",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:33.084674",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "rails-html-sanitizer",
    "owner": "rails",
    "created_at": "2013-09-25T00:54:20Z",
    "updated_at": "2024-12-17T07:47:06Z",
    "pushed_at": "2024-12-12T21:05:43Z",
    "size": 367,
    "stars": 310,
    "forks": 83,
    "open_issues": 8,
    "watchers": 310,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Ruby": 84358
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:56:10.297713"
  }
}