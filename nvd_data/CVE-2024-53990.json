{
  "cve_id": "CVE-2024-53990",
  "github_data": {
    "repository": "AsyncHttpClient/async-http-client",
    "fix_commit": "d5a83362f7aed81b93ebca559746ac9be0f95425",
    "related_commits": [
      "d5a83362f7aed81b93ebca559746ac9be0f95425"
    ],
    "patch_url": "https://github.com/AsyncHttpClient/async-http-client/commit/d5a83362f7aed81b93ebca559746ac9be0f95425.patch",
    "fix_commit_details": {
      "sha": "d5a83362f7aed81b93ebca559746ac9be0f95425",
      "commit_date": "2024-12-01T19:10:55Z",
      "author": {
        "login": "pickypg",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[CookieStore] Only set `Cookie`s if they are not already set (#2033)",
        "length": 372,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 64,
        "additions": 55,
        "deletions": 9
      },
      "files": [
        {
          "filename": "client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -235,7 +235,7 @@ public <T> ListenableFuture<T> executeRequest(Request request, AsyncHandler<T> h\n                 if (!cookies.isEmpty()) {\n                     RequestBuilder requestBuilder = request.toBuilder();\n                     for (Cookie cookie : cookies) {\n-                        requestBuilder.addOrReplaceCookie(cookie);\n+                        requestBuilder.addCookieIfUnset(cookie);\n                     }\n                     request = requestBuilder.build();\n                 }"
        },
        {
          "filename": "client/src/main/java/org/asynchttpclient/RequestBuilderBase.java",
          "status": "modified",
          "additions": 18,
          "deletions": 3,
          "patch": "@@ -323,6 +323,21 @@ public T addCookie(Cookie cookie) {\n      * @return this\n      */\n     public T addOrReplaceCookie(Cookie cookie) {\n+        return maybeAddOrReplaceCookie(cookie, true);\n+    }\n+\n+    /**\n+     * Add a cookie based on its name, if it does not exist yet. Cookies that\n+     * are already set will be ignored.\n+     *\n+     * @param cookie the new cookie\n+     * @return this\n+     */\n+    public T addCookieIfUnset(Cookie cookie) {\n+        return maybeAddOrReplaceCookie(cookie, false);\n+    }\n+\n+    private T maybeAddOrReplaceCookie(Cookie cookie, boolean allowReplace) {\n         String cookieKey = cookie.name();\n         boolean replace = false;\n         int index = 0;\n@@ -335,10 +350,10 @@ public T addOrReplaceCookie(Cookie cookie) {\n \n             index++;\n         }\n-        if (replace) {\n-            cookies.set(index, cookie);\n-        } else {\n+        if (!replace) {\n             cookies.add(cookie);\n+        } else if (allowReplace) {\n+            cookies.set(index, cookie);\n         }\n         return asDerivedType();\n     }"
        },
        {
          "filename": "client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java",
          "status": "modified",
          "additions": 2,
          "deletions": 5,
          "patch": "@@ -142,11 +142,8 @@ public boolean exitAfterHandlingRedirect(Channel channel, NettyResponseFuture<?>\n                 CookieStore cookieStore = config.getCookieStore();\n                 if (cookieStore != null) {\n                     // Update request's cookies assuming that cookie store is already updated by Interceptors\n-                    List<Cookie> cookies = cookieStore.get(newUri);\n-                    if (!cookies.isEmpty()) {\n-                        for (Cookie cookie : cookies) {\n-                            requestBuilder.addOrReplaceCookie(cookie);\n-                        }\n+                    for (Cookie cookie : cookieStore.get(newUri)) {\n+                        requestBuilder.addCookieIfUnset(cookie);\n                     }\n                 }\n "
        },
        {
          "filename": "client/src/test/java/org/asynchttpclient/RequestBuilderTest.java",
          "status": "modified",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -166,6 +166,40 @@ public void testAddOrReplaceCookies() {\n         assertEquals(requestBuilder.cookies.size(), 2, \"cookie size must be 2 after adding 1 more cookie i.e. cookie3\");\n     }\n \n+    @RepeatedIfExceptionsTest(repeats = 5)\n+    public void testAddIfUnsetCookies() {\n+        RequestBuilder requestBuilder = new RequestBuilder();\n+        Cookie cookie = new DefaultCookie(\"name\", \"value\");\n+        cookie.setDomain(\"google.com\");\n+        cookie.setPath(\"/\");\n+        cookie.setMaxAge(1000);\n+        cookie.setSecure(true);\n+        cookie.setHttpOnly(true);\n+        requestBuilder.addCookieIfUnset(cookie);\n+        assertEquals(requestBuilder.cookies.size(), 1, \"cookies size should be 1 after adding one cookie\");\n+        assertEquals(requestBuilder.cookies.get(0), cookie, \"cookie does not match\");\n+\n+        Cookie cookie2 = new DefaultCookie(\"name\", \"value\");\n+        cookie2.setDomain(\"google2.com\");\n+        cookie2.setPath(\"/path\");\n+        cookie2.setMaxAge(1001);\n+        cookie2.setSecure(false);\n+        cookie2.setHttpOnly(false);\n+\n+        requestBuilder.addCookieIfUnset(cookie2);\n+        assertEquals(requestBuilder.cookies.size(), 1, \"cookies size should remain 1 as we just ignored cookie2 because of a cookie with same name\");\n+        assertEquals(requestBuilder.cookies.get(0), cookie, \"cookie does not match\");\n+\n+        Cookie cookie3 = new DefaultCookie(\"name2\", \"value\");\n+        cookie3.setDomain(\"google.com\");\n+        cookie3.setPath(\"/\");\n+        cookie3.setMaxAge(1000);\n+        cookie3.setSecure(true);\n+        cookie3.setHttpOnly(true);\n+        requestBuilder.addCookieIfUnset(cookie3);\n+        assertEquals(requestBuilder.cookies.size(), 2, \"cookie size must be 2 after adding 1 more cookie i.e. cookie3\");\n+    }\n+\n     @RepeatedIfExceptionsTest(repeats = 5)\n     public void testSettingQueryParamsBeforeUrlShouldNotProduceNPE() {\n         RequestBuilder requestBuilder = new RequestBuilder();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ab89c7c4c26ca4aab803d49bff1f5c92aa66dd7d",
            "date": "2024-12-30T15:26:32Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a3fd14e4069b2252ceb4c95e0ee7416740bc9597",
            "date": "2024-12-27T13:41:09Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6c6c8125ec59cf4e1bfbae9fa4ef224d91c77add",
            "date": "2024-12-18T17:26:10Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "549ea34d0cb814595b79cd64af5a31238d374da1",
            "date": "2024-12-12T21:22:24Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6bd376ad336a237ef02a632df0042d4eb22e2d32",
            "date": "2024-12-02T16:10:34Z",
            "author_login": "hyperxpro"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-287",
    "description": "The AsyncHttpClient (AHC) library allows Java applications to easily execute HTTP requests and asynchronously process HTTP responses. When making any HTTP request, the automatically enabled and self-managed CookieStore (aka cookie jar) will silently replace explicitly defined Cookies with any that have the same name from the cookie jar. For services that operate with multiple users, this can result in one user's Cookie being used for another user's requests.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-12-02T18:15:11.753",
    "last_modified": "2024-12-02T18:15:11.753",
    "fix_date": "2024-12-01T19:10:55Z"
  },
  "references": [
    {
      "url": "https://github.com/AsyncHttpClient/async-http-client/commit/d5a83362f7aed81b93ebca559746ac9be0f95425",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/AsyncHttpClient/async-http-client/issues/1964",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/AsyncHttpClient/async-http-client/pull/2033",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/AsyncHttpClient/async-http-client/security/advisories/GHSA-mfj5-cf8g-g2fv",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:33.083868",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "async-http-client",
    "owner": "AsyncHttpClient",
    "created_at": "2011-03-07T13:41:46Z",
    "updated_at": "2025-01-14T07:00:59Z",
    "pushed_at": "2025-01-07T06:56:10Z",
    "size": 19101,
    "stars": 6309,
    "forks": 1592,
    "open_issues": 114,
    "watchers": 6309,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Java": 1830067
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T19:00:05.088137"
  }
}