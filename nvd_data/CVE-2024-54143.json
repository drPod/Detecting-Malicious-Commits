{
  "cve_id": "CVE-2024-54143",
  "github_data": {
    "repository": "openwrt/asu",
    "fix_commit": "920c8a13d97b4d4095f0d939cf0aaae777e0f87e",
    "related_commits": [
      "920c8a13d97b4d4095f0d939cf0aaae777e0f87e"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "920c8a13d97b4d4095f0d939cf0aaae777e0f87e",
      "commit_date": "2024-12-04T08:32:29Z",
      "author": {
        "login": "aparcar",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "chore: cleanups and OpenWrt One as default",
        "length": 201,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 76,
        "additions": 48,
        "deletions": 28
      },
      "files": [
        {
          "filename": "asu/build.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -245,7 +245,7 @@ def build(build_request: BuildRequest, job=None):\n         \"image\",\n         f\"PROFILE={build_request.profile}\",\n         f\"PACKAGES={' '.join(build_cmd_packages)}\",\n-        f\"EXTRA_IMAGE_NAME={packages_hash}\",\n+        f\"EXTRA_IMAGE_NAME={packages_hash[:12]}\",\n         f\"BIN_DIR=/builder/{request_hash}\",\n     ]\n "
        },
        {
          "filename": "asu/build_request.py",
          "status": "modified",
          "additions": 17,
          "deletions": 5,
          "patch": "@@ -1,8 +1,12 @@\n from typing import Annotated\n+\n from pydantic import BaseModel, Field\n \n from asu.config import settings\n \n+STRING_PATTERN = r\"^[\\w.,-]*$\"\n+TARGET_PATTERN = r\"^[\\w]*/[\\w]*$\"\n+\n \n class BuildRequest(BaseModel):\n     distro: Annotated[\n@@ -12,16 +16,18 @@ class BuildRequest(BaseModel):\n                 This parameter is currently optional since no other\n                 distributions are supported.\n             \"\"\".strip(),\n+            pattern=STRING_PATTERN,\n         ),\n     ] = \"openwrt\"\n     version: Annotated[\n         str,\n         Field(\n-            examples=[\"23.05.2\"],\n+            examples=[\"24.10.0-rc2\"],\n             description=\"\"\"\n                 It is recommended to always upgrade to the latest version,\n                 however it is possible to request older images for testing.\n             \"\"\".strip(),\n+            pattern=STRING_PATTERN,\n         ),\n     ]\n     version_code: Annotated[\n@@ -34,30 +40,33 @@ class BuildRequest(BaseModel):\n                 resulting firmware is a different revision, the build results\n                 in an error.\n             \"\"\".strip(),\n+            pattern=STRING_PATTERN,\n         ),\n     ] = \"\"\n     target: Annotated[\n         str,\n         Field(\n-            examples=[\"ath79/generic\"],\n+            examples=[\"mediatek/filogic\"],\n             description=\"\"\"\n             It is recommended to always upgrade to the latest version, however\n             it is possible to request older images for testing.\n             \"\"\".strip(),\n+            pattern=TARGET_PATTERN,\n         ),\n     ]\n     profile: Annotated[\n         str,\n         Field(\n-            examples=[\"8dev_carambola2\"],\n+            examples=[\"openwrt_one\"],\n             description=\"\"\"\n                 The ImageBuilder `PROFILE`.  Can be found with `ubus call\n                 system board` as the `board_name` value.\n                 \"\"\".strip(),\n+            pattern=STRING_PATTERN,\n         ),\n     ]\n     packages: Annotated[\n-        list[str],\n+        list[Annotated[str, Field(pattern=STRING_PATTERN)]],\n         Field(\n             examples=[[\"vim\", \"tmux\"]],\n             description=\"\"\"\n@@ -69,7 +78,10 @@ class BuildRequest(BaseModel):\n         ),\n     ] = []\n     packages_versions: Annotated[\n-        dict,\n+        dict[\n+            Annotated[str, Field(pattern=STRING_PATTERN)],\n+            Annotated[str, Field(pattern=STRING_PATTERN)],\n+        ],\n         Field(\n             examples=[{\"vim\": \"1.2.3\", \"tmux\": \"2.3.4\"}],\n             description=\"\"\""
        },
        {
          "filename": "asu/main.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -16,10 +16,10 @@\n from asu.routers import api\n from asu.util import (\n     get_redis_client,\n+    is_post_kmod_split_build,\n     parse_feeds_conf,\n-    parse_packages_file,\n     parse_kernel_version,\n-    is_post_kmod_split_build,\n+    parse_packages_file,\n )\n \n logging.basicConfig(encoding=\"utf-8\", level=settings.log_level)"
        },
        {
          "filename": "asu/util.py",
          "status": "modified",
          "additions": 4,
          "deletions": 10,
          "patch": "@@ -4,7 +4,7 @@\n import json\n import logging\n import struct\n-from os import getuid, getgid\n+from os import getgid, getuid\n from pathlib import Path\n from re import match\n from tarfile import TarFile\n@@ -22,9 +22,6 @@\n from asu.build_request import BuildRequest\n from asu.config import settings\n \n-\n-REQUEST_HASH_LENGTH: int = 32\n-\n log: logging.Logger = logging.getLogger(\"rq.worker\")\n log.propagate = False  # Suppress duplicate log messages.\n \n@@ -66,18 +63,16 @@ def get_branch(version_or_branch: str) -> dict[str, str]:\n     return {**settings.branches.get(branch_name, {}), \"name\": branch_name}\n \n \n-def get_str_hash(string: str, length: int = REQUEST_HASH_LENGTH) -> str:\n+def get_str_hash(string: str) -> str:\n     \"\"\"Return sha256sum of str with optional length\n \n     Args:\n         string (str): input string\n-        length (int): hash length\n \n     Returns:\n         str: hash of string with specified length\n     \"\"\"\n-    h = hashlib.sha256(bytes(string or \"\", \"utf-8\"))\n-    return h.hexdigest()[:length]\n+    return hashlib.sha256(bytes(string or \"\", \"utf-8\")).hexdigest()\n \n \n def get_file_hash(path: str) -> str:\n@@ -145,7 +140,6 @@ def get_request_hash(build_request: BuildRequest) -> str:\n                 str(build_request.repositories),\n             ]\n         ),\n-        REQUEST_HASH_LENGTH,\n     )\n \n \n@@ -161,7 +155,7 @@ def get_packages_hash(packages: list[str]) -> str:\n     Returns:\n         str: hash of `req`\n     \"\"\"\n-    return get_str_hash(\" \".join(sorted(list(set(packages)))), 12)\n+    return get_str_hash(\" \".join(sorted(list(set(packages)))))\n \n \n def fingerprint_pubkey_usign(pubkey: str) -> str:"
        },
        {
          "filename": "tests/test_api.py",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -178,8 +178,8 @@ def test_api_build_request_hash(client):\n         profile=\"testprofile\",\n     )\n \n-    case12hash = \"8731372f84b0022c070e6127bad24eb2\"\n-    case34hash = \"0dab3b60bd8174da250e2ea2942a3744\"\n+    case12hash = \"8d8e0aa2fd95bb75dba4aff4279dd6f976a40ad17300927d54b8a9a9b0576306\"\n+    case34hash = \"6b1645013216da39ee09deae75b87b0636f3c50648b037750b0a80448ce5c7ca\"\n \n     # Case 1 - diff_packages=True, first package ordering\n     json[\"diff_packages\"] = True\n@@ -702,7 +702,10 @@ def test_api_build_defaults_filled_allowed(app):\n \n     assert response.status_code == 200\n     data = response.json()\n-    assert data[\"request_hash\"] == \"c9836b2259eec0c3a31868fe77a19983\"\n+    assert (\n+        data[\"request_hash\"]\n+        == \"9c8d0cd7d9ec208a233b954edb20c3c20b5c11103bb7f5f1ebface565f8c6720\"\n+    )\n \n \n def test_api_build_defaults_filled_too_big(app):"
        },
        {
          "filename": "tests/test_util.py",
          "status": "modified",
          "additions": 18,
          "deletions": 7,
          "patch": "@@ -16,46 +16,57 @@\n     get_podman,\n     get_request_hash,\n     get_str_hash,\n+    is_post_kmod_split_build,\n     parse_feeds_conf,\n+    parse_kernel_version,\n     parse_manifest,\n     parse_packages_file,\n-    parse_kernel_version,\n-    is_post_kmod_split_build,\n     run_cmd,\n     verify_usign,\n )\n \n \n def test_get_str_hash():\n-    assert get_str_hash(\"test\", 12) == \"9f86d081884c\"\n+    assert (\n+        get_str_hash(\"test\")\n+        == \"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"\n+    )\n \n \n def test_get_file_hash():\n     file_fd, file_path = tempfile.mkstemp()\n     os.write(file_fd, b\"test\")\n \n-    assert get_file_hash(file_path).startswith(\"9f86d081884c\")\n+    assert get_file_hash(file_path).startswith(\n+        \"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"\n+    )\n \n     os.close(file_fd)\n     os.unlink(file_path)\n \n \n def test_get_packages_hash():\n-    assert get_packages_hash([\"test1\", \"test2\"]) == \"57aab5949a36\"\n+    assert (\n+        get_packages_hash([\"test1\", \"test2\"])\n+        == \"57aab5949a36e66b535a8cb13e39e9e093181c9000c016990d7be9eb86a9b9e8\"\n+    )\n \n \n def test_get_request_hash():\n     request = BuildRequest(\n         **{\n             \"distro\": \"test\",\n             \"version\": \"test\",\n-            \"target\": \"test\",\n+            \"target\": \"testtarget/testsubtarget\",\n             \"profile\": \"test\",\n             \"packages\": [\"test\"],\n         }\n     )\n \n-    assert get_request_hash(request) == \"3944eba49da93e2c605a7e9980e52765\"\n+    assert (\n+        get_request_hash(request)\n+        == \"99ff721439cd696f7da259541a07d7bfc7eb6c45a844db532e0384b464e23f46\"\n+    )\n \n \n def test_diff_packages():"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4ee343cdfd8c2a24c5420f12aab22914b1270a2e",
            "date": "2025-01-24T10:43:13Z",
            "author_login": "aparcar"
          },
          {
            "sha": "a3f584fae5101b79f624360bd57b007cc35e21ef",
            "date": "2025-01-19T12:07:27Z",
            "author_login": "aparcar"
          },
          {
            "sha": "d4f1327f0a68b07bcf3e1ff99e3ddc55047f5d2b",
            "date": "2025-01-10T17:58:18Z",
            "author_login": "efahl"
          },
          {
            "sha": "7a5e72ac38b8c1bcb0d47f11780b6554f767eb0e",
            "date": "2025-01-15T01:22:44Z",
            "author_login": "efahl"
          },
          {
            "sha": "2c036963e02cf1c034b02e8b20fa58d4deaa2c89",
            "date": "2025-01-19T12:02:48Z",
            "author_login": "aparcar"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-328",
    "description": "openwrt/asu is an image on demand server for OpenWrt based distributions. The request hashing mechanism truncates SHA-256 hashes to only 12 characters. This significantly reduces entropy, making it feasible for an attacker to generate collisions. By exploiting this, a previously built malicious image can be served in place of a legitimate one, allowing the attacker to \"poison\" the artifact cache and deliver compromised images to unsuspecting users. This can be combined with other attacks, such as a command injection in Imagebuilder that allows malicious users to inject arbitrary commands into the build process, resulting in the production of malicious firmware images signed with the legitimate build key. This has been patched with 920c8a1.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-12-06T17:15:12.687",
    "last_modified": "2024-12-06T17:15:12.687",
    "fix_date": "2024-12-04T08:32:29Z"
  },
  "references": [
    {
      "url": "https://github.com/openwrt/asu/commit/920c8a13d97b4d4095f0d939cf0aaae777e0f87e",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/openwrt/asu/security/advisories/GHSA-r3gq-96h6-3v7q",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:33.101572",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "asu",
    "owner": "openwrt",
    "created_at": "2017-05-17T07:44:03Z",
    "updated_at": "2025-01-26T03:19:39Z",
    "pushed_at": "2025-01-24T10:43:59Z",
    "size": 2729,
    "stars": 352,
    "forks": 88,
    "open_issues": 314,
    "watchers": 352,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 92907,
      "CSS": 7112,
      "HTML": 3957,
      "Shell": 1279,
      "Dockerfile": 428,
      "Makefile": 415
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T08:11:24.819902"
  }
}