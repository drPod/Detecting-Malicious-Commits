{
  "cve_id": "CVE-2024-54149",
  "github_data": {
    "repository": "wintercms/winter",
    "fix_commit": "fb88e6fabde3b3278ce1844e581c87dcf7daee22",
    "related_commits": [
      "fb88e6fabde3b3278ce1844e581c87dcf7daee22"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "fb88e6fabde3b3278ce1844e581c87dcf7daee22",
      "commit_date": "2024-10-16T05:31:35Z",
      "author": {
        "login": "bennothommo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 686,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 449,
        "additions": 411,
        "deletions": 38
      },
      "files": [
        {
          "filename": "modules/cms/classes/Theme.php",
          "status": "modified",
          "additions": 23,
          "deletions": 11,
          "patch": "@@ -1,22 +1,25 @@\n-<?php namespace Cms\\Classes;\n+<?php\n+\n+namespace Cms\\Classes;\n \n-use App;\n-use ApplicationException;\n-use Cache;\n use Cms\\Models\\ThemeData;\n-use Config;\n use DirectoryIterator;\n-use Event;\n use Exception;\n-use File;\n-use Lang;\n+use Illuminate\\Support\\Facades\\App;\n+use Illuminate\\Support\\Facades\\Cache;\n+use Illuminate\\Support\\Facades\\Lang;\n use System\\Models\\Parameter;\n-use SystemException;\n-use Url;\n+use Winter\\Storm\\Exception\\ApplicationException;\n+use Winter\\Storm\\Exception\\SystemException;\n use Winter\\Storm\\Halcyon\\Datasource\\DatasourceInterface;\n use Winter\\Storm\\Halcyon\\Datasource\\DbDatasource;\n use Winter\\Storm\\Halcyon\\Datasource\\FileDatasource;\n-use Yaml;\n+use Winter\\Storm\\Support\\Facades\\Config;\n+use Winter\\Storm\\Support\\Facades\\Event;\n+use Winter\\Storm\\Support\\Facades\\File;\n+use Winter\\Storm\\Support\\Facades\\Url;\n+use Winter\\Storm\\Support\\Facades\\Yaml;\n+use Winter\\Storm\\Support\\Str;\n \n /**\n  * This class represents the CMS theme.\n@@ -682,6 +685,11 @@ public function getDatasource(): DatasourceInterface\n      */\n     public function __get($name)\n     {\n+        if (in_array(strtolower($name), ['id', 'path', 'dirname', 'config', 'formconfig', 'previewimageurl'])) {\n+            $method = 'get'. ucfirst($name);\n+            return $this->$method();\n+        }\n+\n         if ($this->hasCustomData()) {\n             return $this->getCustomData()->{$name};\n         }\n@@ -694,6 +702,10 @@ public function __get($name)\n      */\n     public function __isset($key)\n     {\n+        if (in_array(strtolower($key), ['id', 'path', 'dirname', 'config', 'formconfig', 'previewimageurl'])) {\n+            return true;\n+        }\n+\n         if ($this->hasCustomData()) {\n             $theme = $this->getCustomData();\n             return $theme->offsetExists($key);"
        },
        {
          "filename": "modules/cms/models/ThemeData.php",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -1,11 +1,13 @@\n-<?php namespace Cms\\Models;\n+<?php\n+\n+namespace Cms\\Models;\n \n-use Lang;\n-use Model;\n use Cms\\Classes\\Theme as CmsTheme;\n-use System\\Classes\\CombineAssets;\n use Exception;\n+use Illuminate\\Support\\Facades\\Lang;\n+use System\\Classes\\CombineAssets;\n use System\\Models\\File;\n+use Winter\\Storm\\Database\\Model;\n \n /**\n  * Customization data used by a theme"
        },
        {
          "filename": "modules/system/tests/twig/SecurityPolicyTest.php",
          "status": "added",
          "additions": 269,
          "deletions": 0,
          "patch": "@@ -0,0 +1,269 @@\n+<?php\n+\n+namespace System\\Tests\\Twig;\n+\n+use Cms\\Classes\\Controller;\n+use Cms\\Classes\\Page;\n+use Cms\\Classes\\Theme;\n+use System\\Tests\\Bootstrap\\TestCase;\n+use Twig\\Environment;\n+use Winter\\Storm\\Filesystem\\Filesystem;\n+use Winter\\Storm\\Halcyon\\Datasource\\FileDatasource;\n+\n+class SecurityPolicyTest extends TestCase\n+{\n+    protected Environment $twig;\n+\n+    public function testCannotGetTwigInstanceFromCmsController()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set twig = this.controller.getTwig() %}\n+            {{ this.controller.getTwig() }}\n+        ');\n+    }\n+\n+    public function testCannotGetTwigLoaderFromCmsController()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set loader = this.controller.getLoader() %}\n+            {{ loader.load(\\'/\\') }}\n+        ');\n+    }\n+\n+    public function testCannotRunAPageObjectFromWithinTwig()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {{ this.controller.runPage() }}\n+        ');\n+    }\n+\n+    public function testCannotExtendAPageWithADynamicMethod()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set page = this.page.addDynamicMethod(\"test\") %}\n+        ');\n+    }\n+\n+    public function testCannotExtendAPageWithADynamicProperty()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set page = this.page.addDynamicProperty(\"test\", \"value\") %}\n+        ');\n+    }\n+\n+    public function testCannotWriteToAModel()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set modelTest = model.setAttribute(\"test\", \"value\") %}\n+        ', [\n+            'model' => new \\Winter\\Storm\\Database\\Model(),\n+        ]);\n+    }\n+\n+    public function testCanReadFromAModel()\n+    {\n+        $model = new \\Winter\\Storm\\Database\\Model();\n+        $model->test = 'value';\n+\n+        $result = trim($this->renderTwigInCmsController('\n+            {% set modelTest = model.getAttribute(\"test\") %}\n+            {{- modelTest -}}\n+        ', [\n+            'model' => $model,\n+        ]));\n+        $this->assertEquals('value', $result);\n+    }\n+\n+    public function testCannotFillAModel()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        try {\n+            $model = new \\Winter\\Storm\\Database\\Model();\n+            $model->addFillable('test');\n+            $model->test = 'value';\n+\n+            $this->renderTwigInCmsController('\n+                {% set modelTest = model.fill({ test: \\'value2\\' }) %}\n+            ', [\n+                'model' => new \\Winter\\Storm\\Database\\Model(),\n+            ]);\n+        } catch (\\Twig\\Sandbox\\SecurityNotAllowedMethodError $e) {\n+            // Ensure value hasn't changed\n+            $this->assertEquals('value', $model->test);\n+            throw $e;\n+        }\n+    }\n+\n+    public function testCannotSaveAModel()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set modelTest = model.save() %}\n+        ', [\n+            'model' => new \\Winter\\Storm\\Database\\Model(),\n+        ]);\n+    }\n+\n+    public function testCannotPushAModel()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set modelTest = model.push() %}\n+        ', [\n+            'model' => new \\Winter\\Storm\\Database\\Model(),\n+        ]);\n+    }\n+\n+    public function testCannotUpdateAModel()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $model = new \\Winter\\Storm\\Database\\Model();\n+        $model->addFillable('test');\n+        $model->test = 'value';\n+\n+        $this->renderTwigInCmsController('\n+            {% set modelTest = model.update({ test: \\'value2\\' }) %}\n+        ', [\n+            'model' => $model,\n+        ]);\n+    }\n+\n+    public function testCannotDeleteAModel()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set modelTest = model.delete() %}\n+        ', [\n+            'model' => new \\Winter\\Storm\\Database\\Model(),\n+        ]);\n+    }\n+\n+    public function testCannotForceDeleteAModel()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set modelTest = model.forceDelete() %}\n+        ', [\n+            'model' => new \\Winter\\Storm\\Database\\Model(),\n+        ]);\n+    }\n+\n+    public function testCannotExtendAModelWithABehaviour()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set model = model.extendClassWith(\"Winter\\Storm\\Database\\Behaviors\\Encryptable\") %}\n+        ', [\n+            'model' => new \\Winter\\Storm\\Database\\Model(),\n+        ]);\n+    }\n+\n+    public function testExtendingModelBeforePassingIntoTwigShouldStillWork()\n+    {\n+        $model = new \\Winter\\Storm\\Database\\Model();\n+        $model->addDynamicMethod('foo', function () {\n+            return 'foo';\n+        });\n+\n+        $result = trim($this->renderTwigInCmsController('\n+            {{- model.foo() -}}\n+        ', [\n+            'model' => $model,\n+        ]));\n+        $this->assertEquals('foo', $result);\n+    }\n+\n+    public function testCannotGetDatasourceFromTheme()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set datasource = this.theme.getDatasource() %}\n+        ');\n+    }\n+\n+    // Even if someone decides to be clever and make the datasource available, you shouldn't be able to insert/delete/update\n+    public function testCannotDeleteInDatasource()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set datasource = datasource.delete() %}\n+        ', [\n+            'datasource' => new FileDatasource(\n+                base_path('modules/system/tests/fixtures/themes/test'),\n+                new Filesystem()\n+            ),\n+        ]);\n+    }\n+\n+    public function testCannotInsertInDatasource()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set datasource = datasource.insert() %}\n+        ', [\n+            'datasource' => new FileDatasource(\n+                base_path('modules/system/tests/fixtures/themes/test'),\n+                new Filesystem()\n+            ),\n+        ]);\n+    }\n+\n+    public function testCannotUpdateInDatasource()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set datasource = datasource.update() %}\n+        ', [\n+            'datasource' => new FileDatasource(\n+                base_path('modules/system/tests/fixtures/themes/test'),\n+                new Filesystem()\n+            ),\n+        ]);\n+    }\n+\n+    public function testCannotChangeThemeDirectory()\n+    {\n+        $this->expectException(\\Twig\\Sandbox\\SecurityNotAllowedMethodError::class);\n+\n+        $this->renderTwigInCmsController('\n+            {% set theme = this.theme.setDirName(\"test\") %}\n+        ');\n+    }\n+\n+    protected function renderTwigInCmsController(string $source, array $vars = [])\n+    {\n+        $controller = new Controller();\n+        $twig = $controller->getTwig();\n+        $template = $twig->createTemplate($source, 'test.case');\n+        return $twig->render($template, [\n+            'this' => [\n+                'controller' => $controller,\n+                'page' => new Page(),\n+                'theme' => new Theme()\n+            ],\n+        ] + $vars);\n+    }\n+}"
        },
        {
          "filename": "modules/system/twig/SecurityPolicy.php",
          "status": "modified",
          "additions": 113,
          "deletions": 23,
          "patch": "@@ -1,48 +1,115 @@\n-<?php namespace System\\Twig;\n+<?php\n \n+namespace System\\Twig;\n+\n+use Cms\\Classes\\Controller;\n+use Cms\\Classes\\Theme;\n+use Illuminate\\Database\\Eloquent\\Model as DbModel;\n+use Winter\\Storm\\Halcyon\\Model as HalcyonModel;\n use Twig\\Markup;\n+use Twig\\Sandbox\\SecurityNotAllowedFunctionError;\n use Twig\\Template;\n use Twig\\Sandbox\\SecurityPolicyInterface;\n use Twig\\Sandbox\\SecurityNotAllowedMethodError;\n use Twig\\Sandbox\\SecurityNotAllowedPropertyError;\n+use Twig\\Sandbox\\SecurityNotAllowedTagError;\n+use Winter\\Storm\\Halcyon\\Datasource\\DatasourceInterface;\n \n /**\n  * SecurityPolicy globally blocks accessibility of certain methods and properties.\n  *\n  * @package winter\\wn-system-module\n- * @author Alexey Bobkov, Samuel Georges, Luke Towers\n+ * @author Alexey Bobkov, Samuel Georges, Luke Towers, Ben Thomson\n  */\n final class SecurityPolicy implements SecurityPolicyInterface\n {\n     /**\n-     * @var array List of forbidden methods.\n+     * @var array<string, string[]> List of forbidden methods, grouped by applicable instance.\n      */\n     protected $blockedMethods = [\n-        // Prevent accessing Twig itself\n-        'getTwig',\n-\n-        // \\Winter\\Storm\\Extension\\ExtendableTrait\n-        'addDynamicMethod',\n-        'addDynamicProperty',\n-\n-        // \\Winter\\Storm\\Support\\Traits\\Emitter\n-        'bindEvent',\n-        'bindEventOnce',\n-\n-        // Eloquent & Halcyon data modification\n-        'insert',\n-        'update',\n-        'delete',\n-        'write',\n+        '*' => [\n+            // Prevent accessing Twig itself\n+            'getTwig',\n+\n+            // Prevent extensions of any objects\n+            'addDynamicMethod',\n+            'addDynamicProperty',\n+            'extendClassWith',\n+            'getClassExtension',\n+            'extendableSet',\n+\n+            // Prevent binding to events\n+            'bindEvent',\n+            'bindEventOnce',\n+        ],\n+\n+        // Prevent some controller methods\n+        Controller::class => [\n+            'runPage',\n+            'renderPage',\n+            'getLoader',\n+        ],\n+\n+        // Prevent model data modification\n+        DbModel::class => [\n+            'fill',\n+            'setAttribute',\n+            'setRawAttributes',\n+            'save',\n+            'push',\n+            'update',\n+            'delete',\n+            'forceDelete',\n+        ],\n+        HalcyonModel::class => [\n+            'fill',\n+            'setAttribute',\n+            'setRawAttributes',\n+            'setSettingsAttribute',\n+            'setFileNameAttribute',\n+            'save',\n+            'push',\n+            'update',\n+            'delete',\n+            'forceDelete',\n+        ],\n+        DatasourceInterface::class => [\n+            'insert',\n+            'update',\n+            'delete',\n+            'forceDelete',\n+            'write',\n+            'usingSource',\n+            'pushToSource',\n+            'removeFromSource',\n+        ],\n+        Theme::class => [\n+            'setDirName',\n+            'registerHalcyonDatasource',\n+            'getDatasource'\n+        ],\n+    ];\n+\n+    /**\n+     * @var array<string, string[]> List of forbidden properties, grouped by applicable instance.\n+     */\n+    protected $blockedProperties = [\n+        Theme::class => [\n+            'datasource',\n+        ],\n     ];\n \n     /**\n      * Constructor\n      */\n     public function __construct()\n     {\n-        foreach ($this->blockedMethods as $i => $m) {\n-            $this->blockedMethods[$i] = strtolower($m);\n+        foreach ($this->blockedMethods as $type => $methods) {\n+            $this->blockedMethods[$type] = array_map('strtolower', $methods);\n+        }\n+\n+        foreach ($this->blockedProperties as $type => $properties) {\n+            $this->blockedProperties[$type] = array_map('strtolower', $properties);\n         }\n     }\n \n@@ -69,6 +136,19 @@ public function checkSecurity($tags, $filters, $functions): void\n      */\n     public function checkPropertyAllowed($obj, $property): void\n     {\n+        // No need to check Twig internal objects\n+        if ($obj instanceof Template || $obj instanceof Markup) {\n+            return;\n+        }\n+\n+        $property = strtolower($property);\n+\n+        foreach ($this->blockedProperties as $type => $properties) {\n+            if ($obj instanceof $type && in_array($property, $properties)) {\n+                $class = get_class($obj);\n+                throw new SecurityNotAllowedPropertyError(sprintf('Getting \"%s\" property in a \"%s\" object is blocked.', $property, $class), $class, $property);\n+            }\n+        }\n     }\n \n     /**\n@@ -85,10 +165,20 @@ public function checkMethodAllowed($obj, $method): void\n             return;\n         }\n \n-        $blockedMethod = strtolower($method);\n-        if (in_array($blockedMethod, $this->blockedMethods)) {\n+        $method = strtolower($method);\n+\n+        if (\n+            in_array($method, $this->blockedMethods['*'])\n+        ) {\n             $class = get_class($obj);\n             throw new SecurityNotAllowedMethodError(sprintf('Calling \"%s\" method on a \"%s\" object is blocked.', $method, $class), $class, $method);\n         }\n+\n+        foreach ($this->blockedMethods as $type => $methods) {\n+            if ($obj instanceof $type && in_array($method, $methods)) {\n+                $class = get_class($obj);\n+                throw new SecurityNotAllowedMethodError(sprintf('Calling \"%s\" method on a \"%s\" object is blocked.', $method, $class), $class, $method);\n+            }\n+        }\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fb2e6e345e63ecf28988d4fa7da75b84ac126fda",
            "date": "2025-01-25T04:50:35Z",
            "author_login": "LukeTowers"
          },
          {
            "sha": "9993e7518d8217fc550f30069373c9b83447951e",
            "date": "2025-01-25T04:31:54Z",
            "author_login": "mjauvin"
          },
          {
            "sha": "7224239fdfa403cff0b89928660a82ab80156924",
            "date": "2025-01-25T04:20:02Z",
            "author_login": "thienvu18"
          },
          {
            "sha": "b7859cd7b6534d0287b446ab9573d0b08c273ea5",
            "date": "2025-01-25T04:13:01Z",
            "author_login": "mjauvin"
          },
          {
            "sha": "a9105213a0f1018e62ff89eeb5092884aae43c04",
            "date": "2025-01-25T04:10:26Z",
            "author_login": "mjauvin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-184",
    "description": "Winter is a free, open-source content management system (CMS) based on the Laravel PHP framework. Winter CMS prior to versions 1.2.7, 1.1.11, and 1.0.476 allow users with access to the CMS templates sections that modify Twig files to bypass the sandbox placed on Twig files and modify resources such as theme customisation values or modify, or remove, templates in the theme even if not provided direct access via the permissions. As all objects passed through to Twig are references to the live objects, it is also possible to also manipulate model data if models are passed directly to Twig, including changing attributes or even removing records entirely. In most cases, this is unwanted behavior and potentially dangerous. To actively exploit this security issue, an attacker would need access to the Backend with a user account with any of the following permissions: `cms.manage_layouts`; `cms.manage_pages`; or `cms.manage_partials`. The Winter CMS maintainers strongly recommend that these permissions only be reserved to trusted administrators and developers in general. The maintainers of Winter CMS have significantly increased the scope of the sandbox, effectively making all models and datasources read-only in Twig, in versions 1.2.7, 1.1.11, and 1.0.476. Thse who cannot upgrade may apply commit fb88e6fabde3b3278ce1844e581c87dcf7daee22 to their Winter CMS installation manually to resolve the issue. In the rare event that a Winter user was relying on being able to write to models/datasources within their Twig templates, they should instead use or create components to make changes to their models.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-12-09T21:15:08.600",
    "last_modified": "2024-12-09T21:15:08.600",
    "fix_date": "2024-10-16T05:31:35Z"
  },
  "references": [
    {
      "url": "https://github.com/wintercms/winter/commit/fb88e6fabde3b3278ce1844e581c87dcf7daee22",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/wintercms/winter/security/advisories/GHSA-xhw3-4j3m-hq53",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:33.113505",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "winter",
    "owner": "wintercms",
    "created_at": "2021-03-04T03:02:45Z",
    "updated_at": "2025-01-25T04:50:39Z",
    "pushed_at": "2025-01-25T22:06:51Z",
    "size": 63432,
    "stars": 1394,
    "forks": 197,
    "open_issues": 84,
    "watchers": 1394,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "PHP": 5864203,
      "JavaScript": 1597968,
      "Less": 683863,
      "CSS": 360609,
      "HTML": 15046,
      "Vue": 13895,
      "Hack": 9045,
      "Shell": 2399,
      "Blade": 787,
      "Dockerfile": 304
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:46:48.854306"
  }
}