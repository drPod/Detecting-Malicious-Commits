{
  "cve_id": "CVE-2024-5443",
  "github_data": {
    "repository": "parisneo/lollms",
    "fix_commit": "2d0c4e76be93195836ecd0948027e791b8a2626f",
    "related_commits": [
      "2d0c4e76be93195836ecd0948027e791b8a2626f",
      "2d0c4e76be93195836ecd0948027e791b8a2626f"
    ],
    "patch_url": "https://github.com/parisneo/lollms/commit/2d0c4e76be93195836ecd0948027e791b8a2626f.patch",
    "fix_commit_details": {
      "sha": "2d0c4e76be93195836ecd0948027e791b8a2626f",
      "commit_date": "2024-05-25T23:55:55Z",
      "author": {
        "login": "ParisNeo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "extensions removed",
        "length": 18,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 292,
        "additions": 4,
        "deletions": 288
      },
      "files": [
        {
          "filename": "lollms/media.py",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -171,10 +171,12 @@ def __init__(\n         self.transcribed_files = deque()\n         self.buffer_lock = threading.Condition()\n         self.transcribed_lock = threading.Condition()\n+        self.lc.ShowBlockingMessage(\"Loading whisper...\")\n         ASCIIColors.info(\"Loading whisper...\", end=\"\",flush=True)\n \n         self.model = model\n         self.whisper = whisper.load_model(model)\n+        self.lc.HideBlockingMessage()\n         ASCIIColors.success(\"OK\")\n     \n     def get_date_time(self):\n@@ -246,7 +248,7 @@ def callback(self, indata, frames, time, status):\n             if self.current_silence_duration > self.longest_silence_duration:\n                 self.longest_silence_duration = self.current_silence_duration\n \n-            if self.silence_counter > (self.rate / frames * self.silence_duration):\n+            if self.silence_counter > (self.rate / frames) * self.silence_duration:\n                 ASCIIColors.red(\"Silence counter reached threshold\")\n                 trimmed_frames = self._trim_silence(self.frames)\n                 sound_percentage = self._calculate_sound_percentage(trimmed_frames)\n@@ -260,7 +262,7 @@ def callback(self, indata, frames, time, status):\n             else:\n                 ASCIIColors.red(f\"Appending data\")\n                 ASCIIColors.yellow(f\"silence_counter: {self.silence_counter}\")\n-                print(f\"silence duration: {self.rate / frames * self.silence_duration}\")\n+                print(f\"silence duration: {(self.rate / frames) * self.silence_duration}\")\n                 self.frames.append(indata.copy())\n         else:\n             self.frames = []"
        },
        {
          "filename": "lollms/server/elf.py",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -48,7 +48,6 @@ def main():\n     from lollms.server.endpoints.lollms_binding_infos import router as lollms_binding_infos_router\n     from lollms.server.endpoints.lollms_models_infos import router as lollms_models_infos_router\n     from lollms.server.endpoints.lollms_personalities_infos import router as lollms_personalities_infos_router\n-    from lollms.server.endpoints.lollms_extensions_infos import router as lollms_extensions_infos_router\n \n     from lollms.server.endpoints.lollms_configuration_infos import router as lollms_configuration_infos_router\n     \n@@ -69,7 +68,6 @@ def main():\n     app.include_router(lollms_binding_infos_router)\n     app.include_router(lollms_models_infos_router)\n     app.include_router(lollms_personalities_infos_router)\n-    app.include_router(lollms_extensions_infos_router)\n     \n     \n     app.include_router(lollms_generator_router)"
        },
        {
          "filename": "lollms/server/endpoints/lollms_extensions_infos.py",
          "status": "removed",
          "additions": 0,
          "deletions": 284,
          "patch": "@@ -1,284 +0,0 @@\n-\"\"\"\n-project: lollms\n-file: lollms_extensions_infos.py \n-author: ParisNeo\n-description: \n-    This module contains a set of FastAPI routes that provide information about the Lord of Large Language and Multimodal Systems (LoLLMs) Web UI\n-    application. These routes are specific to handling extensions related operations.\n-\n-\"\"\"\n-from fastapi import APIRouter, Request\n-from pydantic import BaseModel\n-import pkg_resources\n-from lollms.server.elf_server import LOLLMSElfServer\n-from lollms.extension import ExtensionBuilder, InstallOption\n-from lollms.utilities import gc\n-from ascii_colors import ASCIIColors\n-from lollms.utilities import load_config, trace_exception\n-from pathlib import Path\n-from typing import List\n-import psutil\n-import yaml\n-from lollms.security import sanitize_path, check_access\n-\n-# --------------------- Parameter Classes -------------------------------\n-class ExtensionInstallInfos(BaseModel):\n-    client_id:str\n-    name:str\n-class ExtensionMountingInfos(BaseModel):\n-    client_id:str\n-    category:str\n-    folder:str\n-    language:str\n-\n-# ----------------------- Defining router and main class ------------------------------\n-\n-    \n-router = APIRouter()\n-lollmsElfServer = LOLLMSElfServer.get_instance()\n-\n-# --------------------- Listing -------------------------------\n-@router.get(\"/list_extensions_categories\")\n-def list_extensions_categories():\n-    extensions_categories_dir = lollmsElfServer.lollms_paths.extensions_zoo_path  # replace with the actual path to the models folder\n-    extensions_categories = [f.stem for f in extensions_categories_dir.iterdir() if f.is_dir() and not f.name.startswith(\".\")]\n-    return extensions_categories\n-\n-@router.get(\"/list_extensions\")\n-def list_extensions():\n-    return lollmsElfServer.config.extensions\n-\n-\n-@router.get(\"/get_all_extensions\")\n-def get_all_extensions():\n-    ASCIIColors.yellow(\"Getting all extensions\")\n-    extensions_folder = lollmsElfServer.lollms_paths.extensions_zoo_path\n-    extensions = {}\n-\n-    for category_folder in  extensions_folder.iterdir():\n-        cat = category_folder.stem\n-        if category_folder.is_dir() and not category_folder.stem.startswith('.'):\n-            extensions[category_folder.name] = []\n-            for extensions_folder in category_folder.iterdir():\n-                ext = extensions_folder.stem\n-                if extensions_folder.is_dir() and not extensions_folder.stem.startswith('.'):\n-                    extension_info = {\"folder\":extensions_folder.stem}\n-                    config_path = extensions_folder / 'config.yaml'\n-                    if not config_path.exists():\n-                        continue                                    \n-                    try:\n-                        with open(config_path) as config_file:\n-                            config_data = yaml.load(config_file, Loader=yaml.FullLoader)\n-                            extension_info['name'] = config_data.get('name',\"No Name\")\n-                            extension_info['author'] = config_data.get('author', 'ParisNeo')\n-                            extension_info['based_on'] = config_data.get('based_on',\"\")\n-                            extension_info['description'] = config_data.get('description',\"\")\n-                            extension_info['version'] = config_data.get('version', '1.0.0')\n-                            extension_info['installed'] = (lollmsElfServer.lollms_paths.personal_configuration_path/f\"personality_{extensions_folder.stem}.yaml\").exists()\n-                            extension_info['help'] = config_data.get('help', '')\n-\n-                        real_assets_path = extensions_folder/ 'assets'\n-                        assets_path = Path(\"extensions\") / cat / ext / 'assets'\n-                        gif_logo_path = assets_path / 'logo.gif'\n-                        webp_logo_path = assets_path / 'logo.webp'\n-                        png_logo_path = assets_path / 'logo.png'\n-                        jpg_logo_path = assets_path / 'logo.jpg'\n-                        jpeg_logo_path = assets_path / 'logo.jpeg'\n-                        svg_logo_path = assets_path / 'logo.svg'\n-                        bmp_logo_path = assets_path / 'logo.bmp'\n-\n-                        gif_logo_path_ = real_assets_path / 'logo.gif'\n-                        webp_logo_path_ = real_assets_path / 'logo.webp'\n-                        png_logo_path_ = real_assets_path / 'logo.png'\n-                        jpg_logo_path_ = real_assets_path / 'logo.jpg'\n-                        jpeg_logo_path_ = real_assets_path / 'logo.jpeg'\n-                        svg_logo_path_ = real_assets_path / 'logo.svg'\n-                        bmp_logo_path_ = real_assets_path / 'logo.bmp'\n-                            \n-                        extension_info['has_logo'] = png_logo_path.is_file() or gif_logo_path.is_file()\n-                        \n-                        if gif_logo_path_.exists():\n-                            extension_info['avatar'] = str(gif_logo_path).replace(\"\\\\\",\"/\")\n-                        elif webp_logo_path_.exists():\n-                            extension_info['avatar'] = str(webp_logo_path).replace(\"\\\\\",\"/\")\n-                        elif png_logo_path_.exists():\n-                            extension_info['avatar'] = str(png_logo_path).replace(\"\\\\\",\"/\")\n-                        elif jpg_logo_path_.exists():\n-                            extension_info['avatar'] = str(jpg_logo_path).replace(\"\\\\\",\"/\")\n-                        elif jpeg_logo_path_.exists():\n-                            extension_info['avatar'] = str(jpeg_logo_path).replace(\"\\\\\",\"/\")\n-                        elif svg_logo_path_.exists():\n-                            extension_info['avatar'] = str(svg_logo_path).replace(\"\\\\\",\"/\")\n-                        elif bmp_logo_path_.exists():\n-                            extension_info['avatar'] = str(bmp_logo_path).replace(\"\\\\\",\"/\")\n-                        else:\n-                            extension_info['avatar'] = \"\"\n-                        \n-                        extensions[category_folder.name].append(extension_info)\n-                    except Exception as ex:\n-                        ASCIIColors.warning(f\"Couldn't load personality from {extensions_folder} [{ex}]\")\n-                        trace_exception(ex)\n-    return extensions\n-\n-\n-\n-# --------------------- Installing -------------------------------\n-@router.post(\"/install_extension\")\n-def install_extension(data: ExtensionInstallInfos):\n-    check_access(lollmsElfServer, data.client_id)\n-    if not data.name:\n-        try:\n-            data.name=lollmsElfServer.config.extensions[-1]\n-        except Exception as ex:\n-            lollmsElfServer.error(ex)\n-            return\n-    else:\n-        data.name = sanitize_path(data.name)\n-    try:\n-        extension_path = lollmsElfServer.lollms_paths.extensions_zoo_path / data.name\n-        ASCIIColors.info(f\"- Reinstalling extension {data.name}...\")\n-        try:\n-            lollmsElfServer.mounted_extensions.append(ExtensionBuilder().build_extension(extension_path,lollmsElfServer.lollms_paths, lollmsElfServer, InstallOption.FORCE_INSTALL))\n-            return {\"status\":True}\n-        except Exception as ex:\n-            ASCIIColors.error(f\"Extension file not found or is corrupted ({data.name}).\\nReturned the following exception:{ex}\\nPlease verify that the personality you have selected exists or select another personality. Some updates may lead to change in personality name or category, so check the personality selection in settings to be sure.\")\n-            trace_exception(ex)\n-            ASCIIColors.info(\"Trying to force reinstall\")\n-            return {\"status\":False, 'error':str(e)}\n-\n-    except Exception as e:\n-        return {\"status\":False, 'error':str(e)}\n-\n-@router.post(\"/reinstall_extension\")\n-def reinstall_extension(data: ExtensionInstallInfos):\n-    check_access(lollmsElfServer, data.client_id)\n-    if not data.name:\n-        try:\n-            data.name=sanitize_path(lollmsElfServer.config.extensions[-1])\n-        except Exception as ex:\n-            lollmsElfServer.error(ex)\n-            return\n-    else:\n-        data.name = sanitize_path(data.name)\n-    try:\n-        extension_path = lollmsElfServer.lollms_paths.extensions_zoo_path / data.name\n-        ASCIIColors.info(f\"- Reinstalling extension {data.name}...\")\n-        ASCIIColors.info(\"Unmounting extension\")\n-        if data.name in lollmsElfServer.config.extensions:\n-            idx = lollmsElfServer.config.extensions.index(data.name)\n-            print(f\"index = {idx}\")\n-            if len(lollmsElfServer.mount_extensions)>idx:\n-                del lollmsElfServer.mounted_extensions[idx]\n-            gc.collect()\n-        try:\n-            lollmsElfServer.mounted_extensions.append(ExtensionBuilder().build_extension(extension_path,lollmsElfServer.lollms_paths, lollmsElfServer, InstallOption.FORCE_INSTALL))\n-            return {\"status\":True}\n-        except Exception as ex:\n-            ASCIIColors.error(f\"Extension file not found or is corrupted ({data.name}).\\nReturned the following exception:{ex}\\nPlease verify that the personality you have selected exists or select another personality. Some updates may lead to change in personality name or category, so check the personality selection in settings to be sure.\")\n-            trace_exception(ex)\n-            ASCIIColors.info(\"Trying to force reinstall\")\n-            return {\"status\":False, 'error':str(e)}\n-\n-    except Exception as e:\n-        return {\"status\":False, 'error':str(e)}\n-    \n-\n-# --------------------- Mounting -------------------------------\n-\n-\n-@router.post(\"/mount_extension\")\n-def mount_extension(data:ExtensionMountingInfos):\n-    check_access(lollmsElfServer, data.client_id)\n-    print(\"- Mounting extension\")\n-    category = sanitize_path(data.category)\n-    name = sanitize_path(data.folder)\n-\n-    package_path = f\"{category}/{name}\"\n-    package_full_path = lollmsElfServer.lollms_paths.extensions_zoo_path/package_path\n-    config_file = package_full_path / \"config.yaml\"\n-    if config_file.exists():\n-        lollmsElfServer.config[\"extensions\"].append(package_path)\n-        lollmsElfServer.mounted_extensions = lollmsElfServer.rebuild_extensions()\n-        ASCIIColors.success(\"ok\")\n-        if lollmsElfServer.config.auto_save:\n-            ASCIIColors.info(\"Saving configuration\")\n-            lollmsElfServer.config.save_config()\n-        ASCIIColors.success(f\"Extension {name} mounted successfully\")\n-        return {\"status\": True,\n-                        \"extensions\":lollmsElfServer.config[\"extensions\"],\n-                        }       \n-    else:\n-        pth = str(config_file).replace('\\\\','/')\n-        ASCIIColors.error(f\"nok : Extension not found @ {pth}\")\n-        return {\"status\": False, \"error\":f\"Extension not found @ {pth}\"}\n-\n-\n-@router.post(\"/remount_extension\")\n-def remount_extension(data:ExtensionMountingInfos):\n-    check_access(lollmsElfServer, data.client_id)\n-    print(\"- Remounting extension\")\n-    category = sanitize_path(data.category)\n-    name = sanitize_path(data.folder)\n-\n-    package_path = f\"{category}/{name}\"\n-    package_full_path = lollmsElfServer.lollms_paths.extensions_zoo_path/package_path\n-    config_file = package_full_path / \"config.yaml\"\n-    if config_file.exists():\n-        ASCIIColors.info(f\"Unmounting personality {package_path}\")\n-        index = lollmsElfServer.config[\"extensions\"].index(f\"{category}/{name}\")\n-        lollmsElfServer.config[\"extensions\"].remove(f\"{category}/{name}\")\n-        if len(lollmsElfServer.config[\"extensions\"])>0:\n-            lollmsElfServer.mounted_personalities = lollmsElfServer.rebuild_extensions()\n-        else:\n-            lollmsElfServer.personalities = [\"generic/lollms\"]\n-            lollmsElfServer.mounted_personalities = lollmsElfServer.rebuild_extensions()\n-\n-\n-        ASCIIColors.info(f\"Mounting personality {package_path}\")\n-        lollmsElfServer.config[\"personalities\"].append(package_path)\n-        lollmsElfServer.mounted_personalities = lollmsElfServer.rebuild_extensions()\n-        ASCIIColors.success(\"ok\")\n-        if lollmsElfServer.config[\"active_personality_id\"]<0:\n-            return {\"status\": False,\n-                            \"personalities\":lollmsElfServer.config[\"personalities\"],\n-                            \"active_personality_id\":lollmsElfServer.config[\"active_personality_id\"]\n-                            }     \n-        else:\n-            return {\"status\": True,\n-                            \"personalities\":lollmsElfServer.config[\"personalities\"],\n-                            \"active_personality_id\":lollmsElfServer.config[\"active_personality_id\"]\n-                            }\n-    else:\n-        pth = str(config_file).replace('\\\\','/')\n-        ASCIIColors.error(f\"nok : Personality not found @ {pth}\")\n-        ASCIIColors.yellow(f\"Available personalities: {[p.name for p in lollmsElfServer.mounted_personalities]}\")\n-        return {\"status\": False, \"error\":f\"Personality not found @ {pth}\"} \n-\n-@router.post(\"/unmount_extension\")\n-def unmount_extension(data:ExtensionMountingInfos):\n-    check_access(lollmsElfServer, data.client_id)\n-    print(\"- Unmounting extension ...\")\n-    category    = sanitize_path(data.category)\n-    name        = sanitize_path(data.folder)\n-    language    = sanitize_path(data.get('language',None))\n-    try:\n-        personality_id = f\"{category}/{name}\" if language is None else f\"{category}/{name}:{language}\"\n-        index = lollmsElfServer.config[\"personalities\"].index(personality_id)\n-        lollmsElfServer.config[\"extensions\"].remove(personality_id)\n-        lollmsElfServer.mounted_extensions = lollmsElfServer.rebuild_extensions()\n-        ASCIIColors.success(\"ok\")\n-        if lollmsElfServer.config.auto_save:\n-            ASCIIColors.info(\"Saving configuration\")\n-            lollmsElfServer.config.save_config()\n-        return {\n-                    \"status\": True,\n-                    \"extensions\":lollmsElfServer.config[\"extensions\"]\n-                    }        \n-    except:\n-        if language:\n-            ASCIIColors.error(f\"nok : Personality not found @ {category}/{name}:{language}\")\n-        else:\n-            ASCIIColors.error(f\"nok : Personality not found @ {category}/{name}\")\n-            \n-        ASCIIColors.yellow(f\"Available personalities: {[p.name for p in lollmsElfServer.mounted_personalities]}\")\n-        return {\"status\": False, \"error\":\"Couldn't unmount personality\"}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6d1c0b6b697f96b69e447ee5eccde642d4b278a2",
            "date": "2025-01-14T10:04:38Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "3f9987e439cdd13608436a6ac404618090a921b8",
            "date": "2025-01-13T00:58:56Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "f995c304a0bc604cc7016dc88df416d56e3c105b",
            "date": "2025-01-10T16:32:16Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "12ca2678c789a75ad763c31fd1df88445b19a135",
            "date": "2025-01-09T07:56:12Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "e6dc54617cb983cfe884bf48fe9bd64c727824e9",
            "date": "2025-01-08T23:52:02Z",
            "author_login": "ParisNeo"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-29",
    "description": "CVE-2024-4320 describes a vulnerability in the parisneo/lollms software, specifically within the `ExtensionBuilder().build_extension()` function. The vulnerability arises from the `/mount_extension` endpoint, where a path traversal issue allows attackers to navigate beyond the intended directory structure. This is facilitated by the `data.category` and `data.folder` parameters accepting empty strings (`\"\"`), which, due to inadequate input sanitization, can lead to the construction of a `package_path` that points to the root directory. Consequently, if an attacker can create a `config.yaml` file in a controllable path, this path can be appended to the `extensions` list and trigger the execution of `__init__.py` in the current directory, leading to remote code execution. The vulnerability affects versions up to 5.9.0, and has been addressed in version 9.8.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-06-22T17:15:34.410",
    "last_modified": "2024-11-21T09:47:41.690",
    "fix_date": "2024-05-25T23:55:55Z"
  },
  "references": [
    {
      "url": "https://github.com/parisneo/lollms/commit/2d0c4e76be93195836ecd0948027e791b8a2626f",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/db52848a-4dbe-4110-a981-03739834bf45",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/parisneo/lollms/commit/2d0c4e76be93195836ecd0948027e791b8a2626f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/db52848a-4dbe-4110-a981-03739834bf45",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.855176",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "lollms",
    "owner": "parisneo",
    "created_at": "2023-06-02T10:46:33Z",
    "updated_at": "2025-01-14T10:04:43Z",
    "pushed_at": "2025-01-14T10:04:39Z",
    "size": 7673,
    "stars": 280,
    "forks": 51,
    "open_issues": 16,
    "watchers": 280,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 1513527,
      "Shell": 30804,
      "Batchfile": 16275,
      "HTML": 6350,
      "Jupyter Notebook": 4229,
      "C++": 3433,
      "Dockerfile": 957,
      "Makefile": 294
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:22:31.487113"
  }
}