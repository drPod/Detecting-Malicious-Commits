{
  "cve_id": "CVE-2024-55555",
  "github_data": {
    "repository": "invoiceninja/invoiceninja",
    "fix_commit": "d9302021472c3e7e23bac8c3d5fbec57a5f38f0c",
    "related_commits": [
      "d9302021472c3e7e23bac8c3d5fbec57a5f38f0c"
    ],
    "patch_url": "https://github.com/invoiceninja/invoiceninja/commit/d9302021472c3e7e23bac8c3d5fbec57a5f38f0c.patch",
    "fix_commit_details": {
      "sha": "d9302021472c3e7e23bac8c3d5fbec57a5f38f0c",
      "commit_date": "2024-07-18T22:53:30Z",
      "author": {
        "login": "turbo124",
        "type": "User",
        "stats": {
          "total_commits": 15871,
          "average_weekly_commits": 48.24012158054711,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 320
        }
      },
      "commit_message": {
        "title": "unwind route hash",
        "length": 17,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 73,
        "additions": 44,
        "deletions": 29
      },
      "files": [
        {
          "filename": "app/Services/EDocument/Standards/Peppol.php",
          "status": "modified",
          "additions": 17,
          "deletions": 14,
          "patch": "@@ -164,18 +164,19 @@ private function getTotalTaxes(): array\n \n         $type_id = $this->invoice->line_items[0]->type_id;\n \n-        if(strlen($this->invoice->tax_name1 ?? '') > 1) {\n+        // if(strlen($this->invoice->tax_name1 ?? '') > 1) {\n \n             $tax_amount = new TaxAmount();\n             $tax_amount->currencyID = $this->invoice->client->currency()->code;\n-            $tax_amount->amount = $this->invoice->uses_inclusive_taxes ?  $this->calcInclusiveLineTax($this->invoice->tax_rate1, $this->invoice->amount) : $this->calcAmountLineTax($this->invoice->tax_rate1, $this->invoice->amount);\n+            // $tax_amount->amount = $this->invoice->uses_inclusive_taxes ?  $this->calcInclusiveLineTax($this->invoice->tax_rate1, $this->invoice->amount) : $this->calcAmountLineTax($this->invoice->tax_rate1, $this->invoice->amount);\n+            $tax_amount->amount = $this->invoice->uses_inclusive_taxes ? $this->invoice->total_taxes : $this->calcAmountLineTax($this->invoice->tax_rate1, $this->invoice->amount);\n \n             $tax_subtotal = new TaxSubtotal();\n             $tax_subtotal->TaxAmount = $tax_amount;\n \n             $taxable_amount = new TaxableAmount();\n             $taxable_amount->currencyID = $this->invoice->client->currency()->code;\n-            $taxable_amount->amount = $this->invoice->amount;\n+            $taxable_amount->amount = $this->invoice->uses_inclusive_taxes ? $this->invoice->amount - $this->invoice->total_taxes : $this->invoice->amount;\n             $tax_subtotal->TaxableAmount = $taxable_amount;\n \n             $tc = new TaxCategory();\n@@ -188,10 +189,10 @@ private function getTotalTaxes(): array\n \n             $tax_total = new TaxTotal();\n             $tax_total->TaxAmount = $tax_amount;\n-            $tax_total->TaxSubtotal = $tax_subtotal;\n+            $tax_total->TaxSubtotal[] = $tax_subtotal;\n \n             $taxes[] = $tax_total;\n-        }\n+        // }\n \n \n         if(strlen($this->invoice->tax_name2 ?? '') > 1) {\n@@ -206,7 +207,7 @@ private function getTotalTaxes(): array\n \n             $taxable_amount = new TaxableAmount();\n             $taxable_amount->currencyID = $this->invoice->client->currency()->code;\n-            $taxable_amount->amount = $this->invoice->amount;\n+            $taxable_amount->amount = $this->invoice->uses_inclusive_taxes ? $this->invoice->amount- $this->invoice->total_taxes : $this->invoice->amount;\n             $tax_subtotal->TaxableAmount = $taxable_amount;\n \n \n@@ -238,7 +239,7 @@ private function getTotalTaxes(): array\n \n             $taxable_amount = new TaxableAmount();\n             $taxable_amount->currencyID = $this->invoice->client->currency()->code;\n-            $taxable_amount->amount = $this->invoice->amount;\n+            $taxable_amount->amount = $this->invoice->uses_inclusive_taxes ? $this->invoice->amount - $this->invoice->total_taxes : $this->invoice->amount;\n             $tax_subtotal->TaxableAmount = $taxable_amount;\n \n \n@@ -280,7 +281,7 @@ private function getInvoiceLines(): array\n             $lea = new LineExtensionAmount();\n             $lea->currencyID = $this->invoice->client->currency()->code;\n             // $lea->amount = $item->line_total;\n-            $lea->amount = $this->invoice->uses_inclusive_taxes ? round($item->line_total - $this->calcInclusiveLineTax($item->tax_rate1, $item->line_total), 2) : $item->line_total;\n+            $lea->amount = $this->invoice->uses_inclusive_taxes ? $item->line_total - $this->calcInclusiveLineTax($item->tax_rate1, $item->line_total) : $item->line_total;\n             $line->LineExtensionAmount = $lea;\n             $line->Item = $_item;\n \n@@ -293,7 +294,7 @@ private function getInvoiceLines(): array\n             $price = new Price();\n             $pa = new PriceAmount();\n             $pa->currencyID = $this->invoice->client->currency()->code;\n-            $pa->amount = $this->costWithDiscount($item);\n+            $pa->amount = $this->costWithDiscount($item) - ( $this->invoice->uses_inclusive_taxes ? ($this->calcInclusiveLineTax($item->tax_rate1, $item->line_total)/$item->quantity) : 0);\n             $price->PriceAmount = $pa;\n \n             $line->Price = $price;\n@@ -333,7 +334,7 @@ private function getItemTaxes(object $item): array\n \n             $taxable_amount = new TaxableAmount();\n             $taxable_amount->currencyID = $this->invoice->client->currency()->code;\n-            $taxable_amount->amount = $this->invoice->uses_inclusive_taxes ?  round($item->line_total - $tax_amount->amount,2) : $item->line_total;\n+            $taxable_amount->amount = $this->invoice->uses_inclusive_taxes ? $item->line_total - $tax_amount->amount : $item->line_total;\n             $tax_subtotal->TaxableAmount = $taxable_amount;\n             $tc = new TaxCategory();\n             $tc->ID = $item->type_id == '2' ? 'HUR' : 'C62';\n@@ -356,14 +357,15 @@ private function getItemTaxes(object $item): array\n \n             $tax_amount = new TaxAmount();\n             $tax_amount->currencyID = $this->invoice->client->currency()->code;\n-            $tax_amount->amount = $this->invoice->uses_inclusive_taxes ? $this->calcInclusiveLineTax($item->tax_rate2, $item->line_total) : $this->calcAmountLineTax($item->tax_rate2, $item->line_total);\n+            \n+$tax_amount->amount = $this->invoice->uses_inclusive_taxes ? $this->calcInclusiveLineTax($item->tax_rate2, $item->line_total) : $this->calcAmountLineTax($item->tax_rate2, $item->line_total);\n \n             $tax_subtotal = new TaxSubtotal();\n             $tax_subtotal->TaxAmount = $tax_amount;\n \n             $taxable_amount = new TaxableAmount();\n             $taxable_amount->currencyID = $this->invoice->client->currency()->code;\n-            $taxable_amount->amount = $this->invoice->uses_inclusive_taxes ? round($item->line_total - $tax_amount->amount, 2) : $item->line_total;\n+            $taxable_amount->amount = $item->line_total;\n             $tax_subtotal->TaxableAmount = $taxable_amount;\n \n \n@@ -389,14 +391,15 @@ private function getItemTaxes(object $item): array\n \n             $tax_amount = new TaxAmount();\n             $tax_amount->currencyID = $this->invoice->client->currency()->code;\n-            $tax_amount->amount = $this->invoice->uses_inclusive_taxes ? $this->calcInclusiveLineTax($item->tax_rate3, $item->line_total) : $this->calcAmountLineTax($item->tax_rate3, $item->line_total);\n+\n+$tax_amount->amount = $this->invoice->uses_inclusive_taxes ? $this->calcInclusiveLineTax($item->tax_rate3, $item->line_total) : $this->calcAmountLineTax($item->tax_rate3, $item->line_total);\n \n             $tax_subtotal = new TaxSubtotal();\n             $tax_subtotal->TaxAmount = $tax_amount;\n \n             $taxable_amount = new TaxableAmount();\n             $taxable_amount->currencyID = $this->invoice->client->currency()->code;\n-            $taxable_amount->amount = $this->invoice->uses_inclusive_taxes ? round($item->line_total - $tax_amount->amount, 2) : $item->line_total;\n+            $taxable_amount->amount = $item->line_total;\n             $tax_subtotal->TaxableAmount = $taxable_amount;\n \n "
        },
        {
          "filename": "routes/client.php",
          "status": "modified",
          "additions": 10,
          "deletions": 10,
          "patch": "@@ -144,20 +144,20 @@\n     Route::get('unsubscribe/{entity}/{invitation_key}', [App\\Http\\Controllers\\ClientPortal\\InvitationController::class, 'unsubscribe'])->name('unsubscribe');\n });\n \n-Route::get('route/{hash}', function ($hash) {\n+// Route::get('route/{hash}', function ($hash) {\n \n-    $route = '/';\n+//     $route = '/';\n \n-    try {\n-        $route = decrypt($hash); \n-    }\n-    catch (\\Exception $e) { \n-        abort(404);\n-    }\n+//     try {\n+//         $route = decrypt($hash); \n+//     }\n+//     catch (\\Exception $e) { \n+//         abort(404);\n+//     }\n \n-    return redirect($route);\n+//     return redirect($route);\n \n-})->middleware('throttle:404');\n+// })->middleware('throttle:404');\n \n Route::get('phantom/{entity}/{invitation_key}', [Phantom::class, 'displayInvitation'])->middleware(['invite_db', 'phantom_secret'])->name('phantom_view');\n Route::get('blade/', [Phantom::class, 'blade'])->name('blade');"
        },
        {
          "filename": "tests/Integration/Einvoice/Storecove/StorecoveTest.php",
          "status": "modified",
          "additions": 17,
          "deletions": 5,
          "patch": "@@ -218,13 +218,12 @@ public function testSendDocument()\n   ';\n \n //inclusive\n-$x = '\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+$x = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <Invoice\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n     xmlns=\"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\">\n-<cbc:ID>DE-10515</cbc:ID>\n+<cbc:ID>DE-93090</cbc:ID>\n   <cbc:IssueDate>2024-07-18</cbc:IssueDate>\n   <cbc:InvoiceTypeCode>380</cbc:InvoiceTypeCode>\n   <cac:AccountingSupplierParty>\n@@ -297,7 +296,20 @@ public function testSendDocument()\n       </FinancialInstitutionBranch>\n     </PayeeFinancialAccount>\n   </cac:PaymentMeans>\n-  <cac:TaxTotal/>\n+  <cac:TaxTotal>\n+    <cbc:TaxAmount currencyID=\"EUR\">15.97</cbc:TaxAmount>\n+    <cac:TaxSubtotal>\n+      <cbc:TaxableAmount currencyID=\"EUR\">84.03</cbc:TaxableAmount>\n+      <cbc:TaxAmount currencyID=\"EUR\">15.97</cbc:TaxAmount>\n+      <cac:TaxCategory>\n+        <cbc:ID>C62</cbc:ID>\n+        <cbc:Percent>0</cbc:Percent>\n+        <cac:TaxScheme>\n+          <cbc:ID></cbc:ID>\n+        </cac:TaxScheme>\n+      </cac:TaxCategory>\n+    </cac:TaxSubtotal>\n+  </cac:TaxTotal>\n   <cac:LegalMonetaryTotal>\n     <cbc:LineExtensionAmount currencyID=\"EUR\">84.03</cbc:LineExtensionAmount>\n     <cbc:TaxExclusiveAmount currencyID=\"EUR\">84.03</cbc:TaxExclusiveAmount>\n@@ -327,7 +339,7 @@ public function testSendDocument()\n       <cbc:Name>Product Key</cbc:Name>\n     </cac:Item>\n     <cac:Price>\n-      <cbc:PriceAmount currencyID=\"EUR\">10</cbc:PriceAmount>\n+      <cbc:PriceAmount currencyID=\"EUR\">8.403</cbc:PriceAmount>\n     </cac:Price>\n   </cac:InvoiceLine>\n ';"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6765bfef3fed703fda2b1028729c1728e2eb4652",
            "date": "2025-01-04T08:40:44Z",
            "author_login": "turbo124"
          },
          {
            "sha": "7e5cb8fe8142f5676ffab5b364e692dda4b719b6",
            "date": "2025-01-04T08:40:10Z",
            "author_login": "turbo124"
          },
          {
            "sha": "cd25be570138c9ebdb7601788a00f18f6eb15253",
            "date": "2025-01-04T08:39:17Z",
            "author_login": "turbo124"
          },
          {
            "sha": "935a5a1aa1160d3126b08f5c33ee01737a2c41b1",
            "date": "2025-01-04T00:58:08Z",
            "author_login": "turbo124"
          },
          {
            "sha": "0171e32271b14c3cafad313ba3a6d1418d00d549",
            "date": "2025-01-04T00:48:00Z",
            "author_login": "turbo124"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-502",
    "description": "Invoice Ninja before 5.10.43 allows remote code execution from a pre-authenticated route when an attacker knows the APP_KEY. This is exacerbated by .env files, available from the product's repository, that have default APP_KEY values. The route/{hash} route defined in the invoiceninja/routes/client.php file can be accessed without authentication. The parameter {hash} is passed to the function decrypt that expects a Laravel ciphered value containing a serialized object. (Furthermore, Laravel contains several gadget chains usable to trigger remote command execution from arbitrary deserialization.) Therefore, an attacker in possession of the APP_KEY is able to fully control a string passed to an unserialize function.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2025-01-07T17:15:30.503",
    "last_modified": "2025-01-07T20:15:30.430",
    "fix_date": "2024-07-18T22:53:30Z"
  },
  "references": [
    {
      "url": "https://github.com/invoiceninja/invoiceninja/commit/d9302021472c3e7e23bac8c3d5fbec57a5f38f0c",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.synacktiv.com/advisories/invoiceninja-unauthenticated-remote-command-execution-when-appkey-known",
      "source": "cve@mitre.org",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:58.219114",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "invoiceninja",
    "owner": "invoiceninja",
    "created_at": "2013-11-26T12:30:05Z",
    "updated_at": "2025-01-14T11:44:55Z",
    "pushed_at": "2025-01-14T07:40:22Z",
    "size": 4051728,
    "stars": 8461,
    "forks": 2304,
    "open_issues": 875,
    "watchers": 8461,
    "has_security_policy": false,
    "default_branch": "v5-stable",
    "protected_branches": [],
    "languages": {
      "PHP": 31457149,
      "XSLT": 2851399,
      "Blade": 1349649,
      "HTML": 512444,
      "JavaScript": 9799,
      "TypeScript": 4027
    },
    "commit_activity": {
      "total_commits_last_year": 3070,
      "avg_commits_per_week": 59.03846153846154,
      "days_active_last_year": 315
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:04:54.364715"
  }
}