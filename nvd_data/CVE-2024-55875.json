{
  "cve_id": "CVE-2024-55875",
  "github_data": {
    "repository": "http4k/http4k",
    "fix_commit": "35297adc6d6aca4951d50d8cdf17ff87a8b19fbc",
    "related_commits": [
      "35297adc6d6aca4951d50d8cdf17ff87a8b19fbc"
    ],
    "patch_url": "https://github.com/http4k/http4k/commit/35297adc6d6aca4951d50d8cdf17ff87a8b19fbc.patch",
    "fix_commit_details": {
      "sha": "35297adc6d6aca4951d50d8cdf17ff87a8b19fbc",
      "commit_date": "2024-12-12T12:36:41Z",
      "author": {
        "login": "s4nchez",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 22,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 145,
        "additions": 139,
        "deletions": 6
      },
      "files": [
        {
          "filename": "core/format/xml/src/main/kotlin/org/http4k/format/Xml.kt",
          "status": "modified",
          "additions": 17,
          "deletions": 6,
          "patch": "@@ -19,6 +19,7 @@ import org.w3c.dom.Document\n import java.io.InputStream\n import java.io.StringWriter\n import java.nio.ByteBuffer\n+import javax.xml.XMLConstants\n import javax.xml.parsers.DocumentBuilderFactory\n import javax.xml.transform.TransformerFactory\n import javax.xml.transform.dom.DOMSource\n@@ -39,9 +40,10 @@ object Xml : AutoMarshallingXml() {\n     @JvmName(\"stringAsXmlToJsonElement\")\n     fun asXmlToJsonElement(input: String): JsonElement = input.asXmlToJsonElement()\n \n-    fun String.asXmlDocument(): Document =\n+    fun String.asXmlDocument(config: XmlParsingConfig = defaultXmlParsingConfig): Document =\n         DocumentBuilderFactory\n             .newInstance()\n+            .apply(config)\n             .newDocumentBuilder()\n             .parse(byteInputStream())\n \n@@ -63,14 +65,15 @@ object Xml : AutoMarshallingXml() {\n     /**\n      * Convenience function to write the object as XML to the message body and set the content type.\n      */\n-    fun <IN : Any> BiDiLensSpec<IN, String>.xml() = map({ it.asXmlDocument() }, { it.asXmlString() })\n+    fun <IN : Any> BiDiLensSpec<IN, String>.xml(config: XmlParsingConfig = defaultXmlParsingConfig) = map({ it.asXmlDocument(config) }, { it.asXmlString() })\n \n-    fun asBiDiMapping() =\n-        BiDiMapping<String, Document>({ it.asXmlDocument() }, { it.asXmlString() })\n+    fun asBiDiMapping(config: XmlParsingConfig = defaultXmlParsingConfig) =\n+        BiDiMapping<String, Document>({ it.asXmlDocument(config) }, { it.asXmlString() })\n \n     fun Body.Companion.xml(\n         description: String? = null,\n-        contentNegotiation: ContentNegotiation = ContentNegotiation.None\n+        contentNegotiation: ContentNegotiation = ContentNegotiation.None,\n+        config: XmlParsingConfig = defaultXmlParsingConfig\n     ): BiDiBodyLensSpec<Document> =\n         httpBodyRoot(\n             listOf(Meta(true, \"body\", ObjectParam, \"body\", description, emptyMap())),\n@@ -79,5 +82,13 @@ object Xml : AutoMarshallingXml() {\n         )\n             .map(Body::payload) { Body(it) }\n             .map(ByteBuffer::asString, String::asByteBuffer)\n-            .map({ it.asXmlDocument() }, { it.asXmlString() })\n+            .map({ it.asXmlDocument(config) }, { it.asXmlString() })\n+}\n+\n+typealias XmlParsingConfig = DocumentBuilderFactory.() -> Unit\n+\n+val defaultXmlParsingConfig: XmlParsingConfig = {\n+    isExpandEntityReferences = false\n+    setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")\n+    setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\")\n }"
        },
        {
          "filename": "core/format/xml/src/test/kotlin/org/http4k/format/XmlSecurityTest.kt",
          "status": "added",
          "additions": 122,
          "deletions": 0,
          "patch": "@@ -0,0 +1,122 @@\n+package org.http4k.format\n+\n+import com.natpryce.hamkrest.assertion.assertThat\n+import com.natpryce.hamkrest.equalTo\n+import org.http4k.core.Body\n+import org.http4k.core.ContentType.Companion.APPLICATION_XML\n+import org.http4k.core.HttpHandler\n+import org.http4k.core.Method\n+import org.http4k.core.Request\n+import org.http4k.core.Response\n+import org.http4k.core.Status.Companion.BAD_REQUEST\n+import org.http4k.core.Status.Companion.OK\n+import org.http4k.format.Xml.asXmlString\n+import org.http4k.format.Xml.xml\n+import org.http4k.lens.contentType\n+import org.http4k.server.ApacheServer\n+import org.http4k.server.asServer\n+import org.http4k.util.PortBasedTest\n+import org.junit.jupiter.api.Test\n+import org.w3c.dom.Document\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+class XmlSecurityTest : PortBasedTest {\n+\n+    @Test\n+    fun `does not expand external entity`() {\n+        val websiteAccessed = AtomicBoolean(false)\n+\n+        val maliciousWebsite = { _: Request ->\n+            websiteAccessed.set(true);\n+            Response(OK)\n+        }.asServer(ApacheServer(0)).start()\n+\n+        val requestBody =\n+            \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+                <!DOCTYPE root [<!ENTITY xxe SYSTEM \"http://localhost:${maliciousWebsite.port()}\">]>\n+                <root>&xxe;</root>\n+            \"\"\".trimIndent()\n+\n+        val xmlLens = Body.xml().toLens()\n+\n+        val app: HttpHandler = { request ->\n+            try {\n+                val xmlDocument: Document = xmlLens(request)\n+                Response(OK).body(xmlDocument.asXmlString())\n+            } catch (e: Exception) {\n+                Response(BAD_REQUEST).body(\"Invalid XML: ${e.message}\")\n+            }\n+        }\n+\n+        app(Request(Method.POST, \"/\").contentType(APPLICATION_XML).body(requestBody))\n+        assertThat(websiteAccessed.get(), equalTo(false))\n+    }\n+\n+    @Test\n+    fun `external schema is not loaded`() {\n+        val websiteAccessed = AtomicBoolean(false)\n+\n+        val maliciousWebsite = { _: Request ->\n+            websiteAccessed.set(true);\n+            Response(OK)\n+        }.asServer(ApacheServer(0)).start()\n+\n+        val requestBody = \"\"\"\n+            <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+            <user xmlns:xsi=\"http://localhost:${maliciousWebsite.port()}\"\n+                  xsi:noNamespaceSchemaLocation=\"http://localhost:${maliciousWebsite.port()}\">\n+                <name>John Doe</name>\n+                <email>john@example.com</email>\n+                <age>30</age>\n+            </user>\n+        \"\"\".trimIndent()\n+\n+        val xmlLens = Body.xml().toLens()\n+\n+        val app: HttpHandler = { request ->\n+            try {\n+                val xmlDocument: Document = xmlLens(request)\n+                Response(OK).body(xmlDocument.asXmlString())\n+            } catch (e: Exception) {\n+                Response(BAD_REQUEST).body(\"Invalid XML: ${e.message}\")\n+            }\n+        }\n+\n+        app(Request(Method.POST, \"/\").contentType(APPLICATION_XML).body(requestBody))\n+        assertThat(websiteAccessed.get(), equalTo(false))\n+    }\n+\n+    @Test\n+    fun `external dtd is not loaded`() {\n+        val websiteAccessed = AtomicBoolean(false)\n+\n+        val maliciousWebsite = { _: Request ->\n+            websiteAccessed.set(true);\n+            Response(OK)\n+        }.asServer(ApacheServer(0)).start()\n+\n+        val requestBody = \"\"\"\n+            <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+            <!DOCTYPE note SYSTEM \"http://localhost:${maliciousWebsite.port()}\">\n+            <note>\n+                <to>Alice</to>\n+                <from>Bob</from>\n+                <message>Hello</message>\n+            </note>\n+        \"\"\".trimIndent()\n+\n+        val xmlLens = Body.xml().toLens()\n+\n+        val app: HttpHandler = { request ->\n+            try {\n+                val xmlDocument: Document = xmlLens(request)\n+                Response(OK).body(xmlDocument.asXmlString())\n+            } catch (e: Exception) {\n+                Response(BAD_REQUEST).body(\"Invalid XML: ${e.message}\")\n+            }\n+        }\n+\n+        app(Request(Method.POST, \"/\").contentType(APPLICATION_XML).body(requestBody))\n+        assertThat(websiteAccessed.get(), equalTo(false))\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c6d357804b2d1299a7a6afe765ff2765e7ccaf8e",
            "date": "2025-01-09T09:58:29Z",
            "author_login": "daviddenton"
          },
          {
            "sha": "6ff7c602379b2fa7399d2dac3228f49985257a7b",
            "date": "2025-01-09T09:56:22Z",
            "author_login": "daviddenton"
          },
          {
            "sha": "e7b5dd4918410a5f9ebfb3d12447c3c1676d2e6b",
            "date": "2025-01-09T09:45:33Z",
            "author_login": "daviddenton"
          },
          {
            "sha": "15cf57423c9cb1ad082544264dd2d4596eb8a90c",
            "date": "2025-01-09T09:22:06Z",
            "author_login": "daviddenton"
          },
          {
            "sha": "f54d2bd5f5109de2ee63993833c86ed40f536e04",
            "date": "2025-01-08T13:12:30Z",
            "author_login": "daviddenton"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-200",
    "description": "http4k is a functional toolkit for Kotlin HTTP applications. Prior to version 5.41.0.0, there is a potential XXE (XML External Entity Injection) vulnerability when http4k handling malicious XML contents within requests, which might allow attackers to read local sensitive information on server, trigger Server-side Request Forgery and even execute code under some circumstances. Version 5.41.0.0 contains a patch for the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-12-12T19:15:13.983",
    "last_modified": "2024-12-13T15:15:42.860",
    "fix_date": "2024-12-12T12:36:41Z"
  },
  "references": [
    {
      "url": "https://github.com/http4k/http4k/blob/25696dff2d90206cc1da42f42a1a8dbcdbcdf18c/core/format/xml/src/main/kotlin/org/http4k/format/Xml.kt#L42-L46",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/http4k/http4k/commit/35297adc6d6aca4951d50d8cdf17ff87a8b19fbc",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/http4k/http4k/security/advisories/GHSA-7mj5-hjjj-8rgw",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/http4k/http4k/security/advisories/GHSA-7mj5-hjjj-8rgw",
      "source": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:33.134790",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "http4k",
    "owner": "http4k",
    "created_at": "2017-03-23T22:28:13Z",
    "updated_at": "2025-01-14T14:53:34Z",
    "pushed_at": "2025-01-14T14:52:45Z",
    "size": 34822,
    "stars": 2640,
    "forks": 257,
    "open_issues": 45,
    "watchers": 2640,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Kotlin": 4641657,
      "HTML": 103636,
      "Java": 41187,
      "CSS": 5682,
      "Shell": 4438,
      "JavaScript": 2853,
      "Python": 1826,
      "Pug": 944,
      "Handlebars": 926,
      "Dockerfile": 269
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:31:43.245068"
  }
}