{
  "cve_id": "CVE-2024-55885",
  "github_data": {
    "repository": "beego/beego",
    "fix_commit": "e7fa4835f71f47ab1d13afd638cebf661800d5a4",
    "related_commits": [
      "e7fa4835f71f47ab1d13afd638cebf661800d5a4"
    ],
    "patch_url": "https://github.com/beego/beego/commit/e7fa4835f71f47ab1d13afd638cebf661800d5a4.patch",
    "fix_commit_details": {
      "sha": "e7fa4835f71f47ab1d13afd638cebf661800d5a4",
      "commit_date": "2024-12-08T14:30:41Z",
      "author": {
        "login": "Stone-afk",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "modify: file cache writer md5 to sha256 (#5727)",
        "length": 180,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 24,
        "additions": 16,
        "deletions": 8
      },
      "files": [
        {
          "filename": "client/cache/file.go",
          "status": "modified",
          "additions": 8,
          "deletions": 6,
          "patch": "@@ -17,7 +17,7 @@ package cache\n import (\n \t\"bytes\"\n \t\"context\"\n-\t\"crypto/md5\"\n+\t\"crypto/sha256\"\n \t\"encoding/gob\"\n \t\"encoding/hex\"\n \t\"encoding/json\"\n@@ -123,29 +123,30 @@ func (fc *FileCache) Init() error {\n \n // getCacheFileName returns a md5 encoded file name.\n func (fc *FileCache) getCacheFileName(key string) (string, error) {\n-\tm := md5.New()\n+\tm := sha256.New()\n \t_, _ = io.WriteString(m, key)\n-\tkeyMd5 := hex.EncodeToString(m.Sum(nil))\n+\tkeySha256 := hex.EncodeToString(m.Sum(nil))\n \tcachePath := fc.CachePath\n \tswitch fc.DirectoryLevel {\n \tcase 2:\n-\t\tcachePath = filepath.Join(cachePath, keyMd5[0:2], keyMd5[2:4])\n+\t\tcachePath = filepath.Join(cachePath, keySha256[0:2], keySha256[2:4])\n \tcase 1:\n-\t\tcachePath = filepath.Join(cachePath, keyMd5[0:2])\n+\t\tcachePath = filepath.Join(cachePath, keySha256[0:2])\n \t}\n \tok, err := exists(cachePath)\n \tif err != nil {\n \t\treturn \"\", err\n \t}\n \tif !ok {\n+\t\tfmt.Printf(\"cachePath: %s\\n\", cachePath)\n \t\terr = os.MkdirAll(cachePath, os.ModePerm)\n \t\tif err != nil {\n \t\t\treturn \"\", berror.Wrapf(err, CreateFileCacheDirFailed,\n \t\t\t\t\"could not create the directory: %s\", cachePath)\n \t\t}\n \t}\n \n-\treturn filepath.Join(cachePath, fmt.Sprintf(\"%s%s\", keyMd5, fc.FileSuffix)), nil\n+\treturn filepath.Join(cachePath, fmt.Sprintf(\"%s%s\", keySha256, fc.FileSuffix)), nil\n }\n \n // Get value from file cache.\n@@ -212,6 +213,7 @@ func (fc *FileCache) Put(ctx context.Context, key string, val interface{}, timeo\n \t}\n \n \tfn, err := fc.getCacheFileName(key)\n+\n \tif err != nil {\n \t\treturn err\n \t}"
        },
        {
          "filename": "client/cache/file_test.go",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -17,11 +17,10 @@ package cache\n import (\n \t\"context\"\n \t\"fmt\"\n+\t\"github.com/stretchr/testify/assert\"\n \t\"os\"\n \t\"path/filepath\"\n \t\"testing\"\n-\n-\t\"github.com/stretchr/testify/assert\"\n )\n \n func TestFileCacheStartAndGC(t *testing.T) {\n@@ -30,6 +29,8 @@ func TestFileCacheStartAndGC(t *testing.T) {\n \tassert.NotNil(t, err)\n \terr = fc.StartAndGC(`{}`)\n \tassert.Nil(t, err)\n+\t_, err = fc.getCacheFileName(\"key1\")\n+\tassert.Nil(t, err)\n \n \tassert.Equal(t, fc.CachePath, FileCachePath)\n \tassert.Equal(t, fc.DirectoryLevel, FileCacheDirectoryLevel)\n@@ -47,12 +48,17 @@ func TestFileCacheStartAndGC(t *testing.T) {\n \tassert.Equal(t, fc.DirectoryLevel, 2)\n \tassert.Equal(t, fc.EmbedExpiry, 0)\n \tassert.Equal(t, fc.FileSuffix, \".bin\")\n+\t_, err = fc.getCacheFileName(\"key1\")\n+\tassert.Nil(t, err)\n \n \terr = fc.StartAndGC(fmt.Sprintf(`{\"CachePath\":\"%s\",\"FileSuffix\":\".bin\",\"DirectoryLevel\":\"aaa\",\"EmbedExpiry\":\"0\"}`, str))\n \tassert.NotNil(t, err)\n \n \terr = fc.StartAndGC(fmt.Sprintf(`{\"CachePath\":\"%s\",\"FileSuffix\":\".bin\",\"DirectoryLevel\":\"2\",\"EmbedExpiry\":\"aaa\"}`, str))\n \tassert.NotNil(t, err)\n+\n+\t_, err = fc.getCacheFileName(\"key1\")\n+\tassert.Nil(t, err)\n }\n \n func TestFileCacheInit(t *testing.T) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5da7cabb59da29cf8739f6e31016f7144ee3f46f",
            "date": "2025-01-12T06:57:51Z",
            "author_login": "zhuhaicity"
          },
          {
            "sha": "a21efb561349426790388c030e4732f41db63f2f",
            "date": "2025-01-01T02:25:23Z",
            "author_login": "flycash"
          },
          {
            "sha": "e7fa4835f71f47ab1d13afd638cebf661800d5a4",
            "date": "2024-12-08T14:30:41Z",
            "author_login": "Stone-afk"
          },
          {
            "sha": "bb72dc27ac3970e51d38ee52fc3dc1465ae25b9d",
            "date": "2024-11-19T15:28:37Z",
            "author_login": "flycash"
          },
          {
            "sha": "b510342640c946adf6755071196e9fac98d23ad0",
            "date": "2024-11-18T10:38:46Z",
            "author_login": "lengpucheng"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-327",
    "description": "beego is an open-source web framework for the Go programming language. Versions of beego prior to 2.3.4 use MD5 as a hashing algorithm. MD5 is no longer considered secure against well-funded opponents due to its vulnerability to collision attacks. Version 2.3.4 replaces MD5 with SHA256.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-12-12T20:15:21.760",
    "last_modified": "2024-12-12T20:15:21.760",
    "fix_date": "2024-12-08T14:30:41Z"
  },
  "references": [
    {
      "url": "https://github.com/beego/beego/commit/e7fa4835f71f47ab1d13afd638cebf661800d5a4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/beego/beego/security/advisories/GHSA-9j3m-fr7q-jxfw",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:33.135620",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "beego",
    "owner": "beego",
    "created_at": "2012-02-29T02:32:08Z",
    "updated_at": "2025-01-14T14:46:26Z",
    "pushed_at": "2025-01-12T07:08:35Z",
    "size": 11851,
    "stars": 31768,
    "forks": 5626,
    "open_issues": 11,
    "watchers": 31768,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 1831956,
      "Makefile": 2990,
      "Shell": 559,
      "Smarty": 359
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:47:43.889980"
  }
}