{
  "cve_id": "CVE-2024-56140",
  "github_data": {
    "repository": "withastro/astro",
    "fix_commit": "e7d14c374b9d45e27089994a4eb72186d05514de",
    "related_commits": [
      "e7d14c374b9d45e27089994a4eb72186d05514de"
    ],
    "patch_url": "https://github.com/withastro/astro/commit/e7d14c374b9d45e27089994a4eb72186d05514de.patch",
    "fix_commit_details": {
      "sha": "e7d14c374b9d45e27089994a4eb72186d05514de",
      "commit_date": "2024-12-05T14:29:31Z",
      "author": {
        "login": "ematipico",
        "type": "User",
        "stats": {
          "total_commits": 698,
          "average_weekly_commits": 3.472636815920398,
          "total_additions": 131537,
          "total_deletions": 83927,
          "weeks_active": 91
        }
      },
      "commit_message": {
        "title": "fix: `checkOrigin` headers check (#12632)",
        "length": 133,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 72,
        "additions": 57,
        "deletions": 15
      },
      "files": [
        {
          "filename": ".changeset/swift-pandas-serve.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+'astro': patch\n+---\n+\n+Fixes an issue where the `checkOrigin` feature wasn't correctly checking the `content-type` header"
        },
        {
          "filename": "packages/astro/src/core/app/middlewares.ts",
          "status": "modified",
          "additions": 36,
          "deletions": 15,
          "patch": "@@ -21,22 +21,43 @@ const FORM_CONTENT_TYPES = [\n export function createOriginCheckMiddleware(): MiddlewareHandler {\n \treturn defineMiddleware((context, next) => {\n \t\tconst { request, url } = context;\n-\t\tconst contentType = request.headers.get('content-type');\n-\t\tif (contentType) {\n-\t\t\tif (FORM_CONTENT_TYPES.includes(contentType.toLowerCase())) {\n-\t\t\t\tconst forbidden =\n-\t\t\t\t\t(request.method === 'POST' ||\n-\t\t\t\t\t\trequest.method === 'PUT' ||\n-\t\t\t\t\t\trequest.method === 'PATCH' ||\n-\t\t\t\t\t\trequest.method === 'DELETE') &&\n-\t\t\t\t\trequest.headers.get('origin') !== url.origin;\n-\t\t\t\tif (forbidden) {\n-\t\t\t\t\treturn new Response(`Cross-site ${request.method} form submissions are forbidden`, {\n-\t\t\t\t\t\tstatus: 403,\n-\t\t\t\t\t});\n-\t\t\t\t}\n+\t\tif (request.method === \"GET\") {\n+\t\t\treturn next();\n+\t\t}\n+\t\tconst sameOrigin =\n+\t\t\t(request.method === 'POST' ||\n+\t\t\t\trequest.method === 'PUT' ||\n+\t\t\t\trequest.method === 'PATCH' ||\n+\t\t\t\trequest.method === 'DELETE') &&\n+\t\t\trequest.headers.get('origin') === url.origin;\n+\t\t\n+\t\tconst hasContentType = request.headers.has('content-type')\n+\t\tif (hasContentType) {\n+\t\t\tconst formLikeHeader = hasFormLikeHeader(request.headers.get('content-type'));\n+\t\t\tif (formLikeHeader && !sameOrigin) {\n+\t\t\t\treturn new Response(`Cross-site ${request.method} form submissions are forbidden`, {\n+\t\t\t\t\tstatus: 403,\n+\t\t\t\t});\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (!sameOrigin) {\n+\t\t\t\treturn new Response(`Cross-site ${request.method} form submissions are forbidden`, {\n+\t\t\t\t\tstatus: 403,\n+\t\t\t\t});\n \t\t\t}\n \t\t}\n-\t\treturn next();\n+\n+\t\treturn next()\n \t});\n }\n+\n+function hasFormLikeHeader(contentType: string | null): boolean {\n+\tif (contentType) {\n+\t\tfor (const FORM_CONTENT_TYPE of FORM_CONTENT_TYPES) {\n+\t\t\tif (contentType.toLowerCase().includes(FORM_CONTENT_TYPE)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn false;\n+}"
        },
        {
          "filename": "packages/astro/test/csrf-protection.test.js",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -46,6 +46,22 @@ describe('CSRF origin check', () => {\n \t\t});\n \t\tresponse = await app.render(request);\n \t\tassert.equal(response.status, 403);\n+\n+\t\trequest = new Request('http://example.com/api/', {\n+\t\t\theaders: { origin: 'http://loreum.com', 'content-type': 'application/x-www-form-urlencoded; some-other-value' },\n+\t\t\tmethod: 'POST',\n+\t\t});\n+\t\tresponse = await app.render(request);\n+\t\tassert.equal(response.status, 403);\n+\n+\t\trequest = new Request('http://example.com/api/', {\n+\t\t\theaders: { origin: 'http://loreum.com', },\n+\t\t\tmethod: 'POST',\n+\t\t\tcredentials: 'include',\n+\t\t\tbody: new Blob([\"a=b\"],{})\n+\t\t});\n+\t\tresponse = await app.render(request);\n+\t\tassert.equal(response.status, 403);\n \t});\n \n \tit(\"return 403 when the origin doesn't match and calling a PUT\", async () => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1072c76703b725919cf52f63cf254a3fba90c030",
            "date": "2025-01-14T11:53:40Z",
            "author_login": "ematipico"
          },
          {
            "sha": "ea603aec80531205d38fed11c525b3faa0271903",
            "date": "2025-01-14T11:52:51Z",
            "author_login": "louisescher"
          },
          {
            "sha": "c30070b9271e4c494e7cbf3a1c45515782034911",
            "date": "2025-01-13T16:05:44Z",
            "author_login": "braden-w"
          },
          {
            "sha": "0ef1613ea36439a76965290053ccc3f8afb9f400",
            "date": "2025-01-13T15:59:56Z",
            "author_login": "bluwy"
          },
          {
            "sha": "7a0855b264c22875d3d5921c2d60382c3260f79d",
            "date": "2025-01-13T15:59:09Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:H/A:N",
    "cwe_id": "CWE-352",
    "description": "Astro is a web framework for content-driven websites. In affected versions a bug in Astro\u2019s CSRF-protection middleware allows requests to bypass CSRF checks. When the `security.checkOrigin` configuration option is set to `true`, Astro middleware will perform a CSRF check. However, a vulnerability exists that can bypass this security. A semicolon-delimited parameter is allowed after the type in `Content-Type`. Web browsers will treat a `Content-Type` such as `application/x-www-form-urlencoded; abc` as a `simple request` and will not perform preflight validation. In this case, CSRF is not blocked as expected. Additionally, the `Content-Type` header is not required for a request. This issue has been addressed in version 4.16.17 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-12-18T21:15:08.353",
    "last_modified": "2024-12-18T21:15:08.353",
    "fix_date": "2024-12-05T14:29:31Z"
  },
  "references": [
    {
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/withastro/astro/blob/6031962ab5f56457de986eb82bd24807e926ba1b/packages/astro/src/core/app/middlewares.ts",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/withastro/astro/commit/e7d14c374b9d45e27089994a4eb72186d05514de",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/withastro/astro/security/advisories/GHSA-c4pw-33h3-35xw",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.885719",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "astro",
    "owner": "withastro",
    "created_at": "2021-03-15T17:19:47Z",
    "updated_at": "2025-01-14T14:39:31Z",
    "pushed_at": "2025-01-14T15:11:37Z",
    "size": 188605,
    "stars": 48375,
    "forks": 2571,
    "open_issues": 169,
    "watchers": 48375,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 2171722,
      "JavaScript": 1641594,
      "Astro": 137642,
      "CSS": 8457,
      "Vue": 7948,
      "Svelte": 5814,
      "MDX": 5673,
      "Shell": 943,
      "Dockerfile": 682,
      "Roff": 630,
      "SCSS": 13
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:57:03.343467"
  }
}