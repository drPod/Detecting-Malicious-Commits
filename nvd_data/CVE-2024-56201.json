{
  "cve_id": "CVE-2024-56201",
  "github_data": {
    "repository": "pallets/jinja",
    "fix_commit": "767b23617628419ae3709ccfb02f9602ae9fe51f",
    "related_commits": [
      "767b23617628419ae3709ccfb02f9602ae9fe51f"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "767b23617628419ae3709ccfb02f9602ae9fe51f",
      "commit_date": "2024-12-20T02:10:28Z",
      "author": {
        "login": "davidism",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix f-string syntax error in code generation (#1852)",
        "length": 52,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 29,
        "additions": 28,
        "deletions": 1
      },
      "files": [
        {
          "filename": "CHANGES.rst",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -8,6 +8,9 @@ Unreleased\n -   The sandboxed environment handles indirect calls to ``str.format``, such as\n     by passing a stored reference to a filter that calls its argument.\n     :ghsa:`q2x7-8rv6-6q7h`\n+-   Escape template name before formatting it into error messages, to avoid\n+    issues with names that contain f-string syntax.\n+    :issue:`1792`, :ghsa:`gmj6-6f8f-6699`\n -   Sandbox does not allow ``clear`` and ``pop`` on known mutable sequence\n     types. :issue:`2032`\n -   Calling sync ``render`` for an async template uses ``asyncio.run``."
        },
        {
          "filename": "src/jinja2/compiler.py",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -1141,9 +1141,14 @@ def visit_FromImport(self, node: nodes.FromImport, frame: Frame) -> None:\n             )\n             self.writeline(f\"if {frame.symbols.ref(alias)} is missing:\")\n             self.indent()\n+            # The position will contain the template name, and will be formatted\n+            # into a string that will be compiled into an f-string. Curly braces\n+            # in the name must be replaced with escapes so that they will not be\n+            # executed as part of the f-string.\n+            position = self.position(node).replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n             message = (\n                 \"the template {included_template.__name__!r}\"\n-                f\" (imported on {self.position(node)})\"\n+                f\" (imported on {position})\"\n                 f\" does not export the requested name {name!r}\"\n             )\n             self.writeline("
        },
        {
          "filename": "tests/test_compile.py",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -1,6 +1,9 @@\n import os\n import re\n \n+import pytest\n+\n+from jinja2 import UndefinedError\n from jinja2.environment import Environment\n from jinja2.loaders import DictLoader\n \n@@ -87,3 +90,19 @@ def test_block_set_vars_unpacking_deterministic(tmp_path):\n         content,\n     )[:10]\n     assert found == expect\n+\n+\n+def test_undefined_import_curly_name():\n+    env = Environment(\n+        loader=DictLoader(\n+            {\n+                \"{bad}\": \"{% from 'macro' import m %}{{ m() }}\",\n+                \"macro\": \"\",\n+            }\n+        )\n+    )\n+\n+    # Must not raise `NameError: 'bad' is not defined`, as that would indicate\n+    # that `{bad}` is being interpreted as an f-string. It must be escaped.\n+    with pytest.raises(UndefinedError):\n+        env.get_template(\"{bad}\").render()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6aeab5d1da0bc0793406d7b402693e779b6cca7a",
            "date": "2024-12-21T18:47:46Z",
            "author_login": "davidism"
          },
          {
            "sha": "ab8218c7a1b66b62e0ad6b941bd514e3a64a358f",
            "date": "2024-12-21T18:47:08Z",
            "author_login": "davidism"
          },
          {
            "sha": "b4ffc8ff299dfd360064bea4cd2f862364601ad2",
            "date": "2024-12-21T18:30:50Z",
            "author_login": "davidism"
          },
          {
            "sha": "877f6e51be8e1765b06d911cfaa9033775f051d1",
            "date": "2024-12-21T18:16:13Z",
            "author_login": "davidism"
          },
          {
            "sha": "8d588592653b052f957b720e1fc93196e06f207f",
            "date": "2024-12-21T18:14:49Z",
            "author_login": "davidism"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-150",
    "description": "Jinja is an extensible templating engine. In versions on the 3.x branch prior to 3.1.5, a bug in the Jinja compiler allows an attacker that controls both the content and filename of a template to execute arbitrary Python code, regardless of if Jinja's sandbox is used. To exploit the vulnerability, an attacker needs to control both the filename and the contents of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates where the template author can also choose the template filename. This vulnerability is fixed in 3.1.5.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-12-23T16:15:07.410",
    "last_modified": "2025-01-08T16:15:36.387",
    "fix_date": "2024-12-20T02:10:28Z"
  },
  "references": [
    {
      "url": "https://github.com/pallets/jinja/commit/767b23617628419ae3709ccfb02f9602ae9fe51f",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/pallets/jinja/issues/1792",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/pallets/jinja/releases/tag/3.1.5",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/pallets/jinja/security/advisories/GHSA-gmj6-6f8f-6699",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.904608",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "jinja",
    "owner": "pallets",
    "created_at": "2010-10-17T13:41:17Z",
    "updated_at": "2025-01-26T00:52:55Z",
    "pushed_at": "2025-01-14T21:45:34Z",
    "size": 6851,
    "stars": 10541,
    "forks": 1628,
    "open_issues": 78,
    "watchers": 10541,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "stable"
    ],
    "languages": {
      "Python": 765568,
      "Shell": 165,
      "HTML": 81
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T08:03:31.502615"
  }
}