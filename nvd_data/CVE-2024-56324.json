{
  "cve_id": "CVE-2024-56324",
  "github_data": {
    "repository": "gocd/gocd",
    "fix_commit": "410331a97eb2935e04c1372f50658e05c533f733",
    "related_commits": [
      "410331a97eb2935e04c1372f50658e05c533f733"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "410331a97eb2935e04c1372f50658e05c533f733",
      "commit_date": "2024-12-15T09:30:28Z",
      "author": {
        "login": "chadlwilson",
        "type": "User",
        "stats": {
          "total_commits": 5264,
          "average_weekly_commits": 9.0446735395189,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 187
        }
      },
      "commit_message": {
        "title": "Refactor and consolidation XML parsing to common utilities",
        "length": 58,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 467,
        "additions": 247,
        "deletions": 220
      },
      "files": [
        {
          "filename": "config/config-api/build.gradle",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -32,7 +32,6 @@ dependencies {\n     transitive = false\n   }\n   api project.deps.cloning\n-  api project.deps.jdom\n   api project.deps.springWeb\n   implementation project.deps.slf4jApi\n   implementation project.deps.felix"
        },
        {
          "filename": "config/config-api/src/main/java/com/thoughtworks/go/util/ValidatingSaxBuilder.java",
          "status": "modified",
          "additions": 5,
          "deletions": 6,
          "patch": "@@ -15,21 +15,20 @@\n  */\n package com.thoughtworks.go.util;\n \n-import org.jdom2.input.SAXBuilder;\n import org.jdom2.input.sax.XMLReaders;\n \n import java.net.URISyntaxException;\n import java.net.URL;\n \n-class ValidatingSaxBuilder extends SAXBuilder {\n+class ValidatingSaxBuilder extends SafeSaxBuilder {\n     public ValidatingSaxBuilder() {\n+        super();\n         this.setFeature(\"http://apache.org/xml/features/validation/schema\", true);\n-        this.setXMLReaderFactory(XMLReaders.DTDVALIDATING);\n-        this.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n+        this.setXMLReaderFactory(XMLReaders.XSDVALIDATING);\n     }\n \n-    public ValidatingSaxBuilder(URL resource) throws URISyntaxException {\n+    public ValidatingSaxBuilder(URL schemaLocation) throws URISyntaxException {\n         this();\n-        this.setProperty(\"http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation\", resource.toURI().toString());\n+        this.setProperty(\"http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation\", schemaLocation.toURI().toString());\n     }\n }"
        },
        {
          "filename": "config/config-api/src/main/java/com/thoughtworks/go/util/XmlUtils.java",
          "status": "modified",
          "additions": 17,
          "deletions": 16,
          "patch": "@@ -18,49 +18,50 @@\n import org.jdom2.Document;\n import org.jdom2.Element;\n import org.jdom2.JDOMException;\n-import org.jdom2.input.SAXBuilder;\n import org.jdom2.output.Format;\n import org.jdom2.output.XMLOutputter;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.io.*;\n+import java.net.URISyntaxException;\n import java.net.URL;\n import java.util.regex.Pattern;\n \n public class XmlUtils {\n     public static void writeXml(Document document, OutputStream outputStream) throws IOException {\n-        xmlOutputer().output(document, outputStream);\n+        xmlOutputter().output(document, outputStream);\n     }\n \n-    private static XMLOutputter xmlOutputer() {\n+    private static XMLOutputter xmlOutputter() {\n         Format format = Format.getPrettyFormat().setEncoding(\"utf-8\").setLineSeparator(\"\\n\");\n         return new XMLOutputter(format);\n     }\n \n-\n     public static void writeXml(Element element, OutputStream outputStream) throws IOException {\n-        xmlOutputer().output(element, outputStream);\n+        xmlOutputter().output(element, outputStream);\n+    }\n+\n+    public static Document buildXmlDocument(InputStream inputStream) throws IOException, JDOMException {\n+        return new SafeSaxBuilder().build(inputStream);\n     }\n \n-    public static Document buildXmlDocument(InputStream inputStream, URL resource) throws Exception {\n-        return buildXmlDocument(inputStream, new ValidatingSaxBuilder(resource));\n+    public static Document buildXmlDocument(File file) throws IOException, JDOMException {\n+        return new SafeSaxBuilder().build(file);\n     }\n \n-    public static Document buildXmlDocument(String xmlContent, URL resource) throws Exception {\n-        return buildXmlDocument(new ByteArrayInputStream(xmlContent.getBytes()), new ValidatingSaxBuilder(resource));\n+    public static Document buildXmlDocument(String xmlContent) throws IOException, JDOMException {\n+        return new SafeSaxBuilder().build(new StringReader(xmlContent));\n     }\n \n-    private static Document buildXmlDocument(InputStream inputStream, SAXBuilder builder) throws JDOMException, IOException {\n+    public static Document buildValidatedXmlDocument(InputStream inputStream, URL schemaLocation) throws URISyntaxException, IOException, JDOMException {\n+        ValidatingSaxBuilder builder = new ValidatingSaxBuilder(schemaLocation);\n         XsdErrorTranslator errorHandler = new XsdErrorTranslator();\n         builder.setErrorHandler(errorHandler);\n \n-        Document cruiseRoot = builder.build(inputStream);\n+        Document document = builder.build(inputStream);\n         if (errorHandler.hasValidationError()) {\n             throw new XsdValidationException(errorHandler.translate());\n         }\n-        return cruiseRoot;\n+        return document;\n     }\n \n     public static boolean doesNotMatchUsingXsdRegex(Pattern pattern, String textToMatch) {"
        },
        {
          "filename": "config/config-api/src/main/java/com/thoughtworks/go/util/XpathUtils.java",
          "status": "modified",
          "additions": 46,
          "deletions": 13,
          "patch": "@@ -16,22 +16,26 @@\n package com.thoughtworks.go.util;\n \n import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n \n+import javax.xml.XMLConstants;\n+import javax.xml.namespace.QName;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n import javax.xml.xpath.XPathConstants;\n import javax.xml.xpath.XPathExpression;\n import javax.xml.xpath.XPathExpressionException;\n import javax.xml.xpath.XPathFactory;\n import java.io.*;\n-import java.nio.charset.StandardCharsets;\n \n public class XpathUtils {\n \n-    private static final XPathFactory XPATH = XPathFactory.newInstance();\n+    private static final DocumentBuilderFactory DOC_BUILDER_FACTORY = createDocumentBuilderFactory();\n \n     public static String evaluate(File file, String xpath) throws XPathExpressionException, IOException {\n         try (InputStream stream = new FileInputStream(file)) {\n             InputSource inputSource = new InputSource(stream);\n-            return evaluate(inputSource, xpath);\n+            return safeEvaluate(inputSource, xpath);\n         }\n     }\n \n@@ -46,20 +50,49 @@ public static boolean nodeExists(InputStream stream, String xpath) throws XPathE\n     }\n \n     public static boolean nodeExists(InputSource inputSource, String xpath) throws XPathExpressionException {\n-        XPathFactory factory = XPathFactory.newInstance();\n-        XPathExpression expression = factory.newXPath().compile(xpath);\n-        Boolean b = (Boolean) expression.evaluate(inputSource, XPathConstants.BOOLEAN);\n-        return b != null && b;\n+        return Boolean.TRUE.equals(safeEvaluate(inputSource, xpath, XPathConstants.BOOLEAN));\n     }\n \n-    public static boolean nodeExists(String xmlPartial, String xpath) throws XPathExpressionException {\n-        return nodeExists(new ByteArrayInputStream(xmlPartial.getBytes(StandardCharsets.UTF_8)), xpath);\n+    public static boolean nodeExists(String xmlContent, String xpath) throws XPathExpressionException {\n+        return nodeExists(new InputSource(new StringReader(xmlContent)), xpath);\n     }\n \n-    private static String evaluate(InputSource inputSource, String xpath)\n-        throws XPathExpressionException {\n-        XPathExpression expression = XpathUtils.XPATH.newXPath().compile(xpath);\n-        return expression.evaluate(inputSource).trim();\n+    private static <T> T safeEvaluate(InputSource inputSource, String xpath, QName type) throws XPathExpressionException {\n+        try {\n+            return safeEvaluate(inputSource, compile(xpath), type);\n+        } catch (SAXException | IOException | ParserConfigurationException e) {\n+            throw new XPathExpressionException(e);\n+        }\n+    }\n+\n+    private static String safeEvaluate(InputSource inputSource, String xpath) throws XPathExpressionException {\n+        try {\n+            return safeEvaluate(inputSource, compile(xpath));\n+        } catch (SAXException | IOException | ParserConfigurationException e) {\n+            throw new XPathExpressionException(e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T safeEvaluate(InputSource inputSource, XPathExpression xpath, QName type) throws XPathExpressionException, SAXException, IOException, ParserConfigurationException {\n+        return (T) xpath.evaluate(DOC_BUILDER_FACTORY.newDocumentBuilder().parse(inputSource), type);\n     }\n \n+    private static String safeEvaluate(InputSource inputSource, XPathExpression xpath) throws XPathExpressionException, SAXException, IOException, ParserConfigurationException {\n+        return xpath.evaluate(DOC_BUILDER_FACTORY.newDocumentBuilder().parse(inputSource)).trim();\n+    }\n+\n+    private static XPathExpression compile(String xpath) throws XPathExpressionException {\n+        return XPathFactory.newInstance().newXPath().compile(xpath);\n+    }\n+\n+    private static DocumentBuilderFactory createDocumentBuilderFactory() {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+            return factory;\n+        } catch (ParserConfigurationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n }"
        },
        {
          "filename": "config/config-server/src/main/java/com/thoughtworks/go/config/GoConfigMigration.java",
          "status": "modified",
          "additions": 14,
          "deletions": 24,
          "patch": "@@ -17,15 +17,15 @@\n \n import com.thoughtworks.go.domain.GoConfigRevision;\n import com.thoughtworks.go.util.TimeProvider;\n+import com.thoughtworks.go.util.XmlUtils;\n import org.apache.commons.io.FileUtils;\n-import org.jdom2.Document;\n import org.jdom2.Element;\n-import org.jdom2.input.SAXBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+import javax.xml.XMLConstants;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.TransformerException;\n@@ -40,7 +40,6 @@\n \n import static com.thoughtworks.go.util.ExceptionUtils.bomb;\n import static com.thoughtworks.go.util.ExceptionUtils.bombIfNull;\n-import static com.thoughtworks.go.util.XmlUtils.buildXmlDocument;\n \n /**\n  * Understands how to migrate from a previous version of config\n@@ -105,17 +104,16 @@ public String upgrade(String content, int currentVersion, int targetVersion) {\n     private void validate(String content) {\n         int currentVersion = getCurrentSchemaVersion(content);\n         try {\n-            buildXmlDocument(new ByteArrayInputStream(content.getBytes()), GoConfigSchema.getResource(currentVersion));\n+            XmlUtils.buildValidatedXmlDocument(new ByteArrayInputStream(content.getBytes()), GoConfigSchema.getResource(currentVersion));\n         } catch (Exception e) {\n             throw bomb(\"Cruise config file with version \" + currentVersion + \" is invalid. Unable to upgrade.\", e);\n         }\n     }\n \n     private String upgrade(String originalContent, URL upgradeScript) {\n-        try (InputStream xslt = upgradeScript.openStream()) {\n-            ByteArrayOutputStream convertedConfig = new ByteArrayOutputStream();\n-            transformer(upgradeScript.getPath(), xslt)\n-                    .transform(new StreamSource(new ByteArrayInputStream(originalContent.getBytes())), new StreamResult(convertedConfig));\n+        try {\n+            ByteArrayOutputStream convertedConfig = new ByteArrayOutputStream(originalContent.length());\n+            transformer(upgradeScript).transform(new StreamSource(new StringReader(originalContent)), new StreamResult(convertedConfig));\n             return convertedConfig.toString();\n         } catch (TransformerException e) {\n             throw bomb(\"Couldn't transform configuration file using upgrade script \" + upgradeScript.getPath(), e);\n@@ -125,7 +123,7 @@ private String upgrade(String originalContent, URL upgradeScript) {\n     }\n \n     private List<URL> upgradeScripts(int currentVersion, int targetVersion) {\n-        ArrayList<URL> xsls = new ArrayList<>();\n+        List<URL> xsls = new ArrayList<>();\n         for (int i = currentVersion + 1; i <= targetVersion; i++) {\n             String scriptFile = i + \".xsl\";\n             URL xsl = getResource(\"/upgrades/\" + scriptFile);\n@@ -139,29 +137,21 @@ private URL getResource(String script) {\n         return GoConfigMigration.class.getResource(script);\n     }\n \n-    private Transformer transformer(String xsltName, InputStream xslt) {\n-        try {\n+    private Transformer transformer(URL upgradeScriptLocation) throws IOException {\n+        try (InputStream xslt = upgradeScriptLocation.openStream()) {\n             TransformerFactory factory = TransformerFactory.newInstance();\n-            tryIncreaseXpathExpressionOperationLimit(factory);\n+            factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+            factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n+            factory.setAttribute(\"jdk.xml.xpathExprOpLimit\", XPATH_EXPRESSION_OPERATION_LIMIT);\n             return factory.newTransformer(new StreamSource(xslt));\n         } catch (TransformerConfigurationException tce) {\n-            throw bomb(\"Couldn't parse XSL template \" + xsltName, tce);\n-        }\n-    }\n-\n-    private void tryIncreaseXpathExpressionOperationLimit(TransformerFactory factory) {\n-        try {\n-            factory.setAttribute(\"jdk.xml.xpathExprOpLimit\", XPATH_EXPRESSION_OPERATION_LIMIT);\n-        } catch (IllegalArgumentException e) {\n-            LOG.info(\"Cannot increase Xpath Expression Operation Limit, may not be supported on this JDK. Continuing... [{}]\", e.getMessage());\n+            throw bomb(\"Couldn't parse XSL template \" + upgradeScriptLocation.getPath(), tce);\n         }\n     }\n \n     private int getCurrentSchemaVersion(String content) {\n         try {\n-            SAXBuilder builder = new SAXBuilder();\n-            Document document = builder.build(new ByteArrayInputStream(content.getBytes()));\n-            Element root = document.getRootElement();\n+            Element root = XmlUtils.buildXmlDocument(content).getRootElement();\n \n             String schemaVersion = \"schemaVersion\";\n             String currentVersion = root.getAttributeValue(schemaVersion) == null ? \"0\" : root.getAttributeValue(schemaVersion);"
        },
        {
          "filename": "config/config-server/src/main/java/com/thoughtworks/go/config/MagicalGoConfigXmlLoader.java",
          "status": "modified",
          "additions": 7,
          "deletions": 9,
          "patch": "@@ -26,9 +26,8 @@\n import com.thoughtworks.go.domain.ConfigErrors;\n import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.util.SystemEnvironment;\n-import org.jdom2.Document;\n+import com.thoughtworks.go.util.XmlUtils;\n import org.jdom2.Element;\n-import org.jdom2.input.SAXBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -40,9 +39,6 @@\n \n import static com.thoughtworks.go.config.parser.GoConfigClassLoader.classParser;\n import static com.thoughtworks.go.util.CachedDigestUtils.md5Hex;\n-import static com.thoughtworks.go.util.XmlUtils.buildXmlDocument;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.apache.commons.io.IOUtils.toInputStream;\n \n public class MagicalGoConfigXmlLoader {\n     public static final List<GoConfigPreprocessor> PREPROCESSORS = List.of(\n@@ -144,18 +140,20 @@ public CruiseConfig validateCruiseConfig(CruiseConfig config) {\n     }\n \n     private Element parseInputStream(InputStream inputStream) throws Exception {\n-        Element rootElement = buildXmlDocument(inputStream, GoConfigSchema.getCurrentSchema()).getRootElement();\n+        Element rootElement = XmlUtils.buildValidatedXmlDocument(inputStream, GoConfigSchema.getCurrentSchema()).getRootElement();\n         validateDom(rootElement, registry);\n         return rootElement;\n     }\n \n     public <T> T fromXmlPartial(String partial, Class<T> o) throws Exception {\n-        return fromXmlPartial(toInputStream(partial, UTF_8), o);\n+        return parse(o, XmlUtils.buildXmlDocument(partial).getRootElement());\n     }\n \n     public <T> T fromXmlPartial(InputStream inputStream, Class<T> o) throws Exception {\n-        Document document = new SAXBuilder().build(inputStream);\n-        Element element = document.getRootElement();\n+        return parse(o, XmlUtils.buildXmlDocument(inputStream).getRootElement());\n+    }\n+\n+    private <T> T parse(Class<T> o, Element element) {\n         return classParser(element, o, configCache, new GoCipher(), registry, new ConfigReferenceElements()).parse();\n     }\n "
        },
        {
          "filename": "config/config-server/src/main/java/com/thoughtworks/go/config/MagicalGoConfigXmlWriter.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -38,7 +38,6 @@\n import static com.thoughtworks.go.config.ConfigCache.isAnnotationPresent;\n import static com.thoughtworks.go.util.ExceptionUtils.bomb;\n import static com.thoughtworks.go.util.ExceptionUtils.bombIf;\n-import static com.thoughtworks.go.util.XmlUtils.buildXmlDocument;\n import static java.text.MessageFormat.format;\n \n public class MagicalGoConfigXmlWriter {\n@@ -98,7 +97,7 @@ public String toString(Document document) throws IOException {\n     public void verifyXsdValid(Document document) throws Exception {\n         try (ByteArrayOutputStream buffer = new ByteArrayOutputStream(32 * 1024)) {\n             XmlUtils.writeXml(document, buffer);\n-            buildXmlDocument(buffer.toInputStream(), GoConfigSchema.getCurrentSchema());\n+            XmlUtils.buildValidatedXmlDocument(buffer.toInputStream(), GoConfigSchema.getCurrentSchema());\n         }\n     }\n "
        },
        {
          "filename": "config/config-server/src/main/java/com/thoughtworks/go/config/validation/UniqueOnCancelValidator.java",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -19,6 +19,7 @@\n import com.thoughtworks.go.util.ConfigUtil;\n import org.jdom2.Element;\n import org.jdom2.filter.Filters;\n+import org.jdom2.xpath.XPathExpression;\n import org.jdom2.xpath.XPathFactory;\n \n import java.util.List;\n@@ -27,12 +28,13 @@ public class UniqueOnCancelValidator implements GoConfigXMLValidator {\n     @Override\n     public void validate(Element element, ConfigElementImplementationRegistry registry) {\n         XPathFactory xPathFactory = XPathFactory.instance();\n+        XPathExpression<Element> onCancelExpression = xPathFactory.compile(\"oncancel\", Filters.element());\n+\n         List<String> tasks = ConfigUtil.allTasks(registry);\n         for (String task : tasks) {\n             List<Element> taskNodes = xPathFactory.compile(\"//\" + task, Filters.element()).evaluate(element);\n             for (Element taskNode : taskNodes) {\n-                List<Element> list = xPathFactory.compile(\"oncancel\", Filters.element()).evaluate(taskNode);\n-                if (list.size() > 1) {\n+                if (onCancelExpression.evaluate(taskNode).size() > 1) {\n                     throw new RuntimeException(\"Task [\" + task + \"] should not contain more than 1 oncancel task\");\n                 }\n             }"
        },
        {
          "filename": "config/config-server/src/test/java/com/thoughtworks/go/config/validation/UniqueOnCancelValidatorTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -19,12 +19,11 @@\n import com.thoughtworks.go.config.pluggabletask.PluggableTask;\n import com.thoughtworks.go.config.registry.ConfigElementImplementationRegistry;\n import com.thoughtworks.go.domain.Task;\n+import com.thoughtworks.go.util.XmlUtils;\n import org.jdom2.Element;\n import org.jdom2.JDOMException;\n-import org.jdom2.input.SAXBuilder;\n import org.junit.jupiter.api.Test;\n \n-import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -257,7 +256,6 @@ private List<Class<? extends Task>> tasks(Class<? extends Task>... taskClasses)\n     }\n \n     private Element elementFor(String content) throws JDOMException, IOException {\n-        SAXBuilder builder = new SAXBuilder();\n-        return builder.build(new ByteArrayInputStream(content.getBytes())).getRootElement();\n+        return XmlUtils.buildXmlDocument(content).getRootElement();\n     }\n }"
        },
        {
          "filename": "config/config-server/src/test/java/com/thoughtworks/go/util/XmlUtilsTest.java",
          "status": "modified",
          "additions": 3,
          "deletions": 21,
          "patch": "@@ -16,46 +16,28 @@\n package com.thoughtworks.go.util;\n \n import com.thoughtworks.go.config.GoConfigSchema;\n-import org.apache.commons.io.FileUtils;\n import org.jdom2.input.JDOMParseException;\n import org.junit.jupiter.api.Test;\n \n import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n \n-import static com.thoughtworks.go.util.XmlUtils.buildXmlDocument;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import static com.thoughtworks.go.util.XmlUtils.buildValidatedXmlDocument;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n public class XmlUtilsTest {\n \n     @Test\n     public void shouldThrowExceptionWithTranslatedErrorMessage() {\n         String xmlContent = \"<foo name='invalid'/>\";\n-        InputStream inputStream = new ByteArrayInputStream(xmlContent.getBytes());\n-        assertThatThrownBy(() -> buildXmlDocument(inputStream, GoConfigSchema.getCurrentSchema()))\n+        assertThatThrownBy(() -> XmlUtils.buildValidatedXmlDocument(new ByteArrayInputStream(xmlContent.getBytes()), GoConfigSchema.getCurrentSchema()))\n                 .isInstanceOf(XsdValidationException.class);\n     }\n \n     @Test\n     public void shouldThrowExceptionWhenXmlIsMalformed() {\n         String xmlContent = \"<foo name='invalid'\";\n-        assertThatThrownBy(() -> buildXmlDocument(xmlContent, GoConfigSchema.getCurrentSchema()))\n+        assertThatThrownBy(() -> buildValidatedXmlDocument(new ByteArrayInputStream(xmlContent.getBytes()), GoConfigSchema.getCurrentSchema()))\n                 .isInstanceOf(JDOMParseException.class)\n                 .hasMessageContaining(\"Error on line 1: XML document structures must start and end within the same entity\");\n     }\n-\n-    @Test\n-    public void shouldDisableDocTypeDeclarationsWhenValidatingXmlDocuments() {\n-        assertThatThrownBy(() -> buildXmlDocument(xxeFileContent(), GoConfigSchema.getCurrentSchema()))\n-                .isInstanceOf(JDOMParseException.class)\n-                .hasMessageContaining(\"DOCTYPE is disallowed when the feature \\\"http://apache.org/xml/features/disallow-doctype-decl\\\" set to true\");\n-    }\n-\n-    private String xxeFileContent() throws IOException {\n-        return FileUtils.readFileToString(new File(this.getClass().getResource(\"/data/xml-with-xxe.xml\").getFile()), UTF_8);\n-    }\n-\n }"
        },
        {
          "filename": "domain/build.gradle",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -31,7 +31,6 @@ dependencies {\n   implementation project.deps.commonsCollections4\n   implementation project.deps.commonsText\n   implementation project.deps.cloning\n-  implementation project.deps.jdom\n   implementation project.deps.jodaTime\n   implementation project.deps.springTx\n   api project.deps.semanticVersion"
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/domain/UnitTestReportGenerator.java",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -23,6 +23,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.xml.XMLConstants;\n import javax.xml.transform.Source;\n import javax.xml.transform.Templates;\n import javax.xml.transform.TransformerFactory;\n@@ -42,7 +43,9 @@ public class UnitTestReportGenerator {\n \n     static {\n         try (InputStream xslt = UnitTestReportGenerator.class.getResourceAsStream(\"unittests.xsl\")) {\n-            templates = TransformerFactory.newInstance().newTemplates(new StreamSource(xslt));\n+            TransformerFactory factory = TransformerFactory.newInstance();\n+            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+            templates = factory.newTemplates(new StreamSource(xslt));\n         } catch (Exception e) {\n             LOG.error(\"Could not load unit test converters\", e);\n         }"
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/domain/materials/mercurial/HgModificationSplitter.java",
          "status": "modified",
          "additions": 2,
          "deletions": 5,
          "patch": "@@ -21,14 +21,13 @@\n import com.thoughtworks.go.domain.materials.Revision;\n import com.thoughtworks.go.util.DateUtils;\n import com.thoughtworks.go.util.ExceptionUtils;\n+import com.thoughtworks.go.util.XmlUtils;\n import com.thoughtworks.go.util.command.ConsoleResult;\n import org.apache.commons.text.StringEscapeUtils;\n import org.jdom2.Document;\n import org.jdom2.Element;\n-import org.jdom2.input.SAXBuilder;\n \n import java.io.File;\n-import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n@@ -45,9 +44,7 @@ public HgModificationSplitter(ConsoleResult result) {\n \n     public List<Modification> modifications() {\n         try {\n-            SAXBuilder builder = new SAXBuilder();\n-            Document document = builder.build(new StringReader(output));\n-            return parseDOMTree(document);\n+            return parseDOMTree(XmlUtils.buildXmlDocument(output));\n         } catch (Exception e) {\n             throw ExceptionUtils.bomb(\"Unable to parse hg log output: \" + result.replaceSecretInfo(output), result.smudgedException(e));\n         }"
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/domain/materials/svn/SvnCommand.java",
          "status": "modified",
          "additions": 10,
          "deletions": 11,
          "patch": "@@ -20,12 +20,12 @@\n import com.thoughtworks.go.domain.materials.Modifications;\n import com.thoughtworks.go.domain.materials.SCMCommand;\n import com.thoughtworks.go.domain.materials.ValidationBean;\n+import com.thoughtworks.go.util.SafeSaxBuilder;\n import com.thoughtworks.go.util.SvnLogXmlParser;\n import com.thoughtworks.go.util.command.*;\n import org.apache.commons.lang3.StringUtils;\n import org.jdom2.Document;\n import org.jdom2.Element;\n-import org.jdom2.input.SAXBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -49,13 +49,12 @@ public class SvnCommand extends SCMCommand implements Subversion {\n     private boolean checkExternals;\n \n     private static final Logger LOG = LoggerFactory.getLogger(SvnCommand.class);\n-    public static final String SVN_DATE_FORMAT_IN = \"yyyy-MM-dd'T'HH:mm:ss'Z'\";\n     public static final String SVN_DATE_FORMAT_OUT = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n     private static final String ERR_SVN_NOT_FOUND = \"Failed to find 'svn' on your PATH. Please ensure 'svn' is executable by the Go Server and on the Go Agents where this material will be used.\";\n \n \n     private final SvnLogXmlParser svnLogXmlParser;\n-    private final static ThreadLocal<SAXBuilder> saxBuilderThreadLocal = new ThreadLocal<>();\n+    private final static ThreadLocal<SafeSaxBuilder> saxBuilderThreadLocal = new ThreadLocal<>();\n \n     public SvnCommand(String materialFingerprint, String repositoryUrl) {\n         this(materialFingerprint, repositoryUrl, null, null, false);\n@@ -94,10 +93,10 @@ public List<SvnExternal> getAllExternalURLs() {\n                 .withArg(repositoryUrl);\n         ConsoleResult result = executeCommand(svnExternalCommand);\n         String svnExternalConsoleOut = result.outputAsString();\n-        SvnInfo remoteInfo = remoteInfo(new SAXBuilder());\n+        SvnInfo remoteInfo = remoteInfo(new SafeSaxBuilder());\n         String repoUrl = remoteInfo.getUrl();\n         String repoRoot = remoteInfo.getRoot();\n-        List<SvnExternal> svnExternalList = null;\n+        List<SvnExternal> svnExternalList;\n         try {\n             svnExternalList = new SvnExternalParser().parse(svnExternalConsoleOut, repoUrl, repoRoot);\n         } catch (RuntimeException e) {\n@@ -147,21 +146,21 @@ public List<Modification> modificationsSince(SubversionRevision subversionRevisi\n     }\n \n     private List<Modification> parseSvnLog(String output) {\n-        SAXBuilder builder = getBuilder();\n+        SafeSaxBuilder builder = getBuilder();\n         SvnInfo svnInfo = remoteInfo(builder);\n         return svnLogXmlParser.parse(output, svnInfo.getPath(), builder);\n     }\n \n-    private SAXBuilder getBuilder() {\n-        SAXBuilder saxBuilder = saxBuilderThreadLocal.get();\n+    private SafeSaxBuilder getBuilder() {\n+        SafeSaxBuilder saxBuilder = saxBuilderThreadLocal.get();\n         if (saxBuilder == null) {\n-            saxBuilder = new SAXBuilder();\n+            saxBuilder = new SafeSaxBuilder();\n             saxBuilderThreadLocal.set(saxBuilder);\n         }\n         return saxBuilder;\n     }\n \n-    public SvnInfo remoteInfo(SAXBuilder builder) {\n+    public SvnInfo remoteInfo(SafeSaxBuilder builder) {\n         SvnInfo svnInfo = new SvnInfo();\n         svnInfo.parse(executeCommand(svn(true)\n                 .withArgs(\"info\", \"--xml\", \"--non-interactive\")\n@@ -311,7 +310,7 @@ static class SvnInfo {\n         private String encodedUrl = \"\";\n         private String root = \"\";\n \n-        public void parse(String xmlOutput, SAXBuilder builder) {\n+        public void parse(String xmlOutput, SafeSaxBuilder builder) {\n             try {\n                 Document document = builder.build(new StringReader(xmlOutput));\n                 parseDOMTree(document);"
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/util/SvnLogXmlParser.java",
          "status": "modified",
          "additions": 11,
          "deletions": 21,
          "patch": "@@ -20,7 +20,6 @@\n import com.thoughtworks.go.domain.materials.svn.SvnCommand;\n import org.jdom2.Document;\n import org.jdom2.Element;\n-import org.jdom2.input.SAXBuilder;\n \n import java.io.StringReader;\n import java.text.DateFormat;\n@@ -34,7 +33,7 @@ public class SvnLogXmlParser {\n \n     private static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");\n \n-    public List<Modification> parse(String svnLogOutput, String path, SAXBuilder builder) {\n+    public List<Modification> parse(String svnLogOutput, String path, SafeSaxBuilder builder) {\n         try {\n             Document document = builder.build(new StringReader(svnLogOutput));\n             return parseDOMTree(document, path);\n@@ -47,10 +46,7 @@ private List<Modification> parseDOMTree(Document document, String path) throws P\n         List<Modification> modifications = new ArrayList<>();\n \n         Element rootElement = document.getRootElement();\n-        List logEntries = rootElement.getChildren(\"logentry\");\n-        for (Iterator iterator = logEntries.iterator(); iterator.hasNext();) {\n-            Element logEntry = (Element) iterator.next();\n-\n+        for (Element logEntry : rootElement.getChildren(\"logentry\")) {\n             Modification modification = parseLogEntry(logEntry, path);\n             if (modification != null) {\n                 modifications.add(modification);\n@@ -75,9 +71,7 @@ private Modification parseLogEntry(Element logEntry, String path) throws ParseEx\n \n         Modification modification = new Modification(author, comment, null, modifiedTime, revision);\n \n-        List paths = logEntryPaths.getChildren(\"path\");\n-        for (Iterator iterator = paths.iterator(); iterator.hasNext();) {\n-            Element node = (Element) iterator.next();\n+        for (Element node : logEntryPaths.getChildren(\"path\")) {\n             if (underPath(path, node.getText())) {\n                 ModifiedAction action = convertAction(node.getAttributeValue(\"action\"));\n                 modification.createModifiedFile(node.getText(), null, action);\n@@ -116,20 +110,16 @@ public static DateFormat getOutDateFormatter() {\n     }\n \n     private ModifiedAction convertAction(String action) {\n-        if (action.equals(\"A\")) {\n-            return ModifiedAction.added;\n-        }\n-        if (action.equals(\"M\")) {\n-            return ModifiedAction.modified;\n-        }\n-        if (action.equals(\"D\")) {\n-            return ModifiedAction.deleted;\n-        }\n-        return ModifiedAction.unknown;\n+        return switch (action) {\n+            case \"A\" -> ModifiedAction.added;\n+            case \"M\" -> ModifiedAction.modified;\n+            case \"D\" -> ModifiedAction.deleted;\n+            default -> ModifiedAction.unknown;\n+        };\n     }\n \n-    public HashMap<String, String> parseInfoToGetUUID(String output, String queryURL, SAXBuilder builder) {\n-        HashMap<String, String> uidToUrlMap = new HashMap<>();\n+    public Map<String, String> parseInfoToGetUUID(String output, String queryURL, SafeSaxBuilder builder) {\n+        Map<String, String> uidToUrlMap = new HashMap<>();\n         try {\n             Document document = builder.build(new StringReader(output));\n             Element root = document.getRootElement();"
        },
        {
          "filename": "domain/src/test/java/com/thoughtworks/go/domain/materials/svn/SvnCommandRemoteTest.java",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -18,11 +18,11 @@\n import com.thoughtworks.go.domain.materials.Modification;\n import com.thoughtworks.go.domain.materials.ValidationBean;\n import com.thoughtworks.go.helper.SvnRemoteRepository;\n+import com.thoughtworks.go.util.SafeSaxBuilder;\n import com.thoughtworks.go.util.TempDirUtils;\n import com.thoughtworks.go.util.command.InMemoryStreamConsumer;\n import com.thoughtworks.go.util.command.ProcessOutputStreamConsumer;\n import org.apache.commons.io.FileUtils;\n-import org.jdom2.input.SAXBuilder;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -63,7 +63,7 @@ public void stopRepo() throws Exception {\n \n     @Test\n     public void shouldSupportSvnInfo() {\n-        SvnCommand.SvnInfo info = command.remoteInfo(new SAXBuilder());\n+        SvnCommand.SvnInfo info = command.remoteInfo(new SafeSaxBuilder());\n         assertThat(info.getUrl()).isEqualTo(repository.getUrl());\n     }\n \n@@ -249,21 +249,21 @@ public void shouldMaskPassword_modificationsSince() {\n     @Test\n     public void shouldMaskPassword_remoteInfo() {\n         try {\n-            badUserNameCommand().remoteInfo(new SAXBuilder());\n+            badUserNameCommand().remoteInfo(new SafeSaxBuilder());\n             fail(\"should have failed\");\n         } catch (Exception e) {\n             assertThat(e.getMessage().contains(HARRYS_PASSWORD)).isFalse();\n         }\n \n         try {\n-            badPasswordCommand().remoteInfo(new SAXBuilder());\n+            badPasswordCommand().remoteInfo(new SafeSaxBuilder());\n             fail(\"should have failed\");\n         } catch (Exception e) {\n             assertThat(e.getMessage().contains(\"some_bad_password\")).isFalse();\n         }\n \n         try {\n-            badUrlCommand().remoteInfo(new SAXBuilder());\n+            badUrlCommand().remoteInfo(new SafeSaxBuilder());\n             fail(\"should have failed\");\n         } catch (Exception e) {\n             assertThat(e.getMessage().contains(HARRYS_PASSWORD)).isFalse();"
        },
        {
          "filename": "domain/src/test/java/com/thoughtworks/go/domain/materials/svn/SvnCommandTest.java",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -18,9 +18,9 @@\n import com.thoughtworks.go.config.materials.svn.SvnMaterial;\n import com.thoughtworks.go.domain.materials.*;\n import com.thoughtworks.go.helper.SvnTestRepo;\n+import com.thoughtworks.go.util.SafeSaxBuilder;\n import com.thoughtworks.go.util.TempDirUtils;\n import com.thoughtworks.go.util.command.*;\n-import org.jdom2.input.SAXBuilder;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.condition.DisabledOnOs;\n@@ -280,7 +280,7 @@ void shouldParseSvnInfoWithParthDifferentFromUrl() {\n                 </entry>\n                 </info>\"\"\";\n         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();\n-        svnInfo.parse(output, new SAXBuilder());\n+        svnInfo.parse(output, new SafeSaxBuilder());\n         assertThat(svnInfo.getPath()).isEqualTo(\"/bloresvn/TISSIP/branch/DEV/PurchaseDeliverables\");\n         assertThat(svnInfo.getUrl()).isEqualTo(\"http://svn.somewhere.com/someotherline/bloresvn/TISSIP/branch/DEV/PurchaseDeliverables\");\n     }\n@@ -307,7 +307,7 @@ void shouldParseSvnInfo() {\n                 </entry>\n                 </info>\"\"\";\n         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();\n-        svnInfo.parse(output, new SAXBuilder());\n+        svnInfo.parse(output, new SafeSaxBuilder());\n         assertThat(svnInfo.getPath()).isEqualTo(\"/someotherline\");\n         assertThat(svnInfo.getUrl()).isEqualTo(\"http://svn.somewhere.com/svn/someotherline\");\n         assertThat(svnInfo.getRoot()).isEqualTo(\"http://svn.somewhere.com/svn\");\n@@ -335,7 +335,7 @@ void shouldParseSvnInfoWithUTF8ChineseNameInUrl() {\n                 </entry>\n                 </info>\"\"\";\n         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();\n-        svnInfo.parse(output, new SAXBuilder());\n+        svnInfo.parse(output, new SafeSaxBuilder());\n         assertThat(svnInfo.getPath()).isEqualTo(\"/\u53f8\u5f92\u7a7a\u5728\u6b64\");\n         assertThat(svnInfo.getUrl()).isEqualTo(\"file:///home/cceuser/bigfs/projects/cruise/common/test-resources/unit/data/repos/svnrepo/end2end/%E5%8F%B8%E5%BE%92%E7%A9%BA%E5%9C%A8%E6%AD%A4\");\n     }\n@@ -362,7 +362,7 @@ void shouldParseEncodedUrl() {\n                 </entry>\n                 </info>\"\"\";\n         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();\n-        svnInfo.parse(output, new SAXBuilder());\n+        svnInfo.parse(output, new SafeSaxBuilder());\n         assertThat(svnInfo.getUrl()).isEqualTo(\"https://217.45.214.17:8443/svn/Entropy%20System/Envoy%20Enterprise/trunk\");\n         assertThat(svnInfo.getPath()).isEqualTo(\"/Entropy System/Envoy Enterprise/trunk\");\n     }\n@@ -389,7 +389,7 @@ void shouldParseEncodedUrlAndPath() {\n                 </entry>\n                 </info>\"\"\";\n         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();\n-        svnInfo.parse(output, new SAXBuilder());\n+        svnInfo.parse(output, new SafeSaxBuilder());\n         assertThat(svnInfo.getUrl()).isEqualTo(\"file:///C:/Documents%20and%20Settings/cceuser/Local%20Settings/Temp/testSvnRepo-1243722556125/end2end/unit-reports\");\n         assertThat(svnInfo.getPath()).isEqualTo(\"/unit-reports\");\n     }\n@@ -416,7 +416,7 @@ void shouldParsePartlyEncodedUrlAndPath() {\n                 </entry>\n                 </info>\"\"\";\n         SvnCommand.SvnInfo svnInfo = new SvnCommand.SvnInfo();\n-        svnInfo.parse(output, new SAXBuilder());\n+        svnInfo.parse(output, new SafeSaxBuilder());\n         assertThat(svnInfo.getUrl()).isEqualTo(\"svn+ssh://hostname/foo%20bar%20baz/end2end\");\n         assertThat(svnInfo.getPath()).isEqualTo(\"/end2end\");\n     }"
        },
        {
          "filename": "domain/src/test/java/com/thoughtworks/go/util/SvnLogXmlParserTest.java",
          "status": "modified",
          "additions": 12,
          "deletions": 13,
          "patch": "@@ -18,14 +18,13 @@\n import com.thoughtworks.go.domain.materials.Modification;\n import com.thoughtworks.go.domain.materials.ModifiedAction;\n import com.thoughtworks.go.domain.materials.ModifiedFile;\n-import org.jdom2.input.SAXBuilder;\n import org.junit.jupiter.api.Test;\n \n import java.io.IOException;\n import java.io.InputStream;\n import java.text.ParseException;\n-import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.Objects;\n \n import static com.thoughtworks.go.util.SvnLogXmlParser.convertDate;\n@@ -72,7 +71,7 @@ public void shouldParseSvnLogContainingNullComments() throws IOException {\n         try (InputStream is = Objects.requireNonNull(getClass().getResourceAsStream(\"jemstep_svn_log.xml\"))) {\n             String xml = new String(is.readAllBytes(), UTF_8);\n             SvnLogXmlParser parser = new SvnLogXmlParser();\n-            List<Modification> revisions = parser.parse(xml, \"\", new SAXBuilder());\n+            List<Modification> revisions = parser.parse(xml, \"\", new SafeSaxBuilder());\n \n             assertThat(revisions.size()).isEqualTo(43);\n             assertThat(revisions.stream().filter(r -> r.getRevision().equals(\"7815\")).findFirst().orElseThrow().getComment()).isNull();\n@@ -82,7 +81,7 @@ public void shouldParseSvnLogContainingNullComments() throws IOException {\n     @Test\n     public void shouldParse() throws ParseException {\n         SvnLogXmlParser parser = new SvnLogXmlParser();\n-        List<Modification> materialRevisions = parser.parse(XML, \"\", new SAXBuilder());\n+        List<Modification> materialRevisions = parser.parse(XML, \"\", new SafeSaxBuilder());\n         assertThat(materialRevisions.size()).isEqualTo(1);\n         Modification mod = materialRevisions.get(0);\n         assertThat(mod.getRevision()).isEqualTo(\"3\");\n@@ -111,7 +110,7 @@ public void shouldParseLogEntryWithoutComment() {\n                    action=\"A\">/trunk/revision3.txt</path>\n                 </paths>\n                 </logentry>\n-                </log>\"\"\", \"\", new SAXBuilder());\n+                </log>\"\"\", \"\", new SafeSaxBuilder());\n         assertThat(materialRevisions.size()).isEqualTo(1);\n         Modification mod = materialRevisions.get(0);\n         assertThat(mod.getRevision()).isEqualTo(\"3\");\n@@ -136,7 +135,7 @@ public void shouldParseLogWithEmptyRevision() {\n                    action=\"A\">/trunk/revision3.txt</path>\n                 </paths>\n                 </logentry>\n-                </log>\"\"\", \"\", new SAXBuilder());\n+                </log>\"\"\", \"\", new SafeSaxBuilder());\n         assertThat(materialRevisions.size()).isEqualTo(1);\n         Modification mod = materialRevisions.get(0);\n         assertThat(mod.getRevision()).isEqualTo(\"3\");\n@@ -191,17 +190,17 @@ public void shouldParseBJCruiseLogCorrectly() {\n                 </log>\"\"\";\n \n         SvnLogXmlParser parser = new SvnLogXmlParser();\n-        List<Modification> mods = parser.parse(firstChangeLog, \".\", new SAXBuilder());\n+        List<Modification> mods = parser.parse(firstChangeLog, \".\", new SafeSaxBuilder());\n         assertThat(mods.get(0).getUserName()).isEqualTo(\"yxchu\");\n \n-        List<Modification> mods2 = parser.parse(secondChangeLog, \".\", new SAXBuilder());\n+        List<Modification> mods2 = parser.parse(secondChangeLog, \".\", new SafeSaxBuilder());\n         assertThat(mods2.size()).isEqualTo(2);\n     }\n \n     @Test\n     public void shouldFilterModifiedFilesByPath() {\n         SvnLogXmlParser parser = new SvnLogXmlParser();\n-        List<Modification> materialRevisions = parser.parse(MULTIPLE_FILES, \"/branch\", new SAXBuilder());\n+        List<Modification> materialRevisions = parser.parse(MULTIPLE_FILES, \"/branch\", new SafeSaxBuilder());\n \n         Modification mod = materialRevisions.get(0);\n         List<ModifiedFile> files = mod.getModifiedFiles();\n@@ -214,7 +213,7 @@ public void shouldFilterModifiedFilesByPath() {\n     @Test\n     public void shouldGetAllModifiedFilesUnderRootPath() {\n         SvnLogXmlParser parser = new SvnLogXmlParser();\n-        List<Modification> materialRevisions = parser.parse(MULTIPLE_FILES, \"\", new SAXBuilder());\n+        List<Modification> materialRevisions = parser.parse(MULTIPLE_FILES, \"\", new SafeSaxBuilder());\n \n         Modification mod = materialRevisions.get(0);\n         List<ModifiedFile> files = mod.getModifiedFiles();\n@@ -232,7 +231,7 @@ public void shouldGetAllModifiedFilesUnderRootPath() {\n     @Test\n     public void shouldReportSvnOutputWhenErrorsHappen() {\n         SvnLogXmlParser parser = new SvnLogXmlParser();\n-        assertThatThrownBy(() -> parser.parse(\"invalid xml\", \"\", new SAXBuilder()))\n+        assertThatThrownBy(() -> parser.parse(\"invalid xml\", \"\", new SafeSaxBuilder()))\n             .isInstanceOf(RuntimeException.class)\n             .hasMessageContaining(\"invalid xml\");\n     }\n@@ -259,14 +258,14 @@ public void shouldParseSvnInfoOutputToConstructUrlToRemoteUUIDMapping() {\n                 </commit>\n                 </entry>\n                 </info>\"\"\";\n-        final HashMap<String, String> map = svnLogXmlParser.parseInfoToGetUUID(svnInfoOutput, \"http://gears.googlecode.com/svn/trunk\", new SAXBuilder());\n+        final Map<String, String> map = svnLogXmlParser.parseInfoToGetUUID(svnInfoOutput, \"http://gears.googlecode.com/svn/trunk\", new SafeSaxBuilder());\n         assertThat(map.size()).isEqualTo(1);\n         assertThat(map.get(\"http://gears.googlecode.com/svn/trunk\")).isEqualTo(\"fe895e04-df30-0410-9975-d76d301b4276\");\n     }\n \n     @Test\n     public void shouldThrowUpWhenSvnInfoOutputIsInvalidToMapUrlToUUID() {\n-        assertThatThrownBy(() -> new SvnLogXmlParser().parseInfoToGetUUID(\"Svn threw up and it's drunk\", \"does not matter\", new SAXBuilder()))\n+        assertThatThrownBy(() -> new SvnLogXmlParser().parseInfoToGetUUID(\"Svn threw up and it's drunk\", \"does not matter\", new SafeSaxBuilder()))\n             .isInstanceOf(RuntimeException.class);\n     }\n }"
        },
        {
          "filename": "plugin-infra/go-plugin-infra/src/main/java/com/thoughtworks/go/plugin/infra/plugininfo/GoPluginBundleDescriptorParser.java",
          "status": "modified",
          "additions": 4,
          "deletions": 31,
          "patch": "@@ -16,16 +16,11 @@\n package com.thoughtworks.go.plugin.infra.plugininfo;\n \n import com.thoughtworks.go.plugin.infra.monitor.BundleOrPluginFileDetails;\n-import jakarta.xml.bind.*;\n+import jakarta.xml.bind.JAXBException;\n import org.xml.sax.SAXException;\n \n-import javax.xml.XMLConstants;\n-import javax.xml.stream.XMLInputFactory;\n import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.XMLStreamReader;\n-import javax.xml.validation.SchemaFactory;\n import java.io.File;\n-import java.io.IOException;\n import java.io.InputStream;\n \n /* Parses an XML of this kind (see below). Also see @GoPluginDescriptorParser and gocd-bundle-descriptor.xsd.\n@@ -83,16 +78,16 @@ private GoPluginBundleDescriptorParser() {\n     }\n \n     public static GoPluginBundleDescriptor parseXML(InputStream pluginXml,\n-                                                    BundleOrPluginFileDetails bundleOrPluginJarFile) throws IOException, JAXBException, XMLStreamException, SAXException {\n+                                                    BundleOrPluginFileDetails bundleOrPluginJarFile) throws JAXBException, XMLStreamException, SAXException {\n         return parseXML(pluginXml, bundleOrPluginJarFile.file().getAbsolutePath(), bundleOrPluginJarFile.extractionLocation(), bundleOrPluginJarFile.isBundledPlugin());\n     }\n \n     static GoPluginBundleDescriptor parseXML(InputStream pluginXML,\n                                              String pluginJarFileLocation,\n                                              File pluginBundleLocation,\n-                                             boolean isBundledPlugin) throws IOException, JAXBException, XMLStreamException, SAXException {\n+                                             boolean isBundledPlugin) throws JAXBException, XMLStreamException, SAXException {\n \n-        GoPluginBundleDescriptor bundle = deserializeXML(pluginXML, GoPluginBundleDescriptor.class);\n+        GoPluginBundleDescriptor bundle = GoPluginDescriptorParser.deserializeXML(pluginXML, GoPluginBundleDescriptor.class, \"/gocd-bundle-descriptor.xsd\", \"bundle.xml\");\n         bundle.pluginDescriptors().forEach(d -> {\n             d.setBundleDescriptor(bundle);\n             d.version(bundle.version());\n@@ -103,26 +98,4 @@ static GoPluginBundleDescriptor parseXML(InputStream pluginXML,\n         return bundle;\n     }\n \n-    @SuppressWarnings(\"SameParameterValue\")\n-    private static <T> T deserializeXML(InputStream pluginXML, Class<T> klass) throws JAXBException, XMLStreamException, SAXException {\n-        JAXBContext ctx = JAXBContext.newInstance(klass);\n-        XMLStreamReader data = XMLInputFactory.newInstance().createXMLStreamReader(pluginXML);\n-        final Unmarshaller unmarshaller = ctx.createUnmarshaller();\n-        unmarshaller.setSchema(SchemaFactory.\n-                newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).\n-                newSchema(GoPluginBundleDescriptorParser.class.getResource(\"/gocd-bundle-descriptor.xsd\")));\n-\n-        try {\n-            final JAXBElement<T> result = unmarshaller.unmarshal(data, klass);\n-            return result.getValue();\n-        } catch (UnmarshalException e) {\n-            // there is no non-frustrating way to customize error messages (without other pitfalls anyway),\n-            // and `UnmarshalException` instances are rarely informative; assume a validation error.\n-            if (null == e.getMessage()) {\n-                throw new ValidationException(\"XML Schema validation of Plugin Descriptor(bundle.xml) failed\", e.getCause());\n-            }\n-            throw e;\n-        }\n-    }\n-\n }"
        },
        {
          "filename": "plugin-infra/go-plugin-infra/src/main/java/com/thoughtworks/go/plugin/infra/plugininfo/GoPluginDescriptorParser.java",
          "status": "modified",
          "additions": 22,
          "deletions": 15,
          "patch": "@@ -23,9 +23,9 @@\n import javax.xml.stream.XMLInputFactory;\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamReader;\n+import javax.xml.validation.Schema;\n import javax.xml.validation.SchemaFactory;\n import java.io.File;\n-import java.io.IOException;\n import java.io.InputStream;\n \n public final class GoPluginDescriptorParser {\n@@ -53,40 +53,47 @@ private GoPluginDescriptorParser() {\n     }\n \n     public static GoPluginBundleDescriptor parseXML(InputStream pluginXml,\n-                                                    BundleOrPluginFileDetails bundleOrPluginJarFile) throws IOException, JAXBException, XMLStreamException, SAXException {\n+                                                    BundleOrPluginFileDetails bundleOrPluginJarFile) throws JAXBException, XMLStreamException, SAXException {\n         return parseXML(pluginXml, bundleOrPluginJarFile.file().getAbsolutePath(), bundleOrPluginJarFile.extractionLocation(), bundleOrPluginJarFile.isBundledPlugin());\n     }\n \n     static GoPluginBundleDescriptor parseXML(InputStream pluginXML,\n                                              String pluginJarFileLocation,\n                                              File pluginBundleLocation,\n-                                             boolean isBundledPlugin) throws IOException, JAXBException, XMLStreamException, SAXException {\n-        GoPluginDescriptor plugin = deserializeXML(pluginXML, GoPluginDescriptor.class);\n+                                             boolean isBundledPlugin) throws JAXBException, XMLStreamException, SAXException {\n+        GoPluginDescriptor plugin = deserializeXML(pluginXML, GoPluginDescriptor.class, \"/plugin-descriptor.xsd\", \"plugin.xml\");\n         plugin.pluginJarFileLocation(pluginJarFileLocation);\n         plugin.bundleLocation(pluginBundleLocation);\n         plugin.isBundledPlugin(isBundledPlugin);\n         return new GoPluginBundleDescriptor(plugin);\n     }\n \n-    @SuppressWarnings(\"SameParameterValue\")\n-    private static <T> T deserializeXML(InputStream pluginXML, Class<T> klass) throws JAXBException, XMLStreamException, SAXException {\n-        JAXBContext ctx = JAXBContext.newInstance(klass);\n-        XMLStreamReader data = XMLInputFactory.newInstance().createXMLStreamReader(pluginXML);\n-        final Unmarshaller unmarshaller = ctx.createUnmarshaller();\n-        unmarshaller.setSchema(SchemaFactory.\n-                newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).\n-                newSchema(GoPluginDescriptorParser.class.getResource(\"/plugin-descriptor.xsd\")));\n+    static <T> T deserializeXML(InputStream pluginXML, Class<T> klass, String schemaResourcePath, String resourceType) throws JAXBException, XMLStreamException, SAXException {\n+        XMLStreamReader data = streamReaderFor(pluginXML);\n+        final Unmarshaller unmarshaller = JAXBContext.newInstance(klass).createUnmarshaller();\n+        unmarshaller.setSchema(schemaFor(klass, schemaResourcePath));\n \n         try {\n-            final JAXBElement<T> result = unmarshaller.unmarshal(data, klass);\n-            return result.getValue();\n+            return unmarshaller.unmarshal(data, klass).getValue();\n         } catch (UnmarshalException e) {\n             // there is no non-frustrating way to customize error messages (without other pitfalls anyway),\n             // and `UnmarshalException` instances are rarely informative; assume a validation error.\n             if (null == e.getMessage()) {\n-                throw new ValidationException(\"XML Schema validation of Plugin Descriptor(plugin.xml) failed\", e.getCause());\n+                throw new ValidationException(\"XML Schema validation of Plugin Descriptor(\" + resourceType + \") failed\", e.getCause());\n             }\n             throw e;\n         }\n     }\n+\n+    private static XMLStreamReader streamReaderFor(InputStream pluginXML) throws XMLStreamException {\n+        XMLInputFactory factory = XMLInputFactory.newInstance();\n+        factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n+        return factory.createXMLStreamReader(pluginXML);\n+    }\n+\n+    private static Schema schemaFor(Class<?> klass, String schemaResourcePath) throws SAXException {\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        schemaFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        return schemaFactory.newSchema(klass.getResource(schemaResourcePath));\n+    }\n }"
        },
        {
          "filename": "server/src/main/java/com/thoughtworks/go/config/ConfigCipherUpdater.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -26,7 +26,6 @@\n import org.jdom2.Document;\n import org.jdom2.Element;\n import org.jdom2.filter.Filters;\n-import org.jdom2.input.SAXBuilder;\n import org.jdom2.xpath.XPathExpression;\n import org.jdom2.xpath.XPathFactory;\n import org.slf4j.Logger;\n@@ -85,7 +84,7 @@ public void migrate() {\n                 FileUtils.deleteQuietly(backupConfigFile);\n                 return;\n             }\n-            Document document = new SAXBuilder().build(configFile);\n+            Document document = XmlUtils.buildXmlDocument(configFile);\n             List<String> encryptedAttributes = List.of(\"encryptedPassword\", \"encryptedManagerPassword\");\n             List<String> encryptedNodes = List.of(\"encryptedValue\");\n             XPathFactory xPathFactory = XPathFactory.instance();"
        },
        {
          "filename": "server/src/test-fast/java/com/thoughtworks/go/domain/DirectoryEntriesTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -16,13 +16,12 @@\n package com.thoughtworks.go.domain;\n \n import com.thoughtworks.go.server.presentation.html.HtmlRenderer;\n+import com.thoughtworks.go.util.XmlUtils;\n import org.jdom2.Element;\n import org.jdom2.JDOMException;\n-import org.jdom2.input.SAXBuilder;\n import org.junit.jupiter.api.Test;\n \n import java.io.IOException;\n-import java.io.StringReader;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -98,7 +97,7 @@ public void shouldAddFile() {\n \n     private Element getRenderedDocument(HtmlRenderer renderer) throws JDOMException, IOException {\n         String renderedString = \"<div>\" + renderer.asString() + \"</div>\";\n-        return new SAXBuilder().build(new StringReader(renderedString)).getRootElement();\n+        return XmlUtils.buildXmlDocument(renderedString).getRootElement();\n     }\n \n }"
        },
        {
          "filename": "server/src/test-integration/java/com/thoughtworks/go/config/GoConfigMigrationIntegrationTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 7,
          "patch": "@@ -27,14 +27,10 @@\n import com.thoughtworks.go.server.service.GoConfigService;\n import com.thoughtworks.go.serverhealth.ServerHealthService;\n import com.thoughtworks.go.service.ConfigRepository;\n-import com.thoughtworks.go.util.ConfigElementImplementationRegistryMother;\n-import com.thoughtworks.go.util.GoConfigFileHelper;\n-import com.thoughtworks.go.util.SystemEnvironment;\n-import com.thoughtworks.go.util.TimeProvider;\n+import com.thoughtworks.go.util.*;\n import org.apache.commons.lang3.StringUtils;\n import org.jdom2.Document;\n import org.jdom2.filter.ElementFilter;\n-import org.jdom2.input.SAXBuilder;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -48,7 +44,6 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.StringReader;\n import java.util.Objects;\n \n import static com.thoughtworks.go.config.PipelineConfig.LOCK_VALUE_LOCK_ON_FAILURE;\n@@ -296,7 +291,7 @@ public void shouldRemoveAllLuauConfigurationFromConfig() throws Exception {\n                         </cruise>\"\"\";\n \n         String migratedContent = migrateXmlString(configString, 66);\n-        Document document = new SAXBuilder().build(new StringReader(migratedContent));\n+        Document document = XmlUtils.buildXmlDocument(migratedContent);\n \n         assertThat(document.getDescendants(new ElementFilter(\"luau\")).hasNext()).isFalse();\n         assertThat(document.getDescendants(new ElementFilter(\"groups\")).hasNext()).isFalse();"
        },
        {
          "filename": "util/build.gradle",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -21,6 +21,7 @@ dependencies {\n   api project.deps.springContext\n   api project.deps.gson\n   implementation project.deps.cloning\n+  api project.deps.jdom\n   testImplementation project(path: ':test:test-utils', configuration: 'runtimeElements')\n   testImplementation project.deps.junit5Api\n   testRuntimeOnly project.deps.junit5Engine"
        },
        {
          "filename": "util/src/main/java/com/thoughtworks/go/util/SafeSaxBuilder.java",
          "status": "added",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2024 Thoughtworks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.util;\n+\n+import org.jdom2.input.SAXBuilder;\n+\n+public class SafeSaxBuilder extends SAXBuilder {\n+    public SafeSaxBuilder() {\n+        // Disable DTDs entirely, as we don't use/rely on them - rather than just disallowing external entities\n+        this.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n+    }\n+}"
        },
        {
          "filename": "util/src/test/java/com/thoughtworks/go/util/SafeSaxBuilderTest.java",
          "status": "added",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2024 Thoughtworks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.util;\n+\n+import org.jdom2.input.JDOMParseException;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+class SafeSaxBuilderTest {\n+    @Test\n+    public void shouldDisableDocTypeDeclarationsWhenValidatingXmlDocuments() throws Exception {\n+        try (InputStream content = xxeFileContent()) {\n+            assertThatThrownBy(() -> new SafeSaxBuilder().build(content))\n+                .isInstanceOf(JDOMParseException.class)\n+                .hasMessageContaining(\"DOCTYPE is disallowed when the feature \\\"http://apache.org/xml/features/disallow-doctype-decl\\\" set to true\");\n+        }\n+    }\n+\n+    private InputStream xxeFileContent() {\n+        return Objects.requireNonNull(this.getClass().getResourceAsStream(\"/data/xml-with-xxe.xml\"));\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "util/src/test/resources/data/xml-with-xxe.xml",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 12,
        "dependency_files": 0,
        "test_files": 10,
        "unique_directories": 21,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "96ad0e6dfcaf8d9cf864c085de07cd33b44b3fb1",
            "date": "2025-01-26T07:14:29Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "2c09c8fc8e53221991fe6105bbece3ca1fbb1f67",
            "date": "2025-01-26T06:57:16Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "968747addd624844ab9d01951980090c4ce989c5",
            "date": "2025-01-26T06:56:57Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "30730447865d2f4b371ba9089f33601b33d2810e",
            "date": "2025-01-26T06:56:45Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "e6de47347567d81744d8519a4d75612f1e393874",
            "date": "2025-01-26T06:41:56Z",
            "author_login": "chadlwilson"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-611",
    "description": "GoCD is a continuous deliver server. GoCD versions prior to 24.4.0 can allow GoCD \"group admins\" to abuse ability to edit the raw XML configuration for groups they administer to trigger XML External Entity (XXE) injection on the GoCD server. Theoretically, the XXE vulnerability can result in additional attacks such as SSRF, information disclosure from the GoCD server, and directory traversal, although these additional attacks have not been explicitly demonstrated as exploitable. This issue is fixed in GoCD 24.5.0. Some workarounds are available. One may temporarily block access to  `/go/*/pipelines/snippet` routes from an external reverse proxy or WAF if one's \"group admin\" users do not need the functionality to edit the XML of pipelines directly (rather than using the UI, or using a configuration repository). One may also prevent external access from one's GoCD server to arbitrary locations using some kind of environment egress control.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2025-01-03T16:15:26.643",
    "last_modified": "2025-01-03T16:15:26.643",
    "fix_date": "2024-12-15T09:30:28Z"
  },
  "references": [
    {
      "url": "https://github.com/gocd/gocd/commit/410331a97eb2935e04c1372f50658e05c533f733",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/gocd/gocd/releases/tag/24.5.0",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/gocd/gocd/security/advisories/GHSA-3w9f-fgr5-5g78",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://www.gocd.org/releases/#24-5-0",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.950318",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "gocd",
    "owner": "gocd",
    "created_at": "2013-12-13T05:26:16Z",
    "updated_at": "2025-01-26T07:14:33Z",
    "pushed_at": "2025-01-26T07:14:29Z",
    "size": 394542,
    "stars": 7164,
    "forks": 973,
    "open_issues": 83,
    "watchers": 7164,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 20256526,
      "TypeScript": 4424593,
      "Groovy": 2080119,
      "JavaScript": 753678,
      "SCSS": 564746,
      "Ruby": 361043,
      "HTML": 253777,
      "XSLT": 202698,
      "NSIS": 24216,
      "Shell": 15469,
      "FreeMarker": 13061,
      "EJS": 1626,
      "CSS": 1575,
      "Batchfile": 474
    },
    "commit_activity": {
      "total_commits_last_year": 1743,
      "avg_commits_per_week": 33.51923076923077,
      "days_active_last_year": 298
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:03:27.071094"
  }
}