{
  "cve_id": "CVE-2024-56357",
  "github_data": {
    "repository": "gristlabs/grist-core",
    "fix_commit": "10b069005ec8d5f511e6554a56111d8f257f029e",
    "related_commits": [
      "10b069005ec8d5f511e6554a56111d8f257f029e"
    ],
    "patch_url": "https://github.com/gristlabs/grist-core/commit/10b069005ec8d5f511e6554a56111d8f257f029e.patch",
    "fix_commit_details": {
      "sha": "10b069005ec8d5f511e6554a56111d8f257f029e",
      "commit_date": "2024-12-09T23:56:25Z",
      "author": {
        "login": "georgegevoian",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "(core) Restrict widget/form URL schemes",
        "length": 406,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 171,
        "additions": 144,
        "deletions": 27
      },
      "files": [
        {
          "filename": "app/client/components/WidgetFrame.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 6,
          "patch": "@@ -12,7 +12,7 @@ import {AccessLevel, ICustomWidget, isSatisfied, matchWidget} from 'app/common/C\n import {DisposableWithEvents} from 'app/common/DisposableWithEvents';\n import {BulkColValues, fromTableDataAction, RowRecord} from 'app/common/DocActions';\n import {extractInfoFromColType, reencodeAsAny} from 'app/common/gristTypes';\n-import {getGristConfig} from 'app/common/urlUtils';\n+import {getGristConfig, sanitizeUrl} from 'app/common/urlUtils';\n import {\n   AccessTokenOptions, CursorPos, CustomSectionAPI, FetchSelectedOptions, GristDocAPI, GristView,\n   InteractionOptionsRequest, WidgetAPI, WidgetColumnMap\n@@ -141,7 +141,10 @@ export class WidgetFrame extends DisposableWithEvents {\n     const maybeUrl = Computed.create(this, use => use(this._widget)?.url || this._options.url);\n \n     // Url to widget or empty page with access level and preferences.\n-    this._url = Computed.create(this, use => this._urlWithAccess(use(maybeUrl) || this._getEmptyWidgetPage()));\n+    this._url = Computed.create(\n+      this,\n+      (use) => this._urlWithAccess(use(maybeUrl)) || this._getEmptyWidgetPage()\n+    );\n \n     // Iframe is empty when url is not set.\n     this._isEmpty = Computed.create(this, use => !use(maybeUrl));\n@@ -222,22 +225,24 @@ export class WidgetFrame extends DisposableWithEvents {\n   }\n \n   // Appends access level to query string.\n-  private _urlWithAccess(url: string) {\n-    if (!url) { return url; }\n+  private _urlWithAccess(url: string | null): string | null {\n+    if (!url) {\n+      return url;\n+    }\n \n     let urlObj: URL;\n     try {\n       urlObj = new URL(url);\n     } catch (e) {\n       console.error(e);\n-      return url;\n+      return null;\n     }\n     urlObj.searchParams.append('access', this._options.access);\n     urlObj.searchParams.append('readonly', String(this._options.readonly));\n     // Append user and document preferences to query string.\n     const settingsParams = new URLSearchParams(this._options.preferences);\n     settingsParams.forEach((value, key) => urlObj.searchParams.append(key, value));\n-    return urlObj.href;\n+    return sanitizeUrl(urlObj.href);\n   }\n \n   private _getEmptyWidgetPage(): string {"
        },
        {
          "filename": "app/client/ui/FormPage.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 7,
          "patch": "@@ -8,7 +8,7 @@ import {FormSuccessPage} from 'app/client/ui/FormSuccessPage';\n import {colors} from 'app/client/ui2018/cssVars';\n import {ApiError} from 'app/common/ApiError';\n import {getPageTitleSuffix} from 'app/common/gristUrls';\n-import {getGristConfig} from 'app/common/urlUtils';\n+import {getGristConfig, sanitizeUrl} from 'app/common/urlUtils';\n import {Disposable, dom, makeTestId, Observable, styled, subscribe} from 'grainjs';\n \n const t = makeT('FormPage');\n@@ -90,12 +90,9 @@ export class FormPage extends Disposable {\n \n     const {successURL} = formLayout;\n     if (successURL) {\n-      try {\n-        const url = new URL(successURL);\n-        window.location.href = url.href;\n-        return;\n-      } catch {\n-        // If the URL is invalid, just ignore it.\n+      const url = sanitizeUrl(successURL);\n+      if (url) {\n+        window.location.href = url;\n       }\n     }\n "
        },
        {
          "filename": "app/client/ui/RightPanel.ts",
          "status": "modified",
          "additions": 12,
          "deletions": 3,
          "patch": "@@ -963,11 +963,20 @@ export class RightPanel extends Disposable {\n       ),\n       cssLabel(t(\"Redirection\")),\n       cssRow(\n-        labeledSquareCheckbox(redirection, t('Redirect automatically after submission')),\n+        labeledSquareCheckbox(\n+          redirection,\n+          t(\"Redirect automatically after submission\"),\n+          testId(\"form-redirect\")\n+        )\n       ),\n       cssRow(\n-        cssTextInput(successURL, (val) => successURL.set(val), {placeholder: t('Enter redirect URL')}),\n-        dom.show(redirection),\n+        cssTextInput(\n+          successURL,\n+          (val) => successURL.set(val),\n+          { placeholder: t(\"Enter redirect URL\") },\n+          testId(\"form-redirect-url\")\n+        ),\n+        dom.show(redirection)\n       ),\n     ];\n   }"
        },
        {
          "filename": "app/common/urlUtils.ts",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -79,3 +79,20 @@ export function fetchFromHome(path: string, opts: RequestInit): Promise<Response\n   const baseUrl = addCurrentOrgToPath(getGristConfig().homeUrl!);\n   return window.fetch(`${baseUrl}${path}`, opts);\n }\n+\n+/**\n+ * Returns the provided URL if it has a valid protocol (`http:` or `https:`), or\n+ * `null` otherwise.\n+ */\n+export function sanitizeUrl(url: string): string | null {\n+  try {\n+    const parsedUrl = new URL(url);\n+    if (![\"http:\", \"https:\"].includes(parsedUrl.protocol)) {\n+      return null;\n+    }\n+\n+    return parsedUrl.href;\n+  } catch (e) {\n+    return null;\n+  }\n+}"
        },
        {
          "filename": "test/common/urlUtils.ts",
          "status": "added",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -0,0 +1,24 @@\n+import { sanitizeUrl } from \"app/common/urlUtils\";\n+import { assert } from \"chai\";\n+\n+describe(\"urlUtils\", function () {\n+  describe(\"sanitizeUrl\", function () {\n+    it(\"returns the provided URL if the scheme is http[s]\", function () {\n+      assert.equal(sanitizeUrl(\"https://example.com\"), \"https://example.com/\");\n+      assert.equal(sanitizeUrl(\"http://example.com\"), \"http://example.com/\");\n+      assert.equal(sanitizeUrl(\"https://example.com\"), \"https://example.com/\");\n+    });\n+\n+    it(\"returns null if the provided URL is invalid\", function () {\n+      assert.isNull(sanitizeUrl(\"www.example.com\"));\n+      assert.isNull(sanitizeUrl(\"\"));\n+      assert.isNull(sanitizeUrl(\"invalid\"));\n+    });\n+\n+    it(\"returns null if the provided URL's scheme is not http[s]\", function () {\n+      assert.isNull(sanitizeUrl(\"mailto:support@getgrist.com.com\"));\n+      assert.isNull(sanitizeUrl(\"ftp://getgrist.com/path\"));\n+      assert.isNull(sanitizeUrl(\"javascript:alert()\"));\n+    });\n+  });\n+});"
        },
        {
          "filename": "test/nbrowser/CustomWidgetsConfig.ts",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -17,6 +17,7 @@ const READ_WIDGET = 'Read';\n const FULL_WIDGET = 'Full';\n const COLUMN_WIDGET = 'COLUMN_WIDGET';\n const REQUIRED_WIDGET = 'REQUIRED_WIDGET';\n+const INVALID_URL_WIDGET = 'INVALID_URL_WIDGET';\n // Custom URL label.\n const CUSTOM_URL = 'Custom URL';\n // Holds url for sample widget server.\n@@ -178,6 +179,11 @@ describe('CustomWidgetsConfig', function () {\n             url: createConfigUrl({requiredAccess: AccessLevel.read_table, columns: [{name:'Column', optional: false}]}),\n             widgetId: 'tester6',\n           },\n+          {\n+            name: INVALID_URL_WIDGET,\n+            url: 'ftp://getgrist.com/path',\n+            widgetId: 'tester7'\n+          }\n         ]);\n       });\n       addStatic(app);\n@@ -1077,6 +1083,12 @@ describe('CustomWidgetsConfig', function () {\n     await mainSession.loadDoc(`/doc/${docId}`);\n     await refresh();\n   });\n+\n+  it('should display the empty widget page if the URL is invalid', async function () {\n+    await gu.setCustomWidget(INVALID_URL_WIDGET);\n+    await widget.waitForFrame();\n+    assert.match(await widget.url(), /custom-widget\\.html$/);\n+  });\n });\n \n // Poor man widget rpc. Class that invokes various parts in the tester widget.\n@@ -1095,6 +1107,9 @@ const widget = {\n       await driver.executeScript('grist.testWaitForPendingRequests();');\n     });\n   },\n+  async url() {\n+    return await driver.find('iframe').getAttribute('src');\n+  },\n   async content() {\n     return await this._read('body');\n   },"
        },
        {
          "filename": "test/nbrowser/FormView.ts",
          "status": "modified",
          "additions": 61,
          "deletions": 11,
          "patch": "@@ -20,16 +20,41 @@ describe('FormView', function() {\n \n   afterEach(() => gu.checkForErrors());\n \n-  async function createFormWith(type: string, more = false) {\n+  async function createFormWith(\n+    type: string,\n+    options: {\n+      redirectUrl?: string;\n+    } = {}\n+  ) {\n+    const {redirectUrl} = options;\n+\n     await gu.addNewSection('Form', 'Table1');\n \n+    if (redirectUrl) {\n+      await gu.openWidgetPanel();\n+      await driver.find(\".test-config-submission\").click();\n+      await driver.find(\".test-form-redirect\").click();\n+      await gu.waitForServer();\n+      await driver.find(\".test-form-redirect-url\").click();\n+      await gu.sendKeys(redirectUrl, Key.ENTER);\n+      await gu.waitForServer();\n+    }\n+\n     // Make sure column D is not there.\n     assert.isUndefined(await api.getTable(docId, 'Table1').then(t => t.D));\n \n     // Add a text question\n     await plusButton().click();\n-    if (more) {\n-      await clickMenu('More');\n+    if (\n+      [\n+        \"Integer\",\n+        \"Toggle\",\n+        \"Choice List\",\n+        \"Reference\",\n+        \"Reference List\",\n+      ].includes(type)\n+    ) {\n+      await clickMenu(\"More\");\n     }\n     await clickMenu(type);\n     await gu.waitForServer();\n@@ -366,7 +391,7 @@ describe('FormView', function() {\n     });\n \n     it('can submit a form with text Integer field', async function() {\n-      const formUrl = await createFormWith('Integer', true);\n+      const formUrl = await createFormWith('Integer');\n       // We are in a new window.\n       await gu.onNewTab(async () => {\n         await driver.get(formUrl);\n@@ -388,7 +413,7 @@ describe('FormView', function() {\n     });\n \n     it('can submit a form with spinner Integer field', async function() {\n-      const formUrl = await createFormWith('Integer', true);\n+      const formUrl = await createFormWith('Integer');\n       await driver.findContent('.test-numeric-form-field-format .test-select-button', /Spinner/).click();\n       await gu.waitForServer();\n       // We are in a new window.\n@@ -419,7 +444,7 @@ describe('FormView', function() {\n     });\n \n     it('can submit a form with switch Toggle field', async function() {\n-      const formUrl = await createFormWith('Toggle', true);\n+      const formUrl = await createFormWith('Toggle');\n       // We are in a new window.\n       await gu.onNewTab(async () => {\n         await driver.get(formUrl);\n@@ -449,7 +474,7 @@ describe('FormView', function() {\n     });\n \n     it('can submit a form with checkbox Toggle field', async function() {\n-      const formUrl = await createFormWith('Toggle', true);\n+      const formUrl = await createFormWith('Toggle');\n       await driver.findContent('.test-toggle-form-field-format .test-select-button', /Checkbox/).click();\n       await gu.waitForServer();\n       // We are in a new window.\n@@ -481,7 +506,7 @@ describe('FormView', function() {\n     });\n \n     it('can submit a form with ChoiceList field', async function() {\n-      const formUrl = await createFormWith('Choice List', true);\n+      const formUrl = await createFormWith('Choice List');\n       // Add some options.\n       await gu.openColumnPanel();\n \n@@ -511,7 +536,7 @@ describe('FormView', function() {\n     });\n \n     it('can submit a form with select Ref field', async function() {\n-      const formUrl = await createFormWith('Reference', true);\n+      const formUrl = await createFormWith('Reference');\n       // Add some options.\n       await gu.openColumnPanel();\n       await gu.setRefShowColumn('A');\n@@ -564,7 +589,7 @@ describe('FormView', function() {\n     });\n \n     it('can submit a form with radio Ref field', async function() {\n-      const formUrl = await createFormWith('Reference', true);\n+      const formUrl = await createFormWith('Reference');\n       await driver.findContent('.test-form-field-format .test-select-button', /Radio/).click();\n       await gu.waitForServer();\n       await gu.setRefShowColumn('A');\n@@ -603,7 +628,7 @@ describe('FormView', function() {\n     });\n \n     it('can submit a form with RefList field', async function() {\n-      const formUrl = await createFormWith('Reference List', true);\n+      const formUrl = await createFormWith('Reference List');\n       // Add some options.\n       await gu.setRefShowColumn('A');\n       // Add 3 records to this table (it is now empty).\n@@ -640,6 +665,31 @@ describe('FormView', function() {\n       await removeForm();\n     });\n \n+    it('redirects to valid URLs on submission', async function() {\n+      const url = await createFormWith('Text', {\n+        redirectUrl: \"https://example.com\",\n+      });\n+      await gu.onNewTab(async () => {\n+        await driver.get(url);\n+        await driver.findWait('input[type=\"submit\"]', 2000).click();\n+        await gu.waitForUrl(/example\\.com/);\n+      });\n+      await removeForm();\n+    });\n+\n+    it('does not redirect to invalid URLs on submission', async function() {\n+      const url = await createFormWith('Text', {\n+        redirectUrl: \"javascript:alert()\",\n+      });\n+      await gu.onNewTab(async () => {\n+        await driver.get(url);\n+        await driver.findWait('input[type=\"submit\"]', 2000).click();\n+        await waitForConfirm();\n+        assert.isFalse(await gu.isAlertShown());\n+      });\n+      await removeForm();\n+    });\n+\n     it('excludes formula fields from forms', async function() {\n       const formUrl = await createFormWith('Text');\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bf1585a987fa527898c110f442694db75fbd765d",
            "date": "2025-01-14T00:49:02Z",
            "author_login": "berhalak"
          },
          {
            "sha": "d03d87ea02af1b66eb5e8feb9d11019b3d4b9003",
            "date": "2025-01-13T17:37:38Z",
            "author_login": "jordigh"
          },
          {
            "sha": "5d4a914e6d56e408cd0cacc42ae04bbc305bea59",
            "date": "2025-01-13T14:21:16Z",
            "author_login": "paulfitz"
          },
          {
            "sha": "7ea10ded0b6c0b141adac146da09fb7d7187fd09",
            "date": "2025-01-09T00:17:52Z",
            "author_login": "jordigh"
          },
          {
            "sha": "2c0376a72e1cba71a915f9562734d4c282a9153a",
            "date": "2025-01-09T09:47:32Z",
            "author_login": "berhalak"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-79",
    "description": "grist-core is a spreadsheet hosting server. A user visiting a malicious document or submitting a malicious form could have their account compromised, because it was possible to use the `javascript:` scheme with custom widget URLs and form redirect URLs. This issue has been patched in version 1.3.1. Users are advised to upgrade. Users unable to upgrade should avoid visiting documents or forms prepared by people they do not trust.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-12-20T21:15:10.483",
    "last_modified": "2024-12-20T21:15:10.483",
    "fix_date": "2024-12-09T23:56:25Z"
  },
  "references": [
    {
      "url": "https://github.com/gristlabs/grist-core/commit/10b069005ec8d5f511e6554a56111d8f257f029e",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/gristlabs/grist-core/security/advisories/GHSA-cq5q-cqr7-vmf6",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.900524",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "grist-core",
    "owner": "gristlabs",
    "created_at": "2020-05-22T06:16:02Z",
    "updated_at": "2025-01-14T15:54:19Z",
    "pushed_at": "2025-01-14T06:31:17Z",
    "size": 32790,
    "stars": 7502,
    "forks": 341,
    "open_issues": 461,
    "watchers": 7502,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "TypeScript": 9719662,
      "Python": 1741433,
      "JavaScript": 1069390,
      "CSS": 146584,
      "Shell": 17346,
      "HTML": 9284,
      "Dockerfile": 8424,
      "Makefile": 1019
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:19:11.406908"
  }
}