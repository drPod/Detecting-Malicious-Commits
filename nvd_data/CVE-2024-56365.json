{
  "cve_id": "CVE-2024-56365",
  "github_data": {
    "repository": "PHPOffice/PhpSpreadsheet",
    "fix_commit": "700a80346be269af668914172bc6f4521982d0b4",
    "related_commits": [
      "700a80346be269af668914172bc6f4521982d0b4"
    ],
    "patch_url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4.patch",
    "fix_commit_details": {
      "sha": "700a80346be269af668914172bc6f4521982d0b4",
      "commit_date": "2024-12-26T03:11:31Z",
      "author": {
        "login": "oleibman",
        "type": "User",
        "stats": {
          "total_commits": 894,
          "average_weekly_commits": 1.1888297872340425,
          "total_additions": 141892,
          "total_deletions": 89208,
          "weeks_active": 217
        }
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 425,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 96,
        "additions": 63,
        "deletions": 33
      },
      "files": [
        {
          "filename": "samples/Engineering/Convert-Online.php",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -78,14 +78,16 @@\n     $quantity = $_POST['quantity'];\n     $fromUnit = $_POST['fromUnit'];\n     $toUnit = $_POST['toUnit'];\n-    if (isset($units[$_POST['category']][$fromUnit], $units[$_POST['category']][$toUnit])) {\n+    if (!is_numeric($quantity)) {\n+        $helper->log('Quantity is not numeric');\n+    } elseif (isset($units[$_POST['category']][$fromUnit], $units[$_POST['category']][$toUnit])) {\n         /** @var float|string */\n         $result = ConvertUOM::CONVERT($quantity, $fromUnit, $toUnit);\n \n-        echo \"{$quantity} {$units[$_POST['category']][$fromUnit]} is {$result} {$units[$_POST['category']][$toUnit]}\", PHP_EOL;\n+        $helper->log(\"{$quantity} {$units[$_POST['category']][$fromUnit]} is {$result} {$units[$_POST['category']][$toUnit]}\");\n     } else {\n-        echo 'Please enter quantity and select From Unit and To Unit', PHP_EOL;\n+        $helper->log('Please enter quantity and select From Unit and To Unit');\n     }\n } else {\n-    echo 'Please enter quantity and select From Unit and To Unit', PHP_EOL;\n+    $helper->log('Please enter quantity and select From Unit and To Unit');\n }"
        },
        {
          "filename": "samples/Wizards/NumberFormat/Accounting.php",
          "status": "modified",
          "additions": 7,
          "deletions": 12,
          "patch": "@@ -64,13 +64,6 @@\n                 <input name=\"position\" type=\"radio\" value=\"0\" <?php echo (isset($_POST['position']) && $_POST['position'] === '0') ? 'checked' : ''; ?>>Trailing\n             </div>\n         </div>\n-        <div class=\"mb-3 row\">\n-            <label for=\"spacing\" class=\"col-sm-2 col-form-label\">Currency Spacing</label>\n-            <div class=\"col-sm-10\">\n-                <input name=\"spacing\" type=\"radio\" value=\"1\" <?php echo (isset($_POST['spacing']) && $_POST['spacing'] === '1') ? 'checked' : ''; ?>>Yes\n-                <input name=\"spacing\" type=\"radio\" value=\"0\" <?php echo ((isset($_POST['spacing']) === false) || (isset($_POST['spacing']) && $_POST['spacing'] === '0')) ? 'checked' : ''; ?>>No\n-            </div>\n-        </div>\n         <div class=\"mb-3 row\">\n             <div class=\"col-sm-10\">\n                 <input  class=\"btn btn-primary\" name=\"submit\" type=\"submit\" value=\"Display Mask\"><br />\n@@ -85,21 +78,23 @@\n         $helper->log('The Sample Number Value must be numeric');\n     } elseif (!is_numeric($_POST['decimals']) || str_contains((string) $_POST['decimals'], '.') || (int) $_POST['decimals'] < 0) {\n         $helper->log('The Decimal Places value must be positive integer');\n+    } elseif (!in_array($_POST['currency'], array_keys($currencies), true)) {\n+        $helper->log('Unrecognized currency symbol');\n     } else {\n         try {\n-            $wizard = new Wizard\\Accounting($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position'], (bool) $_POST['spacing']);\n+            $wizard = new Wizard\\Accounting($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position']);\n             $mask = $wizard->format();\n             $example = (string) NumberFormat::toFormattedString((float) $_POST['number'], $mask);\n             $helper->log('<hr /><b>Code:</b><br />');\n             $helper->log('use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard;');\n             $helper->log(\n-                \"\\$mask = Wizard\\\\Accounting('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"\n+                \"\\$wizard = new Wizard\\\\Accounting('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"\n                 . (isset($_POST['thousands']) ? 'WITH_THOUSANDS_SEPARATOR' : 'WITHOUT_THOUSANDS_SEPARATOR')\n                 . ', Wizard\\Currency::' . (((bool) $_POST['position']) ? 'LEADING_SYMBOL' : 'TRAILING_SYMBOL')\n-                . ', Wizard\\Currency::' . (((bool) $_POST['spacing']) ? 'SYMBOL_WITH_SPACING' : 'SYMBOL_WITHOUT_SPACING')\n-                . ');<br />'\n+                . ');'\n             );\n-            $helper->log('echo (string) $mask;');\n+            $helper->log('$mask = $wizard->format();');\n+            $helper->log('<br />echo (string) $mask;');\n             $helper->log('<hr /><b>Mask:</b><br />');\n             $helper->log($mask . '<br />');\n             $helper->log('<br /><b>Example:</b><br />');"
        },
        {
          "filename": "samples/Wizards/NumberFormat/Currency.php",
          "status": "modified",
          "additions": 32,
          "deletions": 9,
          "patch": "@@ -5,6 +5,8 @@\n use PhpOffice\\PhpSpreadsheet\\Settings;\n use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat;\n use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard;\n+use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\CurrencyNegative;\n+use PhpOffice\\PhpSpreadsheet\\Writer\\Html as HtmlWriter;\n \n require __DIR__ . '/../Header.php';\n \n@@ -15,6 +17,19 @@\n     return;\n }\n \n+$negatives = [\n+    CurrencyNegative::minus,\n+    CurrencyNegative::redMinus,\n+    CurrencyNegative::parentheses,\n+    CurrencyNegative::redParentheses,\n+];\n+$negativesString = [\n+    'CurrencyNegative::minus',\n+    'CurrencyNegative::redMinus',\n+    'CurrencyNegative::parentheses',\n+    'CurrencyNegative::redParentheses',\n+];\n+\n $currencies = [\n     '$' => 'US Dollars ($)',\n     '\u20ac' => 'Euro (\u20ac)',\n@@ -65,10 +80,12 @@\n             </div>\n         </div>\n         <div class=\"mb-3 row\">\n-            <label for=\"spacing\" class=\"col-sm-2 col-form-label\">Currency Spacing</label>\n+            <label for=\"negative\" class=\"col-sm-2 col-form-label\">Negative Numbers</label>\n             <div class=\"col-sm-10\">\n-                <input name=\"spacing\" type=\"radio\" value=\"1\" <?php echo (isset($_POST['spacing']) && $_POST['spacing'] === '1') ? 'checked' : ''; ?>>Yes\n-                <input name=\"spacing\" type=\"radio\" value=\"0\" <?php echo ((isset($_POST['spacing']) === false) || (isset($_POST['spacing']) && $_POST['spacing'] === '0')) ? 'checked' : ''; ?>>No\n+                <input name=\"negative\" type=\"radio\" value=\"0\"  <?php echo (!isset($_POST['negative']) || $_POST['negative'] === '0') ? 'checked' : ''; ?>>Minus Sign\n+                <input name=\"negative\" type=\"radio\" value=\"1\"  <?php echo (isset($_POST['negative']) && $_POST['negative'] === '1') ? 'checked' : ''; ?>>Red Minus Sign\n+                <input name=\"negative\" type=\"radio\" value=\"2\"  <?php echo (isset($_POST['negative']) && $_POST['negative'] === '2') ? 'checked' : ''; ?>>Parentheses\n+                <input name=\"negative\" type=\"radio\" value=\"3\"  <?php echo (isset($_POST['negative']) && $_POST['negative'] === '3') ? 'checked' : ''; ?>>Red Parentheses\n             </div>\n         </div>\n         <div class=\"mb-3 row\">\n@@ -85,21 +102,27 @@\n         $helper->log('The Sample Number Value must be numeric');\n     } elseif (!is_numeric($_POST['decimals']) || str_contains((string) $_POST['decimals'], '.') || (int) $_POST['decimals'] < 0) {\n         $helper->log('The Decimal Places value must be positive integer');\n+    } elseif (!in_array($_POST['currency'], array_keys($currencies), true)) {\n+        $helper->log('Unrecognized currency symbol');\n     } else {\n         try {\n-            $wizard = new Wizard\\Currency($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position'], (bool) $_POST['spacing']);\n+            $negative = $negatives[$_POST['negative']] ?? CurrencyNegative::minus;\n+            $wizard = new Wizard\\Currency($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position']);\n+            $wizard->setNegative($negative);\n             $mask = $wizard->format();\n-            $example = (string) NumberFormat::toFormattedString((float) $_POST['number'], $mask);\n+            $example = (string) NumberFormat::toFormattedString((float) $_POST['number'], $mask, [HtmlWriter::class, 'formatColorStatic']);\n             $helper->log('<hr /><b>Code:</b><br />');\n             $helper->log('use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard;');\n+            $helper->log('use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\CurrencyNegative;');\n             $helper->log(\n-                \"\\$mask = Wizard\\\\Currency('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"\n+                \"\\$wizard = new  Wizard\\\\Currency('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"\n                 . (isset($_POST['thousands']) ? 'WITH_THOUSANDS_SEPARATOR' : 'WITHOUT_THOUSANDS_SEPARATOR')\n                 . ', Wizard\\Currency::' . (((bool) $_POST['position']) ? 'LEADING_SYMBOL' : 'TRAILING_SYMBOL')\n-                . ', Wizard\\Currency::' . (((bool) $_POST['spacing']) ? 'SYMBOL_WITH_SPACING' : 'SYMBOL_WITHOUT_SPACING')\n-                . ');<br />'\n+                . ');'\n             );\n-            $helper->log('echo (string) $mask;');\n+            $helper->log('$wizard->setNegative(' . $negativesString[$_POST['negative']] . ');');\n+            $helper->log('$mask = $wizard->format();');\n+            $helper->log('<br />echo (string) $mask;');\n             $helper->log('<hr /><b>Mask:</b><br />');\n             $helper->log($mask . '<br />');\n             $helper->log('<br /><b>Example:</b><br />');"
        },
        {
          "filename": "src/PhpSpreadsheet/Helper/Downloader.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -30,18 +30,18 @@ class Downloader\n     public function __construct(string $folder, string $filename, ?string $filetype = null)\n     {\n         if ((is_dir($folder) === false) || (is_readable($folder) === false)) {\n-            throw new Exception(\"Folder {$folder} is not accessable\");\n+            throw new Exception('Folder is not accessible');\n         }\n         $filepath = \"{$folder}/{$filename}\";\n         $this->filepath = (string) realpath($filepath);\n         $this->filename = basename($filepath);\n         if ((file_exists($this->filepath) === false) || (is_readable($this->filepath) === false)) {\n-            throw new Exception(\"{$this->filename} not found, or cannot be read\");\n+            throw new Exception('File not found, or cannot be read');\n         }\n \n         $filetype ??= pathinfo($filename, PATHINFO_EXTENSION);\n         if (array_key_exists(strtolower($filetype), self::CONTENT_TYPES) === false) {\n-            throw new Exception(\"Invalid filetype: {$filetype} cannot be downloaded\");\n+            throw new Exception('Invalid filetype: file cannot be downloaded');\n         }\n         $this->filetype = strtolower($filetype);\n     }"
        },
        {
          "filename": "src/PhpSpreadsheet/Style/NumberFormat/Formatter.php",
          "status": "modified",
          "additions": 4,
          "deletions": 5,
          "patch": "@@ -112,11 +112,11 @@ private static function splitFormatForSectionSelection(array $sections, mixed $v\n      * @param null|array|bool|float|int|RichText|string $value Value to format\n      * @param string $format Format code: see = self::FORMAT_* for predefined values;\n      *                          or can be any valid MS Excel custom format string\n-     * @param ?array $callBack Callback function for additional formatting of string\n+     * @param null|array|callable $callBack Callback function for additional formatting of string\n      *\n      * @return string Formatted string\n      */\n-    public static function toFormattedString($value, string $format, ?array $callBack = null): string\n+    public static function toFormattedString($value, string $format, null|array|callable $callBack = null): string\n     {\n         while (is_array($value)) {\n             $value = array_shift($value);\n@@ -200,9 +200,8 @@ public static function toFormattedString($value, string $format, ?array $callBac\n         }\n \n         // Additional formatting provided by callback function\n-        if ($callBack !== null) {\n-            [$writerInstance, $function] = $callBack;\n-            $value = $writerInstance->$function($value, $colors);\n+        if (is_callable($callBack)) {\n+            $value = $callBack($value, $colors);\n         }\n \n         return str_replace(chr(0x00), '.', $value);"
        },
        {
          "filename": "src/PhpSpreadsheet/Writer/Html.php",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -1720,6 +1720,17 @@ public function setUseInlineCss(bool $useInlineCss): static\n      * @param string $format Format code\n      */\n     public function formatColor(string $value, string $format): string\n+    {\n+        return self::formatColorStatic($value, $format);\n+    }\n+\n+    /**\n+     * Add color to formatted string as inline style.\n+     *\n+     * @param string $value Plain formatted value without color\n+     * @param string $format Format code\n+     */\n+    public static function formatColorStatic(string $value, string $format): string\n     {\n         // Color information, e.g. [Red] is always at the beginning\n         $color = null; // initialize"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "949c799c3538f3158bcf6c5f4d8a403027be0fbd",
            "date": "2025-01-12T03:48:58Z",
            "author_login": "oleibman"
          },
          {
            "sha": "4088381ccfaf241d7d42c333de0dc8c98e338743",
            "date": "2025-01-12T02:00:07Z",
            "author_login": "oleibman"
          },
          {
            "sha": "51b1d1c3a2d2aa71f18cec8e653ad812a4b13621",
            "date": "2025-01-09T20:39:46Z",
            "author_login": "oleibman"
          },
          {
            "sha": "bfcfaeea8ed27fa1a495d6752ec0ec640898c3d5",
            "date": "2025-01-08T23:04:47Z",
            "author_login": "oleibman"
          },
          {
            "sha": "f25502d704c25723793c4657540c81bbaea59918",
            "date": "2025-01-08T22:53:51Z",
            "author_login": "oleibman"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "PhpSpreadsheet is a PHP library for reading and writing spreadsheet files. Versions prior to 3.7.0, 2.3.5, 2.1.6, and 1.29.7 are vulnerable to unauthorized reflected cross-site scripting in the constructor of the `Downloader` class. Using the `/vendor/phpoffice/phpspreadsheet/samples/download.php` script, an attacker can perform a cross-site scripting attack. Versions  3.7.0, 2.3.5, 2.1.6, and 1.29.7 contain a patch for the issue.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2025-01-03T17:15:08.407",
    "last_modified": "2025-01-03T19:15:12.340",
    "fix_date": "2024-12-26T03:11:31Z"
  },
  "references": [
    {
      "url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4#diff-fbb0f53a5c68eeeffaa9ab35552c0b01740396f1a4045af5d2935ec2a62a7816",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jmpx-686v-c3wx",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jmpx-686v-c3wx",
      "source": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.950707",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "PhpSpreadsheet",
    "owner": "PHPOffice",
    "created_at": "2016-06-19T16:58:48Z",
    "updated_at": "2025-01-14T12:22:30Z",
    "pushed_at": "2025-01-12T04:07:04Z",
    "size": 69781,
    "stars": 13446,
    "forks": 3494,
    "open_issues": 186,
    "watchers": 13446,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "PHP": 8261868,
      "HTML": 7409,
      "Shell": 885
    },
    "commit_activity": {
      "total_commits_last_year": 423,
      "avg_commits_per_week": 8.134615384615385,
      "days_active_last_year": 191
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:13:00.605279"
  }
}