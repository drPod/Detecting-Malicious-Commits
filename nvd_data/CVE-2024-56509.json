{
  "cve_id": "CVE-2024-56509",
  "github_data": {
    "repository": "dgtlmoon/changedetection.io",
    "fix_commit": "f7e9846c9b40a229813d19cdb66bf60fbe5e6a2a",
    "related_commits": [
      "f7e9846c9b40a229813d19cdb66bf60fbe5e6a2a"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f7e9846c9b40a229813d19cdb66bf60fbe5e6a2a",
      "commit_date": "2024-12-27T08:25:40Z",
      "author": {
        "login": "dgtlmoon",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "CVE-2024-56509 - Stricter file protocol checking pre-check ( Improper Input Validation Leading to LFR/Path Traversal when fetching file:.. )",
        "length": 140,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 51,
        "additions": 16,
        "deletions": 35
      },
      "files": [
        {
          "filename": "changedetectionio/processors/__init__.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -33,8 +33,8 @@ def call_browser(self, preferred_proxy_id=None):\n \n         url = self.watch.link\n \n-        # Protect against file://, file:/ access, check the real \"link\" without any meta \"source:\" etc prepended.\n-        if re.search(r'^file:/', url.strip(), re.IGNORECASE):\n+        # Protect against file:, file:/, file:// access, check the real \"link\" without any meta \"source:\" etc prepended.\n+        if re.search(r'^file:', url.strip(), re.IGNORECASE):\n             if not strtobool(os.getenv('ALLOW_FILE_URI', 'false')):\n                 raise Exception(\n                     \"file:// type access is denied for security reasons.\""
        },
        {
          "filename": "changedetectionio/tests/test_security.py",
          "status": "modified",
          "additions": 14,
          "deletions": 33,
          "patch": "@@ -1,9 +1,7 @@\n import os\n \n from flask import url_for\n-from .util import set_original_response, set_modified_response, live_server_setup, wait_for_all_checks\n-import time\n-\n+from .util import live_server_setup, wait_for_all_checks\n from .. import strtobool\n \n \n@@ -61,54 +59,37 @@ def test_bad_access(client, live_server, measure_memory_usage):\n     assert b'Watch protocol is not permitted by SAFE_PROTOCOL_REGEX' in res.data\n \n \n-def test_file_slashslash_access(client, live_server, measure_memory_usage):\n-    #live_server_setup(live_server)\n-\n-    test_file_path = os.path.abspath(__file__)\n+def _runner_test_various_file_slash(client, file_uri):\n \n-    # file:// is permitted by default, but it will be caught by ALLOW_FILE_URI\n     client.post(\n         url_for(\"form_quick_watch_add\"),\n-        data={\"url\": f\"file://{test_file_path}\", \"tags\": ''},\n+        data={\"url\": file_uri, \"tags\": ''},\n         follow_redirects=True\n     )\n     wait_for_all_checks(client)\n     res = client.get(url_for(\"index\"))\n \n     # If it is enabled at test time\n     if strtobool(os.getenv('ALLOW_FILE_URI', 'false')):\n-        res = client.get(\n-            url_for(\"preview_page\", uuid=\"first\"),\n-            follow_redirects=True\n-        )\n-\n-        assert b\"test_file_slashslash_access\" in res.data\n+        # So it should permit it, but it should fall back to the 'requests' library giving an error\n+        # (but means it gets passed to playwright etc)\n+        assert b\"URLs with hostname components are not permitted\" in res.data\n+        assert b\"_runner_test_various_file_slash\" in res.data # Can read this file OK\n     else:\n         # Default should be here\n         assert b'file:// type access is denied for security reasons.' in res.data\n \n+    res = client.get(url_for(\"form_delete\", uuid=\"all\"), follow_redirects=True)\n+    assert b'Deleted' in res.data\n+\n def test_file_slash_access(client, live_server, measure_memory_usage):\n     #live_server_setup(live_server)\n+    # file: is permitted by default, but it will be caught by ALLOW_FILE_URI\n \n     test_file_path = os.path.abspath(__file__)\n-\n-    # file:// is permitted by default, but it will be caught by ALLOW_FILE_URI\n-    client.post(\n-        url_for(\"form_quick_watch_add\"),\n-        data={\"url\": f\"file:/{test_file_path}\", \"tags\": ''},\n-        follow_redirects=True\n-    )\n-    wait_for_all_checks(client)\n-    res = client.get(url_for(\"index\"))\n-\n-    # If it is enabled at test time\n-    if strtobool(os.getenv('ALLOW_FILE_URI', 'false')):\n-        # So it should permit it, but it should fall back to the 'requests' library giving an error\n-        # (but means it gets passed to playwright etc)\n-        assert b\"URLs with hostname components are not permitted\" in res.data\n-    else:\n-        # Default should be here\n-        assert b'file:// type access is denied for security reasons.' in res.data\n+    _runner_test_various_file_slash(client, file_uri=f\"file://{test_file_path}\")\n+    _runner_test_various_file_slash(client, file_uri=f\"file:/{test_file_path}\")\n+    _runner_test_various_file_slash(client, file_uri=f\"file:{test_file_path}\") # CVE-2024-56509\n \n def test_xss(client, live_server, measure_memory_usage):\n     #live_server_setup(live_server)"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1c61b5a6239c9e4632492b7950db282e1466f933",
            "date": "2025-01-25T23:08:09Z",
            "author_login": "iafuad"
          },
          {
            "sha": "e799a1cdcbf1cb1feaa12838b7a8a3a85fee4f62",
            "date": "2025-01-21T12:40:01Z",
            "author_login": "dgtlmoon"
          },
          {
            "sha": "938065db6f8a735e562e2f62a7fb5300b734efd8",
            "date": "2025-01-20T15:10:54Z",
            "author_login": "dgtlmoon"
          },
          {
            "sha": "4f2d38ff49644d79d05c3661256c68ad3bcc5e63",
            "date": "2025-01-18T22:20:58Z",
            "author_login": "dgtlmoon"
          },
          {
            "sha": "8960f401b71d02519267819cfc617b8cd7305d4c",
            "date": "2025-01-13T12:13:18Z",
            "author_login": "dgtlmoon"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "changedetection.io is a free open source web page change detection, website watcher, restock monitor and notification service. Improper input validation in the application can allow attackers to perform local file read (LFR) or path traversal attacks. These vulnerabilities occur when user input is used to construct file paths without adequate sanitization or validation. For example, using file:../../../etc/passwd or file: ///etc/passwd can bypass weak validations and allow unauthorized access to sensitive files. Even though this has been addressed in previous patch, it is still insufficient. This vulnerability is fixed in 0.48.05.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-12-27T16:15:25.333",
    "last_modified": "2024-12-27T21:15:08.483",
    "fix_date": "2024-12-27T08:25:40Z"
  },
  "references": [
    {
      "url": "https://github.com/dgtlmoon/changedetection.io/commit/f7e9846c9b40a229813d19cdb66bf60fbe5e6a2a",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-j5vv-6wjg-cfr8",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-j5vv-6wjg-cfr8",
      "source": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.920469",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "changedetection.io",
    "owner": "dgtlmoon",
    "created_at": "2021-01-27T16:03:30Z",
    "updated_at": "2025-01-26T07:42:58Z",
    "pushed_at": "2025-01-25T23:08:10Z",
    "size": 8798,
    "stars": 21320,
    "forks": 1156,
    "open_issues": 261,
    "watchers": 21320,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 830650,
      "HTML": 137985,
      "JavaScript": 96137,
      "CSS": 49698,
      "SCSS": 41847,
      "Shell": 8373,
      "Dockerfile": 2677
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:02:58.429682"
  }
}