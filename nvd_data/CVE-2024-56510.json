{
  "cve_id": "CVE-2024-56510",
  "github_data": {
    "repository": "marp-team/marp-core",
    "fix_commit": "61a1def244d1b6faa8e2c0be97ec0b68cab3ab49",
    "related_commits": [
      "61a1def244d1b6faa8e2c0be97ec0b68cab3ab49"
    ],
    "patch_url": "https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49.patch",
    "fix_commit_details": {
      "sha": "61a1def244d1b6faa8e2c0be97ec0b68cab3ab49",
      "commit_date": "2024-12-24T14:48:41Z",
      "author": {
        "login": "yhatt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge commit from fork",
        "length": 76,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 724,
        "additions": 424,
        "deletions": 300
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -2,6 +2,10 @@\n \n ## [Unreleased]\n \n+### Security\n+\n+- Improper neutralization of HTML sanitization by comments may lead to XSS (by [@Ry0taK](https://github.com/Ry0taK))\n+\n ### Changed\n \n - Upgrade Marpit to [v3.1.2](https://github.com/marp-team/marpit/releases/v3.1.2) ([#390](https://github.com/marp-team/marp-core/pull/390))"
        },
        {
          "filename": "src/html/allowlist.ts",
          "status": "modified",
          "additions": 201,
          "deletions": 198,
          "patch": "@@ -42,201 +42,204 @@ const srcSetSanitizer = (value: string): string => {\n   return value\n }\n \n-export const defaultHTMLAllowList = {\n-  a: {\n-    ...globalAttrs,\n-    href: webUrlSanitizer,\n-    name: true, // deprecated attribute, but still useful in Marp for making stable anchor link\n-    rel: true,\n-    target: true,\n-  },\n-  abbr: globalAttrs,\n-  address: globalAttrs,\n-  article: globalAttrs,\n-  aside: globalAttrs,\n-  audio: {\n-    ...globalAttrs,\n-    autoplay: true,\n-    controls: true,\n-    loop: true,\n-    muted: true,\n-    preload: true,\n-    src: webUrlSanitizer,\n-  },\n-  b: globalAttrs,\n-  bdi: globalAttrs,\n-  bdo: globalAttrs,\n-  big: globalAttrs,\n-  blockquote: {\n-    ...globalAttrs,\n-    cite: webUrlSanitizer,\n-  },\n-  br: globalAttrs,\n-  caption: globalAttrs,\n-  center: globalAttrs, // deprecated\n-  cite: globalAttrs,\n-  code: globalAttrs,\n-  col: {\n-    ...globalAttrs,\n-    align: true,\n-    valign: true,\n-    span: true,\n-    width: true,\n-  },\n-  colgroup: {\n-    ...globalAttrs,\n-    align: true,\n-    valign: true,\n-    span: true,\n-    width: true,\n-  },\n-  dd: globalAttrs,\n-  del: {\n-    ...globalAttrs,\n-    cite: webUrlSanitizer,\n-    datetime: true,\n-  },\n-  details: {\n-    ...globalAttrs,\n-    open: true,\n-  },\n-  div: globalAttrs,\n-  dl: globalAttrs,\n-  dt: globalAttrs,\n-  em: globalAttrs,\n-  figcaption: globalAttrs,\n-  figure: globalAttrs,\n-  // footer: globalAttrs, // Inserted by Marpit directives so disallowed to avoid confusion\n-  h1: globalAttrs,\n-  h2: globalAttrs,\n-  h3: globalAttrs,\n-  h4: globalAttrs,\n-  h5: globalAttrs,\n-  h6: globalAttrs,\n-  // header: globalAttrs, // Inserted by Marpit directives so disallowed to avoid confusion\n-  hr: globalAttrs,\n-  i: globalAttrs,\n-  img: {\n-    ...globalAttrs,\n-    align: true, // deprecated attribute, but still useful in Marp for aligning image\n-    alt: true,\n-    decoding: true,\n-    height: true,\n-    loading: true,\n-    src: imageUrlSanitizer,\n-    srcset: srcSetSanitizer,\n-    title: true,\n-    width: true,\n-  },\n-  ins: {\n-    ...globalAttrs,\n-    cite: webUrlSanitizer,\n-    datetime: true,\n-  },\n-  kbd: globalAttrs,\n-  li: {\n-    ...globalAttrs,\n-    type: true,\n-    value: true,\n-  },\n-  mark: globalAttrs,\n-  nav: globalAttrs,\n-  ol: {\n-    ...globalAttrs,\n-    reversed: true,\n-    start: true,\n-    type: true,\n-  },\n-  p: globalAttrs,\n-  picture: globalAttrs,\n-  pre: globalAttrs,\n-  source: {\n-    height: true,\n-    media: true,\n-    sizes: true,\n-    src: imageUrlSanitizer,\n-    srcset: srcSetSanitizer,\n-    type: true,\n-    width: true,\n-  },\n-  q: {\n-    ...globalAttrs,\n-    cite: webUrlSanitizer,\n-  },\n-  rp: globalAttrs,\n-  rt: globalAttrs,\n-  ruby: globalAttrs,\n-  s: globalAttrs,\n-  section: globalAttrs,\n-  small: globalAttrs,\n-  span: globalAttrs,\n-  sub: globalAttrs,\n-  summary: globalAttrs,\n-  sup: globalAttrs,\n-  strong: globalAttrs,\n-  strike: globalAttrs,\n-  table: {\n-    ...globalAttrs,\n-    width: true,\n-    border: true,\n-    align: true,\n-    valign: true,\n-  },\n-  tbody: {\n-    ...globalAttrs,\n-    align: true,\n-    valign: true,\n-  },\n-  td: {\n-    ...globalAttrs,\n-    width: true,\n-    rowspan: true,\n-    colspan: true,\n-    align: true,\n-    valign: true,\n-  },\n-  tfoot: {\n-    ...globalAttrs,\n-    align: true,\n-    valign: true,\n-  },\n-  th: {\n-    ...globalAttrs,\n-    width: true,\n-    rowspan: true,\n-    colspan: true,\n-    align: true,\n-    valign: true,\n-  },\n-  thead: {\n-    ...globalAttrs,\n-    align: true,\n-    valign: true,\n-  },\n-  time: {\n-    ...globalAttrs,\n-    datetime: true,\n-  },\n-  tr: {\n-    ...globalAttrs,\n-    rowspan: true,\n-    align: true,\n-    valign: true,\n-  },\n-  u: globalAttrs,\n-  ul: globalAttrs,\n-  video: {\n-    ...globalAttrs,\n-    autoplay: true,\n-    controls: true,\n-    loop: true,\n-    muted: true,\n-    playsinline: true,\n-    poster: imageUrlSanitizer,\n-    preload: true,\n-    src: webUrlSanitizer,\n-    height: true,\n-    width: true,\n-  },\n-  wbr: globalAttrs,\n-} as const satisfies HTMLAllowList\n+export const defaultHTMLAllowList: HTMLAllowList = Object.assign(\n+  Object.create(null),\n+  {\n+    a: {\n+      ...globalAttrs,\n+      href: webUrlSanitizer,\n+      name: true, // deprecated attribute, but still useful in Marp for making stable anchor link\n+      rel: true,\n+      target: true,\n+    },\n+    abbr: globalAttrs,\n+    address: globalAttrs,\n+    article: globalAttrs,\n+    aside: globalAttrs,\n+    audio: {\n+      ...globalAttrs,\n+      autoplay: true,\n+      controls: true,\n+      loop: true,\n+      muted: true,\n+      preload: true,\n+      src: webUrlSanitizer,\n+    },\n+    b: globalAttrs,\n+    bdi: globalAttrs,\n+    bdo: globalAttrs,\n+    big: globalAttrs,\n+    blockquote: {\n+      ...globalAttrs,\n+      cite: webUrlSanitizer,\n+    },\n+    br: globalAttrs,\n+    caption: globalAttrs,\n+    center: globalAttrs, // deprecated\n+    cite: globalAttrs,\n+    code: globalAttrs,\n+    col: {\n+      ...globalAttrs,\n+      align: true,\n+      valign: true,\n+      span: true,\n+      width: true,\n+    },\n+    colgroup: {\n+      ...globalAttrs,\n+      align: true,\n+      valign: true,\n+      span: true,\n+      width: true,\n+    },\n+    dd: globalAttrs,\n+    del: {\n+      ...globalAttrs,\n+      cite: webUrlSanitizer,\n+      datetime: true,\n+    },\n+    details: {\n+      ...globalAttrs,\n+      open: true,\n+    },\n+    div: globalAttrs,\n+    dl: globalAttrs,\n+    dt: globalAttrs,\n+    em: globalAttrs,\n+    figcaption: globalAttrs,\n+    figure: globalAttrs,\n+    // footer: globalAttrs, // Inserted by Marpit directives so disallowed to avoid confusion\n+    h1: globalAttrs,\n+    h2: globalAttrs,\n+    h3: globalAttrs,\n+    h4: globalAttrs,\n+    h5: globalAttrs,\n+    h6: globalAttrs,\n+    // header: globalAttrs, // Inserted by Marpit directives so disallowed to avoid confusion\n+    hr: globalAttrs,\n+    i: globalAttrs,\n+    img: {\n+      ...globalAttrs,\n+      align: true, // deprecated attribute, but still useful in Marp for aligning image\n+      alt: true,\n+      decoding: true,\n+      height: true,\n+      loading: true,\n+      src: imageUrlSanitizer,\n+      srcset: srcSetSanitizer,\n+      title: true,\n+      width: true,\n+    },\n+    ins: {\n+      ...globalAttrs,\n+      cite: webUrlSanitizer,\n+      datetime: true,\n+    },\n+    kbd: globalAttrs,\n+    li: {\n+      ...globalAttrs,\n+      type: true,\n+      value: true,\n+    },\n+    mark: globalAttrs,\n+    nav: globalAttrs,\n+    ol: {\n+      ...globalAttrs,\n+      reversed: true,\n+      start: true,\n+      type: true,\n+    },\n+    p: globalAttrs,\n+    picture: globalAttrs,\n+    pre: globalAttrs,\n+    source: {\n+      height: true,\n+      media: true,\n+      sizes: true,\n+      src: imageUrlSanitizer,\n+      srcset: srcSetSanitizer,\n+      type: true,\n+      width: true,\n+    },\n+    q: {\n+      ...globalAttrs,\n+      cite: webUrlSanitizer,\n+    },\n+    rp: globalAttrs,\n+    rt: globalAttrs,\n+    ruby: globalAttrs,\n+    s: globalAttrs,\n+    section: globalAttrs,\n+    small: globalAttrs,\n+    span: globalAttrs,\n+    sub: globalAttrs,\n+    summary: globalAttrs,\n+    sup: globalAttrs,\n+    strong: globalAttrs,\n+    strike: globalAttrs,\n+    table: {\n+      ...globalAttrs,\n+      width: true,\n+      border: true,\n+      align: true,\n+      valign: true,\n+    },\n+    tbody: {\n+      ...globalAttrs,\n+      align: true,\n+      valign: true,\n+    },\n+    td: {\n+      ...globalAttrs,\n+      width: true,\n+      rowspan: true,\n+      colspan: true,\n+      align: true,\n+      valign: true,\n+    },\n+    tfoot: {\n+      ...globalAttrs,\n+      align: true,\n+      valign: true,\n+    },\n+    th: {\n+      ...globalAttrs,\n+      width: true,\n+      rowspan: true,\n+      colspan: true,\n+      align: true,\n+      valign: true,\n+    },\n+    thead: {\n+      ...globalAttrs,\n+      align: true,\n+      valign: true,\n+    },\n+    time: {\n+      ...globalAttrs,\n+      datetime: true,\n+    },\n+    tr: {\n+      ...globalAttrs,\n+      rowspan: true,\n+      align: true,\n+      valign: true,\n+    },\n+    u: globalAttrs,\n+    ul: globalAttrs,\n+    video: {\n+      ...globalAttrs,\n+      autoplay: true,\n+      controls: true,\n+      loop: true,\n+      muted: true,\n+      playsinline: true,\n+      poster: imageUrlSanitizer,\n+      preload: true,\n+      src: webUrlSanitizer,\n+      height: true,\n+      width: true,\n+    },\n+    wbr: globalAttrs,\n+  } as const satisfies HTMLAllowList,\n+)"
        },
        {
          "filename": "src/html/html.ts",
          "status": "modified",
          "additions": 86,
          "deletions": 64,
          "patch": "@@ -1,5 +1,6 @@\n import selfClosingTags from 'self-closing-tags'\n import { FilterXSS, friendlyAttrValue, escapeAttrValue } from 'xss'\n+import type { SafeAttrValueHandler, IWhiteList } from 'xss'\n import { MarpOptions } from '../marp'\n \n const selfClosingRegexp = /\\s*\\/?>$/\n@@ -14,82 +15,103 @@ const xhtmlOutFilter = new FilterXSS({\n   allowList: {},\n })\n \n+// Prevent breaking JavaScript special characters such as `<` and `>` by HTML\n+// escape process only if the entire content of HTML block is consisted of\n+// script tag (The case of matching the case 1 of https://spec.commonmark.org/0.31.2/#html-blocks,\n+// with special condition for <script> tag)\n+//\n+// For cases like https://spec.commonmark.org/0.31.2/#example-178, which do not\n+// end the HTML block with `</script>`, that will not exclude from sanitizing.\n+//\n+const scriptBlockRegexp =\n+  /^<script(?:>|[ \\t\\f\\n\\r][\\s\\S]*?>)([\\s\\S]*)<\\/script>[ \\t\\f\\n\\r]*$/i\n+\n+const scriptBlockContentUnexpectedCloseRegexp = /<\\/script[>/\\t\\f\\n\\r ]/i\n+\n+const isValidScriptBlock = (htmlBlockContent: string) => {\n+  const m = htmlBlockContent.match(scriptBlockRegexp)\n+  return !!(m && !scriptBlockContentUnexpectedCloseRegexp.test(m[1]))\n+}\n+\n export function markdown(md): void {\n   const { html_inline, html_block } = md.renderer.rules\n \n-  const sanitizedRenderer =\n-    (original: (...args: any[]) => string) =>\n-    (...args) => {\n-      const ret = original(...args)\n-\n-      // Pick comments\n-      const splitted: string[] = []\n-      let pos = 0\n+  const fetchHtmlOption = (): MarpOptions['html'] => md.options.html\n+  const fetchAllowList = (html = fetchHtmlOption()): IWhiteList => {\n+    const allowList: IWhiteList = Object.create(null)\n \n-      while (pos < ret.length) {\n-        const startIdx = ret.indexOf('<!--', pos)\n-        let endIdx = startIdx !== -1 ? ret.indexOf('-->', startIdx + 4) : -1\n+    if (typeof html === 'object') {\n+      for (const tag of Object.keys(html)) {\n+        const attrs = html[tag]\n \n-        if (endIdx === -1) {\n-          splitted.push(ret.slice(pos))\n-          break\n+        if (Array.isArray(attrs)) {\n+          allowList[tag] = attrs\n+        } else if (typeof attrs === 'object') {\n+          allowList[tag] = Object.keys(attrs).filter(\n+            (attr) => attrs[attr] !== false,\n+          )\n         }\n-\n-        endIdx += 3\n-        splitted.push(ret.slice(pos, startIdx), ret.slice(startIdx, endIdx))\n-        pos = endIdx\n       }\n-\n-      // Apply filter to each contents by XSS\n-      const allowList = {}\n-      const html: MarpOptions['html'] = md.options.html\n-\n-      if (typeof html === 'object') {\n-        for (const tag of Object.keys(html)) {\n-          const attrs = html[tag]\n-\n-          if (Array.isArray(attrs)) {\n-            allowList[tag] = attrs\n-          } else if (typeof attrs === 'object') {\n-            allowList[tag] = Object.keys(attrs).filter(\n-              (attr) => attrs[attr] !== false,\n-            )\n-          }\n-        }\n+    }\n+    return allowList\n+  }\n+\n+  const generateSafeAttrValueHandler =\n+    (html = fetchHtmlOption()): SafeAttrValueHandler =>\n+    (tag, attr, value) => {\n+      let ret = friendlyAttrValue(value)\n+\n+      if (\n+        typeof html === 'object' &&\n+        html[tag] &&\n+        !Array.isArray(html[tag]) &&\n+        typeof html[tag][attr] === 'function'\n+      ) {\n+        ret = html[tag][attr](ret)\n       }\n \n-      const filter = new FilterXSS({\n-        allowList,\n-        onIgnoreTag: (_, rawHtml) => (html === true ? rawHtml : undefined),\n-        safeAttrValue: (tag, attr, value) => {\n-          let ret = friendlyAttrValue(value)\n-\n-          if (\n-            typeof html === 'object' &&\n-            html[tag] &&\n-            !Array.isArray(html[tag]) &&\n-            typeof html[tag][attr] === 'function'\n-          ) {\n-            ret = html[tag][attr](ret)\n-          }\n-\n-          return escapeAttrValue(ret)\n+      return escapeAttrValue(ret)\n+    }\n+\n+  const sanitize = (ret: string) => {\n+    const html = fetchHtmlOption()\n+    const filter = new FilterXSS({\n+      allowList: fetchAllowList(html),\n+      onIgnoreTag: (_, rawHtml) => (html === true ? rawHtml : undefined),\n+      safeAttrValue: generateSafeAttrValueHandler(html),\n+    })\n+\n+    const sanitized = filter.process(ret)\n+    return md.options.xhtmlOut ? xhtmlOutFilter.process(sanitized) : sanitized\n+  }\n+\n+  md.renderer.rules.html_inline = (...args) => sanitize(html_inline(...args))\n+  md.renderer.rules.html_block = (...args) => {\n+    const ret = html_block(...args)\n+    const html = fetchHtmlOption()\n+\n+    const scriptAllowAttrs = (() => {\n+      if (html === true) return []\n+      if (typeof html === 'object' && html['script'])\n+        return fetchAllowList({ script: html.script }).script\n+    })()\n+\n+    // If the entire content of HTML block is consisted of script tag when the\n+    // script tag is allowed, we will not escape the content of the script tag.\n+    if (scriptAllowAttrs && isValidScriptBlock(ret)) {\n+      const scriptFilter = new FilterXSS({\n+        allowList: { script: scriptAllowAttrs || [] },\n+        allowCommentTag: true,\n+        onIgnoreTagAttr: (_, name, value) => {\n+          if (html === true) return `${name}=\"${escapeAttrValue(value)}\"`\n         },\n+        escapeHtml: (s) => s,\n+        safeAttrValue: generateSafeAttrValueHandler(html),\n       })\n \n-      return splitted\n-        .map((part, idx) => {\n-          if (idx % 2 === 1) return part\n-\n-          const sanitized = filter.process(part)\n-\n-          return md.options.xhtmlOut\n-            ? xhtmlOutFilter.process(sanitized)\n-            : sanitized\n-        })\n-        .join('')\n+      return scriptFilter.process(ret)\n     }\n \n-  md.renderer.rules.html_inline = sanitizedRenderer(html_inline)\n-  md.renderer.rules.html_block = sanitizedRenderer(html_block)\n+    return sanitize(ret)\n+  }\n }"
        },
        {
          "filename": "test/marp.ts",
          "status": "modified",
          "additions": 133,
          "deletions": 38,
          "patch": "@@ -391,44 +391,6 @@ describe('Marp', () => {\n         expect($('footer > em')).toHaveLength(1)\n       })\n \n-      it('keeps raw HTML comments within valid HTML block', () => {\n-        const { html: $script, comments: comments$script } = marp().render(\n-          \"<script><!--\\nconst script = '<b>test</b>'\\n--></script>\",\n-        )\n-        expect($script).toContain(\"const script = '<b>test</b>'\")\n-        expect(comments$script[0]).toHaveLength(0)\n-\n-        // Complex comment\n-        const complexComment = `\n-<!--\n-function matchwo(a,b)\n-{\n-\n-  if (a < b && a < 0) then {\n-    return 1;\n-\n-  } else {\n-\n-    return 0;\n-  }\n-}\n-\n-// ex\n--->\n-`.trim()\n-        const { html: $complex } = marp().render(\n-          `<script>${complexComment}</script>`,\n-        )\n-        expect($complex).toContain(complexComment)\n-\n-        // NOTE: Marpit framework will collect the comment block if the whole of HTML block was comment\n-        const { html: $comment, comments: comments$comment } = marp().render(\n-          \"<!--\\nconst script = '<b>test</b>'\\n-->\",\n-        )\n-        expect($comment).not.toContain(\"const script = '<b>test</b>'\")\n-        expect(comments$comment[0]).toHaveLength(1)\n-      })\n-\n       it('sanitizes CDATA section', () => {\n         // HTML Living Standard denys using CDATA in HTML context so must be sanitized\n         const cdata = `\n@@ -463,6 +425,66 @@ function matchwo(a,b)\n           \"<br class='normalize' />\",\n         )\n       })\n+\n+      it('does not escape JavaScript special character within valid <script> HTML block', () => {\n+        const { html: $script, comments: comments$script } = m.render(\n+          \"<script><!--\\nconst script = '<b>test</b>'\\n--></script>\",\n+        )\n+        expect($script).toContain(\"const script = '<b>test</b>'\")\n+        expect(comments$script[0]).toHaveLength(0)\n+\n+        // Complex comment\n+        const complexComment = `\n+<!--\n+function complex(a,b)\n+{\n+\n+  if (a < b && a < 0) then {\n+    return 1;\n+\n+  } else {\n+\n+    return 0;\n+  }\n+}\n+\n+// ex\n+>\n+`.trim()\n+        const { html: $complex } = m.render(\n+          `<script>${complexComment}</script>`,\n+        )\n+        expect($complex).toContain(complexComment)\n+\n+        // Case-insensitive tag names, attributes, and script without comment\n+        const attrsAndScriptWithoutComment = `\n+<SCRIPT\n+  type=\"text/javascript\"\n+  data-script=\"true\">\n+    console.log(2 > 1 && 1 < 2)\n+</Script>\n+`.trim()\n+        const { html: $attrAndScript } = m.render(attrsAndScriptWithoutComment)\n+        expect($attrAndScript).toContain(\n+          '<script type=\"text/javascript\" data-script=\"true\">',\n+        )\n+        expect($attrAndScript).toContain('console.log(2 > 1 && 1 < 2)')\n+      })\n+\n+      it('does escape JavaScript special character if <script> HTML block has trailing contents', () => {\n+        // ref: https://spec.commonmark.org/0.31.2/#example-178\n+        const withTrailingContents = `\n+<script>\n+  console.log(2 > 1);\n+</script> trailing <a href=\"https://example.com\">link</a>\n+`.trim()\n+        const { html } = m.render(withTrailingContents)\n+\n+        expect(html).toContain('console.log(2 &gt; 1);')\n+        expect(html).toContain(\n+          '</script> trailing <a href=\"https://example.com\">link</a>',\n+        )\n+      })\n     })\n \n     describe('with false', () => {\n@@ -517,6 +539,79 @@ function matchwo(a,b)\n           expect(html).toContain('<p id=\"sanitized\"></p>')\n         })\n       })\n+\n+      describe('when <script> tag is allowed', () => {\n+        const m = marp({ html: { script: ['type'] } })\n+\n+        it('does not escape JavaScript special character within valid <script> HTML block', () => {\n+          const { html: $script, comments: comments$script } = m.render(\n+            \"<script><!--\\nconst script = '<b>test</b>'\\n--></script>\",\n+          )\n+          expect($script).toContain(\"const script = '<b>test</b>'\")\n+          expect(comments$script[0]).toHaveLength(0)\n+\n+          // Complex comment\n+          const complexComment = `\n+  <!--\n+  function complex(a,b)\n+  {\n+\n+    if (a < b && a < 0) then {\n+      return 1;\n+\n+    } else {\n+\n+      return 0;\n+    }\n+  }\n+\n+  // ex\n+  >\n+  `.trim()\n+          const { html: $complex } = m.render(\n+            `<script>${complexComment}</script>`,\n+          )\n+          expect($complex).toContain(complexComment)\n+\n+          // Case-insensitive tag names, attributes w/ filter, and script without comment\n+          const attrsAndScriptWithoutComment = `\n+<SCRIPT\n+  type=\"text/javascript\"\n+  data-script=\"true\">\n+    console.log(2 > 1 && 1 < 2)\n+</Script>\n+`.trim()\n+          const { html: $attrAndScript } = m.render(\n+            attrsAndScriptWithoutComment,\n+          )\n+          expect($attrAndScript).toContain('<script type=\"text/javascript\">')\n+          expect($attrAndScript).toContain('console.log(2 > 1 && 1 < 2)')\n+\n+          // Including incorrect closing (may be malicious)\n+          const { html: $incorrectClosing } = m.render(\n+            '<script></script><b>bypass whitelist</b></script>',\n+          )\n+          expect($incorrectClosing).toContain(\n+            '&lt;b&gt;bypass whitelist&lt;/b&gt;',\n+          )\n+        })\n+\n+        it('does escape JavaScript special character if <script> HTML block has trailing contents', () => {\n+          // ref: https://spec.commonmark.org/0.31.2/#example-178\n+          const withTrailingContents = `\n+  <script>\n+    console.log(2 > 1);\n+  </script> trailing <a href=\"https://example.com\">link</a>\n+  `.trim()\n+          const { html } = m.render(withTrailingContents)\n+\n+          expect(html).toContain('console.log(2 &gt; 1);')\n+          expect(html).toContain(\n+            // Follow allowlist\n+            '</script> trailing &lt;a href=\"https://example.com\"&gt;link&lt;/a&gt;',\n+          )\n+        })\n+      })\n     })\n \n     describe(\"with markdown-it's xhtmlOut option as false\", () => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9949523564969e5612b1c4826138f27806a4ff65",
            "date": "2024-12-26T20:41:30Z",
            "author_login": "yhatt"
          },
          {
            "sha": "36673d5f9c9b218f0c6084486288d6caefddafa6",
            "date": "2024-12-24T14:52:25Z",
            "author_login": "yhatt"
          },
          {
            "sha": "d66b06d04d5fc4a5c09cf19a7b6d26e4cc218993",
            "date": "2024-12-24T14:51:35Z",
            "author_login": "yhatt"
          },
          {
            "sha": "61a1def244d1b6faa8e2c0be97ec0b68cab3ab49",
            "date": "2024-12-24T14:48:41Z",
            "author_login": "yhatt"
          },
          {
            "sha": "ecaddfbb3398875b354404546f3c6190f05e3506",
            "date": "2024-12-24T14:47:41Z",
            "author_login": "yhatt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-79",
    "description": "@marp-team/marp-core is the core for Marp, which is the ecosystem to write your presentation with plain Markdown. Marp Core from v3.0.2 to v3.9.0 and v4.0.0, are vulnerable to cross-site scripting (XSS) due to improper neutralization of HTML sanitization. Marp Core v3.9.1 and v4.0.1 have been patched to fix that. If you are unable to update the package immediately, disable all HTML tags by setting html: false option in the Marp class constructor.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-12-26T21:15:06.743",
    "last_modified": "2024-12-26T21:15:06.743",
    "fix_date": "2024-12-24T14:48:41Z"
  },
  "references": [
    {
      "url": "https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/marp-team/marp-core/pull/282",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/marp-team/marp-core/releases/tag/v3.9.1",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/marp-team/marp-core/releases/tag/v4.0.1",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/marp-team/marp-core/security/advisories/GHSA-x52f-h5g4-8qv5",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.913789",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "marp-core",
    "owner": "marp-team",
    "created_at": "2018-06-05T15:43:27Z",
    "updated_at": "2025-01-10T20:29:43Z",
    "pushed_at": "2024-12-26T20:41:31Z",
    "size": 3491,
    "stars": 821,
    "forks": 133,
    "open_issues": 10,
    "watchers": 821,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "TypeScript": 148358,
      "SCSS": 16243,
      "JavaScript": 7318
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T18:02:32.048088"
  }
}