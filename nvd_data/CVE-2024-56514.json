{
  "cve_id": "CVE-2024-56514",
  "github_data": {
    "repository": "karmada-io/karmada",
    "fix_commit": "40ec488b18a461ab0f871d2c9ec8665b361f0d50",
    "related_commits": [
      "40ec488b18a461ab0f871d2c9ec8665b361f0d50",
      "f78e7e2a3d02bed04e9bc7abd3ae7b3ac56862d2"
    ],
    "patch_url": "https://github.com/karmada-io/karmada/commit/40ec488b18a461ab0f871d2c9ec8665b361f0d50.patch",
    "fix_commit_details": {
      "sha": "40ec488b18a461ab0f871d2c9ec8665b361f0d50",
      "commit_date": "2024-11-27T09:44:03Z",
      "author": {
        "login": "karmada-bot",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #5713 from zhzhuang-zju/ctl-crds",
        "length": 133,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 45,
        "additions": 38,
        "deletions": 7
      },
      "files": [
        {
          "filename": "pkg/karmadactl/cmdinit/kubernetes/deploy.go",
          "status": "modified",
          "additions": 23,
          "deletions": 6,
          "patch": "@@ -23,6 +23,7 @@ import (\n \t\"net\"\n \t\"os\"\n \t\"path\"\n+\t\"path/filepath\"\n \t\"strings\"\n \t\"time\"\n \n@@ -43,6 +44,7 @@ import (\n \tglobaloptions \"github.com/karmada-io/karmada/pkg/karmadactl/options\"\n \t\"github.com/karmada-io/karmada/pkg/karmadactl/util\"\n \t\"github.com/karmada-io/karmada/pkg/karmadactl/util/apiclient\"\n+\t\"github.com/karmada-io/karmada/pkg/util/validation\"\n \t\"github.com/karmada-io/karmada/pkg/version\"\n )\n \n@@ -381,19 +383,34 @@ func (i *CommandInitOption) genCerts() error {\n \n // prepareCRD download or unzip `crds.tar.gz` to `options.DataPath`\n func (i *CommandInitOption) prepareCRD() error {\n+\tvar filename string\n \tif strings.HasPrefix(i.CRDs, \"http\") {\n-\t\tfilename := i.KarmadaDataPath + \"/\" + path.Base(i.CRDs)\n+\t\tfilename = i.KarmadaDataPath + \"/\" + path.Base(i.CRDs)\n \t\tklog.Infof(\"download crds file:%s\", i.CRDs)\n \t\tif err := utils.DownloadFile(i.CRDs, filename); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tif err := utils.DeCompress(filename, i.KarmadaDataPath); err != nil {\n-\t\t\treturn err\n+\t} else {\n+\t\tfilename = i.CRDs\n+\t\tklog.Infoln(\"local crds file name:\", i.CRDs)\n+\t}\n+\n+\tif err := validation.ValidateTarball(filename, validation.ValidateCrdsTarBall); err != nil {\n+\t\treturn fmt.Errorf(\"inValid crd tar, err: %w\", err)\n+\t}\n+\n+\tif err := utils.DeCompress(filename, i.KarmadaDataPath); err != nil {\n+\t\treturn err\n+\t}\n+\n+\tfor _, archive := range validation.CrdsArchive {\n+\t\texpectedDir := filepath.Join(i.KarmadaDataPath, archive)\n+\t\texist, _ := utils.PathExists(expectedDir)\n+\t\tif !exist {\n+\t\t\treturn fmt.Errorf(\"lacking the necessary file path: %s\", expectedDir)\n \t\t}\n-\t\treturn nil\n \t}\n-\tklog.Infoln(\"local crds file name:\", i.CRDs)\n-\treturn utils.DeCompress(i.CRDs, i.KarmadaDataPath)\n+\treturn nil\n }\n \n func (i *CommandInitOption) createCertsSecrets() error {"
        },
        {
          "filename": "pkg/karmadactl/cmdinit/utils/util.go",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -157,3 +157,17 @@ func ListFiles(path string) []string {\n \t}\n \treturn files\n }\n+\n+// PathExists check whether the path is exist\n+func PathExists(path string) (bool, error) {\n+\t_, err := os.Stat(path)\n+\tif err == nil {\n+\t\treturn true, nil\n+\t}\n+\n+\tif os.IsNotExist(err) {\n+\t\treturn false, nil\n+\t}\n+\n+\treturn false, err\n+}"
        },
        {
          "filename": "pkg/util/validation/validation_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -721,7 +721,7 @@ func TestValidateApplicationFailover(t *testing.T) {\n \t}\n }\n \n-func TestCheckOperatorCrdsTar(t *testing.T) {\n+func TestValidateCrdsTarBall(t *testing.T) {\n \ttestItems := []struct {\n \t\tname        string\n \t\theader      *tar.Header"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "446dbe9086f5389623877d2ca887597e9da3cdb3",
            "date": "2025-01-14T02:30:43Z",
            "author_login": "karmada-bot"
          },
          {
            "sha": "b743a3b92137cbd6f946515b5ad4e6a3c5c6d296",
            "date": "2025-01-01T23:00:33Z",
            "author_login": "jabellard"
          },
          {
            "sha": "43f29532f9ee61cf354df6e2cfe862aa16b7c181",
            "date": "2025-01-13T06:38:43Z",
            "author_login": "karmada-bot"
          },
          {
            "sha": "956f008785f10cc2b11cafbeb2dc7d2cc2eb7b30",
            "date": "2025-01-13T05:42:25Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "8313813f767aa6ebd81f7a30c6450f7ea21199d7",
            "date": "2025-01-10T09:46:40Z",
            "author_login": "karmada-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-22",
    "description": "Karmada is a Kubernetes management system that allows users to run cloud-native applications across multiple Kubernetes clusters and clouds. Prior to version 1.12.0, both in karmadactl and karmada-operator, it is possible to supply a filesystem path, or an HTTP(s) URL to retrieve the custom resource definitions(CRDs) needed by Karmada. The CRDs are downloaded as a gzipped tarfile and are vulnerable to a TarSlip vulnerability. An attacker able to supply a malicious CRD file into a Karmada initialization could write arbitrary files in arbitrary paths of the filesystem. From Karmada version 1.12.0, when processing custom CRDs files, CRDs archive verification is utilized to enhance file system robustness. A workaround is available. Someone who needs to set flag `--crd` to customize the CRD files required for Karmada initialization when using `karmadactl init` to set up Karmada can manually inspect the CRD files to check whether they contain sequences such as `../` that would alter file paths, to determine if they potentially include malicious files. When using karmada-operator to set up Karmada, one must upgrade one's karmada-operator to one of the fixed versions.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2025-01-03T17:15:09.017",
    "last_modified": "2025-01-03T17:15:09.017",
    "fix_date": "2024-11-27T09:44:03Z"
  },
  "references": [
    {
      "url": "https://github.com/karmada-io/karmada/commit/40ec488b18a461ab0f871d2c9ec8665b361f0d50",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/karmada-io/karmada/commit/f78e7e2a3d02bed04e9bc7abd3ae7b3ac56862d2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/karmada-io/karmada/pull/5703",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/karmada-io/karmada/pull/5713",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/karmada-io/karmada/security/advisories/GHSA-cwrh-575j-8vr3",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.951759",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "karmada",
    "owner": "karmada-io",
    "created_at": "2020-11-10T11:35:54Z",
    "updated_at": "2025-01-14T09:24:22Z",
    "pushed_at": "2025-01-14T02:30:43Z",
    "size": 66562,
    "stars": 4574,
    "forks": 907,
    "open_issues": 600,
    "watchers": 4574,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "release-1.0",
      "release-1.1",
      "release-1.2",
      "release-1.3",
      "release-1.4",
      "release-1.5",
      "release-1.6",
      "release-1.7",
      "release-1.8",
      "release-1.9",
      "release-1.10",
      "release-1.11",
      "release-1.12"
    ],
    "languages": {
      "Go": 8097818,
      "Shell": 210229,
      "Smarty": 25274,
      "Mustache": 19603,
      "Makefile": 4956,
      "Dockerfile": 1629
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:47:59.252036"
  }
}