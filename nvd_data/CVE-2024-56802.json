{
  "cve_id": "CVE-2024-56802",
  "github_data": {
    "repository": "PacoVK/tapir",
    "fix_commit": "c36360b611fa0ba4f5e250fa43ecf8a294785a03",
    "related_commits": [
      "c36360b611fa0ba4f5e250fa43ecf8a294785a03"
    ],
    "patch_url": "https://github.com/PacoVK/tapir/commit/c36360b611fa0ba4f5e250fa43ecf8a294785a03.patch",
    "fix_commit_details": {
      "sha": "c36360b611fa0ba4f5e250fa43ecf8a294785a03",
      "commit_date": "2024-12-31T12:37:03Z",
      "author": {
        "login": "loispostula",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: ensure deploykeys are exact match",
        "length": 38,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 121,
        "additions": 93,
        "deletions": 28
      },
      "files": [
        {
          "filename": "src/main/java/core/backend/aws/dynamodb/repository/DynamodbRepository.java",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -259,10 +259,14 @@ public DeployKey getDeployKeyById(String id) throws DeployKeyNotFoundException {\n \n   public DeployKey getDeployKeyByValue(String value) throws DeployKeyNotFoundException {\n     Collection<DeployKey> deployKeys = (Collection<DeployKey>) findDeployKeys(\"\", 1, value).getEntities();\n-    if (deployKeys == null || deployKeys.size() != 1) {\n+    if (deployKeys == null || deployKeys.isEmpty()) {\n       throw new DeployKeyNotFoundException(\"Could not find matching key\");\n     }\n-    return deployKeys.stream().findFirst().orElseThrow(() -> new DeployKeyNotFoundException(\"Could not find matching key\"));\n+    return deployKeys\n+      .stream()\n+      .filter(deployKey -> deployKey.getKey().equals(value)) // Ensure exact match\n+      .findFirst()\n+      .orElseThrow(() -> new DeployKeyNotFoundException(\"Could not find matching key\"));\n   }\n \n   public void deleteDeployKey(String id) {"
        },
        {
          "filename": "src/main/java/core/backend/azure/cosmosdb/CosmosDbRepository.java",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -255,10 +255,15 @@ public DeployKey getDeployKeyById(String id) throws DeployKeyNotFoundException {\n   public DeployKey getDeployKeyByValue(String value) throws DeployKeyNotFoundException {\n       try {\n           Collection<DeployKey> deployKeys = (Collection<DeployKey>) findDeployKeys(\"\", 1, value).getEntities();\n-          if (deployKeys == null || deployKeys.size() != 1) {\n+          if (deployKeys == null || deployKeys.isEmpty() {\n             throw new DeployKeyNotFoundException(\"Could not find matching key\");\n           }\n-          return deployKeys.stream().findFirst().orElseThrow(() -> new DeployKeyNotFoundException(\"Could not find matching key\"));\n+\n+          return deployKeys\n+            .stream()\n+            .filter(deployKey -> deployKey.getKey().equals(value)) // Ensure exact match\n+            .findFirst()\n+            .orElseThrow(() -> new DeployKeyNotFoundException(\"Could not find matching key\"));\n       } catch (Exception e) {\n           throw new DeployKeyNotFoundException(\"Could not find matching key\");\n       }"
        },
        {
          "filename": "src/main/java/core/backend/elasticsearch/ElasticSearchRepository.java",
          "status": "modified",
          "additions": 11,
          "deletions": 7,
          "patch": "@@ -90,15 +90,19 @@ public DeployKey getDeployKeyById(String id) throws DeployKeyNotFoundException {\n \n   @Override\n   public DeployKey getDeployKeyByValue(String value) throws DeployKeyNotFoundException {\n-      try {\n-        Collection<DeployKey> deployKeys = (Collection<DeployKey>) findDeployKeys(\"\", 1, value).getEntities();\n-        if (deployKeys == null || deployKeys.size() != 1) {\n-          throw new DeployKeyNotFoundException(\"Could not find matching key\");\n-        }\n-        return deployKeys.stream().findFirst().orElseThrow(() -> new DeployKeyNotFoundException(\"Could not find matching key\"));\n-      } catch (Exception e) {\n+    try {\n+      Collection<DeployKey> deployKeys = (Collection<DeployKey>) findDeployKeys(\"\", 1, value).getEntities();\n+      if (deployKeys == null || deployKeys.isEmpty()) {\n         throw new DeployKeyNotFoundException(\"Could not find matching key\");\n       }\n+      // Ensure we match the key exactly\n+      return deployKeys.stream()\n+          .filter(deployKey -> deployKey.getKey().equals(value)) // Ensure it's an exact match\n+          .findFirst()\n+          .orElseThrow(() -> new DeployKeyNotFoundException(\"Could not find matching key\"));\n+    } catch (Exception e) {\n+      throw new DeployKeyNotFoundException(\"Could not find matching key\");\n+    }\n   }\n \n   @Override"
        },
        {
          "filename": "src/test/java/core/backend/aws/dynamodb/repository/DynamodbDeployKeyRepositoryTest.java",
          "status": "modified",
          "additions": 26,
          "deletions": 4,
          "patch": "@@ -1,12 +1,18 @@\n package core.backend.aws.dynamodb.repository;\n \n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Random;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+\n import core.backend.AbstractDeployKeysBackendTest;\n+import core.exceptions.DeployKeyNotFoundException;\n import core.tapir.DeployKey;\n import core.tapir.DeployKeyScope;\n import io.quarkus.test.junit.QuarkusTest;\n-import org.junit.jupiter.api.AfterEach;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import org.junit.jupiter.api.Test;\n import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\n import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n import software.amazon.awssdk.services.dynamodb.model.ConditionalCheckFailedException;\n@@ -37,4 +43,20 @@ void cannotOverwriteDeployKey() throws Exception {\n     persistedDeployKey.setKey(\"changed\");\n     assertThrows(ConditionalCheckFailedException.class, () -> repository.saveDeployKey(persistedDeployKey));\n   }\n-}\n\\ No newline at end of file\n+\n+  @Test\n+  void testGetDeployKeyByValue() throws Exception {\n+\n+    DeployKey deployKey = new DeployKey(DeployKeyScope.NAMESPACE, \"\", \"double\", \"\", \"dcore\");\n+    repository.saveDeployKey(deployKey);\n+\n+    String deployKeyValue = deployKey.getKey();\n+    Random random = new Random();\n+    int end = random.nextInt(deployKeyValue.length());\n+    String deployKeyValueSub = deployKeyValue.substring(0, end + 1); // +1 to include the end character\n+\n+    assertDoesNotThrow(() -> repository.getDeployKeyByValue(deployKeyValue));\n+    assertThrows(DeployKeyNotFoundException.class, () -> repository.getDeployKeyByValue(deployKeyValueSub));\n+    assertThrows(DeployKeyNotFoundException.class, () -> repository.getDeployKeyByValue(\"H0p3Fu11yf@k3k3y\"));\n+  }\n+}"
        },
        {
          "filename": "src/test/java/core/backend/elasticsearch/ElasticSearchDeployKeyRepositoryTest.java",
          "status": "modified",
          "additions": 43,
          "deletions": 13,
          "patch": "@@ -1,23 +1,53 @@\n package core.backend.elasticsearch;\n \n-import core.backend.AbstractDeployKeysBackendTest;\n-import io.quarkus.test.junit.QuarkusTest;\n-import jakarta.ws.rs.HttpMethod;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n import java.io.IOException;\n+import java.util.Random;\n+\n import org.elasticsearch.client.Request;\n import org.elasticsearch.client.RestClient;\n import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+\n+import core.backend.AbstractDeployKeysBackendTest;\n+import core.exceptions.DeployKeyNotFoundException;\n+import core.tapir.DeployKey;\n+import core.tapir.DeployKeyScope;\n+import io.quarkus.test.junit.QuarkusTest;\n+import jakarta.ws.rs.HttpMethod;\n \n @QuarkusTest\n class ElasticSearchDeployKeyRepositoryTest extends AbstractDeployKeysBackendTest {\n \n-  RestClient restClient;\n-  public ElasticSearchDeployKeyRepositoryTest(ElasticSearchRepository repository, RestClient restClient) {\n-    super(repository);\n-    this.restClient = restClient;\n-  }\n-  @AfterEach\n-  void tearDown() throws IOException {\n-    restClient.performRequest(new Request(HttpMethod.DELETE, \"/deploykeys\"));\n-  }\n-}\n\\ No newline at end of file\n+    ElasticSearchRepository repository;\n+    RestClient restClient;\n+\n+    public ElasticSearchDeployKeyRepositoryTest(ElasticSearchRepository repository, RestClient restClient) {\n+        super(repository);\n+        this.repository = repository;\n+        this.restClient = restClient;\n+    }\n+\n+    @AfterEach\n+    void tearDown() throws IOException {\n+        restClient.performRequest(new Request(HttpMethod.DELETE, \"/deploykeys\"));\n+    }\n+\n+    @Test\n+    void testGetDeployKeyByValue() throws Exception {\n+\n+        DeployKey deployKey = new DeployKey(DeployKeyScope.NAMESPACE, \"\", \"double\", \"\", \"dcore\");\n+        repository.saveDeployKey(deployKey);\n+\n+        String deployKeyValue = deployKey.getKey();\n+        Random random = new Random();\n+        int end = random.nextInt(deployKeyValue.length() - 1);\n+        String deployKeyValueSub = deployKeyValue.substring(0, end);\n+\n+        assertDoesNotThrow(() -> repository.getDeployKeyByValue(deployKeyValue));\n+        assertThrows(DeployKeyNotFoundException.class, () -> repository.getDeployKeyByValue(deployKeyValueSub));\n+        assertThrows(DeployKeyNotFoundException.class, () -> repository.getDeployKeyByValue(\"H0p3Fu11yf@k3k3y\"));\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 5,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "98c0d5d45dedaec431bfbc0ad8004605aaa98a3b",
            "date": "2024-12-31T13:09:08Z",
            "author_login": "PacoVK"
          },
          {
            "sha": "62b555012acdacef5b9a94bc632c400240237a04",
            "date": "2024-12-31T13:04:42Z",
            "author_login": "PacoVK"
          },
          {
            "sha": "d2cf5baec432059498ecea6701cdbbea5366df32",
            "date": "2024-12-31T12:50:33Z",
            "author_login": "PacoVK"
          },
          {
            "sha": "c36360b611fa0ba4f5e250fa43ecf8a294785a03",
            "date": "2024-12-31T12:37:03Z",
            "author_login": "loispostula"
          },
          {
            "sha": "0e805cbd5832ade857876b388b6c57429263f45a",
            "date": "2024-12-31T11:54:12Z",
            "author_login": "PacoVK"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-285",
    "description": "Tapir is a private Terraform registry. Tapir versions 0.9.0 and 0.9.1 are facing a critical issue with scope-able Deploykeys where attackers can guess the key to get write access to the registry.  User must upgrade to 0.9.2.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-12-31T16:15:28.240",
    "last_modified": "2024-12-31T16:15:28.240",
    "fix_date": "2024-12-31T12:37:03Z"
  },
  "references": [
    {
      "url": "https://github.com/PacoVK/tapir/commit/c36360b611fa0ba4f5e250fa43ecf8a294785a03",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/PacoVK/tapir/security/advisories/GHSA-rj9m-qf65-f5gg",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.938709",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tapir",
    "owner": "PacoVK",
    "created_at": "2022-11-23T21:16:58Z",
    "updated_at": "2025-01-10T12:47:55Z",
    "pushed_at": "2025-01-14T10:31:02Z",
    "size": 100884,
    "stars": 210,
    "forks": 15,
    "open_issues": 19,
    "watchers": 210,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Java": 222885,
      "TypeScript": 73519,
      "Roff": 2756,
      "Dockerfile": 1078,
      "Makefile": 724,
      "HTML": 635,
      "HCL": 339,
      "CSS": 303,
      "Ruby": 74,
      "Shell": 65
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T17:58:42.291859"
  }
}