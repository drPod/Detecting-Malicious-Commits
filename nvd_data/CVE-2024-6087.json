{
  "cve_id": "CVE-2024-6087",
  "github_data": {
    "repository": "lunary-ai/lunary",
    "fix_commit": "844e8855c7a713dc7371766dba4125de4007b1cf",
    "related_commits": [
      "844e8855c7a713dc7371766dba4125de4007b1cf"
    ],
    "patch_url": "https://github.com/lunary-ai/lunary/commit/844e8855c7a713dc7371766dba4125de4007b1cf.patch",
    "fix_commit_details": {
      "sha": "844e8855c7a713dc7371766dba4125de4007b1cf",
      "commit_date": "2024-08-26T15:04:36Z",
      "author": {
        "login": "hughcrt",
        "type": "User",
        "stats": {
          "total_commits": 819,
          "average_weekly_commits": 9.202247191011235,
          "total_additions": 146326,
          "total_deletions": 109724,
          "weeks_active": 64
        }
      },
      "commit_message": {
        "title": "fix: password reset security patch (#504)",
        "length": 41,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 31,
        "additions": 14,
        "deletions": 17
      },
      "files": [
        {
          "filename": "packages/backend/src/api/v1/auth/index.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 15,
          "patch": "@@ -293,27 +293,18 @@ auth.post(\"/request-password-reset\", async (ctx: Context) => {\n       Db.Account[]\n     >`select * from account where email = ${email}`\n \n-    if (recoveryToken) {\n-      if (await isJWTExpired(recoveryToken)) {\n-        // Edge case 1: User has made a password reset request more than one hour ago, but has not completed the flow\n-        await requestPasswordReset(email)\n-        ctx.body = { ok: true }\n-        return\n-      } else {\n-        // Edge case 2: User has already made a password request less than one hour ago\n-        throw new Error(\n-          \"Password reset request already initiated less than one hour ago\",\n-        )\n-      }\n+    if (recoveryToken && !(await isJWTExpired(recoveryToken))) {\n+      await requestPasswordReset(email)\n+      ctx.body = { ok: true }\n+      return\n     }\n \n-    // Base case: User is making his first password reset request since the last one has been successfully reset\n     await requestPasswordReset(email)\n     ctx.body = { ok: true }\n   } catch (error) {\n     console.error(error)\n     // Do not send error message to client if email is not found\n-    ctx.body = {}\n+    ctx.body = { ok: true }\n   }\n })\n \n@@ -325,8 +316,11 @@ auth.post(\"/reset-password\", async (ctx: Context) => {\n   const { token, password } = bodySchema.parse(ctx.request.body)\n \n   const {\n-    payload: { email },\n+    payload: { email, type },\n   } = await verifyJWT<{ email: string }>(token)\n+  if (type !== \"reset_token\") {\n+    ctx.throw(403, \"Unauthorized\")\n+  }\n \n   const passwordHash = await hashPassword(password)\n "
        },
        {
          "filename": "packages/backend/src/api/v1/auth/utils.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -187,8 +187,11 @@ export async function authMiddleware(ctx: Context, next: Next) {\n export async function requestPasswordReset(email: string) {\n   const [user] = await sql`select id from account where email = ${email}`\n \n-  const ONE_HOUR = 60 * 60\n-  const token = await signJWT({ email }, ONE_HOUR)\n+  const FIFTEEN_MINUTES = 15 * 60\n+  const token = await signJWT(\n+    { email, type: \"password_reset\" },\n+    FIFTEEN_MINUTES,\n+  )\n \n   await sql`update account set recovery_token = ${token} where id = ${user.id}`\n "
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a4c1a889ecc4329f4b8fc976904d08cd57636546",
            "date": "2025-01-13T15:25:14Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "2447a7cc873d1f96fcc150a00f3d46ff13f4964c",
            "date": "2025-01-12T16:53:00Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "a3211170ffe39424c54a102d4afa27cec99c362d",
            "date": "2025-01-12T16:48:23Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "ea73f8db2ec427defadb4d70c56ebfc65964b677",
            "date": "2025-01-11T00:32:52Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "32974c788404aa69fd55709231e8834777dee7ab",
            "date": "2025-01-10T22:45:01Z",
            "author_login": "hughcrt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-284",
    "description": "An improper access control vulnerability exists in lunary-ai/lunary at the latest commit (a761d83) on the main branch. The vulnerability allows an attacker to use the auth tokens issued by the 'invite user' functionality to obtain valid JWT tokens. These tokens can be used to compromise target users upon registration for their own arbitrary organizations. The attacker can invite a target email, obtain a one-time use token, retract the invite, and later use the token to reset the password of the target user, leading to full account takeover.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-09-13T17:15:13.027",
    "last_modified": "2024-09-19T19:32:14.710",
    "fix_date": "2024-08-26T15:04:36Z"
  },
  "references": [
    {
      "url": "https://github.com/lunary-ai/lunary/commit/844e8855c7a713dc7371766dba4125de4007b1cf",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/bd9f2301-11c7-4cbd-8d77-3e9225bd67e8",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:00.119014",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "lunary",
    "owner": "lunary-ai",
    "created_at": "2023-05-12T10:03:05Z",
    "updated_at": "2025-01-13T15:25:18Z",
    "pushed_at": "2025-01-13T15:25:16Z",
    "size": 5319,
    "stars": 1133,
    "forks": 139,
    "open_issues": 0,
    "watchers": 1133,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "llm-1533-allow-filtering-by-feedback-in-thread-and-trace-page",
      "llm-1666-improve-exports-for-traces-enable-export-for-threads",
      "llm-1708-when-clicking-on-a-trace-row-theres-a-quick-render-bug-that",
      "llm-1711-save-row-sorting-in-views",
      "llm-1906-allow-a-team-owner-to-make-another-user-owner-instead-of",
      "llm-1910-prompts-settings-bug",
      "llm-1911-invite-button-doesnt-show-a-success-notification",
      "llm-1922-button-next-to-metadata-that-redirects-to-search",
      "llm-1939-integer-out-of-range-error-on-lunary-app",
      "llm-1942-implement-streaming-from-database-for-csvjsonl-exports",
      "llm-1966-long-project-names-are-croped-in-project-drowndopre",
      "llm-2101-sign-in-with-github",
      "main",
      "playwright_test_feedback_comment_dataset_user"
    ],
    "languages": {
      "TypeScript": 1181050,
      "Python": 112937,
      "CSS": 8238,
      "JavaScript": 3378,
      "Shell": 522
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:04:58.689247"
  }
}