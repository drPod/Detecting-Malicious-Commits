{
  "cve_id": "CVE-2024-6095",
  "github_data": {
    "repository": "mudler/localai",
    "fix_commit": "2fc6fe806b903ac0a70218b21b5c84443a1b0866",
    "related_commits": [
      "2fc6fe806b903ac0a70218b21b5c84443a1b0866",
      "2fc6fe806b903ac0a70218b21b5c84443a1b0866"
    ],
    "patch_url": "https://github.com/mudler/localai/commit/2fc6fe806b903ac0a70218b21b5c84443a1b0866.patch",
    "fix_commit_details": {
      "sha": "2fc6fe806b903ac0a70218b21b5c84443a1b0866",
      "commit_date": "2024-06-04T14:32:47Z",
      "author": {
        "login": "dave-gray101",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: `pkg/downloader` should respect basePath for `file://` urls (#2481)",
        "length": 276,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 40,
        "additions": 23,
        "deletions": 17
      },
      "files": [
        {
          "filename": "core/http/app_test.go",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -73,7 +73,8 @@ func getModelStatus(url string) (response map[string]interface{}) {\n }\n \n func getModels(url string) (response []gallery.GalleryModel) {\n-\tdownloader.GetURI(url, func(url string, i []byte) error {\n+\t// TODO: No tests currently seem to exercise file:// urls. Fix?\n+\tdownloader.GetURI(url, \"\", func(url string, i []byte) error {\n \t\t// Unmarshal YAML data into a struct\n \t\treturn json.Unmarshal(i, &response)\n \t})"
        },
        {
          "filename": "core/services/gallery.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -32,7 +32,7 @@ func NewGalleryService(modelPath string) *GalleryService {\n \r\n func prepareModel(modelPath string, req gallery.GalleryModel, cl *config.BackendConfigLoader, downloadStatus func(string, string, string, float64)) error {\r\n \r\n-\tconfig, err := gallery.GetGalleryConfigFromURL(req.URL)\r\n+\tconfig, err := gallery.GetGalleryConfigFromURL(req.URL, modelPath)\r\n \tif err != nil {\r\n \t\treturn err\r\n \t}\r"
        },
        {
          "filename": "embedded/embedded.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -36,10 +36,10 @@ func init() {\n \t}\n }\n \n-func GetRemoteLibraryShorteners(url string) (map[string]string, error) {\n+func GetRemoteLibraryShorteners(url string, basePath string) (map[string]string, error) {\n \tremoteLibrary := map[string]string{}\n \n-\terr := downloader.GetURI(url, func(_ string, i []byte) error {\n+\terr := downloader.GetURI(url, basePath, func(_ string, i []byte) error {\n \t\treturn yaml.Unmarshal(i, &remoteLibrary)\n \t})\n \tif err != nil {"
        },
        {
          "filename": "pkg/downloader/uri.go",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -23,7 +23,7 @@ const (\n \tGithubURI2        = \"github://\"\n )\n \n-func GetURI(url string, f func(url string, i []byte) error) error {\n+func GetURI(url string, basePath string, f func(url string, i []byte) error) error {\n \turl = ConvertURL(url)\n \n \tif strings.HasPrefix(url, \"file://\") {\n@@ -33,6 +33,11 @@ func GetURI(url string, f func(url string, i []byte) error) error {\n \t\tif err != nil {\n \t\t\treturn err\n \t\t}\n+\t\t// Check if the local file is rooted in basePath\n+\t\terr = utils.VerifyPath(resolvedFile, basePath)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n \t\t// Read the response body\n \t\tbody, err := os.ReadFile(resolvedFile)\n \t\tif err != nil {"
        },
        {
          "filename": "pkg/downloader/uri_test.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -10,23 +10,23 @@ var _ = Describe(\"Gallery API tests\", func() {\n \tContext(\"URI\", func() {\n \t\tIt(\"parses github with a branch\", func() {\n \t\t\tExpect(\n-\t\t\t\tGetURI(\"github:go-skynet/model-gallery/gpt4all-j.yaml\", func(url string, i []byte) error {\n+\t\t\t\tGetURI(\"github:go-skynet/model-gallery/gpt4all-j.yaml\", \"\", func(url string, i []byte) error {\n \t\t\t\t\tExpect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))\n \t\t\t\t\treturn nil\n \t\t\t\t}),\n \t\t\t).ToNot(HaveOccurred())\n \t\t})\n \t\tIt(\"parses github without a branch\", func() {\n \t\t\tExpect(\n-\t\t\t\tGetURI(\"github:go-skynet/model-gallery/gpt4all-j.yaml@main\", func(url string, i []byte) error {\n+\t\t\t\tGetURI(\"github:go-skynet/model-gallery/gpt4all-j.yaml@main\", \"\", func(url string, i []byte) error {\n \t\t\t\t\tExpect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))\n \t\t\t\t\treturn nil\n \t\t\t\t}),\n \t\t\t).ToNot(HaveOccurred())\n \t\t})\n \t\tIt(\"parses github with urls\", func() {\n \t\t\tExpect(\n-\t\t\t\tGetURI(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\", func(url string, i []byte) error {\n+\t\t\t\tGetURI(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\", \"\", func(url string, i []byte) error {\n \t\t\t\t\tExpect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))\n \t\t\t\t\treturn nil\n \t\t\t\t}),"
        },
        {
          "filename": "pkg/gallery/gallery.go",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -27,7 +27,7 @@ func InstallModelFromGallery(galleries []Gallery, name string, basePath string,\n \n \t\tif len(model.URL) > 0 {\n \t\t\tvar err error\n-\t\t\tconfig, err = GetGalleryConfigFromURL(model.URL)\n+\t\t\tconfig, err = GetGalleryConfigFromURL(model.URL, basePath)\n \t\t\tif err != nil {\n \t\t\t\treturn err\n \t\t\t}\n@@ -142,9 +142,9 @@ func AvailableGalleryModels(galleries []Gallery, basePath string) ([]*GalleryMod\n \treturn models, nil\n }\n \n-func findGalleryURLFromReferenceURL(url string) (string, error) {\n+func findGalleryURLFromReferenceURL(url string, basePath string) (string, error) {\n \tvar refFile string\n-\terr := downloader.GetURI(url, func(url string, d []byte) error {\n+\terr := downloader.GetURI(url, basePath, func(url string, d []byte) error {\n \t\trefFile = string(d)\n \t\tif len(refFile) == 0 {\n \t\t\treturn fmt.Errorf(\"invalid reference file at url %s: %s\", url, d)\n@@ -161,13 +161,13 @@ func getGalleryModels(gallery Gallery, basePath string) ([]*GalleryModel, error)\n \n \tif strings.HasSuffix(gallery.URL, \".ref\") {\n \t\tvar err error\n-\t\tgallery.URL, err = findGalleryURLFromReferenceURL(gallery.URL)\n+\t\tgallery.URL, err = findGalleryURLFromReferenceURL(gallery.URL, basePath)\n \t\tif err != nil {\n \t\t\treturn models, err\n \t\t}\n \t}\n \n-\terr := downloader.GetURI(gallery.URL, func(url string, d []byte) error {\n+\terr := downloader.GetURI(gallery.URL, basePath, func(url string, d []byte) error {\n \t\treturn yaml.Unmarshal(d, &models)\n \t})\n \tif err != nil {"
        },
        {
          "filename": "pkg/gallery/models.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -63,9 +63,9 @@ type PromptTemplate struct {\n \tContent string `yaml:\"content\"`\n }\n \n-func GetGalleryConfigFromURL(url string) (Config, error) {\n+func GetGalleryConfigFromURL(url string, basePath string) (Config, error) {\n \tvar config Config\n-\terr := downloader.GetURI(url, func(url string, d []byte) error {\n+\terr := downloader.GetURI(url, basePath, func(url string, d []byte) error {\n \t\treturn yaml.Unmarshal(d, &config)\n \t})\n \tif err != nil {"
        },
        {
          "filename": "pkg/gallery/request_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -10,7 +10,7 @@ var _ = Describe(\"Gallery API tests\", func() {\n \tContext(\"requests\", func() {\n \t\tIt(\"parses github with a branch\", func() {\n \t\t\treq := GalleryModel{URL: \"github:go-skynet/model-gallery/gpt4all-j.yaml@main\"}\n-\t\t\te, err := GetGalleryConfigFromURL(req.URL)\n+\t\t\te, err := GetGalleryConfigFromURL(req.URL, \"\")\n \t\t\tExpect(err).ToNot(HaveOccurred())\n \t\t\tExpect(e.Name).To(Equal(\"gpt4all-j\"))\n \t\t})"
        },
        {
          "filename": "pkg/startup/model_preload.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -20,7 +20,7 @@ func PreloadModelsConfigurations(modelLibraryURL string, modelPath string, model\n \t\t// As a best effort, try to resolve the model from the remote library\n \t\t// if it's not resolved we try with the other method below\n \t\tif modelLibraryURL != \"\" {\n-\t\t\tlib, err := embedded.GetRemoteLibraryShorteners(modelLibraryURL)\n+\t\t\tlib, err := embedded.GetRemoteLibraryShorteners(modelLibraryURL, modelPath)\n \t\t\tif err == nil {\n \t\t\t\tif lib[url] != \"\" {\n \t\t\t\t\tlog.Debug().Msgf(\"[startup] model configuration is defined remotely: %s (%s)\", url, lib[url])"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 6,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d7dee3a5ecd7d3e60ba699ed6f12bc8d75213ffd",
            "date": "2025-01-14T10:13:16Z",
            "author_login": "mudler"
          },
          {
            "sha": "b8d74e52b1e400a52a747a3a89ac3f6338c6ad4b",
            "date": "2025-01-14T08:41:30Z",
            "author_login": "mudler"
          },
          {
            "sha": "62abe0d2c9c6492213039a7ccbbecaa40808791d",
            "date": "2025-01-14T08:33:19Z",
            "author_login": "mudler"
          },
          {
            "sha": "5414c294c4d2e57f1f0e09da14e341a5cd846e2b",
            "date": "2025-01-14T08:29:25Z",
            "author_login": "mudler"
          },
          {
            "sha": "1b3e89c89c1e82b98cdfd231d4c44ae491f3cd83",
            "date": "2025-01-14T08:27:18Z",
            "author_login": "mudler"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "A vulnerability in the /models/apply endpoint of mudler/localai versions 2.15.0 allows for Server-Side Request Forgery (SSRF) and partial Local File Inclusion (LFI). The endpoint supports both http(s):// and file:// schemes, where the latter can lead to LFI. However, the output is limited due to the length of the error message. This vulnerability can be exploited by an attacker with network access to the LocalAI instance, potentially allowing unauthorized access to internal HTTP(s) servers and partial reading of local files. The issue is fixed in version 2.17.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-06T18:15:02.277",
    "last_modified": "2024-11-21T09:48:57.030",
    "fix_date": "2024-06-04T14:32:47Z"
  },
  "references": [
    {
      "url": "https://github.com/mudler/localai/commit/2fc6fe806b903ac0a70218b21b5c84443a1b0866",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/4799262d-72dc-43c8-bc99-81d0dce996dc",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mudler/localai/commit/2fc6fe806b903ac0a70218b21b5c84443a1b0866",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/4799262d-72dc-43c8-bc99-81d0dce996dc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.896084",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "LocalAI",
    "owner": "mudler",
    "created_at": "2023-03-18T22:58:02Z",
    "updated_at": "2025-01-14T15:10:10Z",
    "pushed_at": "2025-01-14T10:13:18Z",
    "size": 12471,
    "stars": 28386,
    "forks": 2132,
    "open_issues": 404,
    "watchers": 28386,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Go": 806615,
      "Python": 148488,
      "JavaScript": 145729,
      "C++": 105310,
      "HTML": 81769,
      "Makefile": 56001,
      "Shell": 32621,
      "Dockerfile": 19776,
      "CSS": 4436,
      "CMake": 3102,
      "C": 405,
      "Earthly": 110
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:13:52.451028"
  }
}