{
  "cve_id": "CVE-2024-6581",
  "github_data": {
    "repository": "parisneo/lollms",
    "fix_commit": "328b960a0de2097e13654ac752253e9541521ddd",
    "related_commits": [
      "328b960a0de2097e13654ac752253e9541521ddd"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "328b960a0de2097e13654ac752253e9541521ddd",
      "commit_date": "2024-07-06T01:48:01Z",
      "author": {
        "login": "ParisNeo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "enhanced security",
        "length": 17,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 53,
        "additions": 39,
        "deletions": 14
      },
      "files": [
        {
          "filename": "lollms/security.py",
          "status": "modified",
          "additions": 39,
          "deletions": 14,
          "patch": "@@ -65,31 +65,56 @@ def sanitize_after_whitelisted_command(line, command):\n         # This means we should only return the part up to the whitelisted command\n         return line[:command_end_index + len(sanitized_rest)].strip()\n \n+if not(PackageManager.check_package_installed(\"defusedxml\")):\n+    PackageManager.install_or_update(\"defusedxml\")\n \n-def sanitize_svg(svg_content):\n-    try:\n-        parser = ET.XMLParser(remove_comments=True, remove_pis=True)\n-        tree = ET.fromstring(svg_content, parser=parser)\n+import defusedxml.ElementTree as ET\n \n-        # Remove any script elements\n-        for script in tree.xpath('//svg:script', namespaces={'svg': 'http://www.w3.org/2000/svg'}):\n-            parent = script.getparent()\n-            if parent is not None:\n-                parent.remove(script)\n+from defusedxml import ElementTree as ET\n+from io import StringIO\n \n-        # Remove any 'on*' event attributes\n-        for element in tree.xpath('//*[@*[starts-with(name(), \"on\")]]'):\n+def sanitize_svg(svg_content):\n+    try:\n+        # Use defusedxml's parse function with a StringIO object\n+        tree = ET.parse(StringIO(svg_content))\n+        root = tree.getroot()\n+\n+        # Define a list of allowed elements\n+        allowed_elements = {\n+            'svg', 'g', 'path', 'circle', 'rect', 'line', 'polyline', 'polygon',\n+            'text', 'tspan', 'defs', 'filter', 'feGaussianBlur', 'feMerge',\n+            'feMergeNode', 'linearGradient', 'radialGradient', 'stop'\n+        }\n+\n+        # Define a list of allowed attributes\n+        allowed_attributes = {\n+            'id', 'class', 'style', 'fill', 'stroke', 'stroke-width', 'cx', 'cy',\n+            'r', 'x', 'y', 'width', 'height', 'd', 'transform', 'viewBox',\n+            'xmlns', 'xmlns:xlink', 'version', 'stdDeviation', 'result', 'in',\n+            'x1', 'y1', 'x2', 'y2', 'offset', 'stop-color', 'stop-opacity'\n+        }\n+\n+        # Remove any disallowed elements\n+        for element in root.iter():\n+            if element.tag.split('}')[-1] not in allowed_elements:\n+                parent = element.getparent()\n+                if parent is not None:\n+                    parent.remove(element)\n+\n+        # Remove any disallowed attributes\n+        for element in root.iter():\n             for attr in list(element.attrib):\n-                if attr.startswith('on'):\n+                if attr not in allowed_attributes:\n                     del element.attrib[attr]\n \n         # Convert the tree back to an SVG string\n-        sanitized_svg = ET.tostring(tree, encoding='unicode', method='xml')\n+        sanitized_svg = ET.tostring(root, encoding='unicode', method='xml')\n         return sanitized_svg\n-    except ET.XMLSyntaxError as e:\n+    except ET.ParseError as e:\n         raise ValueError(\"Invalid SVG content\") from e\n \n \n+\n def sanitize_shell_code(code, whitelist=None):\n     \"\"\"\n     Securely sanitizes a block of code by allowing commands from a provided whitelist,"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8622524726726fe400d516a3977cf4bb7de33b9d",
            "date": "2025-01-25T01:16:57Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "fab35e47c5f71624acdc8f56c4dee03334885a25",
            "date": "2025-01-22T20:38:22Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "e566760cdd8ee3a9e72ed945102668e7702ea483",
            "date": "2025-01-22T13:32:17Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "8194b116f7066d2b1a63f93eecf30ac104323bad",
            "date": "2025-01-22T10:19:34Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "da465b68a753b41942e9685731e1760422bd6ae5",
            "date": "2025-01-22T00:11:26Z",
            "author_login": "ParisNeo"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-79",
    "description": "A vulnerability in the discussion image upload function of the Lollms application, version v9.9, allows for the uploading of SVG files. Due to incomplete filtering in the sanitize_svg function, this can lead to cross-site scripting (XSS) vulnerabilities, which in turn pose a risk of remote code execution. The sanitize_svg function only removes script elements and 'on*' event attributes, but does not account for other potential vectors for XSS within SVG files. This vulnerability can be exploited when authorized users access a malicious URL containing the crafted SVG file.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-29T13:15:07.840",
    "last_modified": "2024-11-01T19:38:06.443",
    "fix_date": "2024-07-06T01:48:01Z"
  },
  "references": [
    {
      "url": "https://github.com/parisneo/lollms/commit/328b960a0de2097e13654ac752253e9541521ddd",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/ad68ecd6-44e2-449b-8e7e-f2b71b1b43c7",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.104026",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "lollms",
    "owner": "parisneo",
    "created_at": "2023-06-02T10:46:33Z",
    "updated_at": "2025-01-25T01:17:04Z",
    "pushed_at": "2025-01-25T01:17:00Z",
    "size": 7508,
    "stars": 281,
    "forks": 51,
    "open_issues": 16,
    "watchers": 281,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 1524731,
      "Shell": 30804,
      "Batchfile": 16275,
      "HTML": 6350,
      "Jupyter Notebook": 4229,
      "C++": 3433,
      "Dockerfile": 957,
      "Makefile": 294
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:39:39.982865"
  }
}