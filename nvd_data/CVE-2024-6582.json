{
  "cve_id": "CVE-2024-6582",
  "github_data": {
    "repository": "lunary-ai/lunary",
    "fix_commit": "1f043d8798ad87346dfe378eea723bff78ad7433",
    "related_commits": [
      "1f043d8798ad87346dfe378eea723bff78ad7433"
    ],
    "patch_url": "https://github.com/lunary-ai/lunary/commit/1f043d8798ad87346dfe378eea723bff78ad7433.patch",
    "fix_commit_details": {
      "sha": "1f043d8798ad87346dfe378eea723bff78ad7433",
      "commit_date": "2024-08-24T15:46:05Z",
      "author": {
        "login": "hughcrt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: saml security patch (#501)",
        "length": 31,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 41,
        "additions": 32,
        "deletions": 9
      },
      "files": [
        {
          "filename": "packages/backend/src/api/v1/auth/saml.ts",
          "status": "modified",
          "additions": 32,
          "deletions": 9,
          "patch": "@@ -104,8 +104,6 @@ function parseAttributes(attributes: any, nameID: string) {\n }\n \n route.get(\"/success\", async (ctx: Context) => {\n-  // const { orgId } = ctx.params as { orgId: string }\n-\n   ctx.redirect(process.env.APP_URL!)\n })\n \n@@ -120,13 +118,19 @@ route.get(\"/metadata\", async (ctx: Context) => {\n \n route.post(\"/download-idp-xml\", async (ctx: Context) => {\n   const { orgId } = ctx.params as { orgId: string }\n+  const { userId } = ctx.state\n \n   const bodySchema = z.object({\n     content: z.string().url().or(z.string().min(1)),\n   })\n \n   const { content } = bodySchema.parse(ctx.request.body)\n \n+  const [user] = await sql`select * from account where id = ${userId}`\n+  if (user?.orgId !== orgId) {\n+    ctx.throw(403, \"Forbidden: Insufficient permissions\")\n+  }\n+\n   let xml = content\n \n   if (content.startsWith(\"http\")) {\n@@ -135,15 +139,28 @@ route.post(\"/download-idp-xml\", async (ctx: Context) => {\n     xml = data\n   }\n \n-  await sql`update org set saml_idp_xml = ${xml} where id = ${orgId}`\n+  await sql`\n+    update \n+     org \n+    set \n+      saml_idp_xml = ${xml} \n+    where \n+      id = ${orgId}\n+    `\n \n   ctx.body = { success: true }\n   ctx.status = 201\n })\n \n-// User gets redirected here after logging in with SAML\n+// Assertion Consumer Service\n route.post(\"/acs\", async (ctx: Context) => {\n   const { orgId } = ctx.params as { orgId: string }\n+  const { userId } = ctx.state\n+\n+  const [user] = await sql`select * from account where id = ${userId}`\n+  if (user?.orgId !== orgId) {\n+    ctx.throw(403, \"Forbidden: Insufficient permissions\")\n+  }\n \n   const idp = await getOrgIdp(orgId)\n   const sp = await getOrgSp(orgId)\n@@ -156,7 +173,7 @@ route.post(\"/acs\", async (ctx: Context) => {\n     ctx.throw(400, \"No attributes found\")\n   }\n \n-  if (conditions?.notBefore && conditions.notOnOrAfter) {\n+  if (conditions?.notBefore && conditions?.notOnOrAfter) {\n     const notBefore = new Date(conditions.notBefore)\n     const notOnOrAfter = new Date(conditions.notOnOrAfter)\n     const now = new Date()\n@@ -170,8 +187,16 @@ route.post(\"/acs\", async (ctx: Context) => {\n \n   const singleUseToken = await generateOneTimeToken()\n \n-  const [account] =\n-    await sql`update account set ${sql({ name, singleUseToken, lastLoginAt: new Date() })} where email = ${email} and org_id = ${orgId} returning *`\n+  const [account] = await sql`\n+    update \n+      account \n+    set \n+      ${sql({ name, singleUseToken, lastLoginAt: new Date() })} \n+    where \n+      email = ${email} \n+      and org_id = ${orgId} \n+    returning *\n+  `\n \n   if (!account) {\n     ctx.throw(\n@@ -180,12 +205,10 @@ route.post(\"/acs\", async (ctx: Context) => {\n     )\n   }\n \n-  // Redirect with an one-time token that can be exchanged for an auth token\n   ctx.redirect(`${process.env.APP_URL!}/login?ott=${singleUseToken}`)\n })\n \n route.post(\"/slo\", async (ctx: Context) => {\n-  // const { orgId } = ctx.params as { orgId: string }\n   ctx.body = \"SAML SLO\"\n })\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a4c1a889ecc4329f4b8fc976904d08cd57636546",
            "date": "2025-01-13T15:25:14Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "2447a7cc873d1f96fcc150a00f3d46ff13f4964c",
            "date": "2025-01-12T16:53:00Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "a3211170ffe39424c54a102d4afa27cec99c362d",
            "date": "2025-01-12T16:48:23Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "ea73f8db2ec427defadb4d70c56ebfc65964b677",
            "date": "2025-01-11T00:32:52Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "32974c788404aa69fd55709231e8834777dee7ab",
            "date": "2025-01-10T22:45:01Z",
            "author_login": "hughcrt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-306",
    "description": "A broken access control vulnerability exists in the latest version of lunary-ai/lunary. The `saml.ts` file allows a user from one organization to update the Identity Provider (IDP) settings and view the SSO metadata of another organization. This vulnerability can lead to unauthorized access and potential account takeover if the email of a user in the target organization is known.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-09-13T17:15:13.220",
    "last_modified": "2024-11-03T17:15:15.020",
    "fix_date": "2024-08-24T15:46:05Z"
  },
  "references": [
    {
      "url": "https://github.com/lunary-ai/lunary/commit/1f043d8798ad87346dfe378eea723bff78ad7433",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/251d138c-3911-4a81-96e5-5a4ab59a0b59",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:00.119135",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "lunary",
    "owner": "lunary-ai",
    "created_at": "2023-05-12T10:03:05Z",
    "updated_at": "2025-01-13T15:25:18Z",
    "pushed_at": "2025-01-13T15:25:16Z",
    "size": 5319,
    "stars": 1133,
    "forks": 139,
    "open_issues": 0,
    "watchers": 1133,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "llm-1533-allow-filtering-by-feedback-in-thread-and-trace-page",
      "llm-1666-improve-exports-for-traces-enable-export-for-threads",
      "llm-1708-when-clicking-on-a-trace-row-theres-a-quick-render-bug-that",
      "llm-1711-save-row-sorting-in-views",
      "llm-1906-allow-a-team-owner-to-make-another-user-owner-instead-of",
      "llm-1910-prompts-settings-bug",
      "llm-1911-invite-button-doesnt-show-a-success-notification",
      "llm-1922-button-next-to-metadata-that-redirects-to-search",
      "llm-1939-integer-out-of-range-error-on-lunary-app",
      "llm-1942-implement-streaming-from-database-for-csvjsonl-exports",
      "llm-1966-long-project-names-are-croped-in-project-drowndopre",
      "llm-2101-sign-in-with-github",
      "main",
      "playwright_test_feedback_comment_dataset_user"
    ],
    "languages": {
      "TypeScript": 1181050,
      "Python": 112937,
      "CSS": 8238,
      "JavaScript": 3378,
      "Shell": 522
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:04:58.689247"
  }
}