{
  "cve_id": "CVE-2024-6868",
  "github_data": {
    "repository": "mudler/localai",
    "fix_commit": "a181dd0ebc5d3092fc50f61674d552604fe8ef9c",
    "related_commits": [
      "a181dd0ebc5d3092fc50f61674d552604fe8ef9c"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "a181dd0ebc5d3092fc50f61674d552604fe8ef9c",
      "commit_date": "2024-06-24T15:32:12Z",
      "author": {
        "login": "mudler",
        "type": "User",
        "stats": {
          "total_commits": 2498,
          "average_weekly_commits": 25.489795918367346,
          "total_additions": 192725,
          "total_deletions": 72246,
          "weeks_active": 98
        }
      },
      "commit_message": {
        "title": "refactor: gallery inconsistencies (#2647)",
        "length": 307,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 147,
        "additions": 93,
        "deletions": 54
      },
      "files": [
        {
          "filename": "core/backend/llm.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -12,7 +12,7 @@ import (\n \t\"github.com/mudler/LocalAI/core/config\"\n \t\"github.com/mudler/LocalAI/core/schema\"\n \n-\t\"github.com/mudler/LocalAI/pkg/gallery\"\n+\t\"github.com/mudler/LocalAI/core/gallery\"\n \t\"github.com/mudler/LocalAI/pkg/grpc\"\n \t\"github.com/mudler/LocalAI/pkg/grpc/proto\"\n \tmodel \"github.com/mudler/LocalAI/pkg/model\""
        },
        {
          "filename": "core/cli/models.go",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -5,9 +5,10 @@ import (\n \t\"fmt\"\n \n \tcliContext \"github.com/mudler/LocalAI/core/cli/context\"\n+\t\"github.com/mudler/LocalAI/core/config\"\n \n+\t\"github.com/mudler/LocalAI/core/gallery\"\n \t\"github.com/mudler/LocalAI/pkg/downloader\"\n-\t\"github.com/mudler/LocalAI/pkg/gallery\"\n \t\"github.com/mudler/LocalAI/pkg/startup\"\n \t\"github.com/rs/zerolog/log\"\n \t\"github.com/schollz/progressbar/v3\"\n@@ -34,7 +35,7 @@ type ModelsCMD struct {\n }\n \n func (ml *ModelsList) Run(ctx *cliContext.Context) error {\n-\tvar galleries []gallery.Gallery\n+\tvar galleries []config.Gallery\n \tif err := json.Unmarshal([]byte(ml.Galleries), &galleries); err != nil {\n \t\tlog.Error().Err(err).Msg(\"unable to load galleries\")\n \t}\n@@ -54,7 +55,7 @@ func (ml *ModelsList) Run(ctx *cliContext.Context) error {\n }\n \n func (mi *ModelsInstall) Run(ctx *cliContext.Context) error {\n-\tvar galleries []gallery.Gallery\n+\tvar galleries []config.Gallery\n \tif err := json.Unmarshal([]byte(mi.Galleries), &galleries); err != nil {\n \t\tlog.Error().Err(err).Msg(\"unable to load galleries\")\n \t}"
        },
        {
          "filename": "core/config/application_config.go",
          "status": "modified",
          "additions": 4,
          "deletions": 5,
          "patch": "@@ -6,7 +6,6 @@ import (\n \t\"encoding/json\"\n \t\"time\"\n \n-\t\"github.com/mudler/LocalAI/pkg/gallery\"\n \t\"github.com/mudler/LocalAI/pkg/xsysinfo\"\n \t\"github.com/rs/zerolog/log\"\n )\n@@ -36,7 +35,7 @@ type ApplicationConfig struct {\n \n \tModelLibraryURL string\n \n-\tGalleries []gallery.Gallery\n+\tGalleries []Gallery\n \n \tBackendAssets     embed.FS\n \tAssetsDestination string\n@@ -180,18 +179,18 @@ func WithBackendAssets(f embed.FS) AppOption {\n func WithStringGalleries(galls string) AppOption {\n \treturn func(o *ApplicationConfig) {\n \t\tif galls == \"\" {\n-\t\t\to.Galleries = []gallery.Gallery{}\n+\t\t\to.Galleries = []Gallery{}\n \t\t\treturn\n \t\t}\n-\t\tvar galleries []gallery.Gallery\n+\t\tvar galleries []Gallery\n \t\tif err := json.Unmarshal([]byte(galls), &galleries); err != nil {\n \t\t\tlog.Error().Err(err).Msg(\"failed loading galleries\")\n \t\t}\n \t\to.Galleries = append(o.Galleries, galleries...)\n \t}\n }\n \n-func WithGalleries(galleries []gallery.Gallery) AppOption {\n+func WithGalleries(galleries []Gallery) AppOption {\n \treturn func(o *ApplicationConfig) {\n \t\to.Galleries = append(o.Galleries, galleries...)\n \t}"
        },
        {
          "filename": "core/config/backend_config.go",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -390,10 +390,6 @@ func (c *BackendConfig) Validate() bool {\n \t\t}\n \t}\n \n-\tif c.Name == \"\" {\n-\t\treturn false\n-\t}\n-\n \tif c.Backend != \"\" {\n \t\t// a regex that checks that is a string name with no special characters, except '-' and '_'\n \t\tre := regexp.MustCompile(`^[a-zA-Z0-9-_]+$`)"
        },
        {
          "filename": "core/config/backend_config_test.go",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -16,7 +16,8 @@ var _ = Describe(\"Test cases for config related functions\", func() {\n \t\t\tExpect(err).To(BeNil())\n \t\t\tdefer os.Remove(tmp.Name())\n \t\t\t_, err = tmp.WriteString(\n-\t\t\t\t`backend: \"foo-bar\"\n+\t\t\t\t`backend: \"../foo-bar\"\n+name: \"foo\"\n parameters:\n   model: \"foo-bar\"`)\n \t\t\tExpect(err).ToNot(HaveOccurred())"
        },
        {
          "filename": "core/config/gallery.go",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+package config\n+\n+type Gallery struct {\n+\tURL  string `json:\"url\" yaml:\"url\"`\n+\tName string `json:\"name\" yaml:\"name\"`\n+}"
        },
        {
          "filename": "core/gallery/gallery.go",
          "status": "renamed",
          "additions": 4,
          "deletions": 8,
          "patch": "@@ -8,18 +8,14 @@ import (\n \t\"strings\"\n \n \t\"github.com/imdario/mergo\"\n+\t\"github.com/mudler/LocalAI/core/config\"\n \t\"github.com/mudler/LocalAI/pkg/downloader\"\n \t\"github.com/rs/zerolog/log\"\n \t\"gopkg.in/yaml.v2\"\n )\n \n-type Gallery struct {\n-\tURL  string `json:\"url\" yaml:\"url\"`\n-\tName string `json:\"name\" yaml:\"name\"`\n-}\n-\n // Installs a model from the gallery\n-func InstallModelFromGallery(galleries []Gallery, name string, basePath string, req GalleryModel, downloadStatus func(string, string, string, float64)) error {\n+func InstallModelFromGallery(galleries []config.Gallery, name string, basePath string, req GalleryModel, downloadStatus func(string, string, string, float64)) error {\n \n \tapplyModel := func(model *GalleryModel) error {\n \t\tname = strings.ReplaceAll(name, string(os.PathSeparator), \"__\")\n@@ -117,7 +113,7 @@ func FindModel(models []*GalleryModel, name string, basePath string) *GalleryMod\n // List available models\n // Models galleries are a list of yaml files that are hosted on a remote server (for example github).\n // Each yaml file contains a list of models that can be downloaded and optionally overrides to define a new model setting.\n-func AvailableGalleryModels(galleries []Gallery, basePath string) ([]*GalleryModel, error) {\n+func AvailableGalleryModels(galleries []config.Gallery, basePath string) ([]*GalleryModel, error) {\n \tvar models []*GalleryModel\n \n \t// Get models from galleries\n@@ -146,7 +142,7 @@ func findGalleryURLFromReferenceURL(url string, basePath string) (string, error)\n \treturn refFile, err\n }\n \n-func getGalleryModels(gallery Gallery, basePath string) ([]*GalleryModel, error) {\n+func getGalleryModels(gallery config.Gallery, basePath string) ([]*GalleryModel, error) {\n \tvar models []*GalleryModel = []*GalleryModel{}\n \n \tif strings.HasSuffix(gallery.URL, \".ref\") {"
        },
        {
          "filename": "core/gallery/gallery_suite_test.go",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "core/gallery/models.go",
          "status": "renamed",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -6,8 +6,10 @@ import (\n \t\"path/filepath\"\n \n \t\"github.com/imdario/mergo\"\n+\tlconfig \"github.com/mudler/LocalAI/core/config\"\n \t\"github.com/mudler/LocalAI/pkg/downloader\"\n \t\"github.com/mudler/LocalAI/pkg/utils\"\n+\n \t\"github.com/rs/zerolog/log\"\n \t\"gopkg.in/yaml.v2\"\n )\n@@ -172,6 +174,15 @@ func InstallModel(basePath, nameOverride string, config *Config, configOverrides\n \t\t\treturn fmt.Errorf(\"failed to marshal updated config YAML: %v\", err)\n \t\t}\n \n+\t\tbackendConfig := lconfig.BackendConfig{}\n+\t\terr = yaml.Unmarshal(updatedConfigYAML, &backendConfig)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"failed to unmarshal updated config YAML: %v\", err)\n+\t\t}\n+\t\tif !backendConfig.Validate() {\n+\t\t\treturn fmt.Errorf(\"failed to validate updated config YAML\")\n+\t\t}\n+\n \t\terr = os.WriteFile(configFilePath, updatedConfigYAML, 0600)\n \t\tif err != nil {\n \t\t\treturn fmt.Errorf(\"failed to write updated config file: %v\", err)"
        },
        {
          "filename": "core/gallery/models_test.go",
          "status": "renamed",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -5,7 +5,8 @@ import (\n \t\"os\"\n \t\"path/filepath\"\n \n-\t. \"github.com/mudler/LocalAI/pkg/gallery\"\n+\t\"github.com/mudler/LocalAI/core/config\"\n+\t. \"github.com/mudler/LocalAI/core/gallery\"\n \t. \"github.com/onsi/ginkgo/v2\"\n \t. \"github.com/onsi/gomega\"\n \t\"gopkg.in/yaml.v3\"\n@@ -54,7 +55,7 @@ var _ = Describe(\"Model test\", func() {\n \t\t\terr = os.WriteFile(galleryFilePath, out, 0600)\n \t\t\tExpect(err).ToNot(HaveOccurred())\n \t\t\tExpect(filepath.IsAbs(galleryFilePath)).To(BeTrue(), galleryFilePath)\n-\t\t\tgalleries := []Gallery{\n+\t\t\tgalleries := []config.Gallery{\n \t\t\t\t{\n \t\t\t\t\tName: \"test\",\n \t\t\t\t\tURL:  \"file://\" + galleryFilePath,"
        },
        {
          "filename": "core/gallery/op.go",
          "status": "renamed",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -1,13 +1,15 @@\n package gallery\r\n \r\n+import \"github.com/mudler/LocalAI/core/config\"\r\n+\r\n type GalleryOp struct {\r\n \tId               string\r\n \tGalleryModelName string\r\n \tConfigURL        string\r\n \tDelete           bool\r\n \r\n \tReq       GalleryModel\r\n-\tGalleries []Gallery\r\n+\tGalleries []config.Gallery\r\n }\r\n \r\n type GalleryOpStatus struct {\r"
        },
        {
          "filename": "core/gallery/request.go",
          "status": "renamed",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -3,6 +3,8 @@ package gallery\n import (\n \t\"fmt\"\n \t\"strings\"\n+\n+\t\"github.com/mudler/LocalAI/core/config\"\n )\n \n // GalleryModel is the struct used to represent a model in the gallery returned by the endpoint.\n@@ -23,7 +25,7 @@ type GalleryModel struct {\n \t// AdditionalFiles are used to add additional files to the model\n \tAdditionalFiles []File `json:\"files,omitempty\" yaml:\"files,omitempty\"`\n \t// Gallery is a reference to the gallery which contains the model\n-\tGallery Gallery `json:\"gallery,omitempty\" yaml:\"gallery,omitempty\"`\n+\tGallery config.Gallery `json:\"gallery,omitempty\" yaml:\"gallery,omitempty\"`\n \t// Installed is used to indicate if the model is installed or not\n \tInstalled bool `json:\"installed,omitempty\" yaml:\"installed,omitempty\"`\n }"
        },
        {
          "filename": "core/gallery/request_test.go",
          "status": "renamed",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,7 +1,7 @@\n package gallery_test\n \n import (\n-\t. \"github.com/mudler/LocalAI/pkg/gallery\"\n+\t. \"github.com/mudler/LocalAI/core/gallery\"\n \t. \"github.com/onsi/ginkgo/v2\"\n \t. \"github.com/onsi/gomega\"\n )"
        },
        {
          "filename": "core/http/app_test.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -19,8 +19,8 @@ import (\n \t\"github.com/mudler/LocalAI/core/startup\"\n \n \t\"github.com/gofiber/fiber/v2\"\n+\t\"github.com/mudler/LocalAI/core/gallery\"\n \t\"github.com/mudler/LocalAI/pkg/downloader\"\n-\t\"github.com/mudler/LocalAI/pkg/gallery\"\n \t\"github.com/mudler/LocalAI/pkg/model\"\n \t. \"github.com/onsi/ginkgo/v2\"\n \t. \"github.com/onsi/gomega\"\n@@ -247,7 +247,7 @@ var _ = Describe(\"API test\", func() {\n \t\t\terr = os.WriteFile(filepath.Join(modelDir, \"gallery_simple.yaml\"), out, 0600)\n \t\t\tExpect(err).ToNot(HaveOccurred())\n \n-\t\t\tgalleries := []gallery.Gallery{\n+\t\t\tgalleries := []config.Gallery{\n \t\t\t\t{\n \t\t\t\t\tName: \"test\",\n \t\t\t\t\tURL:  \"file://\" + filepath.Join(modelDir, \"gallery_simple.yaml\"),\n@@ -603,7 +603,7 @@ var _ = Describe(\"API test\", func() {\n \n \t\t\tc, cancel = context.WithCancel(context.Background())\n \n-\t\t\tgalleries := []gallery.Gallery{\n+\t\t\tgalleries := []config.Gallery{\n \t\t\t\t{\n \t\t\t\t\tName: \"model-gallery\",\n \t\t\t\t\tURL:  \"https://raw.githubusercontent.com/go-skynet/model-gallery/main/index.yaml\","
        },
        {
          "filename": "core/http/elements/gallery.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -6,8 +6,8 @@ import (\n \n \t\"github.com/chasefleming/elem-go\"\n \t\"github.com/chasefleming/elem-go/attrs\"\n+\t\"github.com/mudler/LocalAI/core/gallery\"\n \t\"github.com/mudler/LocalAI/core/services\"\n-\t\"github.com/mudler/LocalAI/pkg/gallery\"\n \t\"github.com/mudler/LocalAI/pkg/xsync\"\n )\n "
        },
        {
          "filename": "core/http/endpoints/localai/gallery.go",
          "status": "modified",
          "additions": 9,
          "deletions": 8,
          "patch": "@@ -7,13 +7,14 @@ import (\n \r\n \t\"github.com/gofiber/fiber/v2\"\r\n \t\"github.com/google/uuid\"\r\n+\t\"github.com/mudler/LocalAI/core/config\"\r\n+\t\"github.com/mudler/LocalAI/core/gallery\"\r\n \t\"github.com/mudler/LocalAI/core/services\"\r\n-\t\"github.com/mudler/LocalAI/pkg/gallery\"\r\n \t\"github.com/rs/zerolog/log\"\r\n )\r\n \r\n type ModelGalleryEndpointService struct {\r\n-\tgalleries      []gallery.Gallery\r\n+\tgalleries      []config.Gallery\r\n \tmodelPath      string\r\n \tgalleryApplier *services.GalleryService\r\n }\r\n@@ -24,7 +25,7 @@ type GalleryModel struct {\n \tgallery.GalleryModel\r\n }\r\n \r\n-func CreateModelGalleryEndpointService(galleries []gallery.Gallery, modelPath string, galleryApplier *services.GalleryService) ModelGalleryEndpointService {\r\n+func CreateModelGalleryEndpointService(galleries []config.Gallery, modelPath string, galleryApplier *services.GalleryService) ModelGalleryEndpointService {\r\n \treturn ModelGalleryEndpointService{\r\n \t\tgalleries:      galleries,\r\n \t\tmodelPath:      modelPath,\r\n@@ -129,12 +130,12 @@ func (mgs *ModelGalleryEndpointService) ListModelGalleriesEndpoint() func(c *fib\n \r\n func (mgs *ModelGalleryEndpointService) AddModelGalleryEndpoint() func(c *fiber.Ctx) error {\r\n \treturn func(c *fiber.Ctx) error {\r\n-\t\tinput := new(gallery.Gallery)\r\n+\t\tinput := new(config.Gallery)\r\n \t\t// Get input data from the request body\r\n \t\tif err := c.BodyParser(input); err != nil {\r\n \t\t\treturn err\r\n \t\t}\r\n-\t\tif slices.ContainsFunc(mgs.galleries, func(gallery gallery.Gallery) bool {\r\n+\t\tif slices.ContainsFunc(mgs.galleries, func(gallery config.Gallery) bool {\r\n \t\t\treturn gallery.Name == input.Name\r\n \t\t}) {\r\n \t\t\treturn fmt.Errorf(\"%s already exists\", input.Name)\r\n@@ -151,17 +152,17 @@ func (mgs *ModelGalleryEndpointService) AddModelGalleryEndpoint() func(c *fiber.\n \r\n func (mgs *ModelGalleryEndpointService) RemoveModelGalleryEndpoint() func(c *fiber.Ctx) error {\r\n \treturn func(c *fiber.Ctx) error {\r\n-\t\tinput := new(gallery.Gallery)\r\n+\t\tinput := new(config.Gallery)\r\n \t\t// Get input data from the request body\r\n \t\tif err := c.BodyParser(input); err != nil {\r\n \t\t\treturn err\r\n \t\t}\r\n-\t\tif !slices.ContainsFunc(mgs.galleries, func(gallery gallery.Gallery) bool {\r\n+\t\tif !slices.ContainsFunc(mgs.galleries, func(gallery config.Gallery) bool {\r\n \t\t\treturn gallery.Name == input.Name\r\n \t\t}) {\r\n \t\t\treturn fmt.Errorf(\"%s is not currently registered\", input.Name)\r\n \t\t}\r\n-\t\tmgs.galleries = slices.DeleteFunc(mgs.galleries, func(gallery gallery.Gallery) bool {\r\n+\t\tmgs.galleries = slices.DeleteFunc(mgs.galleries, func(gallery config.Gallery) bool {\r\n \t\t\treturn gallery.Name == input.Name\r\n \t\t})\r\n \t\treturn c.Send(nil)\r"
        },
        {
          "filename": "core/http/endpoints/localai/welcome.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -3,8 +3,8 @@ package localai\n import (\n \t\"github.com/gofiber/fiber/v2\"\n \t\"github.com/mudler/LocalAI/core/config\"\n+\t\"github.com/mudler/LocalAI/core/gallery\"\n \t\"github.com/mudler/LocalAI/internal\"\n-\t\"github.com/mudler/LocalAI/pkg/gallery\"\n \t\"github.com/mudler/LocalAI/pkg/model\"\n )\n "
        },
        {
          "filename": "core/http/endpoints/openai/request.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -257,5 +257,9 @@ func mergeRequestWithConfig(modelFile string, input *schema.OpenAIRequest, cm *c\n \t// Set the parameters for the language model prediction\n \tupdateRequestConfig(cfg, input)\n \n+\tif !cfg.Validate() {\n+\t\treturn nil, nil, fmt.Errorf(\"failed to validate config\")\n+\t}\n+\n \treturn cfg, input, err\n }"
        },
        {
          "filename": "core/http/endpoints/openai/transcription.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -32,7 +32,7 @@ func TranscriptEndpoint(cl *config.BackendConfigLoader, ml *model.ModelLoader, a\n \n \t\tconfig, input, err := mergeRequestWithConfig(m, input, cl, ml, appConfig.Debug, appConfig.Threads, appConfig.ContextSize, appConfig.F16)\n \t\tif err != nil {\n-\t\t\treturn fmt.Errorf(\"failed reading parameters from request:%w\", err)\n+\t\t\treturn fmt.Errorf(\"failed reading parameters from request: %w\", err)\n \t\t}\n \t\t// retrieve the file data from the request\n \t\tfile, err := c.FormFile(\"file\")"
        },
        {
          "filename": "core/http/routes/ui.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -7,11 +7,11 @@ import (\n \t\"strings\"\n \n \t\"github.com/mudler/LocalAI/core/config\"\n+\t\"github.com/mudler/LocalAI/core/gallery\"\n \t\"github.com/mudler/LocalAI/core/http/elements\"\n \t\"github.com/mudler/LocalAI/core/http/endpoints/localai\"\n \t\"github.com/mudler/LocalAI/core/services\"\n \t\"github.com/mudler/LocalAI/internal\"\n-\t\"github.com/mudler/LocalAI/pkg/gallery\"\n \t\"github.com/mudler/LocalAI/pkg/model\"\n \t\"github.com/mudler/LocalAI/pkg/xsync\"\n \t\"github.com/rs/zerolog/log\""
        },
        {
          "filename": "core/services/gallery.go",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -9,7 +9,7 @@ import (\n \t\"sync\"\r\n \r\n \t\"github.com/mudler/LocalAI/core/config\"\r\n-\t\"github.com/mudler/LocalAI/pkg/gallery\"\r\n+\t\"github.com/mudler/LocalAI/core/gallery\"\r\n \t\"github.com/mudler/LocalAI/pkg/startup\"\r\n \t\"github.com/mudler/LocalAI/pkg/utils\"\r\n \t\"gopkg.in/yaml.v2\"\r\n@@ -96,6 +96,7 @@ func (g *GalleryService) Start(c context.Context, cl *config.BackendConfigLoader\n \t\t\t\t// delete a model\r\n \t\t\t\tif op.Delete {\r\n \t\t\t\t\tmodelConfig := &config.BackendConfig{}\r\n+\r\n \t\t\t\t\t// Galleryname is the name of the model in this case\r\n \t\t\t\t\tdat, err := os.ReadFile(filepath.Join(g.appConfig.ModelPath, op.GalleryModelName+\".yaml\"))\r\n \t\t\t\t\tif err != nil {\r\n@@ -174,7 +175,7 @@ type galleryModel struct {\n \tID                   string           `json:\"id\"`\r\n }\r\n \r\n-func processRequests(modelPath string, galleries []gallery.Gallery, requests []galleryModel) error {\r\n+func processRequests(modelPath string, galleries []config.Gallery, requests []galleryModel) error {\r\n \tvar err error\r\n \tfor _, r := range requests {\r\n \t\tutils.ResetDownloadTimers()\r\n@@ -189,7 +190,7 @@ func processRequests(modelPath string, galleries []gallery.Gallery, requests []g\n \treturn err\r\n }\r\n \r\n-func ApplyGalleryFromFile(modelPath, s string, galleries []gallery.Gallery) error {\r\n+func ApplyGalleryFromFile(modelPath, s string, galleries []config.Gallery) error {\r\n \tdat, err := os.ReadFile(s)\r\n \tif err != nil {\r\n \t\treturn err\r\n@@ -203,7 +204,7 @@ func ApplyGalleryFromFile(modelPath, s string, galleries []gallery.Gallery) erro\n \treturn processRequests(modelPath, galleries, requests)\r\n }\r\n \r\n-func ApplyGalleryFromString(modelPath, s string, galleries []gallery.Gallery) error {\r\n+func ApplyGalleryFromString(modelPath, s string, galleries []config.Gallery) error {\r\n \tvar requests []galleryModel\r\n \terr := json.Unmarshal([]byte(s), &requests)\r\n \tif err != nil {\r"
        },
        {
          "filename": "pkg/model/initializers.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -13,6 +13,7 @@ import (\n \t\"github.com/klauspost/cpuid/v2\"\n \tgrpc \"github.com/mudler/LocalAI/pkg/grpc\"\n \t\"github.com/mudler/LocalAI/pkg/library\"\n+\t\"github.com/mudler/LocalAI/pkg/utils\"\n \t\"github.com/mudler/LocalAI/pkg/xsysinfo\"\n \t\"github.com/phayes/freeport\"\n \t\"github.com/rs/zerolog/log\"\n@@ -309,6 +310,9 @@ func (ml *ModelLoader) grpcModel(backend string, o *Options) func(string, string\n \t\t\t}\n \t\t} else {\n \t\t\tgrpcProcess := backendPath(o.assetDir, backend)\n+\t\t\tif err := utils.VerifyPath(grpcProcess, o.assetDir); err != nil {\n+\t\t\t\treturn \"\", fmt.Errorf(\"grpc process not found in assetdir: %s\", err.Error())\n+\t\t\t}\n \n \t\t\tif autoDetect {\n \t\t\t\t// autoDetect GRPC process to start based on system capabilities"
        },
        {
          "filename": "pkg/startup/model_preload.go",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -7,17 +7,18 @@ import (\n \t\"path/filepath\"\n \t\"strings\"\n \n+\t\"github.com/mudler/LocalAI/core/config\"\n+\t\"github.com/mudler/LocalAI/core/gallery\"\n \t\"github.com/mudler/LocalAI/embedded\"\n \t\"github.com/mudler/LocalAI/pkg/downloader\"\n-\t\"github.com/mudler/LocalAI/pkg/gallery\"\n \t\"github.com/mudler/LocalAI/pkg/utils\"\n \t\"github.com/rs/zerolog/log\"\n )\n \n // InstallModels will preload models from the given list of URLs and galleries\n // It will download the model if it is not already present in the model path\n // It will also try to resolve if the model is an embedded model YAML configuration\n-func InstallModels(galleries []gallery.Gallery, modelLibraryURL string, modelPath string, downloadStatus func(string, string, string, float64), models ...string) error {\n+func InstallModels(galleries []config.Gallery, modelLibraryURL string, modelPath string, downloadStatus func(string, string, string, float64), models ...string) error {\n \t// create an error that groups all errors\n \tvar err error\n \n@@ -126,7 +127,7 @@ func InstallModels(galleries []gallery.Gallery, modelLibraryURL string, modelPat\n \treturn err\n }\n \n-func installModel(galleries []gallery.Gallery, modelName, modelPath string, downloadStatus func(string, string, string, float64)) (error, bool) {\n+func installModel(galleries []config.Gallery, modelName, modelPath string, downloadStatus func(string, string, string, float64)) (error, bool) {\n \tmodels, err := gallery.AvailableGalleryModels(galleries, modelPath)\n \tif err != nil {\n \t\treturn err, false"
        },
        {
          "filename": "pkg/startup/model_preload_test.go",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -5,7 +5,7 @@ import (\n \t\"os\"\n \t\"path/filepath\"\n \n-\t\"github.com/mudler/LocalAI/pkg/gallery\"\n+\t\"github.com/mudler/LocalAI/core/config\"\n \t. \"github.com/mudler/LocalAI/pkg/startup\"\n \t\"github.com/mudler/LocalAI/pkg/utils\"\n \n@@ -22,7 +22,7 @@ var _ = Describe(\"Preload test\", func() {\n \t\t\tlibraryURL := \"https://raw.githubusercontent.com/mudler/LocalAI/master/embedded/model_library.yaml\"\n \t\t\tfileName := fmt.Sprintf(\"%s.yaml\", \"1701d57f28d47552516c2b6ecc3cc719\")\n \n-\t\t\tInstallModels([]gallery.Gallery{}, libraryURL, tmpdir, nil, \"phi-2\")\n+\t\t\tInstallModels([]config.Gallery{}, libraryURL, tmpdir, nil, \"phi-2\")\n \n \t\t\tresultFile := filepath.Join(tmpdir, fileName)\n \n@@ -38,7 +38,7 @@ var _ = Describe(\"Preload test\", func() {\n \t\t\turl := \"https://raw.githubusercontent.com/mudler/LocalAI/master/examples/configurations/phi-2.yaml\"\n \t\t\tfileName := fmt.Sprintf(\"%s.yaml\", utils.MD5(url))\n \n-\t\t\tInstallModels([]gallery.Gallery{}, \"\", tmpdir, nil, url)\n+\t\t\tInstallModels([]config.Gallery{}, \"\", tmpdir, nil, url)\n \n \t\t\tresultFile := filepath.Join(tmpdir, fileName)\n \n@@ -52,7 +52,7 @@ var _ = Describe(\"Preload test\", func() {\n \t\t\tExpect(err).ToNot(HaveOccurred())\n \t\t\turl := \"phi-2\"\n \n-\t\t\tInstallModels([]gallery.Gallery{}, \"\", tmpdir, nil, url)\n+\t\t\tInstallModels([]config.Gallery{}, \"\", tmpdir, nil, url)\n \n \t\t\tentry, err := os.ReadDir(tmpdir)\n \t\t\tExpect(err).ToNot(HaveOccurred())\n@@ -70,7 +70,7 @@ var _ = Describe(\"Preload test\", func() {\n \t\t\turl := \"mistral-openorca\"\n \t\t\tfileName := fmt.Sprintf(\"%s.yaml\", utils.MD5(url))\n \n-\t\t\tInstallModels([]gallery.Gallery{}, \"\", tmpdir, nil, url)\n+\t\t\tInstallModels([]config.Gallery{}, \"\", tmpdir, nil, url)\n \n \t\t\tresultFile := filepath.Join(tmpdir, fileName)\n "
        },
        {
          "filename": "pkg/utils/untar.go",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@ package utils\n \n import (\n \t\"fmt\"\n+\t\"os\"\n \n \t\"github.com/mholt/archiver/v3\"\n )\n@@ -52,5 +53,17 @@ func ExtractArchive(archive, dst string) error {\n \tcase *archiver.TarZstd:\n \t\tv.Tar = mytar\n \t}\n+\n+\terr = archiver.Walk(archive, func(f archiver.File) error {\n+\t\tif f.FileInfo.Mode()&os.ModeSymlink != 0 {\n+\t\t\treturn fmt.Errorf(\"archive contains a symlink\")\n+\t\t}\n+\t\treturn nil\n+\t})\n+\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n \treturn un.Unarchive(archive, dst)\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 4,
        "dependency_files": 0,
        "test_files": 6,
        "unique_directories": 13,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4ab107bc1ae1323f80dcad8b13fbefd943a067cb",
            "date": "2025-01-25T21:44:14Z",
            "author_login": "localai-bot"
          },
          {
            "sha": "4c3710a5319269fa159c8521dd74a13fe3be11c7",
            "date": "2025-01-25T10:07:31Z",
            "author_login": "mudler"
          },
          {
            "sha": "901b06284adaddddbf2cbbc58fd490080950b6a0",
            "date": "2025-01-25T10:06:05Z",
            "author_login": "mudler"
          },
          {
            "sha": "8eef5a2c5ef85a045a10b7255520a7ca4fd9df81",
            "date": "2025-01-25T10:04:12Z",
            "author_login": "mudler"
          },
          {
            "sha": "e9cace137b52b37b32c6284ce842b432bd4e21c3",
            "date": "2025-01-25T08:04:38Z",
            "author_login": "M0Rf30"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-20",
    "description": "mudler/LocalAI version 2.17.1 allows for arbitrary file write due to improper handling of automatic archive extraction. When model configurations specify additional files as archives (e.g., .tar), these archives are automatically extracted after downloading. This behavior can be exploited to perform a 'tarslip' attack, allowing files to be written to arbitrary locations on the server, bypassing checks that normally restrict files to the models directory. This vulnerability can lead to remote code execution (RCE) by overwriting backend assets used by the server.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-29T13:15:08.473",
    "last_modified": "2024-11-13T14:43:33.037",
    "fix_date": "2024-06-24T15:32:12Z"
  },
  "references": [
    {
      "url": "https://github.com/mudler/localai/commit/a181dd0ebc5d3092fc50f61674d552604fe8ef9c",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/752d2376-2d9a-4e17-b462-3c267f9dd229",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.104428",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "LocalAI",
    "owner": "mudler",
    "created_at": "2023-03-18T22:58:02Z",
    "updated_at": "2025-01-26T06:56:52Z",
    "pushed_at": "2025-01-25T21:44:15Z",
    "size": 12915,
    "stars": 29743,
    "forks": 2238,
    "open_issues": 410,
    "watchers": 29743,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Go": 810465,
      "Python": 162403,
      "JavaScript": 145729,
      "C++": 107462,
      "HTML": 81769,
      "Makefile": 48984,
      "Shell": 28747,
      "Dockerfile": 17548,
      "CSS": 4436,
      "CMake": 3102,
      "C": 405,
      "Earthly": 110
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:03:39.069913"
  }
}