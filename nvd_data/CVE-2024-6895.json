{
  "cve_id": "CVE-2024-6895",
  "github_data": {
    "repository": "yugabyte/yugabyte-db",
    "fix_commit": "9687371d8777f876285b737a9d01995bc46bafa5",
    "related_commits": [
      "9687371d8777f876285b737a9d01995bc46bafa5",
      "9687371d8777f876285b737a9d01995bc46bafa5"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "9687371d8777f876285b737a9d01995bc46bafa5",
      "commit_date": "2024-04-12T03:57:55Z",
      "author": {
        "login": "vpatibandla-yb",
        "type": "User",
        "stats": {
          "total_commits": 134,
          "average_weekly_commits": 0.15746180963572268,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 84
        }
      },
      "commit_message": {
        "title": "[BACKPORT 2.20][PLAT-10472] Insecure Account Profile Management",
        "length": 1797,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 610,
        "additions": 441,
        "deletions": 169
      },
      "files": [
        {
          "filename": "managed/src/main/java/com/yugabyte/yw/common/RedactingService.java",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -34,6 +34,8 @@ public class RedactingService {\n           .addAll(SECRET_PATHS_FOR_APIS)\n           .add(\"$..password\")\n           .add(\"$..confirmPassword\")\n+          .add(\"$..newPassword\")\n+          .add(\"$..currentPassword\")\n           .add(\"$..['config.AWS_ACCESS_KEY_ID']\")\n           .add(\"$..['config.AWS_SECRET_ACCESS_KEY']\")\n           // GCP private key"
        },
        {
          "filename": "managed/src/main/java/com/yugabyte/yw/controllers/UsersController.java",
          "status": "modified",
          "additions": 68,
          "deletions": 42,
          "patch": "@@ -20,12 +20,14 @@\n import com.yugabyte.yw.common.user.UserService;\n import com.yugabyte.yw.forms.PlatformResults;\n import com.yugabyte.yw.forms.PlatformResults.YBPSuccess;\n+import com.yugabyte.yw.forms.UserPasswordChangeFormData;\n import com.yugabyte.yw.forms.UserProfileFormData;\n import com.yugabyte.yw.forms.UserRegisterFormData;\n import com.yugabyte.yw.models.Audit;\n import com.yugabyte.yw.models.Customer;\n import com.yugabyte.yw.models.Users;\n import com.yugabyte.yw.models.Users.UserType;\n+import com.yugabyte.yw.models.common.YbaApi;\n import com.yugabyte.yw.models.extended.UserWithFeatures;\n import com.yugabyte.yw.models.rbac.ResourceGroup;\n import com.yugabyte.yw.models.rbac.Role;\n@@ -46,6 +48,7 @@\n import java.util.*;\n import java.util.stream.Collectors;\n import javax.inject.Inject;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -57,6 +60,7 @@\n @Api(\n     value = \"User management\",\n     authorizations = @Authorization(AbstractPlatformController.API_KEY_AUTH))\n+@Slf4j\n public class UsersController extends AuthenticatedController {\n \n   public static final Logger LOG = LoggerFactory.getLogger(UsersController.class);\n@@ -441,9 +445,8 @@ public Result changeRole(UUID customerUUID, UUID userUUID, String role, Http.Req\n    * @return JSON response on whether role change was successful or not.\n    */\n   @ApiOperation(\n-      value = \"Change a user's password\",\n-      nickname = \"updateUserPassword\",\n-      response = YBPSuccess.class)\n+      notes = \"<b style=\\\"color:#ff0000\\\">Deprecated since YBA version 2024.1.0.0.</b></p>\",\n+      value = \"Change password - deprecated\")\n   @ApiImplicitParams({\n     @ApiImplicitParam(\n         name = \"Users\",\n@@ -459,36 +462,64 @@ public Result changeRole(UUID customerUUID, UUID userUUID, String role, Http.Req\n                   resourceType = ResourceType.USER,\n                   action = Action.UPDATE_PROFILE),\n           resourceLocation = @Resource(path = Util.USERS, sourceType = SourceType.ENDPOINT)))\n+  @YbaApi(visibility = YbaApi.YbaApiVisibility.DEPRECATED, sinceYBAVersion = \"2.20.4.0\")\n+  @Deprecated\n   public Result changePassword(UUID customerUUID, UUID userUUID, Http.Request request) {\n-    Users user = Users.getOrBadRequest(customerUUID, userUUID);\n-    if (UserType.ldap == user.getUserType()) {\n-      throw new PlatformServiceException(BAD_REQUEST, \"Can't change password for LDAP user.\");\n-    }\n+    throw new PlatformServiceException(\n+        MOVED_PERMANENTLY, String.format(\"Moved to /customers/%s/reset_password\", customerUUID));\n+  }\n+\n+  /**\n+   * PUT endpoint for changing the password of an existing user.\n+   *\n+   * @return JSON response on whether role change was successful or not.\n+   */\n+  @ApiOperation(\n+      value = \"Reset the user's password\",\n+      nickname = \"resetUserPassword\",\n+      response = YBPSuccess.class)\n+  @ApiImplicitParams({\n+    @ApiImplicitParam(\n+        name = \"Users\",\n+        value = \"User data containing the current, new password\",\n+        required = true,\n+        dataType = \"com.yugabyte.yw.forms.UserPasswordChangeFormData\",\n+        paramType = \"body\")\n+  })\n+  @AuthzPath(\n+      @RequiredPermissionOnResource(\n+          requiredPermission =\n+              @PermissionAttribute(\n+                  resourceType = ResourceType.USER,\n+                  action = Action.UPDATE_PROFILE),\n+          resourceLocation = @Resource(path = Util.USERS, sourceType = SourceType.REQUEST_CONTEXT)))\n+  public Result resetPassword(UUID customerUUID, Http.Request request) {\n+    Users user = getLoggedInUser(request);\n+    Form<UserPasswordChangeFormData> form =\n+        formFactory.getFormDataOrBadRequest(request, UserPasswordChangeFormData.class);\n+    UserPasswordChangeFormData formData = form.get();\n \n-    if (!checkUpdateProfileAccessForPasswordChange(userUUID, request)) {\n+    if (user.getUserType() == UserType.ldap) {\n       throw new PlatformServiceException(\n-          BAD_REQUEST, \"Only the User can change his/her own password.\");\n+          BAD_REQUEST, \"Reset password not supported for LDAP users\");\n     }\n \n-    Form<UserRegisterFormData> form =\n-        formFactory.getFormDataOrBadRequest(request, UserRegisterFormData.class);\n-\n-    UserRegisterFormData formData = form.get();\n-    passwordPolicyService.checkPasswordPolicy(customerUUID, formData.getPassword());\n-    if (formData.getEmail().equals(user.getEmail())) {\n-      if (formData.getPassword().equals(formData.getConfirmPassword())) {\n-        user.setPassword(formData.getPassword());\n-        user.save();\n-        auditService()\n-            .createAuditEntry(\n-                request,\n-                Audit.TargetType.User,\n-                userUUID.toString(),\n-                Audit.ActionType.ChangeUserPassword);\n-        return YBPSuccess.empty();\n-      }\n+    user = Users.authWithPassword(user.getEmail(), formData.getCurrentPassword());\n+    if (user == null) {\n+      throw new PlatformServiceException(UNAUTHORIZED, \"Incorrect current password provided\");\n     }\n-    throw new PlatformServiceException(BAD_REQUEST, \"Invalid user credentials.\");\n+\n+    passwordPolicyService.checkPasswordPolicy(customerUUID, formData.getNewPassword());\n+    user.setPassword(formData.getNewPassword());\n+    user.save();\n+    auditService()\n+        .createAuditEntryWithReqBody(\n+            request,\n+            Audit.TargetType.User,\n+            user.getUuid().toString(),\n+            Audit.ActionType.ChangeUserPassword,\n+            Json.toJson(formData));\n+    return YBPSuccess.empty();\n   }\n \n   private Users getLoggedInUser(Http.Request request) {\n@@ -542,21 +573,11 @@ public Result updateProfile(UUID customerUUID, UUID userUUID, Http.Request reque\n \n     // Password validation for both old RBAC and new RBAC is same.\n     if (StringUtils.isNotEmpty(formData.getPassword())) {\n-      if (UserType.ldap == user.getUserType()) {\n-        throw new PlatformServiceException(BAD_REQUEST, \"Can't change password for LDAP user.\");\n-      }\n-\n-      if (!checkUpdateProfileAccessForPasswordChange(userUUID, request)) {\n-        throw new PlatformServiceException(\n-            BAD_REQUEST, \"Only the User can change his/her own password.\");\n-      }\n-\n-      passwordPolicyService.checkPasswordPolicy(customerUUID, formData.getPassword());\n-      if (!formData.getPassword().equals(formData.getConfirmPassword())) {\n-        throw new PlatformServiceException(\n-            BAD_REQUEST, \"Password and confirm password do not match.\");\n-      }\n-      user.setPassword(formData.getPassword());\n+      throw new PlatformServiceException(\n+          FORBIDDEN,\n+          String.format(\n+              \"API does not support password change. Use /customers/%s/reset_password\",\n+              customerUUID));\n     }\n \n     if (useNewAuthz) {\n@@ -606,6 +627,11 @@ public Result updateProfile(UUID customerUUID, UUID userUUID, Http.Request reque\n               BAD_REQUEST, \"Can't Assign the role of SuperAdmin to another user.\");\n         }\n \n+        if (loggedInUser.getUuid().equals(user.getUuid())) {\n+          throw new PlatformServiceException(\n+              FORBIDDEN, \"User cannot modify their own role privileges\");\n+        }\n+\n         if (user.getUserType() == UserType.ldap && user.isLdapSpecifiedRole() == true) {\n           throw new PlatformServiceException(BAD_REQUEST, \"Cannot change role for LDAP user.\");\n         }"
        },
        {
          "filename": "managed/src/main/java/com/yugabyte/yw/forms/UserPasswordChangeFormData.java",
          "status": "added",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -0,0 +1,20 @@\n+package com.yugabyte.yw.forms;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@ApiModel(\n+    value = \"UserPasswordChangeFormData\",\n+    description = \"User registration data. The API and UI use this to validate form data.\")\n+@Getter\n+@Setter\n+public class UserPasswordChangeFormData {\n+\n+  @ApiModelProperty(value = \"Current Password\", example = \"Test@1234\")\n+  private String currentPassword;\n+\n+  @ApiModelProperty(value = \"New Password\", example = \"Test@1234\")\n+  private String newPassword;\n+}"
        },
        {
          "filename": "managed/src/main/java/com/yugabyte/yw/rbac/enums/SourceType.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -4,7 +4,8 @@\n public enum SourceType {\n   ENDPOINT(\"endpoint\"),\n   REQUEST_BODY(\"requestBody\"),\n-  DB(\"db\");\n+  DB(\"db\"),\n+  REQUEST_CONTEXT(\"requestContext\");\n \n   private final String type;\n "
        },
        {
          "filename": "managed/src/main/java/com/yugabyte/yw/rbac/handlers/AuthorizationHandler.java",
          "status": "modified",
          "additions": 45,
          "deletions": 4,
          "patch": "@@ -5,6 +5,7 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.inject.Inject;\n import com.typesafe.config.Config;\n+import com.yugabyte.yw.common.Util;\n import com.yugabyte.yw.common.config.GlobalConfKeys;\n import com.yugabyte.yw.common.config.RuntimeConfigCache;\n import com.yugabyte.yw.controllers.JWTVerifier;\n@@ -44,7 +45,6 @@ public class AuthorizationHandler extends Action<AuthzPath> {\n   public static final String API_TOKEN_HEADER = \"X-AUTH-YW-API-TOKEN\";\n   public static final String API_JWT_HEADER = \"X-AUTH-YW-API-JWT\";\n   public static final String COOKIE_PLAY_SESSION = \"PLAY_SESSION\";\n-  private static final String CUSTOMERS = \"customers\";\n \n   private final Config config;\n   private final RuntimeConfigCache runtimeConfigCache;\n@@ -81,12 +81,13 @@ public CompletionStage<Result> call(Http.Request request) {\n       return CompletableFuture.completedFuture(Results.unauthorized(\"Unable To authenticate User\"));\n     }\n     UserWithFeatures userWithFeatures = new UserWithFeatures().setUser(user);\n-    RequestContext.put(TokenAuthenticator.CUSTOMER, Customer.get(user.getCustomerUUID()));\n+    Customer customer = Customer.get(user.getCustomerUUID());\n+    RequestContext.put(TokenAuthenticator.CUSTOMER, customer);\n     RequestContext.put(TokenAuthenticator.USER, userWithFeatures);\n \n     String endpoint = request.uri();\n     UUID customerUUID = null;\n-    Pattern custPattern = Pattern.compile(String.format(\".*/%s/\" + UUID_PATTERN, CUSTOMERS));\n+    Pattern custPattern = Pattern.compile(String.format(\".*/%s/\" + UUID_PATTERN, Util.CUSTOMERS));\n     Matcher custMatcher = custPattern.matcher(endpoint);\n     if (custMatcher.find()) {\n       customerUUID = UUID.fromString(custMatcher.group(1));\n@@ -149,7 +150,7 @@ public CompletionStage<Result> call(Http.Request request) {\n             Matcher matcher = pattern.matcher(endpoint);\n             if (matcher.find()) {\n               resourceUUID = UUID.fromString(matcher.group(3));\n-            } else if (resource.path().equals(CUSTOMERS)) {\n+            } else if (resource.path().equals(Util.CUSTOMERS)) {\n               resourceUUID = user.getCustomerUUID();\n             }\n             isPermissionPresentOnResource =\n@@ -233,6 +234,46 @@ public CompletionStage<Result> call(Http.Request request) {\n             }\n             break;\n           }\n+        case REQUEST_CONTEXT:\n+          {\n+            switch (resource.path()) {\n+              case Util.USERS:\n+                {\n+                  isPermissionPresentOnResource =\n+                      checkResourcePermission(applicableRoleBindings, attribute, user.getUuid());\n+                  if (!isPermissionPresentOnResource) {\n+                    log.debug(\n+                        \"User {} does not have role bindings for the permission {}\",\n+                        user.getUuid(),\n+                        attribute);\n+                    return CompletableFuture.completedFuture(\n+                        Results.unauthorized(\"Unable to authorize user\"));\n+                  }\n+                  break;\n+                }\n+              case Util.CUSTOMERS:\n+                {\n+                  isPermissionPresentOnResource =\n+                      checkResourcePermission(\n+                          applicableRoleBindings, attribute, customer.getUuid());\n+                  if (!isPermissionPresentOnResource) {\n+                    log.debug(\n+                        \"User {} does not have role bindings for the permission {}\",\n+                        user.getUuid(),\n+                        attribute);\n+                    return CompletableFuture.completedFuture(\n+                        Results.unauthorized(\"Unable to authorize user\"));\n+                  }\n+                  break;\n+                }\n+              default:\n+                {\n+                  return CompletableFuture.completedFuture(\n+                      Results.unauthorized(\"Unable to authorize user\"));\n+                }\n+            }\n+            break;\n+          }\n         default:\n           {\n             log.debug(\"Authorization logic {} not supported\", resource.sourceType());"
        },
        {
          "filename": "managed/src/main/resources/swagger-strict.json",
          "status": "modified",
          "additions": 62,
          "deletions": 52,
          "patch": "@@ -14087,6 +14087,22 @@\n       },\n       \"type\" : \"object\"\n     },\n+    \"UserPasswordChangeFormData\" : {\n+      \"description\" : \"User registration data. The API and UI use this to validate form data.\",\n+      \"properties\" : {\n+        \"currentPassword\" : {\n+          \"description\" : \"Current Password\",\n+          \"example\" : \"Test@1234\",\n+          \"type\" : \"string\"\n+        },\n+        \"newPassword\" : {\n+          \"description\" : \"New Password\",\n+          \"example\" : \"Test@1234\",\n+          \"type\" : \"string\"\n+        }\n+      },\n+      \"type\" : \"object\"\n+    },\n     \"UserProfileData\" : {\n       \"description\" : \"User profile data. The API and UI use this to validate form data.\",\n       \"properties\" : {\n@@ -21668,6 +21684,52 @@\n         \"tags\" : [ \"Release management\" ]\n       }\n     },\n+    \"/api/v1/customers/{cUUID}/reset_password\" : {\n+      \"put\" : {\n+        \"description\" : \"\",\n+        \"operationId\" : \"resetUserPassword\",\n+        \"parameters\" : [ {\n+          \"format\" : \"uuid\",\n+          \"in\" : \"path\",\n+          \"name\" : \"cUUID\",\n+          \"required\" : true,\n+          \"type\" : \"string\"\n+        }, {\n+          \"in\" : \"query\",\n+          \"name\" : \"request\",\n+          \"required\" : false\n+        }, {\n+          \"description\" : \"User data containing the current, new password\",\n+          \"in\" : \"body\",\n+          \"name\" : \"Users\",\n+          \"required\" : true,\n+          \"schema\" : {\n+            \"$ref\" : \"#/definitions/UserPasswordChangeFormData\"\n+          }\n+        } ],\n+        \"responses\" : {\n+          \"200\" : {\n+            \"description\" : \"successful operation\",\n+            \"schema\" : {\n+              \"$ref\" : \"#/definitions/YBPSuccess\"\n+            }\n+          }\n+        },\n+        \"responsesObject\" : {\n+          \"200\" : {\n+            \"description\" : \"successful operation\",\n+            \"schema\" : {\n+              \"$ref\" : \"#/definitions/YBPSuccess\"\n+            }\n+          }\n+        },\n+        \"security\" : [ {\n+          \"apiKeyAuth\" : [ ]\n+        } ],\n+        \"summary\" : \"Reset the user's password\",\n+        \"tags\" : [ \"User management\" ]\n+      }\n+    },\n     \"/api/v1/customers/{cUUID}/restore\" : {\n       \"post\" : {\n         \"description\" : \"\",\n@@ -26085,58 +26147,6 @@\n         \"tags\" : [ \"Audit\" ]\n       }\n     },\n-    \"/api/v1/customers/{cUUID}/users/{uUUID}/change_password\" : {\n-      \"put\" : {\n-        \"description\" : \"\",\n-        \"operationId\" : \"updateUserPassword\",\n-        \"parameters\" : [ {\n-          \"format\" : \"uuid\",\n-          \"in\" : \"path\",\n-          \"name\" : \"cUUID\",\n-          \"required\" : true,\n-          \"type\" : \"string\"\n-        }, {\n-          \"format\" : \"uuid\",\n-          \"in\" : \"path\",\n-          \"name\" : \"uUUID\",\n-          \"required\" : true,\n-          \"type\" : \"string\"\n-        }, {\n-          \"in\" : \"query\",\n-          \"name\" : \"request\",\n-          \"required\" : false\n-        }, {\n-          \"description\" : \"User data containing the new password\",\n-          \"in\" : \"body\",\n-          \"name\" : \"Users\",\n-          \"required\" : true,\n-          \"schema\" : {\n-            \"$ref\" : \"#/definitions/UserRegistrationData\"\n-          }\n-        } ],\n-        \"responses\" : {\n-          \"200\" : {\n-            \"description\" : \"successful operation\",\n-            \"schema\" : {\n-              \"$ref\" : \"#/definitions/YBPSuccess\"\n-            }\n-          }\n-        },\n-        \"responsesObject\" : {\n-          \"200\" : {\n-            \"description\" : \"successful operation\",\n-            \"schema\" : {\n-              \"$ref\" : \"#/definitions/YBPSuccess\"\n-            }\n-          }\n-        },\n-        \"security\" : [ {\n-          \"apiKeyAuth\" : [ ]\n-        } ],\n-        \"summary\" : \"Change a user's password\",\n-        \"tags\" : [ \"User management\" ]\n-      }\n-    },\n     \"/api/v1/customers/{cUUID}/users/{uUUID}/oidc_auth_token\" : {\n       \"get\" : {\n         \"description\" : \"\","
        },
        {
          "filename": "managed/src/main/resources/swagger.json",
          "status": "modified",
          "additions": 70,
          "deletions": 13,
          "patch": "@@ -14205,6 +14205,22 @@\n       },\n       \"type\" : \"object\"\n     },\n+    \"UserPasswordChangeFormData\" : {\n+      \"description\" : \"User registration data. The API and UI use this to validate form data.\",\n+      \"properties\" : {\n+        \"currentPassword\" : {\n+          \"description\" : \"Current Password\",\n+          \"example\" : \"Test@1234\",\n+          \"type\" : \"string\"\n+        },\n+        \"newPassword\" : {\n+          \"description\" : \"New Password\",\n+          \"example\" : \"Test@1234\",\n+          \"type\" : \"string\"\n+        }\n+      },\n+      \"type\" : \"object\"\n+    },\n     \"UserProfileData\" : {\n       \"description\" : \"User profile data. The API and UI use this to validate form data.\",\n       \"properties\" : {\n@@ -22463,6 +22479,52 @@\n         \"tags\" : [ \"Release management\" ]\n       }\n     },\n+    \"/api/v1/customers/{cUUID}/reset_password\" : {\n+      \"put\" : {\n+        \"description\" : \"\",\n+        \"operationId\" : \"resetUserPassword\",\n+        \"parameters\" : [ {\n+          \"format\" : \"uuid\",\n+          \"in\" : \"path\",\n+          \"name\" : \"cUUID\",\n+          \"required\" : true,\n+          \"type\" : \"string\"\n+        }, {\n+          \"in\" : \"query\",\n+          \"name\" : \"request\",\n+          \"required\" : false\n+        }, {\n+          \"description\" : \"User data containing the current, new password\",\n+          \"in\" : \"body\",\n+          \"name\" : \"Users\",\n+          \"required\" : true,\n+          \"schema\" : {\n+            \"$ref\" : \"#/definitions/UserPasswordChangeFormData\"\n+          }\n+        } ],\n+        \"responses\" : {\n+          \"200\" : {\n+            \"description\" : \"successful operation\",\n+            \"schema\" : {\n+              \"$ref\" : \"#/definitions/YBPSuccess\"\n+            }\n+          }\n+        },\n+        \"responsesObject\" : {\n+          \"200\" : {\n+            \"description\" : \"successful operation\",\n+            \"schema\" : {\n+              \"$ref\" : \"#/definitions/YBPSuccess\"\n+            }\n+          }\n+        },\n+        \"security\" : [ {\n+          \"apiKeyAuth\" : [ ]\n+        } ],\n+        \"summary\" : \"Reset the user's password\",\n+        \"tags\" : [ \"User management\" ]\n+      }\n+    },\n     \"/api/v1/customers/{cUUID}/restore\" : {\n       \"post\" : {\n         \"description\" : \"\",\n@@ -27453,8 +27515,9 @@\n     },\n     \"/api/v1/customers/{cUUID}/users/{uUUID}/change_password\" : {\n       \"put\" : {\n-        \"description\" : \"\",\n-        \"operationId\" : \"updateUserPassword\",\n+        \"deprecated\" : true,\n+        \"description\" : \"<b style=\\\"color:#ff0000\\\">Deprecated since YBA version 2024.1.0.0.</b></p>\",\n+        \"operationId\" : \"changePassword\",\n         \"parameters\" : [ {\n           \"format\" : \"uuid\",\n           \"in\" : \"path\",\n@@ -27481,25 +27544,19 @@\n           }\n         } ],\n         \"responses\" : {\n-          \"200\" : {\n-            \"description\" : \"successful operation\",\n-            \"schema\" : {\n-              \"$ref\" : \"#/definitions/YBPSuccess\"\n-            }\n+          \"default\" : {\n+            \"description\" : \"successful operation\"\n           }\n         },\n         \"responsesObject\" : {\n-          \"200\" : {\n-            \"description\" : \"successful operation\",\n-            \"schema\" : {\n-              \"$ref\" : \"#/definitions/YBPSuccess\"\n-            }\n+          \"default\" : {\n+            \"description\" : \"successful operation\"\n           }\n         },\n         \"security\" : [ {\n           \"apiKeyAuth\" : [ ]\n         } ],\n-        \"summary\" : \"Change a user's password\",\n+        \"summary\" : \"Change password - deprecated\",\n         \"tags\" : [ \"User management\" ]\n       }\n     },"
        },
        {
          "filename": "managed/src/main/resources/v1.routes",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -480,6 +480,8 @@ PUT    /customers/:cUUID/users/:uUUID                                          c\n PUT    /customers/:cUUID/users/:uUUID/change_password                          com.yugabyte.yw.controllers.UsersController.changePassword(cUUID: java.util.UUID, uUUID: java.util.UUID, request: Request)\n PUT    /customers/:cUUID/users/:uUUID/update_profile                           com.yugabyte.yw.controllers.UsersController.updateProfile(cUUID: java.util.UUID, uUUID: java.util.UUID, request: Request)\n DELETE /customers/:cUUID/users/:uUUID                                          com.yugabyte.yw.controllers.UsersController.delete(cUUID: java.util.UUID, uUUID: java.util.UUID, request: Request)\n+PUT    /customers/:cUUID/reset_password                                        com.yugabyte.yw.controllers.UsersController.resetPassword(cUUID: java.util.UUID, request: Request)\n+\n + forceAudit\n GET    /customers/:cUUID/users/:uUUID/oidc_auth_token                          com.yugabyte.yw.controllers.UsersController.retrieveOidcAuthToken(cUUID: java.util.UUID, uUUID: java.util.UUID, request: Request)\n "
        },
        {
          "filename": "managed/src/test/java/com/yugabyte/yw/controllers/UsersControllerTest.java",
          "status": "modified",
          "additions": 170,
          "deletions": 57,
          "patch": "@@ -3,10 +3,13 @@\n package com.yugabyte.yw.controllers;\n \n import static com.yugabyte.yw.common.AssertHelper.assertAuditEntry;\n+import static com.yugabyte.yw.common.AssertHelper.assertErrorResponse;\n+import static com.yugabyte.yw.common.AssertHelper.assertOk;\n import static com.yugabyte.yw.common.AssertHelper.assertPlatformException;\n import static com.yugabyte.yw.models.Users.Role;\n import static org.hamcrest.CoreMatchers.*;\n import static org.junit.Assert.*;\n+import static org.junit.Assert.assertNotNull;\n import static play.mvc.Http.Status.*;\n import static play.test.Helpers.contentAsString;\n import static play.test.Helpers.fakeRequest;\n@@ -20,11 +23,23 @@\n import com.yugabyte.yw.common.ModelFactory;\n import com.yugabyte.yw.common.encryption.HashBuilder;\n import com.yugabyte.yw.common.encryption.bc.BcOpenBsdHasher;\n+import com.yugabyte.yw.common.rbac.Permission;\n+import com.yugabyte.yw.common.rbac.PermissionInfo.Action;\n+import com.yugabyte.yw.common.rbac.PermissionInfo.ResourceType;\n import com.yugabyte.yw.models.Customer;\n+import com.yugabyte.yw.models.RuntimeConfigEntry;\n import com.yugabyte.yw.models.Users;\n import com.yugabyte.yw.models.extended.UserWithFeatures;\n+import com.yugabyte.yw.models.rbac.ResourceGroup;\n+import com.yugabyte.yw.models.rbac.ResourceGroup.ResourceDefinition;\n+import com.yugabyte.yw.models.rbac.Role.RoleType;\n+import com.yugabyte.yw.models.rbac.RoleBinding;\n+import com.yugabyte.yw.models.rbac.RoleBinding.RoleBindingType;\n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.UUID;\n import org.junit.Before;\n import org.junit.Test;\n import play.libs.Json;\n@@ -37,13 +52,30 @@ public class UsersControllerTest extends FakeDBApplication {\n   private Customer customer1, customer2;\n   private Users user1;\n   private String authToken1;\n+  private com.yugabyte.yw.models.rbac.Role role;\n+  private ResourceDefinition rd1;\n   private HashBuilder hashBuilder = new BcOpenBsdHasher();\n \n+  Permission permission1 = new Permission(ResourceType.USER, Action.UPDATE_PROFILE);\n+\n   @Before\n   public void setUp() {\n     customer1 = ModelFactory.testCustomer(\"tc1\", \"Test Customer 1\");\n     customer2 = ModelFactory.testCustomer(\"tc2\", \"Test Customer 2\");\n     user1 = ModelFactory.testUser(customer1, \"tc1@test.com\");\n+    role =\n+        com.yugabyte.yw.models.rbac.Role.create(\n+            customer1.getUuid(),\n+            \"FakeRole1\",\n+            \"testDescription\",\n+            RoleType.Custom,\n+            new HashSet<>(Arrays.asList(permission1)));\n+    rd1 =\n+        ResourceDefinition.builder()\n+            .resourceType(ResourceType.USER)\n+            .resourceUUIDSet(new HashSet<>(Arrays.asList(user1.getUuid())))\n+            .build();\n+\n     authToken1 = user1.createAuthToken();\n   }\n \n@@ -247,44 +279,115 @@ public void testPasswordChangeValid() throws IOException {\n     params.put(\"confirmPassword\", \"new-Password1\");\n     params.put(\"role\", \"Admin\");\n     Http.Cookie validCookie = Http.Cookie.builder(\"authToken\", authTokenTest).build();\n+    Result result =\n+        assertPlatformException(\n+            () ->\n+                route(\n+                    fakeRequest(\n+                            \"PUT\",\n+                            String.format(\n+                                \"%s/%s/change_password\",\n+                                String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))\n+                        .cookie(validCookie)\n+                        .bodyJson(params)));\n+    assertEquals(result.status(), MOVED_PERMANENTLY);\n+    assertErrorResponse(\n+        result, String.format(\"Moved to /customers/%s/reset_password\", customer1.getUuid()));\n+  }\n+\n+  @Test\n+  public void testResetPassword() {\n+    Users testUser1 = ModelFactory.testUser(customer1, \"tc3@test.com\", Role.Admin);\n+    String authTokenTest = testUser1.createAuthToken();\n+    assertEquals(testUser1.getRole(), Role.Admin);\n+    ObjectNode params = Json.newObject();\n+    params.put(\"currentPassword\", \"password\");\n+    params.put(\"newPassword\", \"Password#123\");\n+    Http.Cookie validCookie = Http.Cookie.builder(\"authToken\", authTokenTest).build();\n     Result result =\n         route(\n             fakeRequest(\n-                    \"PUT\",\n-                    String.format(\n-                        \"%s/%s/change_password\",\n-                        String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))\n+                    \"PUT\", String.format(\"/api/customers/%s/reset_password\", customer1.getUuid()))\n                 .cookie(validCookie)\n                 .bodyJson(params));\n     testUser1 = Users.get(testUser1.getUuid());\n+    assertOk(result);\n+    assertAuditEntry(1, customer1.getUuid());\n+    Users returnUser = Users.authWithPassword(testUser1.getEmail(), \"Password#123\");\n+    assertNotNull(returnUser);\n+  }\n+\n+  @Test\n+  public void testResetPasswordForNonLocalUser() {\n+    Users testUser1 = ModelFactory.testUser(customer1, \"tc3@test.com\", Role.Admin);\n+    testUser1.setUserType(Users.UserType.ldap);\n+    testUser1.save();\n+    String authTokenTest = testUser1.createAuthToken();\n     assertEquals(testUser1.getRole(), Role.Admin);\n-    assertTrue(hashBuilder.isValid(\"new-Password1\", testUser1.getPasswordHash()));\n+    ObjectNode params = Json.newObject();\n+    params.put(\"currentPassword\", \"password\");\n+    params.put(\"newPassword\", \"Password#123\");\n+    Http.Cookie validCookie = Http.Cookie.builder(\"authToken\", authTokenTest).build();\n+    Result result =\n+        assertPlatformException(\n+            () ->\n+                route(\n+                    fakeRequest(\n+                            \"PUT\",\n+                            String.format(\"/api/customers/%s/reset_password\", customer1.getUuid()))\n+                        .cookie(validCookie)\n+                        .bodyJson(params)));\n+    assertEquals(result.status(), BAD_REQUEST);\n+    assertErrorResponse(result, \"Reset password not supported for LDAP users\");\n+  }\n+\n+  @Test\n+  public void testResetPasswordWithNewRbac() {\n+    RuntimeConfigEntry.upsertGlobal(\"yb.rbac.use_new_authz\", \"true\");\n+    ResourceGroup rG = new ResourceGroup(new HashSet<>(Arrays.asList(rd1)));\n+    RoleBinding.create(user1, RoleBindingType.Custom, role, rG);\n+    String authTokenTest = user1.createAuthToken();\n+    assertEquals(user1.getRole(), Role.Admin);\n+    ObjectNode params = Json.newObject();\n+    params.put(\"currentPassword\", \"password\");\n+    params.put(\"newPassword\", \"Password#123\");\n+    Http.Cookie validCookie = Http.Cookie.builder(\"authToken\", authTokenTest).build();\n+    Result result =\n+        route(\n+            fakeRequest(\n+                    \"PUT\", String.format(\"/api/customers/%s/reset_password\", customer1.getUuid()))\n+                .cookie(validCookie)\n+                .bodyJson(params));\n+    user1 = Users.get(user1.getUuid());\n+    assertOk(result);\n     assertAuditEntry(1, customer1.getUuid());\n+    Users returnUser = Users.authWithPassword(user1.getEmail(), \"Password#123\");\n+    assertNotNull(returnUser);\n   }\n \n   @Test\n-  public void testPasswordChangeInvalidPassword() throws IOException {\n+  public void testResetPasswordInvalidPassword() throws IOException {\n     Users testUser1 = ModelFactory.testUser(customer1, \"tc3@test.com\", Role.Admin);\n     String authTokenTest = testUser1.createAuthToken();\n     assertEquals(testUser1.getRole(), Role.Admin);\n     ObjectNode params = Json.newObject();\n-    params.put(\"email\", \"tc3@test.com\");\n-    params.put(\"password\", \"new-password\");\n-    params.put(\"confirmPassword\", \"new-password\");\n-    params.put(\"role\", \"Admin\");\n+    params.put(\"currentPassword\", \"password\");\n+    params.put(\"newPassword\", \"new-password\");\n     Http.Cookie validCookie = Http.Cookie.builder(\"authToken\", authTokenTest).build();\n     Result result =\n         assertPlatformException(\n             () ->\n                 route(\n                     fakeRequest(\n                             \"PUT\",\n-                            String.format(\n-                                \"%s/%s/change_password\",\n-                                String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))\n+                            String.format(\"/api/customers/%s/reset_password\", customer1.getUuid()))\n                         .cookie(validCookie)\n                         .bodyJson(params)));\n     assertEquals(result.status(), BAD_REQUEST);\n+    assertErrorResponse(\n+        result,\n+        \"Password should contain at least 1 upper case letters; Password should contain at least 1\"\n+            + \" digits\");\n   }\n \n   @Test\n@@ -315,10 +418,8 @@ public void testUpdateUserProfileValid() throws IOException {\n     assertEquals(testUser1.getRole(), Role.Admin);\n     ObjectNode params = Json.newObject();\n     params.put(\"email\", \"tc3@test.com\");\n-    params.put(\"password\", \"new-Password1!\");\n-    params.put(\"confirmPassword\", \"new-Password1!\");\n-    params.put(\"role\", \"ReadOnly\");\n     params.put(\"timezone\", testTimezone2);\n+    params.put(\"role\", \"Admin\");\n     Http.Cookie validCookie = Http.Cookie.builder(\"authToken\", authTokenTest).build();\n     Result result =\n         route(\n@@ -331,8 +432,6 @@ public void testUpdateUserProfileValid() throws IOException {\n                 .bodyJson(params));\n     testUser1 = Users.get(testUser1.getUuid());\n     assertEquals(testUser1.getTimezone(), testTimezone2);\n-    assertTrue(hashBuilder.isValid(\"new-Password1!\", testUser1.getPasswordHash()));\n-    assertEquals(testUser1.getRole(), Role.ReadOnly);\n     assertAuditEntry(1, customer1.getUuid());\n   }\n \n@@ -368,27 +467,25 @@ public void testUpdateUserProfileNullifyTimezone() throws IOException {\n     testUser1.setTimezone(testTimezone1);\n     String authTokenTest = testUser1.createAuthToken();\n     assertEquals(testUser1.getRole(), Role.Admin);\n+    UUID testUser1UUID = testUser1.getUuid();\n     ObjectNode params = Json.newObject();\n     params.put(\"email\", \"tc3@test.com\");\n-    params.put(\"password\", \"new-Password1!\");\n-    params.put(\"confirmPassword\", \"new-Password1!\");\n-    params.put(\"role\", \"ReadOnly\");\n     params.put(\"timezone\", \"\");\n+    params.put(\"role\", \"ReadOnly\");\n     Http.Cookie validCookie = Http.Cookie.builder(\"authToken\", authTokenTest).build();\n     Result result =\n-        route(\n-            fakeRequest(\n-                    \"PUT\",\n-                    String.format(\n-                        \"%s/%s/update_profile\",\n-                        String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))\n-                .cookie(validCookie)\n-                .bodyJson(params));\n-    testUser1 = Users.get(testUser1.getUuid());\n-    assertEquals(testUser1.getTimezone(), \"\");\n-    assertTrue(hashBuilder.isValid(\"new-Password1!\", testUser1.getPasswordHash()));\n-    assertEquals(testUser1.getRole(), Role.ReadOnly);\n-    assertAuditEntry(1, customer1.getUuid());\n+        assertPlatformException(\n+            () ->\n+                route(\n+                    fakeRequest(\n+                            \"PUT\",\n+                            String.format(\n+                                \"/api/customers/%s/users/%s/update_profile\",\n+                                customer1.getUuid(), testUser1UUID))\n+                        .cookie(validCookie)\n+                        .bodyJson(params)));\n+    assertEquals(result.status(), FORBIDDEN);\n+    assertErrorResponse(result, \"User cannot modify their own role privileges\");\n   }\n \n   @Test\n@@ -420,7 +517,7 @@ public void testUpdateUserProfileInvalid() throws IOException {\n     Users resultTestUser1 = Users.get(testUser1.getUuid());\n     assertEquals(resultTestUser1.getTimezone(), testTimezone1);\n     assertEquals(resultTestUser1.getRole(), Role.Admin);\n-    assertEquals(result.status(), BAD_REQUEST);\n+    assertEquals(result.status(), FORBIDDEN);\n   }\n \n   @Test\n@@ -437,16 +534,22 @@ public void testUpdateUserProfileValidOnlyPassword() throws IOException {\n     params.put(\"timezone\", testTimezone1);\n     Http.Cookie validCookie = Http.Cookie.builder(\"authToken\", authTokenTest).build();\n     Result result =\n-        route(\n-            fakeRequest(\n-                    \"PUT\",\n-                    String.format(\n-                        \"%s/%s/update_profile\",\n-                        String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))\n-                .cookie(validCookie)\n-                .bodyJson(params));\n-    testUser1 = Users.get(testUser1.getUuid());\n-    assertTrue(hashBuilder.isValid(\"new-Password1!\", testUser1.getPasswordHash()));\n+        assertPlatformException(\n+            () ->\n+                route(\n+                    fakeRequest(\n+                            \"PUT\",\n+                            String.format(\n+                                \"%s/%s/update_profile\",\n+                                String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))\n+                        .cookie(validCookie)\n+                        .bodyJson(params)));\n+    assertEquals(result.status(), FORBIDDEN);\n+    assertErrorResponse(\n+        result,\n+        String.format(\n+            \"API does not support password change. Use /customers/%s/reset_password\",\n+            customer1.getUuid()));\n   }\n \n   @Test\n@@ -474,7 +577,12 @@ public void testUpdateUserProfileInvalidPassword() throws IOException {\n                                 String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))\n                         .cookie(validCookie)\n                         .bodyJson(params)));\n-    assertEquals(result.status(), BAD_REQUEST);\n+    assertEquals(result.status(), FORBIDDEN);\n+    assertErrorResponse(\n+        result,\n+        String.format(\n+            \"API does not support password change. Use /customers/%s/reset_password\",\n+            customer1.getUuid()));\n   }\n \n   @Test\n@@ -518,17 +626,22 @@ public void testUpdateUserProfileReadOnlyUserPasswordChange() throws IOException\n     params.put(\"timezone\", testTimezone1);\n     Http.Cookie validCookie = Http.Cookie.builder(\"authToken\", authTokenTest).build();\n     Result result =\n-        route(\n-            fakeRequest(\n-                    \"PUT\",\n-                    String.format(\n-                        \"%s/%s/update_profile\",\n-                        String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))\n-                .cookie(validCookie)\n-                .bodyJson(params));\n-    testUser1 = Users.get(testUser1.getUuid());\n-    assertTrue(hashBuilder.isValid(\"new-Password1!\", testUser1.getPasswordHash()));\n-    assertAuditEntry(1, customer1.getUuid());\n+        assertPlatformException(\n+            () ->\n+                route(\n+                    fakeRequest(\n+                            \"PUT\",\n+                            String.format(\n+                                \"%s/%s/update_profile\",\n+                                String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))\n+                        .cookie(validCookie)\n+                        .bodyJson(params)));\n+    assertEquals(result.status(), FORBIDDEN);\n+    assertErrorResponse(\n+        result,\n+        String.format(\n+            \"API does not support password change. Use /customers/%s/reset_password\",\n+            customer1.getUuid()));\n   }\n \n   public void testUpdateUserProfileReadOnlyUserTZChange() throws IOException {"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 7,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b4bb9660ad69cec5bc1bcfb218f64d5bfe7306de",
            "date": "2025-01-25T05:24:24Z",
            "author_login": "spolitov"
          },
          {
            "sha": "6281c17d8b7e4ae91323e507d4b7b84d1e9cc11d",
            "date": "2025-01-25T20:03:41Z",
            "author_login": "hari90"
          },
          {
            "sha": "69b5f973b5eb7566f974f42c9029473b8805a769",
            "date": "2025-01-25T04:37:40Z",
            "author_login": "spolitov"
          },
          {
            "sha": "17c2711109b63125d34caa4d781b33b7b4929167",
            "date": "2025-01-25T14:53:58Z",
            "author_login": "utkarsh-um-yb"
          },
          {
            "sha": "d360789f7b09aade6c32d8db6945e5e394d78c88",
            "date": "2025-01-20T18:04:54Z",
            "author_login": "vipul-yb"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-306",
    "description": "Insufficient authentication in user account management in Yugabyte Platform allows local network attackers with a compromised user session to change critical security information without re-authentication. An attacker with user session and access to application can modify settings such as password and email without being prompted for the current password, enabling account takeover.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-07-19T15:15:10.547",
    "last_modified": "2024-11-21T09:50:29.310",
    "fix_date": "2024-04-12T03:57:55Z"
  },
  "references": [
    {
      "url": "https://github.com/yugabyte/yugabyte-db/commit/9687371d8777f876285b737a9d01995bc46bafa5",
      "source": "security@yugabyte.com",
      "tags": []
    },
    {
      "url": "https://github.com/yugabyte/yugabyte-db/commit/9687371d8777f876285b737a9d01995bc46bafa5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.498457",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "yugabyte-db",
    "owner": "yugabyte",
    "created_at": "2017-10-05T21:56:00Z",
    "updated_at": "2025-01-14T11:02:52Z",
    "pushed_at": "2025-01-14T13:08:33Z",
    "size": 785267,
    "stars": 9154,
    "forks": 1096,
    "open_issues": 6564,
    "watchers": 9154,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "2.14-PLAT-9385",
      "2.14",
      "2.14.0",
      "2.14.0.0-b94-and-session-id-to-transaction-id-linkage",
      "2.14.0.0-b94-session-id-to-transaction-id-linkage",
      "2.14.0.0-b94-with-session-id-to-transaction-id-linkage",
      "2.14.2",
      "2.14.3",
      "2.14.5",
      "2.14.6",
      "2.14.9",
      "2.14.10",
      "2.14.10.2",
      "2.14.11",
      "2.14.13",
      "2.16",
      "2.16.0",
      "2.16.0.5001",
      "2.16.0.5002",
      "2.16.1",
      "2.16.2",
      "2.16.3",
      "2.16.5",
      "2.16.5.7018",
      "2.16.6",
      "2.16.7",
      "2.16.8",
      "2.18",
      "2.18.0",
      "2.18.0.1000"
    ],
    "languages": {
      "C": 49017240,
      "C++": 40553135,
      "Java": 24628925,
      "PLpgSQL": 18030832,
      "TypeScript": 6033835,
      "Python": 3151385,
      "Go": 2421482,
      "Perl": 2002906,
      "JavaScript": 1945698,
      "Shell": 1036617,
      "Yacc": 956295,
      "Makefile": 419246,
      "CMake": 362029,
      "SCSS": 327855,
      "Mermaid": 276977,
      "Lex": 254480,
      "Jupyter Notebook": 192984,
      "M4": 192961,
      "Ruby": 175500,
      "Scala": 84823,
      "XSLT": 71494,
      "PLSQL": 71391,
      "Jinja": 64070,
      "HTML": 42134,
      "Mustache": 20922,
      "Dockerfile": 18213,
      "Batchfile": 15477,
      "CSS": 11501,
      "XS": 7034,
      "PHP": 5378,
      "Emacs Lisp": 4164,
      "DTrace": 3451,
      "Assembly": 3266,
      "Roff": 1895,
      "sed": 1253,
      "Meson": 1240,
      "Smarty": 138,
      "TeX": 26
    },
    "commit_activity": {
      "total_commits_last_year": 7506,
      "avg_commits_per_week": 144.34615384615384,
      "days_active_last_year": 341
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:35:15.967707"
  }
}