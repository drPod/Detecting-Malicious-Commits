{
  "cve_id": "CVE-2024-7009",
  "github_data": {
    "repository": "kovidgoyal/calibre",
    "fix_commit": "d56574285e8859d3d715eb7829784ee74337b7d7",
    "related_commits": [
      "d56574285e8859d3d715eb7829784ee74337b7d7"
    ],
    "patch_url": "https://github.com/kovidgoyal/calibre/commit/d56574285e8859d3d715eb7829784ee74337b7d7.patch",
    "fix_commit_details": {
      "sha": "d56574285e8859d3d715eb7829784ee74337b7d7",
      "commit_date": "2024-07-30T08:06:39Z",
      "author": {
        "login": "kovidgoyal",
        "type": "User",
        "stats": {
          "total_commits": 38387,
          "average_weekly_commits": 40.364879074658255,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 943
        }
      },
      "commit_message": {
        "title": "Fix #2075131 [Private bug](https://bugs.launchpad.net/calibre/+bug/2075131)",
        "length": 75,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 28,
        "additions": 17,
        "deletions": 11
      },
      "files": [
        {
          "filename": "src/calibre/db/backend.py",
          "status": "modified",
          "additions": 7,
          "deletions": 5,
          "patch": "@@ -2365,18 +2365,20 @@ def search_annotations(self,\n         fts_engine_query = unicode_normalize(fts_engine_query)\n         fts_table = 'annotations_fts_stemmed' if use_stemming else 'annotations_fts'\n         text = 'annotations.searchable_text'\n+        data = []\n         if highlight_start is not None and highlight_end is not None:\n             if snippet_size is not None:\n-                text = \"snippet({fts_table}, 0, '{highlight_start}', '{highlight_end}', '\u2026', {snippet_size})\".format(\n-                        fts_table=fts_table, highlight_start=highlight_start, highlight_end=highlight_end,\n-                        snippet_size=max(1, min(snippet_size, 64)))\n+                text = \"snippet({fts_table}, 0, ?, ?, '\u2026', {snippet_size})\".format(\n+                        fts_table=fts_table, snippet_size=max(1, min(snippet_size, 64)))\n             else:\n-                text = f\"highlight({fts_table}, 0, '{highlight_start}', '{highlight_end}')\"\n+                text = f\"highlight({fts_table}, 0, ?, ?)\"\n+            data.append(highlight_start)\n+            data.append(highlight_end)\n         query = 'SELECT {0}.id, {0}.book, {0}.format, {0}.user_type, {0}.user, {0}.annot_data, {1} FROM {0} '\n         query = query.format('annotations', text)\n         query += ' JOIN {fts_table} ON annotations.id = {fts_table}.rowid'.format(fts_table=fts_table)\n         query += f' WHERE {fts_table} MATCH ?'\n-        data = [fts_engine_query]\n+        data.append(fts_engine_query)\n         if restrict_to_user:\n             query += ' AND annotations.user_type = ? AND annotations.user = ?'\n             data += list(restrict_to_user)"
        },
        {
          "filename": "src/calibre/db/fts/connect.py",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -156,20 +156,22 @@ def search(self,\n             return\n         fts_engine_query = unicode_normalize(fts_engine_query)\n         fts_table = 'books_fts' + ('_stemmed' if use_stemming else '')\n+        data = []\n         if return_text:\n             text = 'books_text.searchable_text'\n             if highlight_start is not None and highlight_end is not None:\n                 if snippet_size is not None:\n-                    text = f'''snippet(\"{fts_table}\", 0, '{highlight_start}', '{highlight_end}', '\u2026', {max(1, min(snippet_size, 64))})'''\n+                    text = f'''snippet(\"{fts_table}\", 0, ?, ?, '\u2026', {max(1, min(snippet_size, 64))})'''\n                 else:\n-                    text = f'''highlight(\"{fts_table}\", 0, '{highlight_start}', '{highlight_end}')'''\n+                    text = f'''highlight(\"{fts_table}\", 0, ?, ?)'''\n+                data.append(highlight_start)\n+                data.append(highlight_end)\n             text = ', ' + text\n         else:\n             text = ''\n         query = 'SELECT {0}.id, {0}.book, {0}.format {1} FROM {0} '.format('books_text', text)\n         query += f' JOIN {fts_table} ON fts_db.books_text.id = {fts_table}.rowid'\n         query += ' WHERE '\n-        data = []\n         conn = self.get_connection()\n         temp_table_name = ''\n         if restrict_to_book_ids:"
        },
        {
          "filename": "src/calibre/db/notes/connect.py",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -413,13 +413,15 @@ def search(self,\n             return\n         fts_engine_query = unicode_normalize(fts_engine_query)\n         fts_table = 'notes_fts' + ('_stemmed' if use_stemming else '')\n+        hl_data = ()\n         if return_text:\n             text = 'notes.searchable_text'\n             if highlight_start is not None and highlight_end is not None:\n                 if snippet_size is not None:\n-                    text = f'''snippet(\"{fts_table}\", 0, '{highlight_start}', '{highlight_end}', '\u2026', {max(1, min(snippet_size, 64))})'''\n+                    text = f'''snippet(\"{fts_table}\", 0, ?, ?, '\u2026', {max(1, min(snippet_size, 64))})'''\n                 else:\n-                    text = f'''highlight(\"{fts_table}\", 0, '{highlight_start}', '{highlight_end}')'''\n+                    text = f'''highlight(\"{fts_table}\", 0, ?, ?)'''\n+                hl_data = (highlight_start, highlight_end)\n             text = ', ' + text\n         else:\n             text = ''\n@@ -433,7 +435,7 @@ def search(self,\n         if limit is not None:\n             query += f' LIMIT {limit}'\n         try:\n-            for record in conn.execute(query, restrict_to_fields+(fts_engine_query,)):\n+            for record in conn.execute(query, hl_data + restrict_to_fields + (fts_engine_query,)):\n                 result = {\n                     'id': record[0],\n                     'field': record[1],"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "851c826bd88c00c38b8a899bf7d5e9995d7a0f84",
            "date": "2025-01-14T05:03:23Z",
            "author_login": "kovidgoyal"
          },
          {
            "sha": "22ade2ce40ed9d5b5cb9437360eab9b9afa74325",
            "date": "2025-01-14T05:00:49Z",
            "author_login": "unkn0w7n"
          },
          {
            "sha": "55469a6ab628cd884168980453fb570fa5486271",
            "date": "2025-01-14T04:33:00Z",
            "author_login": "kovidgoyal"
          },
          {
            "sha": "50068c9d069cbdd53ef609d7336b07e8036e1bb4",
            "date": "2025-01-14T03:24:15Z",
            "author_login": "kovidgoyal"
          },
          {
            "sha": "db0f74812ba1e945903aa959515d1f6d49af3439",
            "date": "2025-01-13T18:41:23Z",
            "author_login": "un-pogaz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-89",
    "description": "Unsanitized user-input in Calibre <= 7.15.0 allow users with permissions to perform full-text searches to achieve SQL injection on the SQLite database.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-08-06T04:16:47.040",
    "last_modified": "2024-08-19T17:18:50.290",
    "fix_date": "2024-07-30T08:06:39Z"
  },
  "references": [
    {
      "url": "https://github.com/kovidgoyal/calibre/commit/d56574285e8859d3d715eb7829784ee74337b7d7",
      "source": "info@starlabs.sg",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://starlabs.sg/advisories/24/24-7009/",
      "source": "info@starlabs.sg",
      "tags": [
        "Exploit",
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.535335",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "calibre",
    "owner": "kovidgoyal",
    "created_at": "2013-05-28T10:03:23Z",
    "updated_at": "2025-01-14T13:01:55Z",
    "pushed_at": "2025-01-14T05:03:28Z",
    "size": 306518,
    "stars": 20329,
    "forks": 2289,
    "open_issues": 4,
    "watchers": 20329,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 24136488,
      "C": 5183353,
      "C++": 791099,
      "HTML": 101638,
      "Shell": 51424,
      "XSLT": 44181,
      "CSS": 24467,
      "JavaScript": 15520,
      "Objective-C": 15127,
      "Batchfile": 7842,
      "Vim Script": 860,
      "CMake": 844
    },
    "commit_activity": {
      "total_commits_last_year": 2038,
      "avg_commits_per_week": 39.19230769230769,
      "days_active_last_year": 323
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:51:20.685120"
  }
}