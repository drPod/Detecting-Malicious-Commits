{
  "cve_id": "CVE-2024-7010",
  "github_data": {
    "repository": "mudler/localai",
    "fix_commit": "db1159b6511e8fa09e594f9db0fec6ab4e142468",
    "related_commits": [
      "db1159b6511e8fa09e594f9db0fec6ab4e142468"
    ],
    "patch_url": "https://github.com/mudler/localai/commit/db1159b6511e8fa09e594f9db0fec6ab4e142468.patch",
    "fix_commit_details": {
      "sha": "db1159b6511e8fa09e594f9db0fec6ab4e142468",
      "commit_date": "2024-09-17T03:29:07Z",
      "author": {
        "login": "dave-gray101",
        "type": "User",
        "stats": {
          "total_commits": 114,
          "average_weekly_commits": 1.175257731958763,
          "total_additions": 31569,
          "total_deletions": 29663,
          "weeks_active": 45
        }
      },
      "commit_message": {
        "title": "feat: auth v2 - supersedes #2894 (#3476)",
        "length": 145,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 422,
        "additions": 264,
        "deletions": 158
      },
      "files": [
        {
          "filename": "core/cli/run.go",
          "status": "modified",
          "additions": 31,
          "deletions": 25,
          "patch": "@@ -41,31 +41,34 @@ type RunCMD struct {\n \tThreads     int  `env:\"LOCALAI_THREADS,THREADS\" short:\"t\" help:\"Number of threads used for parallel computation. Usage of the number of physical cores in the system is suggested\" group:\"performance\"`\n \tContextSize int  `env:\"LOCALAI_CONTEXT_SIZE,CONTEXT_SIZE\" default:\"512\" help:\"Default context size for models\" group:\"performance\"`\n \n-\tAddress                string   `env:\"LOCALAI_ADDRESS,ADDRESS\" default:\":8080\" help:\"Bind address for the API server\" group:\"api\"`\n-\tCORS                   bool     `env:\"LOCALAI_CORS,CORS\" help:\"\" group:\"api\"`\n-\tCORSAllowOrigins       string   `env:\"LOCALAI_CORS_ALLOW_ORIGINS,CORS_ALLOW_ORIGINS\" group:\"api\"`\n-\tLibraryPath            string   `env:\"LOCALAI_LIBRARY_PATH,LIBRARY_PATH\" help:\"Path to the library directory (for e.g. external libraries used by backends)\" default:\"/usr/share/local-ai/libs\" group:\"backends\"`\n-\tCSRF                   bool     `env:\"LOCALAI_CSRF\" help:\"Enables fiber CSRF middleware\" group:\"api\"`\n-\tUploadLimit            int      `env:\"LOCALAI_UPLOAD_LIMIT,UPLOAD_LIMIT\" default:\"15\" help:\"Default upload-limit in MB\" group:\"api\"`\n-\tAPIKeys                []string `env:\"LOCALAI_API_KEY,API_KEY\" help:\"List of API Keys to enable API authentication. When this is set, all the requests must be authenticated with one of these API keys\" group:\"api\"`\n-\tDisableWebUI           bool     `env:\"LOCALAI_DISABLE_WEBUI,DISABLE_WEBUI\" default:\"false\" help:\"Disable webui\" group:\"api\"`\n-\tDisablePredownloadScan bool     `env:\"LOCALAI_DISABLE_PREDOWNLOAD_SCAN\" help:\"If true, disables the best-effort security scanner before downloading any files.\" group:\"hardening\" default:\"false\"`\n-\tOpaqueErrors           bool     `env:\"LOCALAI_OPAQUE_ERRORS\" default:\"false\" help:\"If true, all error responses are replaced with blank 500 errors. This is intended only for hardening against information leaks and is normally not recommended.\" group:\"hardening\"`\n-\tPeer2Peer              bool     `env:\"LOCALAI_P2P,P2P\" name:\"p2p\" default:\"false\" help:\"Enable P2P mode\" group:\"p2p\"`\n-\tPeer2PeerDHTInterval   int      `env:\"LOCALAI_P2P_DHT_INTERVAL,P2P_DHT_INTERVAL\" default:\"360\" name:\"p2p-dht-interval\" help:\"Interval for DHT refresh (used during token generation)\" group:\"p2p\"`\n-\tPeer2PeerOTPInterval   int      `env:\"LOCALAI_P2P_OTP_INTERVAL,P2P_OTP_INTERVAL\" default:\"9000\" name:\"p2p-otp-interval\" help:\"Interval for OTP refresh (used during token generation)\" group:\"p2p\"`\n-\tPeer2PeerToken         string   `env:\"LOCALAI_P2P_TOKEN,P2P_TOKEN,TOKEN\" name:\"p2ptoken\" help:\"Token for P2P mode (optional)\" group:\"p2p\"`\n-\tPeer2PeerNetworkID     string   `env:\"LOCALAI_P2P_NETWORK_ID,P2P_NETWORK_ID\" help:\"Network ID for P2P mode, can be set arbitrarly by the user for grouping a set of instances\" group:\"p2p\"`\n-\tParallelRequests       bool     `env:\"LOCALAI_PARALLEL_REQUESTS,PARALLEL_REQUESTS\" help:\"Enable backends to handle multiple requests in parallel if they support it (e.g.: llama.cpp or vllm)\" group:\"backends\"`\n-\tSingleActiveBackend    bool     `env:\"LOCALAI_SINGLE_ACTIVE_BACKEND,SINGLE_ACTIVE_BACKEND\" help:\"Allow only one backend to be run at a time\" group:\"backends\"`\n-\tPreloadBackendOnly     bool     `env:\"LOCALAI_PRELOAD_BACKEND_ONLY,PRELOAD_BACKEND_ONLY\" default:\"false\" help:\"Do not launch the API services, only the preloaded models / backends are started (useful for multi-node setups)\" group:\"backends\"`\n-\tExternalGRPCBackends   []string `env:\"LOCALAI_EXTERNAL_GRPC_BACKENDS,EXTERNAL_GRPC_BACKENDS\" help:\"A list of external grpc backends\" group:\"backends\"`\n-\tEnableWatchdogIdle     bool     `env:\"LOCALAI_WATCHDOG_IDLE,WATCHDOG_IDLE\" default:\"false\" help:\"Enable watchdog for stopping backends that are idle longer than the watchdog-idle-timeout\" group:\"backends\"`\n-\tWatchdogIdleTimeout    string   `env:\"LOCALAI_WATCHDOG_IDLE_TIMEOUT,WATCHDOG_IDLE_TIMEOUT\" default:\"15m\" help:\"Threshold beyond which an idle backend should be stopped\" group:\"backends\"`\n-\tEnableWatchdogBusy     bool     `env:\"LOCALAI_WATCHDOG_BUSY,WATCHDOG_BUSY\" default:\"false\" help:\"Enable watchdog for stopping backends that are busy longer than the watchdog-busy-timeout\" group:\"backends\"`\n-\tWatchdogBusyTimeout    string   `env:\"LOCALAI_WATCHDOG_BUSY_TIMEOUT,WATCHDOG_BUSY_TIMEOUT\" default:\"5m\" help:\"Threshold beyond which a busy backend should be stopped\" group:\"backends\"`\n-\tFederated              bool     `env:\"LOCALAI_FEDERATED,FEDERATED\" help:\"Enable federated instance\" group:\"federated\"`\n-\tDisableGalleryEndpoint bool     `env:\"LOCALAI_DISABLE_GALLERY_ENDPOINT,DISABLE_GALLERY_ENDPOINT\" help:\"Disable the gallery endpoints\" group:\"api\"`\n+\tAddress                            string   `env:\"LOCALAI_ADDRESS,ADDRESS\" default:\":8080\" help:\"Bind address for the API server\" group:\"api\"`\n+\tCORS                               bool     `env:\"LOCALAI_CORS,CORS\" help:\"\" group:\"api\"`\n+\tCORSAllowOrigins                   string   `env:\"LOCALAI_CORS_ALLOW_ORIGINS,CORS_ALLOW_ORIGINS\" group:\"api\"`\n+\tLibraryPath                        string   `env:\"LOCALAI_LIBRARY_PATH,LIBRARY_PATH\" help:\"Path to the library directory (for e.g. external libraries used by backends)\" default:\"/usr/share/local-ai/libs\" group:\"backends\"`\n+\tCSRF                               bool     `env:\"LOCALAI_CSRF\" help:\"Enables fiber CSRF middleware\" group:\"api\"`\n+\tUploadLimit                        int      `env:\"LOCALAI_UPLOAD_LIMIT,UPLOAD_LIMIT\" default:\"15\" help:\"Default upload-limit in MB\" group:\"api\"`\n+\tAPIKeys                            []string `env:\"LOCALAI_API_KEY,API_KEY\" help:\"List of API Keys to enable API authentication. When this is set, all the requests must be authenticated with one of these API keys\" group:\"api\"`\n+\tDisableWebUI                       bool     `env:\"LOCALAI_DISABLE_WEBUI,DISABLE_WEBUI\" default:\"false\" help:\"Disable webui\" group:\"api\"`\n+\tDisablePredownloadScan             bool     `env:\"LOCALAI_DISABLE_PREDOWNLOAD_SCAN\" help:\"If true, disables the best-effort security scanner before downloading any files.\" group:\"hardening\" default:\"false\"`\n+\tOpaqueErrors                       bool     `env:\"LOCALAI_OPAQUE_ERRORS\" default:\"false\" help:\"If true, all error responses are replaced with blank 500 errors. This is intended only for hardening against information leaks and is normally not recommended.\" group:\"hardening\"`\n+\tUseSubtleKeyComparison             bool     `env:\"LOCALAI_SUBTLE_KEY_COMPARISON\" default:\"false\" help:\"If true, API Key validation comparisons will be performed using constant-time comparisons rather than simple equality. This trades off performance on each request for resiliancy against timing attacks.\" group:\"hardening\"`\n+\tDisableApiKeyRequirementForHttpGet bool     `env:\"LOCALAI_DISABLE_API_KEY_REQUIREMENT_FOR_HTTP_GET\" default:\"false\" help:\"If true, a valid API key is not required to issue GET requests to portions of the web ui. This should only be enabled in secure testing environments\" group:\"hardening\"`\n+\tHttpGetExemptedEndpoints           []string `env:\"LOCALAI_HTTP_GET_EXEMPTED_ENDPOINTS\" default:\"^/$,^/browse/?$,^/talk/?$,^/p2p/?$,^/chat/?$,^/text2image/?$,^/tts/?$,^/static/.*$,^/swagger.*$\" help:\"If LOCALAI_DISABLE_API_KEY_REQUIREMENT_FOR_HTTP_GET is overriden to true, this is the list of endpoints to exempt. Only adjust this in case of a security incident or as a result of a personal security posture review\" group:\"hardening\"`\n+\tPeer2Peer                          bool     `env:\"LOCALAI_P2P,P2P\" name:\"p2p\" default:\"false\" help:\"Enable P2P mode\" group:\"p2p\"`\n+\tPeer2PeerDHTInterval               int      `env:\"LOCALAI_P2P_DHT_INTERVAL,P2P_DHT_INTERVAL\" default:\"360\" name:\"p2p-dht-interval\" help:\"Interval for DHT refresh (used during token generation)\" group:\"p2p\"`\n+\tPeer2PeerOTPInterval               int      `env:\"LOCALAI_P2P_OTP_INTERVAL,P2P_OTP_INTERVAL\" default:\"9000\" name:\"p2p-otp-interval\" help:\"Interval for OTP refresh (used during token generation)\" group:\"p2p\"`\n+\tPeer2PeerToken                     string   `env:\"LOCALAI_P2P_TOKEN,P2P_TOKEN,TOKEN\" name:\"p2ptoken\" help:\"Token for P2P mode (optional)\" group:\"p2p\"`\n+\tPeer2PeerNetworkID                 string   `env:\"LOCALAI_P2P_NETWORK_ID,P2P_NETWORK_ID\" help:\"Network ID for P2P mode, can be set arbitrarly by the user for grouping a set of instances\" group:\"p2p\"`\n+\tParallelRequests                   bool     `env:\"LOCALAI_PARALLEL_REQUESTS,PARALLEL_REQUESTS\" help:\"Enable backends to handle multiple requests in parallel if they support it (e.g.: llama.cpp or vllm)\" group:\"backends\"`\n+\tSingleActiveBackend                bool     `env:\"LOCALAI_SINGLE_ACTIVE_BACKEND,SINGLE_ACTIVE_BACKEND\" help:\"Allow only one backend to be run at a time\" group:\"backends\"`\n+\tPreloadBackendOnly                 bool     `env:\"LOCALAI_PRELOAD_BACKEND_ONLY,PRELOAD_BACKEND_ONLY\" default:\"false\" help:\"Do not launch the API services, only the preloaded models / backends are started (useful for multi-node setups)\" group:\"backends\"`\n+\tExternalGRPCBackends               []string `env:\"LOCALAI_EXTERNAL_GRPC_BACKENDS,EXTERNAL_GRPC_BACKENDS\" help:\"A list of external grpc backends\" group:\"backends\"`\n+\tEnableWatchdogIdle                 bool     `env:\"LOCALAI_WATCHDOG_IDLE,WATCHDOG_IDLE\" default:\"false\" help:\"Enable watchdog for stopping backends that are idle longer than the watchdog-idle-timeout\" group:\"backends\"`\n+\tWatchdogIdleTimeout                string   `env:\"LOCALAI_WATCHDOG_IDLE_TIMEOUT,WATCHDOG_IDLE_TIMEOUT\" default:\"15m\" help:\"Threshold beyond which an idle backend should be stopped\" group:\"backends\"`\n+\tEnableWatchdogBusy                 bool     `env:\"LOCALAI_WATCHDOG_BUSY,WATCHDOG_BUSY\" default:\"false\" help:\"Enable watchdog for stopping backends that are busy longer than the watchdog-busy-timeout\" group:\"backends\"`\n+\tWatchdogBusyTimeout                string   `env:\"LOCALAI_WATCHDOG_BUSY_TIMEOUT,WATCHDOG_BUSY_TIMEOUT\" default:\"5m\" help:\"Threshold beyond which a busy backend should be stopped\" group:\"backends\"`\n+\tFederated                          bool     `env:\"LOCALAI_FEDERATED,FEDERATED\" help:\"Enable federated instance\" group:\"federated\"`\n+\tDisableGalleryEndpoint             bool     `env:\"LOCALAI_DISABLE_GALLERY_ENDPOINT,DISABLE_GALLERY_ENDPOINT\" help:\"Disable the gallery endpoints\" group:\"api\"`\n }\n \n func (r *RunCMD) Run(ctx *cliContext.Context) error {\n@@ -97,6 +100,9 @@ func (r *RunCMD) Run(ctx *cliContext.Context) error {\n \t\tconfig.WithModelsURL(append(r.Models, r.ModelArgs...)...),\n \t\tconfig.WithOpaqueErrors(r.OpaqueErrors),\n \t\tconfig.WithEnforcedPredownloadScans(!r.DisablePredownloadScan),\n+\t\tconfig.WithSubtleKeyComparison(r.UseSubtleKeyComparison),\n+\t\tconfig.WithDisableApiKeyRequirementForHttpGet(r.DisableApiKeyRequirementForHttpGet),\n+\t\tconfig.WithHttpGetExemptedEndpoints(r.HttpGetExemptedEndpoints),\n \t\tconfig.WithP2PNetworkID(r.Peer2PeerNetworkID),\n \t}\n "
        },
        {
          "filename": "core/config/application_config.go",
          "status": "modified",
          "additions": 35,
          "deletions": 5,
          "patch": "@@ -4,6 +4,7 @@ import (\n \t\"context\"\n \t\"embed\"\n \t\"encoding/json\"\n+\t\"regexp\"\n \t\"time\"\n \n \t\"github.com/mudler/LocalAI/pkg/xsysinfo\"\n@@ -16,7 +17,6 @@ type ApplicationConfig struct {\n \tModelPath                           string\n \tLibPath                             string\n \tUploadLimitMB, Threads, ContextSize int\n-\tDisableWebUI                        bool\n \tF16                                 bool\n \tDebug                               bool\n \tImageDir                            string\n@@ -31,11 +31,17 @@ type ApplicationConfig struct {\n \tPreloadModelsFromPath               string\n \tCORSAllowOrigins                    string\n \tApiKeys                             []string\n-\tEnforcePredownloadScans             bool\n-\tOpaqueErrors                        bool\n \tP2PToken                            string\n \tP2PNetworkID                        string\n \n+\tDisableWebUI                       bool\n+\tEnforcePredownloadScans            bool\n+\tOpaqueErrors                       bool\n+\tUseSubtleKeyComparison             bool\n+\tDisableApiKeyRequirementForHttpGet bool\n+\tHttpGetExemptedEndpoints           []*regexp.Regexp\n+\tDisableGalleryEndpoint             bool\n+\n \tModelLibraryURL string\n \n \tGalleries []Gallery\n@@ -57,8 +63,6 @@ type ApplicationConfig struct {\n \tModelsURL []string\n \n \tWatchDogBusyTimeout, WatchDogIdleTimeout time.Duration\n-\n-\tDisableGalleryEndpoint bool\n }\n \n type AppOption func(*ApplicationConfig)\n@@ -327,6 +331,32 @@ func WithOpaqueErrors(opaque bool) AppOption {\n \t}\n }\n \n+func WithSubtleKeyComparison(subtle bool) AppOption {\n+\treturn func(o *ApplicationConfig) {\n+\t\to.UseSubtleKeyComparison = subtle\n+\t}\n+}\n+\n+func WithDisableApiKeyRequirementForHttpGet(required bool) AppOption {\n+\treturn func(o *ApplicationConfig) {\n+\t\to.DisableApiKeyRequirementForHttpGet = required\n+\t}\n+}\n+\n+func WithHttpGetExemptedEndpoints(endpoints []string) AppOption {\n+\treturn func(o *ApplicationConfig) {\n+\t\to.HttpGetExemptedEndpoints = []*regexp.Regexp{}\n+\t\tfor _, epr := range endpoints {\n+\t\t\tr, err := regexp.Compile(epr)\n+\t\t\tif err == nil && r != nil {\n+\t\t\t\to.HttpGetExemptedEndpoints = append(o.HttpGetExemptedEndpoints, r)\n+\t\t\t} else {\n+\t\t\t\tlog.Warn().Err(err).Str(\"regex\", epr).Msg(\"Error while compiling HTTP Get Exemption regex, skipping this entry.\")\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n // ToConfigLoaderOptions returns a slice of ConfigLoader Option.\n // Some options defined at the application level are going to be passed as defaults for\n // all the configuration for the models."
        },
        {
          "filename": "core/http/app.go",
          "status": "modified",
          "additions": 14,
          "deletions": 35,
          "patch": "@@ -3,13 +3,15 @@ package http\n import (\n \t\"embed\"\n \t\"errors\"\n+\t\"fmt\"\n \t\"net/http\"\n-\t\"strings\"\n \n+\t\"github.com/dave-gray101/v2keyauth\"\n \t\"github.com/mudler/LocalAI/pkg/utils\"\n \n \t\"github.com/mudler/LocalAI/core/http/endpoints/localai\"\n \t\"github.com/mudler/LocalAI/core/http/endpoints/openai\"\n+\t\"github.com/mudler/LocalAI/core/http/middleware\"\n \t\"github.com/mudler/LocalAI/core/http/routes\"\n \n \t\"github.com/mudler/LocalAI/core/config\"\n@@ -137,37 +139,14 @@ func App(cl *config.BackendConfigLoader, ml *model.ModelLoader, appConfig *confi\n \t\t})\n \t}\n \n-\t// Auth middleware checking if API key is valid. If no API key is set, no auth is required.\n-\tauth := func(c *fiber.Ctx) error {\n-\t\tif len(appConfig.ApiKeys) == 0 {\n-\t\t\treturn c.Next()\n-\t\t}\n-\n-\t\tif len(appConfig.ApiKeys) == 0 {\n-\t\t\treturn c.Next()\n-\t\t}\n-\n-\t\tauthHeader := readAuthHeader(c)\n-\t\tif authHeader == \"\" {\n-\t\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\"message\": \"Authorization header missing\"})\n-\t\t}\n-\n-\t\t// If it's a bearer token\n-\t\tauthHeaderParts := strings.Split(authHeader, \" \")\n-\t\tif len(authHeaderParts) != 2 || authHeaderParts[0] != \"Bearer\" {\n-\t\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\"message\": \"Invalid Authorization header format\"})\n-\t\t}\n-\n-\t\tapiKey := authHeaderParts[1]\n-\t\tfor _, key := range appConfig.ApiKeys {\n-\t\t\tif apiKey == key {\n-\t\t\t\treturn c.Next()\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\"message\": \"Invalid API key\"})\n+\tkaConfig, err := middleware.GetKeyAuthConfig(appConfig)\n+\tif err != nil || kaConfig == nil {\n+\t\treturn nil, fmt.Errorf(\"failed to create key auth config: %w\", err)\n \t}\n \n+\t// Auth is applied to _all_ endpoints. No exceptions. Filtering out endpoints to bypass is the role of the Filter property of the KeyAuth Configuration\n+\tapp.Use(v2keyauth.New(*kaConfig))\n+\n \tif appConfig.CORS {\n \t\tvar c func(ctx *fiber.Ctx) error\n \t\tif appConfig.CORSAllowOrigins == \"\" {\n@@ -192,13 +171,13 @@ func App(cl *config.BackendConfigLoader, ml *model.ModelLoader, appConfig *confi\n \tgalleryService := services.NewGalleryService(appConfig)\n \tgalleryService.Start(appConfig.Context, cl)\n \n-\troutes.RegisterElevenLabsRoutes(app, cl, ml, appConfig, auth)\n-\troutes.RegisterLocalAIRoutes(app, cl, ml, appConfig, galleryService, auth)\n-\troutes.RegisterOpenAIRoutes(app, cl, ml, appConfig, auth)\n+\troutes.RegisterElevenLabsRoutes(app, cl, ml, appConfig)\n+\troutes.RegisterLocalAIRoutes(app, cl, ml, appConfig, galleryService)\n+\troutes.RegisterOpenAIRoutes(app, cl, ml, appConfig)\n \tif !appConfig.DisableWebUI {\n-\t\troutes.RegisterUIRoutes(app, cl, ml, appConfig, galleryService, auth)\n+\t\troutes.RegisterUIRoutes(app, cl, ml, appConfig, galleryService)\n \t}\n-\troutes.RegisterJINARoutes(app, cl, ml, appConfig, auth)\n+\troutes.RegisterJINARoutes(app, cl, ml, appConfig)\n \n \thttpFS := http.FS(embedDirStatic)\n "
        },
        {
          "filename": "core/http/middleware/auth.go",
          "status": "added",
          "additions": 93,
          "deletions": 0,
          "patch": "@@ -0,0 +1,93 @@\n+package middleware\r\n+\r\n+import (\r\n+\t\"crypto/subtle\"\r\n+\t\"errors\"\r\n+\r\n+\t\"github.com/dave-gray101/v2keyauth\"\r\n+\t\"github.com/gofiber/fiber/v2\"\r\n+\t\"github.com/gofiber/fiber/v2/middleware/keyauth\"\r\n+\t\"github.com/mudler/LocalAI/core/config\"\r\n+)\r\n+\r\n+// This file contains the configuration generators and handler functions that are used along with the fiber/keyauth middleware\r\n+// Currently this requires an upstream patch - and feature patches are no longer accepted to v2\r\n+// Therefore `dave-gray101/v2keyauth` contains the v2 backport of the middleware until v3 stabilizes and we migrate.\r\n+\r\n+func GetKeyAuthConfig(applicationConfig *config.ApplicationConfig) (*v2keyauth.Config, error) {\r\n+\tcustomLookup, err := v2keyauth.MultipleKeySourceLookup([]string{\"header:Authorization\", \"header:x-api-key\", \"header:xi-api-key\"}, keyauth.ConfigDefault.AuthScheme)\r\n+\tif err != nil {\r\n+\t\treturn nil, err\r\n+\t}\r\n+\r\n+\treturn &v2keyauth.Config{\r\n+\t\tCustomKeyLookup: customLookup,\r\n+\t\tNext:            getApiKeyRequiredFilterFunction(applicationConfig),\r\n+\t\tValidator:       getApiKeyValidationFunction(applicationConfig),\r\n+\t\tErrorHandler:    getApiKeyErrorHandler(applicationConfig),\r\n+\t\tAuthScheme:      \"Bearer\",\r\n+\t}, nil\r\n+}\r\n+\r\n+func getApiKeyErrorHandler(applicationConfig *config.ApplicationConfig) fiber.ErrorHandler {\r\n+\treturn func(ctx *fiber.Ctx, err error) error {\r\n+\t\tif errors.Is(err, v2keyauth.ErrMissingOrMalformedAPIKey) {\r\n+\t\t\tif len(applicationConfig.ApiKeys) == 0 {\r\n+\t\t\t\treturn ctx.Next() // if no keys are set up, any error we get here is not an error.\r\n+\t\t\t}\r\n+\t\t\tif applicationConfig.OpaqueErrors {\r\n+\t\t\t\treturn ctx.SendStatus(403)\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tif applicationConfig.OpaqueErrors {\r\n+\t\t\treturn ctx.SendStatus(500)\r\n+\t\t}\r\n+\t\treturn err\r\n+\t}\r\n+}\r\n+\r\n+func getApiKeyValidationFunction(applicationConfig *config.ApplicationConfig) func(*fiber.Ctx, string) (bool, error) {\r\n+\r\n+\tif applicationConfig.UseSubtleKeyComparison {\r\n+\t\treturn func(ctx *fiber.Ctx, apiKey string) (bool, error) {\r\n+\t\t\tif len(applicationConfig.ApiKeys) == 0 {\r\n+\t\t\t\treturn true, nil // If no keys are setup, accept everything\r\n+\t\t\t}\r\n+\t\t\tfor _, validKey := range applicationConfig.ApiKeys {\r\n+\t\t\t\tif subtle.ConstantTimeCompare([]byte(apiKey), []byte(validKey)) == 1 {\r\n+\t\t\t\t\treturn true, nil\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\treturn false, v2keyauth.ErrMissingOrMalformedAPIKey\r\n+\t\t}\r\n+\t}\r\n+\r\n+\treturn func(ctx *fiber.Ctx, apiKey string) (bool, error) {\r\n+\t\tif len(applicationConfig.ApiKeys) == 0 {\r\n+\t\t\treturn true, nil // If no keys are setup, accept everything\r\n+\t\t}\r\n+\t\tfor _, validKey := range applicationConfig.ApiKeys {\r\n+\t\t\tif apiKey == validKey {\r\n+\t\t\t\treturn true, nil\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn false, v2keyauth.ErrMissingOrMalformedAPIKey\r\n+\t}\r\n+}\r\n+\r\n+func getApiKeyRequiredFilterFunction(applicationConfig *config.ApplicationConfig) func(*fiber.Ctx) bool {\r\n+\tif applicationConfig.DisableApiKeyRequirementForHttpGet {\r\n+\t\treturn func(c *fiber.Ctx) bool {\r\n+\t\t\tif c.Method() != \"GET\" {\r\n+\t\t\t\treturn false\r\n+\t\t\t}\r\n+\t\t\tfor _, rx := range applicationConfig.HttpGetExemptedEndpoints {\r\n+\t\t\t\tif rx.MatchString(c.Path()) {\r\n+\t\t\t\t\treturn true\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\treturn false\r\n+\t\t}\r\n+\t}\r\n+\treturn func(c *fiber.Ctx) bool { return false }\r\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "core/http/routes/elevenlabs.go",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -10,12 +10,11 @@ import (\n func RegisterElevenLabsRoutes(app *fiber.App,\n \tcl *config.BackendConfigLoader,\n \tml *model.ModelLoader,\n-\tappConfig *config.ApplicationConfig,\n-\tauth func(*fiber.Ctx) error) {\n+\tappConfig *config.ApplicationConfig) {\n \n \t// Elevenlabs\n-\tapp.Post(\"/v1/text-to-speech/:voice-id\", auth, elevenlabs.TTSEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/text-to-speech/:voice-id\", elevenlabs.TTSEndpoint(cl, ml, appConfig))\n \n-\tapp.Post(\"/v1/sound-generation\", auth, elevenlabs.SoundGenerationEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/sound-generation\", elevenlabs.SoundGenerationEndpoint(cl, ml, appConfig))\n \n }"
        },
        {
          "filename": "core/http/routes/jina.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -11,8 +11,7 @@ import (\n func RegisterJINARoutes(app *fiber.App,\n \tcl *config.BackendConfigLoader,\n \tml *model.ModelLoader,\n-\tappConfig *config.ApplicationConfig,\n-\tauth func(*fiber.Ctx) error) {\n+\tappConfig *config.ApplicationConfig) {\n \n \t// POST endpoint to mimic the reranking\n \tapp.Post(\"/v1/rerank\", jina.JINARerankEndpoint(cl, ml, appConfig))"
        },
        {
          "filename": "core/http/routes/localai.go",
          "status": "modified",
          "additions": 20,
          "deletions": 21,
          "patch": "@@ -15,33 +15,32 @@ func RegisterLocalAIRoutes(app *fiber.App,\n \tcl *config.BackendConfigLoader,\n \tml *model.ModelLoader,\n \tappConfig *config.ApplicationConfig,\n-\tgalleryService *services.GalleryService,\n-\tauth func(*fiber.Ctx) error) {\n+\tgalleryService *services.GalleryService) {\n \n \tapp.Get(\"/swagger/*\", swagger.HandlerDefault) // default\n \n \t// LocalAI API endpoints\n \tif !appConfig.DisableGalleryEndpoint {\n \t\tmodelGalleryEndpointService := localai.CreateModelGalleryEndpointService(appConfig.Galleries, appConfig.ModelPath, galleryService)\n-\t\tapp.Post(\"/models/apply\", auth, modelGalleryEndpointService.ApplyModelGalleryEndpoint())\n-\t\tapp.Post(\"/models/delete/:name\", auth, modelGalleryEndpointService.DeleteModelGalleryEndpoint())\n+\t\tapp.Post(\"/models/apply\", modelGalleryEndpointService.ApplyModelGalleryEndpoint())\n+\t\tapp.Post(\"/models/delete/:name\", modelGalleryEndpointService.DeleteModelGalleryEndpoint())\n \n-\t\tapp.Get(\"/models/available\", auth, modelGalleryEndpointService.ListModelFromGalleryEndpoint())\n-\t\tapp.Get(\"/models/galleries\", auth, modelGalleryEndpointService.ListModelGalleriesEndpoint())\n-\t\tapp.Post(\"/models/galleries\", auth, modelGalleryEndpointService.AddModelGalleryEndpoint())\n-\t\tapp.Delete(\"/models/galleries\", auth, modelGalleryEndpointService.RemoveModelGalleryEndpoint())\n-\t\tapp.Get(\"/models/jobs/:uuid\", auth, modelGalleryEndpointService.GetOpStatusEndpoint())\n-\t\tapp.Get(\"/models/jobs\", auth, modelGalleryEndpointService.GetAllStatusEndpoint())\n+\t\tapp.Get(\"/models/available\", modelGalleryEndpointService.ListModelFromGalleryEndpoint())\n+\t\tapp.Get(\"/models/galleries\", modelGalleryEndpointService.ListModelGalleriesEndpoint())\n+\t\tapp.Post(\"/models/galleries\", modelGalleryEndpointService.AddModelGalleryEndpoint())\n+\t\tapp.Delete(\"/models/galleries\", modelGalleryEndpointService.RemoveModelGalleryEndpoint())\n+\t\tapp.Get(\"/models/jobs/:uuid\", modelGalleryEndpointService.GetOpStatusEndpoint())\n+\t\tapp.Get(\"/models/jobs\", modelGalleryEndpointService.GetAllStatusEndpoint())\n \t}\n \n-\tapp.Post(\"/tts\", auth, localai.TTSEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/tts\", localai.TTSEndpoint(cl, ml, appConfig))\n \n \t// Stores\n \tsl := model.NewModelLoader(\"\")\n-\tapp.Post(\"/stores/set\", auth, localai.StoresSetEndpoint(sl, appConfig))\n-\tapp.Post(\"/stores/delete\", auth, localai.StoresDeleteEndpoint(sl, appConfig))\n-\tapp.Post(\"/stores/get\", auth, localai.StoresGetEndpoint(sl, appConfig))\n-\tapp.Post(\"/stores/find\", auth, localai.StoresFindEndpoint(sl, appConfig))\n+\tapp.Post(\"/stores/set\", localai.StoresSetEndpoint(sl, appConfig))\n+\tapp.Post(\"/stores/delete\", localai.StoresDeleteEndpoint(sl, appConfig))\n+\tapp.Post(\"/stores/get\", localai.StoresGetEndpoint(sl, appConfig))\n+\tapp.Post(\"/stores/find\", localai.StoresFindEndpoint(sl, appConfig))\n \n \t// Kubernetes health checks\n \tok := func(c *fiber.Ctx) error {\n@@ -51,20 +50,20 @@ func RegisterLocalAIRoutes(app *fiber.App,\n \tapp.Get(\"/healthz\", ok)\n \tapp.Get(\"/readyz\", ok)\n \n-\tapp.Get(\"/metrics\", auth, localai.LocalAIMetricsEndpoint())\n+\tapp.Get(\"/metrics\", localai.LocalAIMetricsEndpoint())\n \n \t// Experimental Backend Statistics Module\n \tbackendMonitorService := services.NewBackendMonitorService(ml, cl, appConfig) // Split out for now\n-\tapp.Get(\"/backend/monitor\", auth, localai.BackendMonitorEndpoint(backendMonitorService))\n-\tapp.Post(\"/backend/shutdown\", auth, localai.BackendShutdownEndpoint(backendMonitorService))\n+\tapp.Get(\"/backend/monitor\", localai.BackendMonitorEndpoint(backendMonitorService))\n+\tapp.Post(\"/backend/shutdown\", localai.BackendShutdownEndpoint(backendMonitorService))\n \n \t// p2p\n \tif p2p.IsP2PEnabled() {\n-\t\tapp.Get(\"/api/p2p\", auth, localai.ShowP2PNodes(appConfig))\n-\t\tapp.Get(\"/api/p2p/token\", auth, localai.ShowP2PToken(appConfig))\n+\t\tapp.Get(\"/api/p2p\", localai.ShowP2PNodes(appConfig))\n+\t\tapp.Get(\"/api/p2p/token\", localai.ShowP2PToken(appConfig))\n \t}\n \n-\tapp.Get(\"/version\", auth, func(c *fiber.Ctx) error {\n+\tapp.Get(\"/version\", func(c *fiber.Ctx) error {\n \t\treturn c.JSON(struct {\n \t\t\tVersion string `json:\"version\"`\n \t\t}{Version: internal.PrintableVersion()})"
        },
        {
          "filename": "core/http/routes/openai.go",
          "status": "modified",
          "additions": 44,
          "deletions": 45,
          "patch": "@@ -11,66 +11,65 @@ import (\n func RegisterOpenAIRoutes(app *fiber.App,\n \tcl *config.BackendConfigLoader,\n \tml *model.ModelLoader,\n-\tappConfig *config.ApplicationConfig,\n-\tauth func(*fiber.Ctx) error) {\n+\tappConfig *config.ApplicationConfig) {\n \t// openAI compatible API endpoint\n \n \t// chat\n-\tapp.Post(\"/v1/chat/completions\", auth, openai.ChatEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/chat/completions\", auth, openai.ChatEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/chat/completions\", openai.ChatEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/chat/completions\", openai.ChatEndpoint(cl, ml, appConfig))\n \n \t// edit\n-\tapp.Post(\"/v1/edits\", auth, openai.EditEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/edits\", auth, openai.EditEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/edits\", openai.EditEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/edits\", openai.EditEndpoint(cl, ml, appConfig))\n \n \t// assistant\n-\tapp.Get(\"/v1/assistants\", auth, openai.ListAssistantsEndpoint(cl, ml, appConfig))\n-\tapp.Get(\"/assistants\", auth, openai.ListAssistantsEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/v1/assistants\", auth, openai.CreateAssistantEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/assistants\", auth, openai.CreateAssistantEndpoint(cl, ml, appConfig))\n-\tapp.Delete(\"/v1/assistants/:assistant_id\", auth, openai.DeleteAssistantEndpoint(cl, ml, appConfig))\n-\tapp.Delete(\"/assistants/:assistant_id\", auth, openai.DeleteAssistantEndpoint(cl, ml, appConfig))\n-\tapp.Get(\"/v1/assistants/:assistant_id\", auth, openai.GetAssistantEndpoint(cl, ml, appConfig))\n-\tapp.Get(\"/assistants/:assistant_id\", auth, openai.GetAssistantEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/v1/assistants/:assistant_id\", auth, openai.ModifyAssistantEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/assistants/:assistant_id\", auth, openai.ModifyAssistantEndpoint(cl, ml, appConfig))\n-\tapp.Get(\"/v1/assistants/:assistant_id/files\", auth, openai.ListAssistantFilesEndpoint(cl, ml, appConfig))\n-\tapp.Get(\"/assistants/:assistant_id/files\", auth, openai.ListAssistantFilesEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/v1/assistants/:assistant_id/files\", auth, openai.CreateAssistantFileEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/assistants/:assistant_id/files\", auth, openai.CreateAssistantFileEndpoint(cl, ml, appConfig))\n-\tapp.Delete(\"/v1/assistants/:assistant_id/files/:file_id\", auth, openai.DeleteAssistantFileEndpoint(cl, ml, appConfig))\n-\tapp.Delete(\"/assistants/:assistant_id/files/:file_id\", auth, openai.DeleteAssistantFileEndpoint(cl, ml, appConfig))\n-\tapp.Get(\"/v1/assistants/:assistant_id/files/:file_id\", auth, openai.GetAssistantFileEndpoint(cl, ml, appConfig))\n-\tapp.Get(\"/assistants/:assistant_id/files/:file_id\", auth, openai.GetAssistantFileEndpoint(cl, ml, appConfig))\n+\tapp.Get(\"/v1/assistants\", openai.ListAssistantsEndpoint(cl, ml, appConfig))\n+\tapp.Get(\"/assistants\", openai.ListAssistantsEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/assistants\", openai.CreateAssistantEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/assistants\", openai.CreateAssistantEndpoint(cl, ml, appConfig))\n+\tapp.Delete(\"/v1/assistants/:assistant_id\", openai.DeleteAssistantEndpoint(cl, ml, appConfig))\n+\tapp.Delete(\"/assistants/:assistant_id\", openai.DeleteAssistantEndpoint(cl, ml, appConfig))\n+\tapp.Get(\"/v1/assistants/:assistant_id\", openai.GetAssistantEndpoint(cl, ml, appConfig))\n+\tapp.Get(\"/assistants/:assistant_id\", openai.GetAssistantEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/assistants/:assistant_id\", openai.ModifyAssistantEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/assistants/:assistant_id\", openai.ModifyAssistantEndpoint(cl, ml, appConfig))\n+\tapp.Get(\"/v1/assistants/:assistant_id/files\", openai.ListAssistantFilesEndpoint(cl, ml, appConfig))\n+\tapp.Get(\"/assistants/:assistant_id/files\", openai.ListAssistantFilesEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/assistants/:assistant_id/files\", openai.CreateAssistantFileEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/assistants/:assistant_id/files\", openai.CreateAssistantFileEndpoint(cl, ml, appConfig))\n+\tapp.Delete(\"/v1/assistants/:assistant_id/files/:file_id\", openai.DeleteAssistantFileEndpoint(cl, ml, appConfig))\n+\tapp.Delete(\"/assistants/:assistant_id/files/:file_id\", openai.DeleteAssistantFileEndpoint(cl, ml, appConfig))\n+\tapp.Get(\"/v1/assistants/:assistant_id/files/:file_id\", openai.GetAssistantFileEndpoint(cl, ml, appConfig))\n+\tapp.Get(\"/assistants/:assistant_id/files/:file_id\", openai.GetAssistantFileEndpoint(cl, ml, appConfig))\n \n \t// files\n-\tapp.Post(\"/v1/files\", auth, openai.UploadFilesEndpoint(cl, appConfig))\n-\tapp.Post(\"/files\", auth, openai.UploadFilesEndpoint(cl, appConfig))\n-\tapp.Get(\"/v1/files\", auth, openai.ListFilesEndpoint(cl, appConfig))\n-\tapp.Get(\"/files\", auth, openai.ListFilesEndpoint(cl, appConfig))\n-\tapp.Get(\"/v1/files/:file_id\", auth, openai.GetFilesEndpoint(cl, appConfig))\n-\tapp.Get(\"/files/:file_id\", auth, openai.GetFilesEndpoint(cl, appConfig))\n-\tapp.Delete(\"/v1/files/:file_id\", auth, openai.DeleteFilesEndpoint(cl, appConfig))\n-\tapp.Delete(\"/files/:file_id\", auth, openai.DeleteFilesEndpoint(cl, appConfig))\n-\tapp.Get(\"/v1/files/:file_id/content\", auth, openai.GetFilesContentsEndpoint(cl, appConfig))\n-\tapp.Get(\"/files/:file_id/content\", auth, openai.GetFilesContentsEndpoint(cl, appConfig))\n+\tapp.Post(\"/v1/files\", openai.UploadFilesEndpoint(cl, appConfig))\n+\tapp.Post(\"/files\", openai.UploadFilesEndpoint(cl, appConfig))\n+\tapp.Get(\"/v1/files\", openai.ListFilesEndpoint(cl, appConfig))\n+\tapp.Get(\"/files\", openai.ListFilesEndpoint(cl, appConfig))\n+\tapp.Get(\"/v1/files/:file_id\", openai.GetFilesEndpoint(cl, appConfig))\n+\tapp.Get(\"/files/:file_id\", openai.GetFilesEndpoint(cl, appConfig))\n+\tapp.Delete(\"/v1/files/:file_id\", openai.DeleteFilesEndpoint(cl, appConfig))\n+\tapp.Delete(\"/files/:file_id\", openai.DeleteFilesEndpoint(cl, appConfig))\n+\tapp.Get(\"/v1/files/:file_id/content\", openai.GetFilesContentsEndpoint(cl, appConfig))\n+\tapp.Get(\"/files/:file_id/content\", openai.GetFilesContentsEndpoint(cl, appConfig))\n \n \t// completion\n-\tapp.Post(\"/v1/completions\", auth, openai.CompletionEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/completions\", auth, openai.CompletionEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/v1/engines/:model/completions\", auth, openai.CompletionEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/completions\", openai.CompletionEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/completions\", openai.CompletionEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/engines/:model/completions\", openai.CompletionEndpoint(cl, ml, appConfig))\n \n \t// embeddings\n-\tapp.Post(\"/v1/embeddings\", auth, openai.EmbeddingsEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/embeddings\", auth, openai.EmbeddingsEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/v1/engines/:model/embeddings\", auth, openai.EmbeddingsEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/embeddings\", openai.EmbeddingsEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/embeddings\", openai.EmbeddingsEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/engines/:model/embeddings\", openai.EmbeddingsEndpoint(cl, ml, appConfig))\n \n \t// audio\n-\tapp.Post(\"/v1/audio/transcriptions\", auth, openai.TranscriptEndpoint(cl, ml, appConfig))\n-\tapp.Post(\"/v1/audio/speech\", auth, localai.TTSEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/audio/transcriptions\", openai.TranscriptEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/audio/speech\", localai.TTSEndpoint(cl, ml, appConfig))\n \n \t// images\n-\tapp.Post(\"/v1/images/generations\", auth, openai.ImageEndpoint(cl, ml, appConfig))\n+\tapp.Post(\"/v1/images/generations\", openai.ImageEndpoint(cl, ml, appConfig))\n \n \tif appConfig.ImageDir != \"\" {\n \t\tapp.Static(\"/generated-images\", appConfig.ImageDir)\n@@ -81,6 +80,6 @@ func RegisterOpenAIRoutes(app *fiber.App,\n \t}\n \n \t// List models\n-\tapp.Get(\"/v1/models\", auth, openai.ListModelsEndpoint(cl, ml))\n-\tapp.Get(\"/models\", auth, openai.ListModelsEndpoint(cl, ml))\n+\tapp.Get(\"/v1/models\", openai.ListModelsEndpoint(cl, ml))\n+\tapp.Get(\"/models\", openai.ListModelsEndpoint(cl, ml))\n }"
        },
        {
          "filename": "core/http/routes/ui.go",
          "status": "modified",
          "additions": 20,
          "deletions": 21,
          "patch": "@@ -59,8 +59,7 @@ func RegisterUIRoutes(app *fiber.App,\n \tcl *config.BackendConfigLoader,\n \tml *model.ModelLoader,\n \tappConfig *config.ApplicationConfig,\n-\tgalleryService *services.GalleryService,\n-\tauth func(*fiber.Ctx) error) {\n+\tgalleryService *services.GalleryService) {\n \n \t// keeps the state of models that are being installed from the UI\n \tvar processingModels = NewModelOpCache()\n@@ -85,10 +84,10 @@ func RegisterUIRoutes(app *fiber.App,\n \t\treturn processingModelsData, taskTypes\n \t}\n \n-\tapp.Get(\"/\", auth, localai.WelcomeEndpoint(appConfig, cl, ml, modelStatus))\n+\tapp.Get(\"/\", localai.WelcomeEndpoint(appConfig, cl, ml, modelStatus))\n \n \tif p2p.IsP2PEnabled() {\n-\t\tapp.Get(\"/p2p\", auth, func(c *fiber.Ctx) error {\n+\t\tapp.Get(\"/p2p\", func(c *fiber.Ctx) error {\n \t\t\tsummary := fiber.Map{\n \t\t\t\t\"Title\":   \"LocalAI - P2P dashboard\",\n \t\t\t\t\"Version\": internal.PrintableVersion(),\n@@ -104,25 +103,25 @@ func RegisterUIRoutes(app *fiber.App,\n \t\t})\n \n \t\t/* show nodes live! */\n-\t\tapp.Get(\"/p2p/ui/workers\", auth, func(c *fiber.Ctx) error {\n+\t\tapp.Get(\"/p2p/ui/workers\", func(c *fiber.Ctx) error {\n \t\t\treturn c.SendString(elements.P2PNodeBoxes(p2p.GetAvailableNodes(p2p.NetworkID(appConfig.P2PNetworkID, p2p.WorkerID))))\n \t\t})\n-\t\tapp.Get(\"/p2p/ui/workers-federation\", auth, func(c *fiber.Ctx) error {\n+\t\tapp.Get(\"/p2p/ui/workers-federation\", func(c *fiber.Ctx) error {\n \t\t\treturn c.SendString(elements.P2PNodeBoxes(p2p.GetAvailableNodes(p2p.NetworkID(appConfig.P2PNetworkID, p2p.FederatedID))))\n \t\t})\n \n-\t\tapp.Get(\"/p2p/ui/workers-stats\", auth, func(c *fiber.Ctx) error {\n+\t\tapp.Get(\"/p2p/ui/workers-stats\", func(c *fiber.Ctx) error {\n \t\t\treturn c.SendString(elements.P2PNodeStats(p2p.GetAvailableNodes(p2p.NetworkID(appConfig.P2PNetworkID, p2p.WorkerID))))\n \t\t})\n-\t\tapp.Get(\"/p2p/ui/workers-federation-stats\", auth, func(c *fiber.Ctx) error {\n+\t\tapp.Get(\"/p2p/ui/workers-federation-stats\", func(c *fiber.Ctx) error {\n \t\t\treturn c.SendString(elements.P2PNodeStats(p2p.GetAvailableNodes(p2p.NetworkID(appConfig.P2PNetworkID, p2p.FederatedID))))\n \t\t})\n \t}\n \n \tif !appConfig.DisableGalleryEndpoint {\n \n \t\t// Show the Models page (all models)\n-\t\tapp.Get(\"/browse\", auth, func(c *fiber.Ctx) error {\n+\t\tapp.Get(\"/browse\", func(c *fiber.Ctx) error {\n \t\t\tterm := c.Query(\"term\")\n \n \t\t\tmodels, _ := gallery.AvailableGalleryModels(appConfig.Galleries, appConfig.ModelPath)\n@@ -167,7 +166,7 @@ func RegisterUIRoutes(app *fiber.App,\n \n \t\t// Show the models, filtered from the user input\n \t\t// https://htmx.org/examples/active-search/\n-\t\tapp.Post(\"/browse/search/models\", auth, func(c *fiber.Ctx) error {\n+\t\tapp.Post(\"/browse/search/models\", func(c *fiber.Ctx) error {\n \t\t\tform := struct {\n \t\t\t\tSearch string `form:\"search\"`\n \t\t\t}{}\n@@ -188,7 +187,7 @@ func RegisterUIRoutes(app *fiber.App,\n \n \t\t// This route is used when the \"Install\" button is pressed, we submit here a new job to the gallery service\n \t\t// https://htmx.org/examples/progress-bar/\n-\t\tapp.Post(\"/browse/install/model/:id\", auth, func(c *fiber.Ctx) error {\n+\t\tapp.Post(\"/browse/install/model/:id\", func(c *fiber.Ctx) error {\n \t\t\tgalleryID := strings.Clone(c.Params(\"id\")) // note: strings.Clone is required for multiple requests!\n \t\t\tlog.Debug().Msgf(\"UI job submitted to install  : %+v\\n\", galleryID)\n \n@@ -215,7 +214,7 @@ func RegisterUIRoutes(app *fiber.App,\n \n \t\t// This route is used when the \"Install\" button is pressed, we submit here a new job to the gallery service\n \t\t// https://htmx.org/examples/progress-bar/\n-\t\tapp.Post(\"/browse/delete/model/:id\", auth, func(c *fiber.Ctx) error {\n+\t\tapp.Post(\"/browse/delete/model/:id\", func(c *fiber.Ctx) error {\n \t\t\tgalleryID := strings.Clone(c.Params(\"id\")) // note: strings.Clone is required for multiple requests!\n \t\t\tlog.Debug().Msgf(\"UI job submitted to delete  : %+v\\n\", galleryID)\n \t\t\tvar galleryName = galleryID\n@@ -255,7 +254,7 @@ func RegisterUIRoutes(app *fiber.App,\n \t\t// Display the job current progress status\n \t\t// If the job is done, we trigger the /browse/job/:uid route\n \t\t// https://htmx.org/examples/progress-bar/\n-\t\tapp.Get(\"/browse/job/progress/:uid\", auth, func(c *fiber.Ctx) error {\n+\t\tapp.Get(\"/browse/job/progress/:uid\", func(c *fiber.Ctx) error {\n \t\t\tjobUID := strings.Clone(c.Params(\"uid\")) // note: strings.Clone is required for multiple requests!\n \n \t\t\tstatus := galleryService.GetStatus(jobUID)\n@@ -279,7 +278,7 @@ func RegisterUIRoutes(app *fiber.App,\n \n \t\t// this route is hit when the job is done, and we display the\n \t\t// final state (for now just displays \"Installation completed\")\n-\t\tapp.Get(\"/browse/job/:uid\", auth, func(c *fiber.Ctx) error {\n+\t\tapp.Get(\"/browse/job/:uid\", func(c *fiber.Ctx) error {\n \t\t\tjobUID := strings.Clone(c.Params(\"uid\")) // note: strings.Clone is required for multiple requests!\n \n \t\t\tstatus := galleryService.GetStatus(jobUID)\n@@ -303,7 +302,7 @@ func RegisterUIRoutes(app *fiber.App,\n \t}\n \n \t// Show the Chat page\n-\tapp.Get(\"/chat/:model\", auth, func(c *fiber.Ctx) error {\n+\tapp.Get(\"/chat/:model\", func(c *fiber.Ctx) error {\n \t\tbackendConfigs, _ := services.ListModels(cl, ml, \"\", true)\n \n \t\tsummary := fiber.Map{\n@@ -318,7 +317,7 @@ func RegisterUIRoutes(app *fiber.App,\n \t\treturn c.Render(\"views/chat\", summary)\n \t})\n \n-\tapp.Get(\"/talk/\", auth, func(c *fiber.Ctx) error {\n+\tapp.Get(\"/talk/\", func(c *fiber.Ctx) error {\n \t\tbackendConfigs, _ := services.ListModels(cl, ml, \"\", true)\n \n \t\tif len(backendConfigs) == 0 {\n@@ -338,7 +337,7 @@ func RegisterUIRoutes(app *fiber.App,\n \t\treturn c.Render(\"views/talk\", summary)\n \t})\n \n-\tapp.Get(\"/chat/\", auth, func(c *fiber.Ctx) error {\n+\tapp.Get(\"/chat/\", func(c *fiber.Ctx) error {\n \n \t\tbackendConfigs, _ := services.ListModels(cl, ml, \"\", true)\n \n@@ -359,7 +358,7 @@ func RegisterUIRoutes(app *fiber.App,\n \t\treturn c.Render(\"views/chat\", summary)\n \t})\n \n-\tapp.Get(\"/text2image/:model\", auth, func(c *fiber.Ctx) error {\n+\tapp.Get(\"/text2image/:model\", func(c *fiber.Ctx) error {\n \t\tbackendConfigs := cl.GetAllBackendConfigs()\n \n \t\tsummary := fiber.Map{\n@@ -374,7 +373,7 @@ func RegisterUIRoutes(app *fiber.App,\n \t\treturn c.Render(\"views/text2image\", summary)\n \t})\n \n-\tapp.Get(\"/text2image/\", auth, func(c *fiber.Ctx) error {\n+\tapp.Get(\"/text2image/\", func(c *fiber.Ctx) error {\n \n \t\tbackendConfigs := cl.GetAllBackendConfigs()\n \n@@ -395,7 +394,7 @@ func RegisterUIRoutes(app *fiber.App,\n \t\treturn c.Render(\"views/text2image\", summary)\n \t})\n \n-\tapp.Get(\"/tts/:model\", auth, func(c *fiber.Ctx) error {\n+\tapp.Get(\"/tts/:model\", func(c *fiber.Ctx) error {\n \t\tbackendConfigs := cl.GetAllBackendConfigs()\n \n \t\tsummary := fiber.Map{\n@@ -410,7 +409,7 @@ func RegisterUIRoutes(app *fiber.App,\n \t\treturn c.Render(\"views/tts\", summary)\n \t})\n \n-\tapp.Get(\"/tts/\", auth, func(c *fiber.Ctx) error {\n+\tapp.Get(\"/tts/\", func(c *fiber.Ctx) error {\n \n \t\tbackendConfigs := cl.GetAllBackendConfigs()\n "
        },
        {
          "filename": "go.mod",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -74,6 +74,7 @@ require (\n \tcloud.google.com/go/auth/oauth2adapt v0.2.2 // indirect\n \tcloud.google.com/go/compute/metadata v0.3.0 // indirect\n \tgithub.com/cpuguy83/go-md2man/v2 v2.0.4 // indirect\n+\tgithub.com/dave-gray101/v2keyauth v0.0.0-20240624150259-c45d584d25e2 // indirect\n \tgithub.com/envoyproxy/protoc-gen-validate v1.0.4 // indirect\n \tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n \tgithub.com/go-task/slim-sprig/v3 v3.0.0 // indirect"
        },
        {
          "filename": "go.sum",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -110,6 +110,8 @@ github.com/creachadair/otp v0.4.2 h1:ngNMaD6Tzd7UUNRFyed7ykZFn/Wr5sSs5ffqZWm9pu8\n github.com/creachadair/otp v0.4.2/go.mod h1:DqV9hJyUbcUme0pooYfiFvvMe72Aua5sfhNzwfZvk40=\n github.com/creack/pty v1.1.18 h1:n56/Zwd5o6whRC5PMGretI4IdRLlmBXYNjScPaBgsbY=\n github.com/creack/pty v1.1.18/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=\n+github.com/dave-gray101/v2keyauth v0.0.0-20240624150259-c45d584d25e2 h1:flLYmnQFZNo04x2NPehMbf30m7Pli57xwZ0NFqR/hb0=\n+github.com/dave-gray101/v2keyauth v0.0.0-20240624150259-c45d584d25e2/go.mod h1:NtWqRzAp/1tw+twkW8uuBenEVVYndEAZACWU3F3xdoQ=\n github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\n github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38="
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d7dee3a5ecd7d3e60ba699ed6f12bc8d75213ffd",
            "date": "2025-01-14T10:13:16Z",
            "author_login": "mudler"
          },
          {
            "sha": "b8d74e52b1e400a52a747a3a89ac3f6338c6ad4b",
            "date": "2025-01-14T08:41:30Z",
            "author_login": "mudler"
          },
          {
            "sha": "62abe0d2c9c6492213039a7ccbbecaa40808791d",
            "date": "2025-01-14T08:33:19Z",
            "author_login": "mudler"
          },
          {
            "sha": "5414c294c4d2e57f1f0e09da14e341a5cd846e2b",
            "date": "2025-01-14T08:29:25Z",
            "author_login": "mudler"
          },
          {
            "sha": "1b3e89c89c1e82b98cdfd231d4c44ae491f3cd83",
            "date": "2025-01-14T08:27:18Z",
            "author_login": "mudler"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-203",
    "description": "mudler/localai version 2.17.1 is vulnerable to a Timing Attack. This type of side-channel attack allows an attacker to compromise the cryptosystem by analyzing the time taken to execute cryptographic algorithms. Specifically, in the context of password handling, an attacker can determine valid login credentials based on the server's response time, potentially leading to unauthorized access.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-10-29T13:15:08.683",
    "last_modified": "2024-11-14T14:15:19.160",
    "fix_date": "2024-09-17T03:29:07Z"
  },
  "references": [
    {
      "url": "https://github.com/mudler/localai/commit/db1159b6511e8fa09e594f9db0fec6ab4e142468",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/e286ed00-6383-47de-b5bc-9b9fad67c362",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.104545",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "LocalAI",
    "owner": "mudler",
    "created_at": "2023-03-18T22:58:02Z",
    "updated_at": "2025-01-14T15:10:10Z",
    "pushed_at": "2025-01-14T10:13:18Z",
    "size": 12471,
    "stars": 28386,
    "forks": 2132,
    "open_issues": 404,
    "watchers": 28386,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Go": 806615,
      "Python": 148488,
      "JavaScript": 145729,
      "C++": 105310,
      "HTML": 81769,
      "Makefile": 56001,
      "Shell": 32621,
      "Dockerfile": 19776,
      "CSS": 4436,
      "CMake": 3102,
      "C": 405,
      "Earthly": 110
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:13:52.451028"
  }
}