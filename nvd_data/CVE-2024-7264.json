{
  "cve_id": "CVE-2024-7264",
  "github_data": {
    "repository": "curl/curl",
    "fix_commit": "27959ecce75cdb2809c0bdb3286e60e08fadb519",
    "related_commits": [
      "27959ecce75cdb2809c0bdb3286e60e08fadb519"
    ],
    "patch_url": "https://github.com/curl/curl/commit/27959ecce75cdb2809c0bdb3286e60e08fadb519.patch",
    "fix_commit_details": {
      "sha": "27959ecce75cdb2809c0bdb3286e60e08fadb519",
      "commit_date": "2024-07-30T14:40:48Z",
      "author": {
        "login": "icing",
        "type": "User",
        "stats": {
          "total_commits": 525,
          "average_weekly_commits": 0.4013761467889908,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 108
        }
      },
      "commit_message": {
        "title": "x509asn1: unittests and fixes for gtime2str",
        "length": 164,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 204,
        "additions": 194,
        "deletions": 10
      },
      "files": [
        {
          "filename": "lib/vtls/x509asn1.c",
          "status": "modified",
          "additions": 24,
          "deletions": 8,
          "patch": "@@ -518,12 +518,13 @@ static CURLcode GTime2str(struct dynbuf *store,\n   fracl = 0; /* no fractional seconds detected so far */\n   if(fracp < end && (*fracp == '.' || *fracp == ',')) {\n     /* Have fractional seconds, e.g. \"[.,]\\d+\". How many? */\n-    tzp = fracp++; /* should be a digit char or BAD ARGUMENT */\n+    fracp++; /* should be a digit char or BAD ARGUMENT */\n+    tzp = fracp;\n     while(tzp < end && ISDIGIT(*tzp))\n       tzp++;\n     if(tzp == fracp) /* never looped, no digit after [.,] */\n       return CURLE_BAD_FUNCTION_ARGUMENT;\n-    fracl = tzp - fracp - 1; /* number of fractional sec digits */\n+    fracl = tzp - fracp; /* number of fractional sec digits */\n     DEBUGASSERT(fracl > 0);\n     /* Strip trailing zeroes in fractional seconds.\n      * May reduce fracl to 0 if only '0's are present. */\n@@ -532,18 +533,24 @@ static CURLcode GTime2str(struct dynbuf *store,\n   }\n \n   /* Process timezone. */\n-  if(tzp >= end)\n-    ;           /* Nothing to do. */\n+  if(tzp >= end) {\n+    tzp = \"\";\n+    tzl = 0;\n+  }\n   else if(*tzp == 'Z') {\n-    tzp = \" GMT\";\n-    end = tzp + 4;\n+    sep = \" \";\n+    tzp = \"GMT\";\n+    tzl = 3;\n+  }\n+  else if((*tzp == '+') || (*tzp == '-')) {\n+    sep = \" UTC\";\n+    tzl = end - tzp;\n   }\n   else {\n     sep = \" \";\n-    tzp++;\n+    tzl = end - tzp;\n   }\n \n-  tzl = end - tzp;\n   return Curl_dyn_addf(store,\n                        \"%.4s-%.2s-%.2s %.2s:%.2s:%c%c%s%.*s%s%.*s\",\n                        beg, beg + 4, beg + 6,\n@@ -552,6 +559,15 @@ static CURLcode GTime2str(struct dynbuf *store,\n                        sep, (int)tzl, tzp);\n }\n \n+#ifdef UNITTESTS\n+/* used by unit1656.c */\n+CURLcode Curl_x509_GTime2str(struct dynbuf *store,\n+                             const char *beg, const char *end)\n+{\n+  return GTime2str(store, beg, end);\n+}\n+#endif\n+\n /*\n  * Convert an ASN.1 UTC time to a printable string.\n  *"
        },
        {
          "filename": "lib/vtls/x509asn1.h",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -77,5 +77,16 @@ CURLcode Curl_extract_certinfo(struct Curl_easy *data, int certnum,\n                                const char *beg, const char *end);\n CURLcode Curl_verifyhost(struct Curl_cfilter *cf, struct Curl_easy *data,\n                          const char *beg, const char *end);\n+\n+#ifdef UNITTESTS\n+#if defined(USE_GNUTLS) || defined(USE_SCHANNEL) || defined(USE_SECTRANSP) || \\\n+  defined(USE_MBEDTLS)\n+\n+/* used by unit1656.c */\n+CURLcode Curl_x509_GTime2str(struct dynbuf *store,\n+                             const char *beg, const char *end);\n+#endif\n+#endif\n+\n #endif /* USE_GNUTLS or USE_WOLFSSL or USE_SCHANNEL or USE_SECTRANSP */\n #endif /* HEADER_CURL_X509ASN1_H */"
        },
        {
          "filename": "tests/data/Makefile.inc",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -211,7 +211,7 @@ test1620 test1621 \\\n \\\n test1630 test1631 test1632 test1633 test1634 test1635 \\\n \\\n-test1650 test1651 test1652 test1653 test1654 test1655 \\\n+test1650 test1651 test1652 test1653 test1654 test1655 test1656 \\\n test1660 test1661 test1662 test1663 \\\n \\\n test1670 test1671 \\"
        },
        {
          "filename": "tests/data/test1656",
          "status": "added",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -0,0 +1,22 @@\n+<testcase>\n+<info>\n+<keywords>\n+unittest\n+Curl_x509_GTime2str\n+</keywords>\n+</info>\n+\n+#\n+# Client-side\n+<client>\n+<server>\n+none\n+</server>\n+<features>\n+unittest\n+</features>\n+<name>\n+Curl_x509_GTime2str unit tests\n+</name>\n+</client>\n+</testcase>"
        },
        {
          "filename": "tests/unit/Makefile.inc",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -36,7 +36,7 @@ UNITPROGS = unit1300          unit1302 unit1303 unit1304 unit1305 unit1307 \\\n  unit1600 unit1601 unit1602 unit1603 unit1604 unit1605 unit1606 unit1607 \\\n  unit1608 unit1609 unit1610 unit1611 unit1612 unit1614 unit1615 unit1616 \\\n  unit1620 unit1621 \\\n- unit1650 unit1651 unit1652 unit1653 unit1654 unit1655 \\\n+ unit1650 unit1651 unit1652 unit1653 unit1654 unit1655 unit1656 \\\n  unit1660 unit1661 unit1663 \\\n  unit2600 unit2601 unit2602 unit2603 unit2604 \\\n  unit3200 \\\n@@ -122,6 +122,8 @@ unit1654_SOURCES = unit1654.c $(UNITFILES)\n \n unit1655_SOURCES = unit1655.c $(UNITFILES)\n \n+unit1656_SOURCES = unit1656.c $(UNITFILES)\n+\n unit1660_SOURCES = unit1660.c $(UNITFILES)\n \n unit1661_SOURCES = unit1661.c $(UNITFILES)"
        },
        {
          "filename": "tests/unit/unit1656.c",
          "status": "added",
          "additions": 133,
          "deletions": 0,
          "patch": "@@ -0,0 +1,133 @@\n+/***************************************************************************\n+ *                                  _   _ ____  _\n+ *  Project                     ___| | | |  _ \\| |\n+ *                             / __| | | | |_) | |\n+ *                            | (__| |_| |  _ <| |___\n+ *                             \\___|\\___/|_| \\_\\_____|\n+ *\n+ * Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n+ *\n+ * This software is licensed as described in the file COPYING, which\n+ * you should have received as part of this distribution. The terms\n+ * are also available at https://curl.se/docs/copyright.html.\n+ *\n+ * You may opt to use, copy, modify, merge, publish, distribute and/or sell\n+ * copies of the Software, and permit persons to whom the Software is\n+ * furnished to do so, under the terms of the COPYING file.\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n+ * KIND, either express or implied.\n+ *\n+ * SPDX-License-Identifier: curl\n+ *\n+ ***************************************************************************/\n+#include \"curlcheck.h\"\n+\n+#include \"vtls/x509asn1.h\"\n+\n+static CURLcode unit_setup(void)\n+{\n+  return CURLE_OK;\n+}\n+\n+static void unit_stop(void)\n+{\n+\n+}\n+\n+#if defined(USE_GNUTLS) || defined(USE_SCHANNEL) || defined(USE_SECTRANSP) || \\\n+  defined(USE_MBEDTLS)\n+\n+#ifndef ARRAYSIZE\n+#define ARRAYSIZE(A) (sizeof(A)/sizeof((A)[0]))\n+#endif\n+\n+struct test_spec {\n+  const char *input;\n+  const char *exp_output;\n+  CURLcode exp_result;\n+};\n+\n+static struct test_spec test_specs[] = {\n+  { \"190321134340\", \"1903-21-13 43:40:00\", CURLE_OK },\n+  { \"\", NULL, CURLE_BAD_FUNCTION_ARGUMENT },\n+  { \"WTF\", NULL, CURLE_BAD_FUNCTION_ARGUMENT },\n+  { \"0WTF\", NULL, CURLE_BAD_FUNCTION_ARGUMENT },\n+  { \"19032113434\", NULL, CURLE_BAD_FUNCTION_ARGUMENT },\n+  { \"19032113434WTF\", NULL, CURLE_BAD_FUNCTION_ARGUMENT },\n+  { \"190321134340.\", NULL, CURLE_BAD_FUNCTION_ARGUMENT },\n+  { \"190321134340.1\", \"1903-21-13 43:40:00.1\", CURLE_OK },\n+  { \"19032113434017.0\", \"1903-21-13 43:40:17\", CURLE_OK },\n+  { \"19032113434017.01\", \"1903-21-13 43:40:17.01\", CURLE_OK },\n+  { \"19032113434003.001\", \"1903-21-13 43:40:03.001\", CURLE_OK },\n+  { \"19032113434003.090\", \"1903-21-13 43:40:03.09\", CURLE_OK },\n+  { \"190321134340Z\", \"1903-21-13 43:40:00 GMT\", CURLE_OK },\n+  { \"19032113434017.0Z\", \"1903-21-13 43:40:17 GMT\", CURLE_OK },\n+  { \"19032113434017.01Z\", \"1903-21-13 43:40:17.01 GMT\", CURLE_OK },\n+  { \"19032113434003.001Z\", \"1903-21-13 43:40:03.001 GMT\", CURLE_OK },\n+  { \"19032113434003.090Z\", \"1903-21-13 43:40:03.09 GMT\", CURLE_OK },\n+  { \"190321134340CET\", \"1903-21-13 43:40:00 CET\", CURLE_OK },\n+  { \"19032113434017.0CET\", \"1903-21-13 43:40:17 CET\", CURLE_OK },\n+  { \"19032113434017.01CET\", \"1903-21-13 43:40:17.01 CET\", CURLE_OK },\n+  { \"190321134340+02:30\", \"1903-21-13 43:40:00 UTC+02:30\", CURLE_OK },\n+  { \"19032113434017.0+02:30\", \"1903-21-13 43:40:17 UTC+02:30\", CURLE_OK },\n+  { \"19032113434017.01+02:30\", \"1903-21-13 43:40:17.01 UTC+02:30\", CURLE_OK },\n+  { \"190321134340-3\", \"1903-21-13 43:40:00 UTC-3\", CURLE_OK },\n+  { \"19032113434017.0-04\", \"1903-21-13 43:40:17 UTC-04\", CURLE_OK },\n+  { \"19032113434017.01-01:10\", \"1903-21-13 43:40:17.01 UTC-01:10\", CURLE_OK },\n+};\n+\n+static bool do_test(struct test_spec *spec, size_t i, struct dynbuf *dbuf)\n+{\n+  CURLcode result;\n+  const char *in = spec->input;\n+\n+  Curl_dyn_reset(dbuf);\n+  result = Curl_x509_GTime2str(dbuf, in, in + strlen(in));\n+  if(result != spec->exp_result) {\n+    fprintf(stderr, \"test %zu: expect result %d, got %d\\n\",\n+            i, spec->exp_result, result);\n+    return FALSE;\n+  }\n+  else if(!result && strcmp(spec->exp_output, Curl_dyn_ptr(dbuf))) {\n+    fprintf(stderr, \"test %zu: input '%s', expected output '%s', got '%s'\\n\",\n+            i, in, spec->exp_output, Curl_dyn_ptr(dbuf));\n+    return FALSE;\n+  }\n+\n+  return TRUE;\n+}\n+\n+UNITTEST_START\n+{\n+  size_t i;\n+  struct dynbuf dbuf;\n+  bool all_ok = TRUE;\n+\n+  Curl_dyn_init(&dbuf, 32*1024);\n+\n+  if(curl_global_init(CURL_GLOBAL_ALL) != CURLE_OK) {\n+    fprintf(stderr, \"curl_global_init() failed\\n\");\n+    return TEST_ERR_MAJOR_BAD;\n+  }\n+\n+  for(i = 0; i < ARRAYSIZE(test_specs); ++i) {\n+    if(!do_test(&test_specs[i], i, &dbuf))\n+      all_ok = FALSE;\n+  }\n+  fail_unless(all_ok, \"some tests of Curl_x509_GTime2str() fails\");\n+\n+  Curl_dyn_free(&dbuf);\n+  curl_global_cleanup();\n+}\n+UNITTEST_STOP\n+\n+#else\n+\n+UNITTEST_START\n+{\n+  puts(\"not tested since Curl_x509_GTime2str() is not built-in\");\n+}\n+UNITTEST_STOP\n+\n+#endif"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "55f3ba447fe85f94964f5bbe989b2fd6c3719b99",
            "date": "2025-01-12T19:07:09Z",
            "author_login": "vszakats"
          },
          {
            "sha": "be82a3605a4b539580b3de776ffcca25b8770e43",
            "date": "2025-01-14T14:47:21Z",
            "author_login": "bagder"
          },
          {
            "sha": "2f8ecd5dbd55b801b0ae13b9374c06ec19e8ea9e",
            "date": "2025-01-14T13:53:42Z",
            "author_login": "bagder"
          },
          {
            "sha": "308437ac53a142be2c3470330e7de3737915bb23",
            "date": "2025-01-13T18:52:50Z",
            "author_login": "vszakats"
          },
          {
            "sha": "b9c173ebad458398450d207b0c4e34b401fd0486",
            "date": "2025-01-13T22:49:09Z",
            "author_login": "bagder"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-125",
    "description": "libcurl's ASN1 parser code has the `GTime2str()` function, used for parsing an\nASN.1 Generalized Time field. If given an syntactically incorrect field, the\nparser might end up using -1 for the length of the *time fraction*, leading to\na `strlen()` getting performed on a pointer to a heap buffer area that is not\n(purposely) null terminated.\n\nThis flaw most likely leads to a crash, but can also lead to heap contents\ngetting returned to the application when\n[CURLINFO_CERTINFO](https://curl.se/libcurl/c/CURLINFO_CERTINFO.html) is used.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-31T08:15:02.657",
    "last_modified": "2024-11-21T09:51:10.360",
    "fix_date": "2024-07-30T14:40:48Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/07/31/1",
      "source": "2499f714-1537-4658-8207-48ae4bb9eae9",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://curl.se/docs/CVE-2024-7264.html",
      "source": "2499f714-1537-4658-8207-48ae4bb9eae9",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://curl.se/docs/CVE-2024-7264.json",
      "source": "2499f714-1537-4658-8207-48ae4bb9eae9",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://hackerone.com/reports/2629968",
      "source": "2499f714-1537-4658-8207-48ae4bb9eae9",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/07/31/1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://github.com/curl/curl/commit/27959ecce75cdb2809c0bdb3286e60e08fadb519",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240828-0008/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.511319",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "curl",
    "owner": "curl",
    "created_at": "2010-03-18T22:32:22Z",
    "updated_at": "2025-01-14T15:10:59Z",
    "pushed_at": "2025-01-14T14:59:07Z",
    "size": 97201,
    "stars": 36514,
    "forks": 6522,
    "open_issues": 29,
    "watchers": 36514,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C": 7867547,
      "Perl": 850648,
      "M4": 515820,
      "Python": 440097,
      "CMake": 267646,
      "DIGITAL Command Language": 237801,
      "Shell": 142261,
      "Makefile": 121727,
      "Batchfile": 50260,
      "Dockerfile": 1711,
      "Emacs Lisp": 1348
    },
    "commit_activity": {
      "total_commits_last_year": 2420,
      "avg_commits_per_week": 46.53846153846154,
      "days_active_last_year": 344
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:11:58.366438"
  }
}