{
  "cve_id": "CVE-2024-7475",
  "github_data": {
    "repository": "lunary-ai/lunary",
    "fix_commit": "8f563c77d8614a72980113f530c7a9ec15a5f8d5",
    "related_commits": [
      "8f563c77d8614a72980113f530c7a9ec15a5f8d5"
    ],
    "patch_url": "https://github.com/lunary-ai/lunary/commit/8f563c77d8614a72980113f530c7a9ec15a5f8d5.patch",
    "fix_commit_details": {
      "sha": "8f563c77d8614a72980113f530c7a9ec15a5f8d5",
      "commit_date": "2024-08-04T14:49:28Z",
      "author": {
        "login": "hughcrt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: vulnerabilities (#468)",
        "length": 27,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 98,
        "additions": 77,
        "deletions": 21
      },
      "files": [
        {
          "filename": "packages/backend/src/api/v1/datasets/index.ts",
          "status": "modified",
          "additions": 24,
          "deletions": 2,
          "patch": "@@ -107,8 +107,15 @@ datasets.patch(\n     }\n \n     const [dataset] = await sql`\n-    update dataset set slug = ${slug} where id = ${id} and project_id = ${projectId} returning *\n-  `\n+      update \n+        dataset \n+      set \n+        slug = ${slug} \n+      where \n+      id = ${id} \n+      and project_id = ${projectId} \n+      returning *\n+    `\n \n     ctx.body = dataset\n   },\n@@ -218,10 +225,25 @@ datasets.patch(\n   checkAccess(\"datasets\", \"update\"),\n   async (ctx: Context) => {\n     const { id } = ctx.params\n+    const { projectId } = ctx.state\n     const { messages } = ctx.request.body as {\n       messages: string\n     }\n \n+    const [dataset] = await sql`\n+      select \n+        d.id \n+      from \n+        dataset_prompt dp\n+        left join dataset d on dp.dataset_id = d.id\n+      where\n+        d.project_id = ${projectId}\n+    `\n+\n+    if (!dataset) {\n+      ctx.throw(403, \"Unauthorized\")\n+    }\n+\n     const [prompt] =\n       await sql`update dataset_prompt set messages = ${messages} where id = ${id} returning *`\n "
        },
        {
          "filename": "packages/backend/src/api/v1/external-users.ts",
          "status": "modified",
          "additions": 17,
          "deletions": 2,
          "patch": "@@ -141,17 +141,32 @@ users.get(\"/runs/usage\", checkAccess(\"users\", \"read\"), async (ctx) => {\n \n users.get(\"/:id\", checkAccess(\"users\", \"read\"), async (ctx: Context) => {\n   const { id } = ctx.params\n+  const { projectId } = ctx.state\n+\n   const [row] = await sql`\n-    select * from external_user where id = ${id} limit 1\n+    select \n+      * \n+    from \n+      external_user \n+    where \n+      id = ${id} \n+      and project_id = ${projectId}\n   `\n \n   ctx.body = row\n })\n \n users.delete(\"/:id\", checkAccess(\"users\", \"delete\"), async (ctx: Context) => {\n   const { id } = ctx.params\n+  const { projectId } = ctx.state\n \n-  await sql`delete from external_user where id = ${id}`\n+  await sql`\n+    delete \n+    from external_user \n+    where \n+      id = ${id}\n+      and project_id = ${projectId}\n+    `\n \n   ctx.status = 204\n })"
        },
        {
          "filename": "packages/backend/src/api/v1/templates.ts",
          "status": "modified",
          "additions": 36,
          "deletions": 17,
          "patch": "@@ -4,6 +4,7 @@ import { clearUndefined } from \"@/src/utils/ingest\"\n import Context from \"@/src/utils/koa\"\n import { unCamelObject } from \"@/src/utils/misc\"\n import Router from \"koa-router\"\n+import { z } from \"zod\"\n \n const templates = new Router({\n   prefix: \"/templates\",\n@@ -167,26 +168,44 @@ templates.post(\n   \"/:id/versions\",\n   checkAccess(\"prompts\", \"update\"),\n   async (ctx: Context) => {\n-    const { content, extra, testValues, isDraft, notes } = ctx.request.body as {\n-      content: any[]\n-      extra: any\n-      testValues: any\n-      isDraft: boolean\n-      notes: string\n+    const paramsSchema = z.object({\n+      id: z.coerce.number(),\n+    })\n+    const bodySchema = z.object({\n+      content: z.array(z.any()),\n+      extra: z.any(),\n+      testValues: z.any(),\n+      isDraft: z.boolean(),\n+      notes: z.string().optional().nullable(),\n+    })\n+\n+    const { projectId } = ctx.state\n+    const { content, extra, testValues, isDraft, notes } = bodySchema.parse(\n+      ctx.request.body,\n+    )\n+    const { id: templateId } = paramsSchema.parse(ctx.params)\n+\n+    const [template] =\n+      await sql`select id from template where id = ${templateId} and project_id = ${projectId}\n+    `\n+\n+    if (!template) {\n+      ctx.throw(403, \"Unauthorized\")\n     }\n \n     const [templateVersion] = await sql`\n-    insert into template_version ${sql(\n-      clearUndefined({\n-        templateId: ctx.params.id,\n-        content: sql.json(content),\n-        extra: sql.json(unCamelObject(extra)),\n-        test_values: sql.json(testValues),\n-        isDraft,\n-        notes,\n-      }),\n-    )} returning *\n-  `\n+      insert into template_version ${sql(\n+        clearUndefined({\n+          templateId: ctx.params.id,\n+          content: sql.json(content),\n+          extra: sql.json(unCamelObject(extra)),\n+          test_values: sql.json(testValues),\n+          isDraft,\n+          notes,\n+        }),\n+      )} \n+      returning *\n+    `\n \n     ctx.body = templateVersion\n   },"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a4c1a889ecc4329f4b8fc976904d08cd57636546",
            "date": "2025-01-13T15:25:14Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "2447a7cc873d1f96fcc150a00f3d46ff13f4964c",
            "date": "2025-01-12T16:53:00Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "a3211170ffe39424c54a102d4afa27cec99c362d",
            "date": "2025-01-12T16:48:23Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "ea73f8db2ec427defadb4d70c56ebfc65964b677",
            "date": "2025-01-11T00:32:52Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "32974c788404aa69fd55709231e8834777dee7ab",
            "date": "2025-01-10T22:45:01Z",
            "author_login": "hughcrt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-284",
    "description": "An improper access control vulnerability in lunary-ai/lunary version 1.3.2 allows an attacker to update the SAML configuration without authorization. This vulnerability can lead to manipulation of authentication processes, fraudulent login requests, and theft of user information. Appropriate access controls should be implemented to ensure that the SAML configuration can only be updated by authorized users.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-29T13:15:09.737",
    "last_modified": "2024-11-04T13:55:37.233",
    "fix_date": "2024-08-04T14:49:28Z"
  },
  "references": [
    {
      "url": "https://github.com/lunary-ai/lunary/commit/8f563c77d8614a72980113f530c7a9ec15a5f8d5",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/78c824f7-3b6d-443d-bb76-0f8031c6c126",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.105093",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "lunary",
    "owner": "lunary-ai",
    "created_at": "2023-05-12T10:03:05Z",
    "updated_at": "2025-01-13T15:25:18Z",
    "pushed_at": "2025-01-13T15:25:16Z",
    "size": 5319,
    "stars": 1133,
    "forks": 139,
    "open_issues": 0,
    "watchers": 1133,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "llm-1533-allow-filtering-by-feedback-in-thread-and-trace-page",
      "llm-1666-improve-exports-for-traces-enable-export-for-threads",
      "llm-1708-when-clicking-on-a-trace-row-theres-a-quick-render-bug-that",
      "llm-1711-save-row-sorting-in-views",
      "llm-1906-allow-a-team-owner-to-make-another-user-owner-instead-of",
      "llm-1910-prompts-settings-bug",
      "llm-1911-invite-button-doesnt-show-a-success-notification",
      "llm-1922-button-next-to-metadata-that-redirects-to-search",
      "llm-1939-integer-out-of-range-error-on-lunary-app",
      "llm-1942-implement-streaming-from-database-for-csvjsonl-exports",
      "llm-1966-long-project-names-are-croped-in-project-drowndopre",
      "llm-2101-sign-in-with-github",
      "main",
      "playwright_test_feedback_comment_dataset_user"
    ],
    "languages": {
      "TypeScript": 1181050,
      "Python": 112937,
      "CSS": 8238,
      "JavaScript": 3378,
      "Shell": 522
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:04:58.689247"
  }
}