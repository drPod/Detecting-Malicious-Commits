{
  "cve_id": "CVE-2024-7774",
  "github_data": {
    "repository": "langchain-ai/langchainjs",
    "fix_commit": "a0fad77d6b569e5872bd4a9d33be0c0785e538a9",
    "related_commits": [
      "a0fad77d6b569e5872bd4a9d33be0c0785e538a9"
    ],
    "patch_url": "https://github.com/langchain-ai/langchainjs/commit/a0fad77d6b569e5872bd4a9d33be0c0785e538a9.patch",
    "fix_commit_details": {
      "sha": "a0fad77d6b569e5872bd4a9d33be0c0785e538a9",
      "commit_date": "2024-09-11T20:50:19Z",
      "author": {
        "login": "jacoblee93",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix(langchain): Fix local file store traversal issue (#6736)",
        "length": 60,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 57,
        "additions": 55,
        "deletions": 2
      },
      "files": [
        {
          "filename": "docs/core_docs/docs/integrations/stores/file_system.ipynb",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -46,6 +46,14 @@\n     \"\\n\",\n     \":::\\n\",\n     \"\\n\",\n+    \":::warning\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"This file store can alter any text file in the provided directory and any subfolders.\\n\",\n+    \"Make sure that the path you specify when initializing the store is free of other files.\\n\",\n+    \"\\n\",\n+    \":::\\n\",\n+    \"\\n\",\n     \"```\\n\",\n     \"\\n\",\n     \"### Integration details\\n\","
        },
        {
          "filename": "langchain/src/storage/file_system.ts",
          "status": "modified",
          "additions": 28,
          "deletions": 2,
          "patch": "@@ -26,6 +26,11 @@ import { BaseStore } from \"@langchain/core/stores\";\n  *   await store.mdelete([key]);\n  * }\n  * ```\n+ *\n+ * @security **Security Notice** This file store\n+ * can alter any text file in the provided directory and any subfolders.\n+ * Make sure that the path you specify when initializing the store is free\n+ * of other files.\n  */\n export class LocalFileStore extends BaseStore<string, Uint8Array> {\n   lc_namespace = [\"langchain\", \"storage\"];\n@@ -43,6 +48,12 @@ export class LocalFileStore extends BaseStore<string, Uint8Array> {\n    * @returns Promise that resolves to the parsed file content.\n    */\n   private async getParsedFile(key: string): Promise<Uint8Array | undefined> {\n+    // Validate the key to prevent path traversal\n+    if (!/^[a-zA-Z0-9_\\-:.]+$/.test(key)) {\n+      throw new Error(\n+        \"Invalid key. Only alphanumeric characters, underscores, hyphens, colons, and periods are allowed.\"\n+      );\n+    }\n     try {\n       const fileContent = await fs.readFile(this.getFullPath(key));\n       if (!fileContent) {\n@@ -87,11 +98,26 @@ export class LocalFileStore extends BaseStore<string, Uint8Array> {\n   private getFullPath(key: string): string {\n     try {\n       const keyAsTxtFile = `${key}.txt`;\n-      const fullPath = path.join(this.rootPath, keyAsTxtFile);\n+\n+      // Validate the key to prevent path traversal\n+      if (!/^[a-zA-Z0-9_.\\-/]+$/.test(key)) {\n+        throw new Error(`Invalid characters in key: ${key}`);\n+      }\n+\n+      const fullPath = path.resolve(this.rootPath, keyAsTxtFile);\n+      const commonPath = path.resolve(this.rootPath);\n+\n+      if (!fullPath.startsWith(commonPath)) {\n+        throw new Error(\n+          `Invalid key: ${key}. Key should be relative to the root path. ` +\n+            `Root path: ${this.rootPath}, Full path: ${fullPath}`\n+        );\n+      }\n+\n       return fullPath;\n     } catch (e) {\n       throw new Error(\n-        `Error getting full path for key: ${key}.\\nError: ${JSON.stringify(e)}`\n+        `Error getting full path for key: ${key}.\\nError: ${String(e)}`\n       );\n     }\n   }"
        },
        {
          "filename": "langchain/src/storage/tests/file_system.test.ts",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -88,4 +88,23 @@ describe(\"LocalFileStore\", () => {\n     ).toEqual([value1, value2]);\n     await fs.promises.rm(secondaryRootPath, { recursive: true, force: true });\n   });\n+\n+  test(\"Should disallow attempts to traverse paths outside of a subfolder\", async () => {\n+    const encoder = new TextEncoder();\n+    const store = await LocalFileStore.fromPath(secondaryRootPath);\n+    const value1 = new Date().toISOString();\n+    await expect(\n+      store.mset([[\"../foo\", encoder.encode(value1)]])\n+    ).rejects.toThrowError();\n+    await expect(\n+      store.mset([[\"/foo\", encoder.encode(value1)]])\n+    ).rejects.toThrowError();\n+    await expect(\n+      store.mset([[\"\\\\foo\", encoder.encode(value1)]])\n+    ).rejects.toThrowError();\n+    await expect(store.mget([\"../foo\"])).rejects.toThrowError();\n+    await expect(store.mget([\"/foo\"])).rejects.toThrowError();\n+    await expect(store.mget([\"\\\\foo\"])).rejects.toThrowError();\n+    await fs.promises.rm(secondaryRootPath, { recursive: true, force: true });\n+  });\n });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ff0dc580a71268b098e5ac2ee68b7d98317727ed",
            "date": "2025-01-13T22:37:27Z",
            "author_login": "jacoblee93"
          },
          {
            "sha": "4daa67340523a335977d71c89a40275dc13ac354",
            "date": "2025-01-13T22:31:19Z",
            "author_login": "siviter-t"
          },
          {
            "sha": "457c8f2ebbf33447b704fa6808843b3a40847994",
            "date": "2025-01-13T22:23:05Z",
            "author_login": "afirstenberg"
          },
          {
            "sha": "de6362602c9ff9fd7710976ef65e372843d455b9",
            "date": "2025-01-13T22:14:07Z",
            "author_login": "jacoblee93"
          },
          {
            "sha": "dbda6d0d8a6f2bdc8d962ba6c23f65b7c034f93e",
            "date": "2025-01-13T17:54:57Z",
            "author_login": "jacoblee93"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-29",
    "description": "A path traversal vulnerability exists in the `getFullPath` method of langchain-ai/langchainjs version 0.2.5. This vulnerability allows attackers to save files anywhere in the filesystem, overwrite existing text files, read `.txt` files, and delete files. The vulnerability is exploited through the `setFileContent`, `getParsedFile`, and `mdelete` methods, which do not properly sanitize user input.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-29T13:15:09.930",
    "last_modified": "2024-10-31T15:39:04.510",
    "fix_date": "2024-09-11T20:50:19Z"
  },
  "references": [
    {
      "url": "https://github.com/langchain-ai/langchainjs/commit/a0fad77d6b569e5872bd4a9d33be0c0785e538a9",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/8fe40685-b714-4191-af7a-3de5e5628cee",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.105203",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "langchainjs",
    "owner": "langchain-ai",
    "created_at": "2023-02-06T22:50:27Z",
    "updated_at": "2025-01-14T13:19:50Z",
    "pushed_at": "2025-01-13T22:37:28Z",
    "size": 653692,
    "stars": 13158,
    "forks": 2273,
    "open_issues": 145,
    "watchers": 13158,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "v0.1",
      "v0.2"
    ],
    "languages": {
      "TypeScript": 8485231,
      "Jupyter Notebook": 602661,
      "HTML": 423960,
      "JavaScript": 268035,
      "Shell": 18694,
      "MDX": 13624,
      "CSS": 8554,
      "Python": 667
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:23:45.165715"
  }
}