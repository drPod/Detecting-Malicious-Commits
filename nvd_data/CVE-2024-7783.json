{
  "cve_id": "CVE-2024-7783",
  "github_data": {
    "repository": "mintplex-labs/anything-llm",
    "fix_commit": "4430ddb05988470bc8f0479e7d07db1f7d4646ba",
    "related_commits": [
      "4430ddb05988470bc8f0479e7d07db1f7d4646ba"
    ],
    "patch_url": "https://github.com/mintplex-labs/anything-llm/commit/4430ddb05988470bc8f0479e7d07db1f7d4646ba.patch",
    "fix_commit_details": {
      "sha": "4430ddb05988470bc8f0479e7d07db1f7d4646ba",
      "commit_date": "2024-08-14T00:54:12Z",
      "author": {
        "login": "timothycarambat",
        "type": "User",
        "stats": {
          "total_commits": 912,
          "average_weekly_commits": 10.604651162790697,
          "total_additions": 194015,
          "total_deletions": 85620,
          "weeks_active": 81
        }
      },
      "commit_message": {
        "title": "Encryption in JWT for single-user password mode (#2111)",
        "length": 168,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 24,
        "additions": 20,
        "deletions": 4
      },
      "files": [
        {
          "filename": ".github/workflows/dev-build.yaml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -6,7 +6,7 @@ concurrency:\n \n on:\n   push:\n-    branches: ['pipertts-support'] # put your current branch to create a build. Core team only.\n+    branches: ['encrypt-jwt-value'] # put your current branch to create a build. Core team only.\n     paths-ignore:\n       - '**.md'\n       - 'cloud-deployments/*'"
        },
        {
          "filename": "server/endpoints/system.js",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -51,6 +51,7 @@ const {\n   generateRecoveryCodes,\n } = require(\"../utils/PasswordRecovery\");\n const { SlashCommandPresets } = require(\"../models/slashCommandsPresets\");\n+const { EncryptionManager } = require(\"../utils/EncryptionManager\");\n \n function systemEndpoints(app) {\n   if (!app) return;\n@@ -236,7 +237,10 @@ function systemEndpoints(app) {\n         });\n         response.status(200).json({\n           valid: true,\n-          token: makeJWT({ p: password }, \"30d\"),\n+          token: makeJWT(\n+            { p: new EncryptionManager().encrypt(password) },\n+            \"30d\"\n+          ),\n           message: null,\n         });\n       }"
        },
        {
          "filename": "server/utils/middleware/validatedRequest.js",
          "status": "modified",
          "additions": 14,
          "deletions": 2,
          "patch": "@@ -1,6 +1,8 @@\n const { SystemSettings } = require(\"../../models/systemSettings\");\n const { User } = require(\"../../models/user\");\n+const { EncryptionManager } = require(\"../EncryptionManager\");\n const { decodeJWT } = require(\"../http\");\n+const EncryptionMgr = new EncryptionManager();\n \n async function validatedRequest(request, response, next) {\n   const multiUserMode = await SystemSettings.isMultiUserMode();\n@@ -39,14 +41,24 @@ async function validatedRequest(request, response, next) {\n   const bcrypt = require(\"bcrypt\");\n   const { p } = decodeJWT(token);\n \n-  if (p === null) {\n+  if (p === null || !/\\w{32}:\\w{32}/.test(p)) {\n     response.status(401).json({\n       error: \"Token expired or failed validation.\",\n     });\n     return;\n   }\n \n-  if (!bcrypt.compareSync(p, bcrypt.hashSync(process.env.AUTH_TOKEN, 10))) {\n+  // Since the blame of this comment we have been encrypting the `p` property of JWTs with the persistent\n+  // encryptionManager PEM's. This prevents us from storing the `p` unencrypted in the JWT itself, which could\n+  // be unsafe. As a consequence, existing JWTs with invalid `p` values that do not match the regex\n+  // in ln:44 will be marked invalid so they can be logged out and forced to log back in and obtain an encrypted token.\n+  // This kind of methodology only applies to single-user password mode.\n+  if (\n+    !bcrypt.compareSync(\n+      EncryptionMgr.decrypt(p),\n+      bcrypt.hashSync(process.env.AUTH_TOKEN, 10)\n+    )\n+  ) {\n     response.status(401).json({\n       error: \"Invalid auth credentials.\",\n     });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4d5d8d4dec0e62662c8ec46537038353f45e0e66",
            "date": "2025-01-14T16:20:57Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "21af81085aeb049750942ac5f3b84775cb461693",
            "date": "2025-01-13T21:12:03Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "665e8e5bfe431ad93bed6736d0b450592617d042",
            "date": "2025-01-09T23:39:56Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "865f7eea296e544b2eb1ab8c1f322208eaf5eb05",
            "date": "2025-01-09T21:32:54Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "be886f7d61296a30d5b8a095ca8329f58a0c5a0a",
            "date": "2025-01-09T01:21:30Z",
            "author_login": "root-reindeer-flotilla"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-312",
    "description": "mintplex-labs/anything-llm version latest contains a vulnerability where sensitive information, specifically a password, is improperly stored within a JWT (JSON Web Token) used as a bearer token in single user mode. When decoded, the JWT reveals the password in plaintext. This improper storage of sensitive information poses significant security risks, as an attacker who gains access to the JWT can easily decode it and retrieve the password. The issue is fixed in version 1.0.3.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-29T13:15:10.137",
    "last_modified": "2024-10-31T15:49:02.870",
    "fix_date": "2024-08-14T00:54:12Z"
  },
  "references": [
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/4430ddb05988470bc8f0479e7d07db1f7d4646ba",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/20e9950f-ad41-4d6b-8bd0-c7f7051695b3",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:27.105311",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "anything-llm",
    "owner": "mintplex-labs",
    "created_at": "2023-06-04T02:29:14Z",
    "updated_at": "2025-01-14T13:49:57Z",
    "pushed_at": "2025-01-13T21:12:06Z",
    "size": 42916,
    "stars": 30237,
    "forks": 3030,
    "open_issues": 206,
    "watchers": 30237,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 3056909,
      "CSS": 73785,
      "Dockerfile": 9030,
      "HTML": 3904,
      "Shell": 1382,
      "HCL": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:04:33.088245"
  }
}