{
  "cve_id": "CVE-2024-8332",
  "github_data": {
    "repository": "master-nan/sweet-cms",
    "fix_commit": "146359646a5a90cb09156dbd0013b7df77f2aa6c",
    "related_commits": [
      "146359646a5a90cb09156dbd0013b7df77f2aa6c"
    ],
    "patch_url": "https://github.com/master-nan/sweet-cms/commit/146359646a5a90cb09156dbd0013b7df77f2aa6c.patch",
    "fix_commit_details": {
      "sha": "146359646a5a90cb09156dbd0013b7df77f2aa6c",
      "commit_date": "2024-08-28T06:41:15Z",
      "author": {
        "login": "master-nan",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "update",
        "length": 6,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 93,
        "additions": 82,
        "deletions": 11
      },
      "files": [
        {
          "filename": "controller/generalization_controller.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -27,9 +27,9 @@ func NewGeneralizationController(generalizationService *service.GeneralizationSe\n }\n \n func (gc *GeneralizationController) Query(ctx *gin.Context) {\n-\tid, err := strconv.Atoi(ctx.Param(\"id\"))\n \tresp := response.NewResponse()\n \tctx.Set(\"response\", resp)\n+\tid, err := strconv.Atoi(ctx.Param(\"id\"))\n \tif err != nil {\n \t\t_ = ctx.Error(err)\n \t\treturn"
        },
        {
          "filename": "controller/sys_dict_controller.go",
          "status": "modified",
          "additions": 12,
          "deletions": 2,
          "patch": "@@ -66,7 +66,7 @@ func (t *DictController) GetSysDictById(ctx *gin.Context) {\n func (t *DictController) GetSysDictByCode(ctx *gin.Context) {\n \tresp := response.NewResponse()\n \tctx.Set(\"response\", resp)\n-\tcode := ctx.Param(\"code\")\n+\tcode := utils.SanitizeInput(ctx.Param(\"code\"))\n \tdata, err := t.sysDictService.GetSysDictByCode(code)\n \tif err != nil {\n \t\te := &response.AdminError{\n@@ -248,9 +248,19 @@ func (t *DictController) CreateSysDictItem(ctx *gin.Context) {\n func (t *DictController) UpdateSysDictItem(ctx *gin.Context) {\n \tresp := response.NewResponse()\n \tctx.Set(\"response\", resp)\n+\tid, err := strconv.Atoi(ctx.Param(\"id\"))\n+\tif err != nil {\n+\t\te := &response.AdminError{\n+\t\t\tErrorCode:    http.StatusBadRequest,\n+\t\t\tErrorMessage: err.Error(),\n+\t\t}\n+\t\t_ = ctx.Error(e)\n+\t\treturn\n+\t}\n \ttranslator, _ := t.translators[\"zh\"]\n \tvar data request.DictItemUpdateReq\n-\terr := utils.ValidatorBody[request.DictItemUpdateReq](ctx, &data, translator)\n+\tdata.Id = id\n+\terr = utils.ValidatorBody[request.DictItemUpdateReq](ctx, &data, translator)\n \tif err != nil {\n \t\t_ = ctx.Error(err)\n \t\treturn"
        },
        {
          "filename": "controller/sys_menu_controller.go",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -67,9 +67,19 @@ func (m *MenuController) CreateMenu(ctx *gin.Context) {\n func (m *MenuController) UpdateMenu(ctx *gin.Context) {\n \tresp := response.NewResponse()\n \tctx.Set(\"response\", resp)\n+\tid, err := strconv.Atoi(ctx.Param(\"id\"))\n+\tif err != nil {\n+\t\te := &response.AdminError{\n+\t\t\tErrorCode:    http.StatusBadRequest,\n+\t\t\tErrorMessage: err.Error(),\n+\t\t}\n+\t\t_ = ctx.Error(e)\n+\t\treturn\n+\t}\n \tvar data request.MenuUpdateReq\n+\tdata.Id = id\n \ttranslator, _ := m.translators[\"zh\"]\n-\terr := utils.ValidatorBody[request.MenuUpdateReq](ctx, &data, translator)\n+\terr = utils.ValidatorBody[request.MenuUpdateReq](ctx, &data, translator)\n \tif err != nil {\n \t\t_ = ctx.Error(err)\n \t\treturn"
        },
        {
          "filename": "controller/sys_table_controller.go",
          "status": "modified",
          "additions": 47,
          "deletions": 6,
          "patch": "@@ -8,6 +8,7 @@ package controller\n import (\n \t\"github.com/gin-gonic/gin\"\n \tut \"github.com/go-playground/universal-translator\"\n+\t\"net/http\"\n \t\"strconv\"\n \t\"sweet-cms/form/request\"\n \t\"sweet-cms/form/response\"\n@@ -47,7 +48,7 @@ func (t *TableController) GetTableByID(ctx *gin.Context) {\n func (t *TableController) GetTableByCode(ctx *gin.Context) {\n \tresp := response.NewResponse()\n \tctx.Set(\"response\", resp)\n-\tcode := ctx.Param(\"code\")\n+\tcode := utils.SanitizeInput(ctx.Param(\"code\"))\n \tdata, err := t.sysTableService.GetTableByTableCode(code)\n \tif err != nil {\n \t\t_ = ctx.Error(err)\n@@ -97,9 +98,19 @@ func (t *TableController) CreateTable(ctx *gin.Context) {\n func (t *TableController) UpdateTable(ctx *gin.Context) {\n \tresp := response.NewResponse()\n \tctx.Set(\"response\", resp)\n+\tid, err := strconv.Atoi(ctx.Param(\"id\"))\n+\tif err != nil {\n+\t\te := &response.AdminError{\n+\t\t\tErrorCode:    http.StatusBadRequest,\n+\t\t\tErrorMessage: err.Error(),\n+\t\t}\n+\t\t_ = ctx.Error(e)\n+\t\treturn\n+\t}\n \tvar data request.TableUpdateReq\n+\tdata.Id = id\n \ttranslator, _ := t.translators[\"zh\"]\n-\terr := utils.ValidatorBody[request.TableUpdateReq](ctx, &data, translator)\n+\terr = utils.ValidatorBody[request.TableUpdateReq](ctx, &data, translator)\n \tif err != nil {\n \t\t_ = ctx.Error(err)\n \t\treturn\n@@ -184,9 +195,19 @@ func (t *TableController) CreateTableField(ctx *gin.Context) {\n func (t *TableController) UpdateTableField(ctx *gin.Context) {\n \tresp := response.NewResponse()\n \tctx.Set(\"response\", resp)\n+\tid, err := strconv.Atoi(ctx.Param(\"id\"))\n+\tif err != nil {\n+\t\te := &response.AdminError{\n+\t\t\tErrorCode:    http.StatusBadRequest,\n+\t\t\tErrorMessage: err.Error(),\n+\t\t}\n+\t\t_ = ctx.Error(e)\n+\t\treturn\n+\t}\n \tvar data request.TableFieldUpdateReq\n+\tdata.Id = id\n \ttranslator, _ := t.translators[\"zh\"]\n-\terr := utils.ValidatorBody[request.TableFieldUpdateReq](ctx, &data, translator)\n+\terr = utils.ValidatorBody[request.TableFieldUpdateReq](ctx, &data, translator)\n \tif err != nil {\n \t\t_ = ctx.Error(err)\n \t\treturn\n@@ -271,9 +292,19 @@ func (t *TableController) CreateTableRelation(ctx *gin.Context) {\n func (t *TableController) UpdateTableRelation(ctx *gin.Context) {\n \tresp := response.NewResponse()\n \tctx.Set(\"response\", resp)\n+\tid, err := strconv.Atoi(ctx.Param(\"id\"))\n+\tif err != nil {\n+\t\te := &response.AdminError{\n+\t\t\tErrorCode:    http.StatusBadRequest,\n+\t\t\tErrorMessage: err.Error(),\n+\t\t}\n+\t\t_ = ctx.Error(e)\n+\t\treturn\n+\t}\n \tvar data request.TableRelationUpdateReq\n+\tdata.Id = id\n \ttranslator, _ := t.translators[\"zh\"]\n-\terr := utils.ValidatorBody[request.TableRelationUpdateReq](ctx, &data, translator)\n+\terr = utils.ValidatorBody[request.TableRelationUpdateReq](ctx, &data, translator)\n \tif err != nil {\n \t\t_ = ctx.Error(err)\n \t\treturn\n@@ -357,9 +388,19 @@ func (t *TableController) CreateTableIndex(ctx *gin.Context) {\n func (t *TableController) UpdateTableIndex(ctx *gin.Context) {\n \tresp := response.NewResponse()\n \tctx.Set(\"response\", resp)\n+\tid, err := strconv.Atoi(ctx.Param(\"id\"))\n+\tif err != nil {\n+\t\te := &response.AdminError{\n+\t\t\tErrorCode:    http.StatusBadRequest,\n+\t\t\tErrorMessage: err.Error(),\n+\t\t}\n+\t\t_ = ctx.Error(e)\n+\t\treturn\n+\t}\n \tvar data request.TableIndexUpdateReq\n+\tdata.Id = id\n \ttranslator, _ := t.translators[\"zh\"]\n-\terr := utils.ValidatorBody[request.TableIndexUpdateReq](ctx, &data, translator)\n+\terr = utils.ValidatorBody[request.TableIndexUpdateReq](ctx, &data, translator)\n \tif err != nil {\n \t\t_ = ctx.Error(err)\n \t\treturn\n@@ -407,7 +448,7 @@ func (t *TableController) DeleteTableIndexByTableId(ctx *gin.Context) {\n func (t *TableController) InitTable(ctx *gin.Context) {\n \tresp := response.NewResponse()\n \tctx.Set(\"response\", resp)\n-\tcode := ctx.Param(\"code\")\n+\tcode := utils.SanitizeInput(ctx.Param(\"code\"))\n \terr := t.sysTableService.InitTable(ctx, code)\n \tif err != nil {\n \t\t_ = ctx.Error(err)"
        },
        {
          "filename": "controller/sys_user_controller.go",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -99,9 +99,19 @@ func (u *UserController) CreateUser(ctx *gin.Context) {\n func (u *UserController) UpdateUser(ctx *gin.Context) {\n \tresp := response.NewResponse()\n \tctx.Set(\"response\", resp)\n+\tid, err := strconv.Atoi(ctx.Param(\"id\"))\n+\tif err != nil {\n+\t\te := &response.AdminError{\n+\t\t\tErrorCode:    http.StatusBadRequest,\n+\t\t\tErrorMessage: err.Error(),\n+\t\t}\n+\t\t_ = ctx.Error(e)\n+\t\treturn\n+\t}\n \tvar data request.UserUpdateReq\n+\tdata.Id = id\n \ttranslator, _ := u.translators[\"zh\"]\n-\terr := utils.ValidatorBody[request.UserUpdateReq](ctx, &data, translator)\n+\terr = utils.ValidatorBody[request.UserUpdateReq](ctx, &data, translator)\n \terr = u.sysUserService.Update(ctx, data)\n \tif err != nil {\n \t\t_ = ctx.Error(err)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "531e373af62d5a8352dafb02a820a8fc6945404a",
            "date": "2024-10-17T09:05:57Z",
            "author_login": "master-nan"
          },
          {
            "sha": "b6b3aabbed91e7d5b21e26e96ac78fc9336ee3fb",
            "date": "2024-09-05T15:50:36Z",
            "author_login": "master-nan"
          },
          {
            "sha": "146359646a5a90cb09156dbd0013b7df77f2aa6c",
            "date": "2024-08-28T06:41:15Z",
            "author_login": "master-nan"
          },
          {
            "sha": "fa5da20fdbf591e25f4d9af2d135077aa8c9e587",
            "date": "2024-08-28T06:29:01Z",
            "author_login": "master-nan"
          },
          {
            "sha": "2024c370e6c78b07b358c9d4257fa5d1be732c38",
            "date": "2024-08-28T03:34:08Z",
            "author_login": "master-nan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-89",
    "description": "A vulnerability was found in master-nan Sweet-CMS up to 5f441e022b8876f07cde709c77b5be6d2f262e3f. It has been declared as critical. This vulnerability affects unknown code of the file /table/index. The manipulation leads to sql injection. The attack can be initiated remotely. This product is using a rolling release to provide continious delivery. Therefore, no version details for affected nor updated releases are available. The name of the patch is 146359646a5a90cb09156dbd0013b7df77f2aa6c. It is recommended to apply a patch to fix this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-30T12:15:04.657",
    "last_modified": "2024-09-03T14:23:30.773",
    "fix_date": "2024-08-28T06:41:15Z"
  },
  "references": [
    {
      "url": "https://github.com/master-nan/sweet-cms/commit/146359646a5a90cb09156dbd0013b7df77f2aa6c",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/master-nan/sweet-cms/issues/1",
      "source": "cna@vuldb.com",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/master-nan/sweet-cms/issues/2",
      "source": "cna@vuldb.com",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.276208",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required"
      ]
    },
    {
      "url": "https://vuldb.com/?id.276208",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://vuldb.com/?submit.398803",
      "source": "cna@vuldb.com",
      "tags": [
        "Exploit",
        "Third Party Advisory",
        "VDB Entry"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.415906",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sweet-cms",
    "owner": "master-nan",
    "created_at": "2023-05-06T06:36:21Z",
    "updated_at": "2024-10-17T09:06:07Z",
    "pushed_at": "2024-10-17T09:06:04Z",
    "size": 581,
    "stars": 1,
    "forks": 0,
    "open_issues": 0,
    "watchers": 1,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 204019,
      "Dockerfile": 882
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T17:16:06.368800"
  }
}