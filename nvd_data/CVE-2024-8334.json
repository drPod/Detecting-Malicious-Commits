{
  "cve_id": "CVE-2024-8334",
  "github_data": {
    "repository": "master-nan/sweet-cms",
    "fix_commit": "2024c370e6c78b07b358c9d4257fa5d1be732c38",
    "related_commits": [
      "2024c370e6c78b07b358c9d4257fa5d1be732c38"
    ],
    "patch_url": "https://github.com/master-nan/sweet-cms/commit/2024c370e6c78b07b358c9d4257fa5d1be732c38.patch",
    "fix_commit_details": {
      "sha": "2024c370e6c78b07b358c9d4257fa5d1be732c38",
      "commit_date": "2024-08-28T03:34:08Z",
      "author": {
        "login": "master-nan",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "update",
        "length": 6,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 83,
        "additions": 77,
        "deletions": 6
      },
      "files": [
        {
          "filename": "middleware/log.go",
          "status": "modified",
          "additions": 7,
          "deletions": 6,
          "patch": "@@ -15,6 +15,7 @@ import (\n \t\"sweet-cms/form/response\"\n \t\"sweet-cms/model\"\n \t\"sweet-cms/service\"\n+\t\"sweet-cms/utils\"\n \t\"time\"\n )\n \n@@ -46,9 +47,9 @@ func LogHandler(logService *service.LogService) gin.HandlerFunc {\n \t\t\tIp:       c.ClientIP(),\n \t\t\tLocality: \"\",\n \t\t\tUrl:      c.Request.URL.Path,\n-\t\t\tBody:     string(bodyStr),\n-\t\t\tQuery:    string(queryStr),\n-\t\t\tResponse: responseBody,\n+\t\t\tBody:     utils.SanitizeInput(string(bodyStr)),\n+\t\t\tQuery:    utils.SanitizeInput(string(queryStr)),\n+\t\t\tResponse: utils.SanitizeInput(responseBody),\n \t\t}\n \t\terr := logService.CreateAccessLog(c, accessLog)\n \t\tif err != nil {\n@@ -57,9 +58,9 @@ func LogHandler(logService *service.LogService) gin.HandlerFunc {\n \t\tzap.L().Info(\"\u7528\u6237\u8bbf\u95ee\u65e5\u5fd7:\",\n \t\t\tzap.String(\"uri\", c.Request.URL.Path),\n \t\t\tzap.String(\"method\", c.Request.Method),\n-\t\t\tzap.Any(\"query\", c.Request.URL.Query()),\n-\t\t\tzap.Any(\"body\", c.Request.Body),\n-\t\t\tzap.Any(\"response\", responseBody),\n+\t\t\tzap.Any(\"query\", accessLog.Query),\n+\t\t\tzap.Any(\"body\", accessLog.Body),\n+\t\t\tzap.String(\"response\", accessLog.Response),\n \t\t\tzap.String(\"ip\", c.ClientIP()),\n \t\t\tzap.String(\"duration\", fmt.Sprintf(\"%.4f seconds\", duration.Seconds())))\n \t\tzap.L().Info(\"Access Log end\")"
        },
        {
          "filename": "utils/tools.go",
          "status": "modified",
          "additions": 70,
          "deletions": 0,
          "patch": "@@ -9,6 +9,7 @@ import (\n \tut \"github.com/go-playground/universal-translator\"\n \t\"github.com/go-playground/validator/v10\"\n \t\"github.com/pkg/errors\"\n+\t\"html\"\n \t\"io\"\n \t\"math/rand\"\n \t\"net/http\"\n@@ -296,6 +297,7 @@ func ValidatorBody[T any](ctx *gin.Context, data *T, translator ut.Translator) e\n \t\t}\n \t\treturn err\n \t}\n+\tcleanData(data)\n \treturn nil\n }\n \n@@ -326,6 +328,7 @@ func ValidatorQuery[T any](ctx *gin.Context, data *T, translator ut.Translator)\n \t\t}\n \t\treturn err\n \t}\n+\tcleanData(data)\n \treturn nil\n }\n \n@@ -358,3 +361,70 @@ func BuildMenuTree(menus []model.SysMenu, pid int) []model.SysMenu {\n \t}\n \treturn tree\n }\n+\n+func cleanData(data any) {\n+\tval := reflect.ValueOf(data).Elem()\n+\tif val.Kind() != reflect.Struct {\n+\t\treturn\n+\t}\n+\n+\tfor i := 0; i < val.NumField(); i++ {\n+\t\tfield := val.Field(i)\n+\n+\t\tswitch field.Kind() {\n+\t\tcase reflect.String:\n+\t\t\t// Sanitize the string by escaping HTML special characters\n+\t\t\tescapedStr := html.EscapeString(field.String())\n+\t\t\tfield.SetString(escapedStr)\n+\t\tcase reflect.Struct:\n+\t\t\t// Recursively sanitize nested structs\n+\t\t\tfieldValue := field.Addr().Interface()\n+\t\t\tcleanData(fieldValue)\n+\n+\t\tcase reflect.Slice:\n+\t\t\t// Recursively sanitize elements of slice if it's a slice of struct or string\n+\t\t\tif field.Type().Elem().Kind() == reflect.String {\n+\t\t\t\tfor j := 0; j < field.Len(); j++ {\n+\t\t\t\t\tescapedStr := html.EscapeString(field.Index(j).String())\n+\t\t\t\t\tfield.Index(j).SetString(escapedStr)\n+\t\t\t\t}\n+\t\t\t} else if field.Type().Elem().Kind() == reflect.Struct {\n+\t\t\t\tfor j := 0; j < field.Len(); j++ {\n+\t\t\t\t\telement := field.Index(j).Addr().Interface()\n+\t\t\t\t\tcleanData(element)\n+\t\t\t\t}\n+\t\t\t}\n+\t\tcase reflect.Map:\n+\t\t\t// Recursively sanitize elements of map if it's a map of strings\n+\t\t\tif field.Type().Key().Kind() == reflect.String && field.Type().Elem().Kind() == reflect.String {\n+\t\t\t\titer := field.MapRange()\n+\t\t\t\tfor iter.Next() {\n+\t\t\t\t\tkey := iter.Key()\n+\t\t\t\t\tval := iter.Value()\n+\t\t\t\t\tescapedVal := html.EscapeString(val.String())\n+\t\t\t\t\tfield.SetMapIndex(key, reflect.ValueOf(escapedVal))\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+func SanitizeInput(input string) string {\n+\treplacements := map[string]string{\n+\t\t\"\\n\": \"\\\\n\",\n+\t\t\"\\r\": \"\\\\r\",\n+\t\t\"\\t\": \"\\\\t\",\n+\t}\n+\tfor old, new := range replacements {\n+\t\tinput = strings.ReplaceAll(input, old, new)\n+\t}\n+\tcleaned := \"\"\n+\tfor _, r := range input {\n+\t\tif r >= 32 && r <= 126 {\n+\t\t\tcleaned += string(r)\n+\t\t} else {\n+\t\t\tcleaned += fmt.Sprintf(\"\\\\x%x\", r)\n+\t\t}\n+\t}\n+\treturn cleaned\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "531e373af62d5a8352dafb02a820a8fc6945404a",
            "date": "2024-10-17T09:05:57Z",
            "author_login": "master-nan"
          },
          {
            "sha": "b6b3aabbed91e7d5b21e26e96ac78fc9336ee3fb",
            "date": "2024-09-05T15:50:36Z",
            "author_login": "master-nan"
          },
          {
            "sha": "146359646a5a90cb09156dbd0013b7df77f2aa6c",
            "date": "2024-08-28T06:41:15Z",
            "author_login": "master-nan"
          },
          {
            "sha": "fa5da20fdbf591e25f4d9af2d135077aa8c9e587",
            "date": "2024-08-28T06:29:01Z",
            "author_login": "master-nan"
          },
          {
            "sha": "2024c370e6c78b07b358c9d4257fa5d1be732c38",
            "date": "2024-08-28T03:34:08Z",
            "author_login": "master-nan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-117",
    "description": "A vulnerability was found in master-nan Sweet-CMS up to 5f441e022b8876f07cde709c77b5be6d2f262e3f. It has been rated as problematic. This issue affects the function LogHandler of the file middleware/log.go. The manipulation leads to improper output neutralization for logs. The attack may be initiated remotely. This product takes the approach of rolling releases to provide continious delivery. Therefore, version details for affected and updated releases are not available. The identifier of the patch is 2024c370e6c78b07b358c9d4257fa5d1be732c38. It is recommended to apply a patch to fix this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-30T13:15:12.587",
    "last_modified": "2024-09-19T15:39:20.913",
    "fix_date": "2024-08-28T03:34:08Z"
  },
  "references": [
    {
      "url": "https://github.com/master-nan/sweet-cms/commit/2024c370e6c78b07b358c9d4257fa5d1be732c38",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/master-nan/sweet-cms/issues/3",
      "source": "cna@vuldb.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/master-nan/sweet-cms/issues/3#issuecomment-2314447003",
      "source": "cna@vuldb.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.276209",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.276209",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?submit.398805",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:37.416069",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sweet-cms",
    "owner": "master-nan",
    "created_at": "2023-05-06T06:36:21Z",
    "updated_at": "2024-10-17T09:06:07Z",
    "pushed_at": "2024-10-17T09:06:04Z",
    "size": 581,
    "stars": 1,
    "forks": 0,
    "open_issues": 0,
    "watchers": 1,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 204019,
      "Dockerfile": 882
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T17:16:06.368800"
  }
}