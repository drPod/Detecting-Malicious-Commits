{
  "cve_id": "CVE-2024-8376",
  "github_data": {
    "repository": "eclipse/mosquitto",
    "fix_commit": "1914b3ee2a18102d0a94cbdbbfeae1afa03edd17",
    "related_commits": [
      "1914b3ee2a18102d0a94cbdbbfeae1afa03edd17"
    ],
    "patch_url": "https://github.com/eclipse/mosquitto/commit/1914b3ee2a18102d0a94cbdbbfeae1afa03edd17.patch",
    "fix_commit_details": {
      "sha": "1914b3ee2a18102d0a94cbdbbfeae1afa03edd17",
      "commit_date": "2024-06-08T08:41:08Z",
      "author": {
        "login": "ralight",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Use separate trees for shared/normal subs",
        "length": 68,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 115,
        "additions": 95,
        "deletions": 20
      },
      "files": [
        {
          "filename": "ChangeLog.txt",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1,12 +1,16 @@\n 2.0.19 - 2024-09-xx\n ===================\n \n+Security:\n+- Fix mismatched subscribe/unsubscribe with normal/shared topics.\n+\n Broker:\n - Fix assert failure when loading a persistence file that contains\n   subscriptions with no client id.\n - Fix local bridges being incorrectly expired when\n   persistent_client_expiration is in use.\n - Fix use of CLOCK_BOOTTIME for getting time. Closes #3089.\n+- Fix mismatched subscribe/unsubscribe with normal/shared topics.\n \n Library:\n - Fix some error codes being converted to string as \"unknown\". Closes #2579."
        },
        {
          "filename": "src/database.c",
          "status": "modified",
          "additions": 9,
          "deletions": 4,
          "patch": "@@ -199,12 +199,16 @@ int db__open(struct mosquitto__config *config)\n \t/* Initialize the hashtable */\n \tdb.clientid_index_hash = NULL;\n \n-\tdb.subs = NULL;\n+\tdb.normal_subs = NULL;\n+\tdb.shared_subs = NULL;\n \n-\tsubhier = sub__add_hier_entry(NULL, &db.subs, \"\", 0);\n+\tsubhier = sub__add_hier_entry(NULL, &db.shared_subs, \"\", 0);\n \tif(!subhier) return MOSQ_ERR_NOMEM;\n \n-\tsubhier = sub__add_hier_entry(NULL, &db.subs, \"$SYS\", (uint16_t)strlen(\"$SYS\"));\n+\tsubhier = sub__add_hier_entry(NULL, &db.normal_subs, \"\", 0);\n+\tif(!subhier) return MOSQ_ERR_NOMEM;\n+\n+\tsubhier = sub__add_hier_entry(NULL, &db.normal_subs, \"$SYS\", (uint16_t)strlen(\"$SYS\"));\n \tif(!subhier) return MOSQ_ERR_NOMEM;\n \n \tretain__init();\n@@ -240,7 +244,8 @@ static void subhier_clean(struct mosquitto__subhier **subhier)\n \n int db__close(void)\n {\n-\tsubhier_clean(&db.subs);\n+\tsubhier_clean(&db.normal_subs);\n+\tsubhier_clean(&db.shared_subs);\n \tretain__clean(&db.retains);\n \tdb__msg_store_clean();\n "
        },
        {
          "filename": "src/loop.c",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -240,7 +240,8 @@ int mosquitto_main_loop(struct mosquitto__listener_sock *listensock, int listens\n \t\t\tflag_reload = false;\n \t\t}\n \t\tif(flag_tree_print){\n-\t\t\tsub__tree_print(db.subs, 0);\n+\t\t\tsub__tree_print(db.normal_subs, 0);\n+\t\t\tsub__tree_print(db.shared_subs, 0);\n \t\t\tflag_tree_print = false;\n #ifdef WITH_XTREPORT\n \t\t\txtreport();"
        },
        {
          "filename": "src/mosquitto_broker_internal.h",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -442,7 +442,8 @@ struct mosquitto_message_v5{\n \n struct mosquitto_db{\n \tdbid_t last_db_id;\n-\tstruct mosquitto__subhier *subs;\n+\tstruct mosquitto__subhier *normal_subs;\n+\tstruct mosquitto__subhier *shared_subs;\n \tstruct mosquitto__retainhier *retains;\n \tstruct mosquitto *contexts_by_id;\n \tstruct mosquitto *contexts_by_sock;"
        },
        {
          "filename": "src/persist_write.c",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -266,7 +266,13 @@ static int persist__subs_save_all(FILE *db_fptr)\n {\n \tstruct mosquitto__subhier *subhier, *subhier_tmp;\n \n-\tHASH_ITER(hh, db.subs, subhier, subhier_tmp){\n+\tHASH_ITER(hh, db.normal_subs, subhier, subhier_tmp){\n+\t\tif(subhier->children){\n+\t\t\tpersist__subs_save(db_fptr, subhier->children, \"\", 0);\n+\t\t}\n+\t}\n+\n+\tHASH_ITER(hh, db.shared_subs, subhier, subhier_tmp){\n \t\tif(subhier->children){\n \t\t\tpersist__subs_save(db_fptr, subhier->children, \"\", 0);\n \t\t}"
        },
        {
          "filename": "src/subs.c",
          "status": "modified",
          "additions": 32,
          "deletions": 10,
          "patch": "@@ -595,16 +595,29 @@ int sub__add(struct mosquitto *context, const char *sub, uint8_t qos, uint32_t i\n \t\tmosquitto__free(topics);\n \t\treturn MOSQ_ERR_INVAL;\n \t}\n-\tHASH_FIND(hh, db.subs, topics[0], topiclen, subhier);\n-\tif(!subhier){\n-\t\tsubhier = sub__add_hier_entry(NULL, &db.subs, topics[0], (uint16_t)topiclen);\n+\n+\tif(sharename){\n+\t\tHASH_FIND(hh, db.shared_subs, topics[0], topiclen, subhier);\n \t\tif(!subhier){\n-\t\t\tmosquitto__free(local_sub);\n-\t\t\tmosquitto__free(topics);\n-\t\t\tlog__printf(NULL, MOSQ_LOG_ERR, \"Error: Out of memory.\");\n-\t\t\treturn MOSQ_ERR_NOMEM;\n+\t\t\tsubhier = sub__add_hier_entry(NULL, &db.shared_subs, topics[0], (uint16_t)topiclen);\n+\t\t\tif(!subhier){\n+\t\t\t\tmosquitto__free(local_sub);\n+\t\t\t\tmosquitto__free(topics);\n+\t\t\t\tlog__printf(NULL, MOSQ_LOG_ERR, \"Error: Out of memory.\");\n+\t\t\t\treturn MOSQ_ERR_NOMEM;\n+\t\t\t}\n+\t\t}\n+\t}else{\n+\t\tHASH_FIND(hh, db.normal_subs, topics[0], topiclen, subhier);\n+\t\tif(!subhier){\n+\t\t\tsubhier = sub__add_hier_entry(NULL, &db.normal_subs, topics[0], (uint16_t)topiclen);\n+\t\t\tif(!subhier){\n+\t\t\t\tmosquitto__free(local_sub);\n+\t\t\t\tmosquitto__free(topics);\n+\t\t\t\tlog__printf(NULL, MOSQ_LOG_ERR, \"Error: Out of memory.\");\n+\t\t\t\treturn MOSQ_ERR_NOMEM;\n+\t\t\t}\n \t\t}\n-\n \t}\n \trc = sub__add_context(context, sub, qos, identifier, options, subhier, topics, sharename);\n \n@@ -627,7 +640,11 @@ int sub__remove(struct mosquitto *context, const char *sub, uint8_t *reason)\n \trc = sub__topic_tokenise(sub, &local_sub, &topics, &sharename);\n \tif(rc) return rc;\n \n-\tHASH_FIND(hh, db.subs, topics[0], strlen(topics[0]), subhier);\n+\tif(sharename){\n+\t\tHASH_FIND(hh, db.shared_subs, topics[0], strlen(topics[0]), subhier);\n+\t}else{\n+\t\tHASH_FIND(hh, db.normal_subs, topics[0], strlen(topics[0]), subhier);\n+\t}\n \tif(subhier){\n \t\t*reason = MQTT_RC_NO_SUBSCRIPTION_EXISTED;\n \t\trc = sub__remove_recurse(context, subhier, topics, reason, sharename);\n@@ -656,7 +673,12 @@ int sub__messages_queue(const char *source_id, const char *topic, uint8_t qos, i\n \t*/\n \tdb__msg_store_ref_inc(*stored);\n \n-\tHASH_FIND(hh, db.subs, split_topics[0], strlen(split_topics[0]), subhier);\n+\tHASH_FIND(hh, db.normal_subs, split_topics[0], strlen(split_topics[0]), subhier);\n+\tif(subhier){\n+\t\trc = sub__search(subhier, split_topics, source_id, topic, qos, retain, *stored);\n+\t}\n+\n+\tHASH_FIND(hh, db.shared_subs, split_topics[0], strlen(split_topics[0]), subhier);\n \tif(subhier){\n \t\trc = sub__search(subhier, split_topics, source_id, topic, qos, retain, *stored);\n \t}"
        },
        {
          "filename": "test/broker/data/REGRESSION.json",
          "status": "modified",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -14,5 +14,36 @@\n \t\t\t\t{\"type\":\"recv\", \"payload\":\"90 03 1234 00\"}\n \t\t\t], \"comment\": \"https://github.com/eclipse/mosquitto/issues/2885\"}\n \t\t]\n+\t},\n+\t{\n+\t\t\"group\": \"REGRESSIONS\",\n+\t\t\"tests\": [\n+\t\t\t{\n+\t\t\t\t\"name\": \"mismatched-shared-normal-subscribe-unsubscribe-leak\", \"ver\":4, \"expect_disconnect\":false, \"msgs\": [\n+\t\t\t\t\t{\"type\":\"send\", \"payload\":\"82 1a 0001 0015 24 73 68 61 72 65 2f 73 68 61 72 65 6e 61 6d 65 2f 74 65 73 74 01\"},\n+\t\t\t\t\t{\"type\":\"recv\", \"payload\":\"90 03 0001 01\"},\n+\t\t\t\t\t{\"type\":\"send\", \"payload\":\"82 09 0002 0004 74 65 73 74 00\"},\n+\t\t\t\t\t{\"type\":\"recv\", \"payload\":\"90 03 0002 00\"},\n+\t\t\t\t\t{\"type\":\"send\", \"payload\":\"A2 08 0007 0004 74 65 73 74\"},\n+\t\t\t\t\t{\"type\":\"recv\", \"payload\":\"B0 02 0007\"}\n+\t\t\t\t],\n+\t\t\t\t\"comment\": \"Also part one of the next two tests\"\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\t\"name\": \"acl-check-uaf\", \"ver\":4, \"expect_disconnect\":false, \"msgs\": [\n+\t\t\t\t\t{\"type\":\"send\", \"payload\":\"30 0D 0004 74657374 7061796C6F6164\"}\n+\t\t\t\t]\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\t\"name\": \"shared-sub-uaf\", \"ver\":4, \"expect_disconnect\":false, \"msgs\": [\n+\t\t\t\t\t{\"type\":\"send\", \"payload\":\"82 1a 0001 0015 24 73 68 61 72 65 2f 73 68 61 72 65 6e 61 6d 65 2f 74 65 73 74 01\"},\n+\t\t\t\t\t{\"type\":\"recv\", \"payload\":\"90 03 0001 01\"},\n+\t\t\t\t\t{\"type\":\"send\", \"payload\":\"82 09 0002 0004 74 65 73 74 00\"},\n+\t\t\t\t\t{\"type\":\"recv\", \"payload\":\"90 03 0002 00\"},\n+\t\t\t\t\t{\"type\":\"send\", \"payload\":\"A2 08 0007 0004 74 65 73 74\"},\n+\t\t\t\t\t{\"type\":\"recv\", \"payload\":\"B0 02 0007\"}\n+\t\t\t\t]\n+\t\t\t}\n+\t\t]\n \t}\n ]"
        },
        {
          "filename": "test/broker/msg_sequence_test.py",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -218,6 +218,10 @@ def do_test(hostname, port):\n     broker.terminate()\n     broker.wait()\n     (stdo, stde) = broker.communicate()\n+    if broker.returncode != 0:\n+        rc = broker.returncode\n+        print(f\"Broker exited with code {rc}. If there are no obvious errors this may be due to an ASAN build having leaks, which must be fixed.\")\n+        print(\"The easiest way to reproduce this is to run the broker with `mosquitto -p 1888`, rerun the test, then quit the broker.\")\n if rc:\n     #print(stde.decode('utf-8'))\n     exit(rc)"
        },
        {
          "filename": "test/unit/subs_test.c",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -60,9 +60,10 @@ static void TEST_sub_add_single(void)\n \n \trc = sub__add(&context, \"a/b/c/d/e\", 0, 0, 0);\n \tCU_ASSERT_EQUAL(rc, MOSQ_ERR_SUCCESS);\n-\tCU_ASSERT_PTR_NOT_NULL(db.subs);\n-\tif(db.subs){\n-\t\tsub = db.subs;\n+\tCU_ASSERT_PTR_NOT_NULL(db.shared_subs);\n+\tCU_ASSERT_PTR_NOT_NULL(db.normal_subs);\n+\tif(db.normal_subs){\n+\t\tsub = db.normal_subs;\n \n \t\thier_quick_check(&sub, NULL, \"\");\n \t\thier_quick_check(&sub, NULL, \"\");"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "849e0f5c583503b87f789ad4ba6ad7f21de0399a",
            "date": "2024-11-02T10:26:16Z",
            "author_login": "ralight"
          },
          {
            "sha": "fb9b1153924ae0e2dfb3bcb4266ee5bb49a5c515",
            "date": "2024-10-16T19:28:05Z",
            "author_login": "ralight"
          },
          {
            "sha": "a196c2b244f248072a6b3ac8fb3f00ce0ff63dea",
            "date": "2024-10-16T17:17:07Z",
            "author_login": "ralight"
          },
          {
            "sha": "2ea2a925eb6886680c49dd1879825ff7db46a577",
            "date": "2024-10-16T16:55:10Z",
            "author_login": "ralight"
          },
          {
            "sha": "732b8eb584e70d6087e9aedbbece719bd2b24419",
            "date": "2024-10-16T15:25:26Z",
            "author_login": "ralight"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-401",
    "description": "In Eclipse Mosquitto up to version 2.0.18a, an attacker can achieve memory leaking, segmentation fault or heap-use-after-free by sending specific sequences of \"CONNECT\", \"DISCONNECT\", \"SUBSCRIBE\", \"UNSUBSCRIBE\" and \"PUBLISH\" packets.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-10-11T16:15:14.860",
    "last_modified": "2024-11-15T17:21:02.327",
    "fix_date": "2024-06-08T08:41:08Z"
  },
  "references": [
    {
      "url": "https://github.com/eclipse-mosquitto/mosquitto/commit/1914b3ee2a18102d0a94cbdbbfeae1afa03edd17",
      "source": "emo@eclipse.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/eclipse/mosquitto/releases/tag/v2.0.19",
      "source": "emo@eclipse.org",
      "tags": [
        "Patch",
        "Product"
      ]
    },
    {
      "url": "https://gitlab.eclipse.org/security/cve-assignement/-/issues/26",
      "source": "emo@eclipse.org",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://gitlab.eclipse.org/security/vulnerability-reports/-/issues/216",
      "source": "emo@eclipse.org",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://gitlab.eclipse.org/security/vulnerability-reports/-/issues/217",
      "source": "emo@eclipse.org",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://gitlab.eclipse.org/security/vulnerability-reports/-/issues/218",
      "source": "emo@eclipse.org",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://gitlab.eclipse.org/security/vulnerability-reports/-/issues/227",
      "source": "emo@eclipse.org",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://mosquitto.org/",
      "source": "emo@eclipse.org",
      "tags": [
        "Product"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:02.134470",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mosquitto",
    "owner": "eclipse",
    "created_at": "2016-03-10T20:19:09Z",
    "updated_at": "2025-01-14T13:32:02Z",
    "pushed_at": "2024-12-16T22:53:45Z",
    "size": 14545,
    "stars": 9303,
    "forks": 2431,
    "open_issues": 835,
    "watchers": 9303,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1906314,
      "Python": 837179,
      "Makefile": 75278,
      "C++": 39559,
      "Dockerfile": 34233,
      "CMake": 23838,
      "Shell": 11961,
      "NSIS": 11682,
      "HTML": 7778,
      "CSS": 3918,
      "Perl": 3238,
      "XSLT": 1018
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T16:13:15.407093"
  }
}