{
  "cve_id": "CVE-2025-21612",
  "github_data": {
    "repository": "StarCitizenTools/mediawiki-extensions-TabberNeue",
    "fix_commit": "d8c3db4e5935476e496d979fb01f775d3d3282e6",
    "related_commits": [
      "d8c3db4e5935476e496d979fb01f775d3d3282e6",
      "f229cab099c69006e25d4bad3579954e481dc566"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "d8c3db4e5935476e496d979fb01f775d3d3282e6",
      "commit_date": "2022-04-19T01:45:33Z",
      "author": {
        "login": "ciencia",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat: allow tab content to be transclusions of other pages",
        "length": 324,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 254,
        "additions": 237,
        "deletions": 17
      },
      "files": [
        {
          "filename": "extension.json",
          "status": "modified",
          "additions": 20,
          "deletions": 2,
          "patch": "@@ -1,6 +1,6 @@\n {\n \t\"name\": \"TabberNeue\",\n-\t\"version\": \"1.2.0\",\n+\t\"version\": \"1.3.0\",\n \t\"author\": [\n \t\t\"alistair3149\",\n \t\t\"Eric Fortin\",\n@@ -25,7 +25,17 @@\n \t\"ResourceModules\": {\n \t\t\"ext.tabberNeue\": {\n \t\t\t\"packageFiles\": [\n-\t\t\t\t\"ext.tabberNeue.js\"\n+\t\t\t\t\"ext.tabberNeue.js\",\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"config.json\",\n+\t\t\t\t\t\"config\": {\n+\t\t\t\t\t\t\"updateLocationOnTabChange\": \"TabberNeueUpdateLocationOnTabChange\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"messages\": [\n+\t\t\t\t\"tabberneue-loading\",\n+\t\t\t\t\"tabberneue-error\"\n \t\t\t],\n \t\t\t\"styles\": [\n \t\t\t\t\"ext.tabberNeue.less\"\n@@ -62,6 +72,14 @@\n \t\t\"localBasePath\": \"modules\",\n \t\t\"remoteExtPath\": \"TabberNeue/modules\"\n \t},\n+\t\"config_prefix\": \"wg\",\n+\t\"config\": {\n+\t\t\"TabberNeueUpdateLocationOnTabChange\": {\n+\t\t\t\"value\": true,\n+\t\t\t\"description\": \"If enabled, when a tab is selected, the URL displayed on the browser changes. Opening this URL makes that tab initially selected.\",\n+\t\t\t\"public\": true\n+\t\t}\n+\t},\n \t\"Hooks\": {\n \t\t\"ParserFirstCallInit\": [\n \t\t\t\"TabberNeue\\\\TabberNeueHooks::onParserFirstCallInit\""
        },
        {
          "filename": "i18n/en.json",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -2,8 +2,11 @@\n     \"@metadata\": {\n         \"authors\": [\n             \"alistair3149\",\n-            \"Eric Fortin\"\n+            \"Eric Fortin\",\n+            \"Ciencia Al Poder\"\n         ]\n     },\n-    \"tabberneue-desc\": \"Allows to create tabs within a page. Forked from [https://www.mediawiki.org/wiki/Extension:Tabber Extension:Tabber].\"\n+    \"tabberneue-desc\": \"Allows to create tabs within a page. Forked from [https://www.mediawiki.org/wiki/Extension:Tabber Extension:Tabber].\",\n+    \"tabberneue-loading\": \"Loading...\",\n+    \"tabberneue-error\": \"Error.\"\n }"
        },
        {
          "filename": "i18n/es.json",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -1,8 +1,10 @@\n {\n \t\"@metadata\": {\n \t\t\"authors\": [\n-\t\t\t\"Armando-Martin\"\n+\t\t\t\"Ciencia Al Poder\"\n \t\t]\n \t},\n-\t\"tabberneue-desc\": \"Permite para fichas dentro de una p\u00e1gina\"\n-}\n+\t\"tabberneue-desc\": \"Permite usar pesta\u00f1as dentro de una p\u00e1gina.\",\n+\t\"tabberneue-loading\": \"Cargando...\",\n+\t\"tabberneue-error\": \"Error.\"\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "i18n/qqq.json",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -4,5 +4,7 @@\n \t\t\t\"Shirayuki\"\n \t\t]\n \t},\n-\t\"tabberneue-desc\": \"{{desc|name=TabberNeue|url=http://www.mediawiki.org/wiki/Extension:TabberNeue}}\"\n+\t\"tabberneue-desc\": \"{{desc|name=TabberNeue|url=http://www.mediawiki.org/wiki/Extension:TabberNeue}}\",\n+\t\"tabberneue-loading\": \"Placeholder loading message for the tab content\",\n+    \"tabberneue-error\": \"Error message shown loading tab content\"\n }"
        },
        {
          "filename": "includes/TabberNeueHooks.php",
          "status": "modified",
          "additions": 111,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@\n  * TabberNeue Hooks Class\n  *\n  * @package TabberNeue\n- * @author  alistair3149, Eric Fortin, Alexia E. Smith\n+ * @author  alistair3149, Eric Fortin, Alexia E. Smith, Ciencia Al Poder\n  * @license GPL-3.0-or-later\n  * @link    https://www.mediawiki.org/wiki/Extension:TabberNeue\n  */\n@@ -13,8 +13,11 @@\n \n namespace TabberNeue;\n \n+use Hooks;\n+use MediaWiki\\MediaWikiServices;\n use Parser;\n use PPFrame;\n+use Title;\n \n class TabberNeueHooks {\n \t/**\n@@ -24,6 +27,7 @@ class TabberNeueHooks {\n \t */\n \tpublic static function onParserFirstCallInit( Parser $parser ) {\n \t\t$parser->setHook( 'tabber', [ __CLASS__, 'renderTabber' ] );\n+\t\t$parser->setHook( 'tabbertransclude', [ __CLASS__, 'renderTabberTransclude' ] );\n \t}\n \n \t/**\n@@ -77,4 +81,110 @@ private static function buildTab( $tab, Parser $parser, PPFrame $frame ) {\n \n \t\treturn $tab;\n \t}\n+\n+\t/**\n+\t * Renders the necessary HTML for a <tabbertransclude> tag.\n+\t *\n+\t * @param string $input The input URL between the beginning and ending tags.\n+\t * @param array $args Array of attribute arguments on that beginning tag.\n+\t * @param Parser $parser Mediawiki Parser Object\n+\t * @param PPFrame $frame Mediawiki PPFrame Object\n+\t *\n+\t * @return string HTML\n+\t */\n+\tpublic static function renderTabberTransclude( $input, array $args, Parser $parser, PPFrame $frame ) {\n+\t\t$parser->getOutput()->addModules( [ 'ext.tabberNeue' ] );\n+\t\t$selected = true;\n+\n+\t\t$arr = explode( \"\\n\", $input );\n+\t\t$htmlTabs = '';\n+\t\tforeach ( $arr as $tab ) {\n+\t\t\t$htmlTabs .= self::buildTabTransclude( $tab, $parser, $frame, $selected );\n+\t\t}\n+\n+\t\t$html = '<div class=\"tabber\">' .\n+\t\t\t'<section class=\"tabber__section\">' . $htmlTabs . \"</section></div>\";\n+\n+\t\treturn $html;\n+\t}\n+\n+\t/**\n+\t * Build individual tab.\n+\t *\n+\t * @param string $tab Tab information\n+\t * @param Parser $parser Mediawiki Parser Object\n+\t * @param PPFrame $frame Mediawiki PPFrame Object\n+\t * @param bool $selected The tab is the selected one\n+\t *\n+\t * @return string HTML\n+\t */\n+\tprivate static function buildTabTransclude( $tab, Parser $parser, PPFrame $frame, &$selected ) {\n+\t\t$tab = trim( $tab );\n+\t\tif ( empty( $tab ) ) {\n+\t\t\treturn '';\n+\t\t}\n+\n+\t\t$tabBody = '';\n+\t\t$dataProps = [];\n+\t\t// Use array_pad to make sure at least 2 array values are always returned\n+\t\tlist( $pageName, $tabName ) = array_pad( explode( '|', $tab, 2 ), 2, '' );\n+\t\t$title = Title::newFromText( trim( $pageName ) );\n+\t\tif ( !$title ) {\n+\t\t\tif ( empty( $tabName ) ) {\n+\t\t\t\t$tabName = $pageName;\n+\t\t\t}\n+\t\t\t$tabBody = sprintf( '<div class=\"error\">Invalid title: %s</div>', $pageName );\n+\t\t\t$pageName = '';\n+\t\t} else {\n+\t\t\t$pageName = $title->getPrefixedText();\n+\t\t\tif ( empty( $tabName ) ) {\n+\t\t\t\t$tabName = $pageName;\n+\t\t\t}\n+\t\t\t$dataProps['page-title'] = $pageName;\n+\t\t\tif ( $selected ) {\n+\t\t\t\t$tabBody = $parser->recursiveTagParseFully(\n+\t\t\t\t\tsprintf( '{{:%s}}', $pageName ),\n+\t\t\t\t\t$frame\n+\t\t\t\t);\n+\t\t\t} else {\n+\t\t\t\t// Add a link placeholder, as a fallback if JavaScript doesn't execute\n+\t\t\t\t$linkRenderer = MediaWikiServices::getInstance()->getLinkRenderer();\n+\t\t\t\t$tabBody = sprintf(\n+\t\t\t\t\t'<div class=\"tabber__ajaxplaceholder\">%s</div>',\n+\t\t\t\t\t$linkRenderer->makeLink( $title, null, [ 'rel' => 'nofollow' ] )\n+\t\t\t\t);\n+\t\t\t\t$dataProps['pending-load'] = '1';\n+\t\t\t\t// 1.37: $currentTitle = $parser->getPage();\n+\t\t\t\t$currentTitle = $parser->getTitle();\n+\t\t\t\t$query = sprintf(\n+\t\t\t\t\t'?action=parse&format=json&formatversion=2&title=%s&text={{:%s}}&redirects=1&prop=text&disablelimitreport=1&disabletoc=1&wrapoutputclass=',\n+\t\t\t\t\turlencode( $currentTitle->getPrefixedText() ),\n+\t\t\t\t\turlencode( $pageName )\n+\t\t\t\t);\n+\t\t\t\t$dataProps['load-url'] = wfExpandUrl( wfScript( 'api' ) . $query,  PROTO_CANONICAL );\n+\t\t\t\t$oldTabBody = $tabBody;\n+\t\t\t\t// Allow extensions to update the lazy loaded tab\n+\t\t\t\tHooks::run( 'TabberTranscludeRenderLazyLoadedTab', [ &$tabBody, &$dataProps, $parser, $frame ] );\n+\t\t\t\tif ( $oldTabBody != $tabBody ) {\n+\t\t\t\t\t$parser->getOutput()->recordOption( 'tabbertranscludelazyupdated' );\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// Register as a template\n+\t\t\t$revRecord = $parser->fetchCurrentRevisionRecordOfTitle( $title );\n+\t\t\t$parser->getOutput()->addTemplate(\n+\t\t\t\t$title,\n+\t\t\t\t$title->getArticleId(),\n+\t\t\t\t$revRecord ? $revRecord->getId() : null\n+\t\t\t);\n+\t\t}\n+\n+\t\t$tab = '<article class=\"tabber__panel\" title=\"' . htmlspecialchars( $tabName ) . '\"';\n+\t\t$tab .= implode( array_map( static function ( $prop, $value ) {\n+\t\t\treturn sprintf( ' data-tabber-%s=\"%s\"', $prop, htmlspecialchars( $value ) );\n+\t\t}, array_keys( $dataProps ), $dataProps ) );\n+\t\t$tab .= '>' . $tabBody . '</article>';\n+\t\t$selected = false;\n+\n+\t\treturn $tab;\n+\t}\n }"
        },
        {
          "filename": "modules/ext.tabberNeue.js",
          "status": "modified",
          "additions": 93,
          "deletions": 8,
          "patch": "@@ -7,7 +7,8 @@\n function initTabber( tabber, count ) {\n \tvar tabPanels = tabber.querySelectorAll( ':scope > .tabber__section > .tabber__panel' );\n \n-\tvar container = document.createElement( 'header' ),\n+\tvar config = require( './config.json' ),\n+\t\tcontainer = document.createElement( 'header' ),\n \t\ttabList = document.createElement( 'nav' ),\n \t\tprevButton = document.createElement( 'div' ),\n \t\tnextButton = document.createElement( 'div' );\n@@ -149,22 +150,62 @@ function initTabber( tabber, count ) {\n \t\t\tupdateButtons();\n \t\t} );\n \n-\t\t// Listen for window resize\n-\t\twindow.addEventListener( 'resize', mw.util.debounce( 250, setupButtons ) );\n+\t\t// Listen for element resize\n+\t\tif ( window.ResizeObserver ) {\n+\t\t\tvar tabListResizeObserver = new ResizeObserver( mw.util.debounce( 250, setupButtons ) );\n+\t\t\ttabListResizeObserver.observe( tabList );\n+\t\t}\n \t};\n \n+\t// NOTE: Are there better ways to scope them?\n+\tvar xhr = new XMLHttpRequest();\n+\tvar currentRequest = null, nextRequest = null;\n+\n+\t/**\n+\t * Loads page contents into tab\n+\t *\n+\t * @param {HTMLElement} tab panel\n+\t * @param {string} api URL\n+\t */\n+\tfunction loadPage( targetPanel, url ) {\n+\t\tvar requestData = {\n+\t\t\turl: url,\n+\t\t\ttargetPanel: targetPanel\n+\t\t};\n+\t\tif ( currentRequest ) {\n+\t\t\tif ( currentRequest.url != requestData.url ) {\n+\t\t\t\tnextRequest = requestData;\n+\t\t\t}\n+\t\t\t// busy\n+\t\t\treturn;\n+\t\t}\n+\t\txhr.open( 'GET', url );\n+\t\tcurrentRequest = requestData;\n+\t\txhr.send( null );\n+\t}\n+\n \t/**\n \t * Show panel based on target hash\n \t *\n \t * @param {string} targetHash\n \t */\n-\tfunction showPanel( targetHash ) {\n+\tfunction showPanel( targetHash, allowRemoteLoad ) {\n \t\tvar ACTIVETABCLASS = 'tabber__tab--active',\n \t\t\tACTIVEPANELCLASS = 'tabber__panel--active',\n \t\t\ttargetPanel = document.getElementById( targetHash ),\n \t\t\ttargetTab = document.getElementById( 'tab-' + targetHash ),\n \t\t\tsection = targetPanel.parentElement,\n-\t\t\tactivePanel = section.querySelector( ':scope > .' + ACTIVEPANELCLASS );\n+\t\t\tactivePanel = section.querySelector( ':scope > .' + ACTIVEPANELCLASS ),\n+\t\t\tparentPanel, parentSection;\n+\n+\t\tif ( allowRemoteLoad && targetPanel.dataset.tabberPendingLoad && targetPanel.dataset.tabberLoadUrl ) {\n+\t\t\tvar loading = document.createElement( 'div' );\n+\t\t\tloading.setAttribute( 'class', 'tabber__loading' );\n+\t\t\tloading.appendChild( document.createTextNode( mw.message( 'tabberneue-loading' ).text() ) );\n+\t\t\ttargetPanel.textContent = '';\n+\t\t\ttargetPanel.appendChild( loading );\n+\t\t\tloadPage( targetPanel, targetPanel.dataset.tabberLoadUrl );\n+\t\t}\n \n \t\t/* eslint-disable mediawiki/class-doc */\n \t\tif ( activePanel ) {\n@@ -212,6 +253,48 @@ function initTabber( tabber, count ) {\n \t\t/* eslint-enable mediawiki/class-doc */\n \t}\n \n+\t/**\n+\t * Event handler for XMLHttpRequest where ends loading\n+\t */\n+\tfunction onLoadEndPage() {\n+\t\tvar targetPanel = currentRequest.targetPanel;\n+\t\tif ( xhr.status != 200 ) {\n+\t\t\tvar err = document.createElement( 'div' );\n+\t\t\terr.setAttribute( 'class', 'tabber__error' );\n+\t\t\terr.appendChild( document.createTextNode( mw.message( 'tabberneue-error' ).text() ) );\n+\t\t\ttargetPanel.textContent = '';\n+\t\t\ttargetPanel.appendChild( err );\n+\t\t} else {\n+\t\t\tvar result = JSON.parse( xhr.responseText );\n+\t\t\ttargetPanel.innerHTML = result.parse.text;\n+\t\t\t// wikipage.content hook requires a jQuery object\n+\t\t\tmw.hook( 'wikipage.content' ).fire( $( targetPanel ) );\n+\t\t\tdelete targetPanel.dataset.tabberPendingLoad;\n+\t\t\tdelete targetPanel.dataset.tabberLoadUrl;\n+\t\t}\n+\n+\t\tvar ACTIVEPANELCLASS = 'tabber__panel--active',\n+\t\t\ttargetHash = targetPanel.getAttribute( 'id' ),\n+\t\t\tsection = targetPanel.parentElement,\n+\t\t\tactivePanel = section.querySelector( ':scope > .' + ACTIVEPANELCLASS );\n+\n+\t\tif ( nextRequest ) {\n+\t\t\tcurrentRequest = nextRequest;\n+\t\t\tnextRequest = null;\n+\t\t\txhr.open( 'GET', currentRequest.url );\n+\t\t\txhr.send( null );\n+\t\t} else {\n+\t\t\tcurrentRequest = null;\n+\t\t}\n+\t\tif ( activePanel ) {\n+\t\t\t// Refresh height\n+\t\t\tshowPanel( targetHash, false );\n+\t\t}\n+\t}\n+\n+\txhr.timeout = 20000;\n+\txhr.addEventListener( 'loadend', onLoadEndPage );\n+\n \t/**\n \t * Retrieve target hash and trigger show panel\n \t * If no targetHash is invalid, use the first panel\n@@ -244,9 +327,11 @@ function initTabber( tabber, count ) {\n \t\ttab.addEventListener( 'click', function( event ) {\n \t\t\tvar targetHash = tab.getAttribute( 'href' ).substring( 1 );\n \t\t\tevent.preventDefault();\n-\t\t\t// Add hash to the end of the URL\n-\t\t\thistory.replaceState( null, null, '#' + targetHash );\n-\t\t\tshowPanel( targetHash );\n+\t\t\tif ( !config || config.updateLocationOnTabChange ) {\n+\t\t\t\t// Add hash to the end of the URL\n+\t\t\t\thistory.replaceState( null, null, '#' + targetHash );\n+\t\t\t}\n+\t\t\tshowPanel( targetHash, true );\n \t\t} );\n \t} );\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 4,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f1ecc1aad4e4525b0e5327eaeb32da092cfdfa40",
            "date": "2025-01-25T15:27:22Z",
            "author_login": "alistair3149"
          },
          {
            "sha": "3dabdbcbb842bf46021b66f0656b5d07969992a7",
            "date": "2025-01-25T15:26:32Z",
            "author_login": "nobbyfix"
          },
          {
            "sha": "d5e19e69bb1b5d4f343fcb764f91fb47dc7ea680",
            "date": "2025-01-25T06:07:50Z",
            "author_login": "nobbyfix"
          },
          {
            "sha": "b8c1e75d736aa00e89e415e5ce2cf853dbed59ae",
            "date": "2025-01-20T18:17:34Z",
            "author_login": "nobbyfix"
          },
          {
            "sha": "cf39db4ce76d78682196cd69086da8b26bcff20c",
            "date": "2025-01-20T18:17:07Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L",
    "cwe_id": "CWE-79",
    "description": "TabberNeue is a MediaWiki extension that allows the wiki to create tabs. Prior to 2.7.2, TabberTransclude.php doesn't escape the user-supplied page name when outputting, so an XSS payload as the page name can be used here. This vulnerability is fixed in 2.7.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2025-01-06T16:15:31.633",
    "last_modified": "2025-01-06T17:15:46.840",
    "fix_date": "2022-04-19T01:45:33Z"
  },
  "references": [
    {
      "url": "https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/commit/d8c3db4e5935476e496d979fb01f775d3d3282e6",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/commit/f229cab099c69006e25d4bad3579954e481dc566",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/security/advisories/GHSA-4x6x-8rm8-c37j",
      "source": "security-advisories@github.com",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.963414",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "mediawiki-extensions-TabberNeue",
    "owner": "StarCitizenTools",
    "created_at": "2021-06-21T17:47:08Z",
    "updated_at": "2025-01-25T15:27:26Z",
    "pushed_at": "2025-01-25T15:27:33Z",
    "size": 675,
    "stars": 20,
    "forks": 17,
    "open_issues": 13,
    "watchers": 20,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 37843,
      "PHP": 15245,
      "Less": 6690,
      "Mustache": 834,
      "Shell": 177
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-26T08:17:36.985448"
  }
}